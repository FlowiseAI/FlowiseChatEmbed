
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
function cloneProps(props) {
  const propKeys = Object.keys(props);
  return propKeys.reduce((memo, k) => {
    const prop = props[k];
    memo[k] = Object.assign({}, prop);
    if (isObject(prop.value) && !isFunction(prop.value) && !Array.isArray(prop.value)) memo[k].value = Object.assign({}, prop.value);
    if (Array.isArray(prop.value)) memo[k].value = prop.value.slice(0);
    return memo;
  }, {});
}

function normalizePropDefs(props) {
  if (!props) return {};
  const propKeys = Object.keys(props);
  return propKeys.reduce((memo, k) => {
    const v = props[k];
    memo[k] = !(isObject(v) && "value" in v) ? {
      value: v
    } : v;
    memo[k].attribute || (memo[k].attribute = toAttribute(k));
    memo[k].parse = "parse" in memo[k] ? memo[k].parse : typeof memo[k].value !== "string";
    return memo;
  }, {});
}
function propValues(props) {
  const propKeys = Object.keys(props);
  return propKeys.reduce((memo, k) => {
    memo[k] = props[k].value;
    return memo;
  }, {});
}
function initializeProps(element, propDefinition) {
  const props = cloneProps(propDefinition),
        propKeys = Object.keys(propDefinition);
  propKeys.forEach(key => {
    const prop = props[key],
          attr = element.getAttribute(prop.attribute),
          value = element[key];
    if (attr) prop.value = prop.parse ? parseAttributeValue(attr) : attr;
    if (value != null) prop.value = Array.isArray(value) ? value.slice(0) : value;
    prop.reflect && reflect(element, prop.attribute, prop.value);
    Object.defineProperty(element, key, {
      get() {
        return prop.value;
      },

      set(val) {
        const oldValue = prop.value;
        prop.value = val;
        prop.reflect && reflect(this, prop.attribute, prop.value);

        for (let i = 0, l = this.__propertyChangedCallbacks.length; i < l; i++) {
          this.__propertyChangedCallbacks[i](key, val, oldValue);
        }
      },

      enumerable: true,
      configurable: true
    });
  });
  return props;
}
function parseAttributeValue(value) {
  if (!value) return;

  try {
    return JSON.parse(value);
  } catch (err) {
    return value;
  }
}
function reflect(node, attribute, value) {
  if (value == null || value === false) return node.removeAttribute(attribute);
  let reflect = JSON.stringify(value);
  node.__updating[attribute] = true;
  if (reflect === "true") reflect = "";
  node.setAttribute(attribute, reflect);
  Promise.resolve().then(() => delete node.__updating[attribute]);
}
function toAttribute(propName) {
  return propName.replace(/\.?([A-Z]+)/g, (x, y) => "-" + y.toLowerCase()).replace("_", "-").replace(/^-/, "");
}
function isObject(obj) {
  return obj != null && (typeof obj === "object" || typeof obj === "function");
}
function isFunction(val) {
  return Object.prototype.toString.call(val) === "[object Function]";
}
function isConstructor(f) {
  return typeof f === "function" && f.toString().indexOf("class") === 0;
}

let currentElement;
function createElementType(BaseElement, propDefinition) {
  const propKeys = Object.keys(propDefinition);
  return class CustomElement extends BaseElement {
    static get observedAttributes() {
      return propKeys.map(k => propDefinition[k].attribute);
    }

    constructor() {
      super();
      this.__initialized = false;
      this.__released = false;
      this.__releaseCallbacks = [];
      this.__propertyChangedCallbacks = [];
      this.__updating = {};
      this.props = {};
    }

    connectedCallback() {
      if (this.__initialized) return;
      this.__releaseCallbacks = [];
      this.__propertyChangedCallbacks = [];
      this.__updating = {};
      this.props = initializeProps(this, propDefinition);
      const props = propValues(this.props),
            ComponentType = this.Component,
            outerElement = currentElement;

      try {
        currentElement = this;
        this.__initialized = true;
        if (isConstructor(ComponentType)) new ComponentType(props, {
          element: this
        });else ComponentType(props, {
          element: this
        });
      } finally {
        currentElement = outerElement;
      }
    }

    async disconnectedCallback() {
      // prevent premature releasing when element is only temporarely removed from DOM
      await Promise.resolve();
      if (this.isConnected) return;
      this.__propertyChangedCallbacks.length = 0;
      let callback = null;

      while (callback = this.__releaseCallbacks.pop()) callback(this);

      delete this.__initialized;
      this.__released = true;
    }

    attributeChangedCallback(name, oldVal, newVal) {
      if (!this.__initialized) return;
      if (this.__updating[name]) return;
      name = this.lookupProp(name);

      if (name in propDefinition) {
        if (newVal == null && !this[name]) return;
        this[name] = propDefinition[name].parse ? parseAttributeValue(newVal) : newVal;
      }
    }

    lookupProp(attrName) {
      if (!propDefinition) return;
      return propKeys.find(k => attrName === k || attrName === propDefinition[k].attribute);
    }

    get renderRoot() {
      return this.shadowRoot || this.attachShadow({
        mode: "open"
      });
    }

    addReleaseCallback(fn) {
      this.__releaseCallbacks.push(fn);
    }

    addPropertyChangedCallback(fn) {
      this.__propertyChangedCallbacks.push(fn);
    }

  };
}

function register(tag, props = {}, options = {}) {
  const {
    BaseElement = HTMLElement,
    extension
  } = options;
  return ComponentType => {
    if (!tag) throw new Error("tag is required to register a Component");
    let ElementType = customElements.get(tag);

    if (ElementType) {
      // Consider disabling this in a production mode
      ElementType.prototype.Component = ComponentType;
      return ElementType;
    }

    ElementType = createElementType(BaseElement, normalizePropDefs(props));
    ElementType.prototype.Component = ComponentType;
    ElementType.prototype.registeredTag = tag;
    customElements.define(tag, ElementType, extension);
    return ElementType;
  };
}

const equalFn = (a, b) => a === b;
const $PROXY = Symbol("solid-proxy");
const $TRACK = Symbol("solid-track");
const $DEVCOMP = Symbol("solid-dev-component");
const signalOptions = {
  equals: equalFn
};
let runEffects = runQueue;
const STALE = 1;
const PENDING = 2;
const UNOWNED = {
  owned: null,
  cleanups: null,
  context: null,
  owner: null
};
var Owner = null;
let Transition = null;
let Listener = null;
let Updates = null;
let Effects = null;
let ExecCount = 0;
function createRoot(fn, detachedOwner) {
  const listener = Listener,
    owner = Owner,
    unowned = fn.length === 0,
    root = unowned ? UNOWNED : {
      owned: null,
      cleanups: null,
      context: null,
      owner: detachedOwner === undefined ? owner : detachedOwner
    },
    updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));
  Owner = root;
  Listener = null;
  try {
    return runUpdates(updateFn, true);
  } finally {
    Listener = listener;
    Owner = owner;
  }
}
function createSignal(value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  const s = {
    value,
    observers: null,
    observerSlots: null,
    comparator: options.equals || undefined
  };
  const setter = value => {
    if (typeof value === "function") {
      value = value(s.value);
    }
    return writeSignal(s, value);
  };
  return [readSignal.bind(s), setter];
}
function createRenderEffect(fn, value, options) {
  const c = createComputation(fn, value, false, STALE);
  updateComputation(c);
}
function createEffect(fn, value, options) {
  runEffects = runUserEffects;
  const c = createComputation(fn, value, false, STALE);
  c.user = true;
  Effects ? Effects.push(c) : updateComputation(c);
}
function createMemo(fn, value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  const c = createComputation(fn, value, true, 0);
  c.observers = null;
  c.observerSlots = null;
  c.comparator = options.equals || undefined;
  updateComputation(c);
  return readSignal.bind(c);
}
function batch(fn) {
  return runUpdates(fn, false);
}
function untrack(fn) {
  if (Listener === null) return fn();
  const listener = Listener;
  Listener = null;
  try {
    return fn();
  } finally {
    Listener = listener;
  }
}
function on(deps, fn, options) {
  const isArray = Array.isArray(deps);
  let prevInput;
  let defer = options && options.defer;
  return prevValue => {
    let input;
    if (isArray) {
      input = Array(deps.length);
      for (let i = 0; i < deps.length; i++) input[i] = deps[i]();
    } else input = deps();
    if (defer) {
      defer = false;
      return undefined;
    }
    const result = untrack(() => fn(input, prevInput, prevValue));
    prevInput = input;
    return result;
  };
}
function onMount(fn) {
  createEffect(() => untrack(fn));
}
function onCleanup(fn) {
  if (Owner === null) ;else if (Owner.cleanups === null) Owner.cleanups = [fn];else Owner.cleanups.push(fn);
  return fn;
}
function getListener() {
  return Listener;
}
function createContext(defaultValue, options) {
  const id = Symbol("context");
  return {
    id,
    Provider: createProvider(id),
    defaultValue
  };
}
function useContext(context) {
  let ctx;
  return (ctx = lookup(Owner, context.id)) !== undefined ? ctx : context.defaultValue;
}
function children(fn) {
  const children = createMemo(fn);
  const memo = createMemo(() => resolveChildren(children()));
  memo.toArray = () => {
    const c = memo();
    return Array.isArray(c) ? c : c != null ? [c] : [];
  };
  return memo;
}
function readSignal() {
  if (this.sources && (this.state)) {
    if ((this.state) === STALE) updateComputation(this);else {
      const updates = Updates;
      Updates = null;
      runUpdates(() => lookUpstream(this), false);
      Updates = updates;
    }
  }
  if (Listener) {
    const sSlot = this.observers ? this.observers.length : 0;
    if (!Listener.sources) {
      Listener.sources = [this];
      Listener.sourceSlots = [sSlot];
    } else {
      Listener.sources.push(this);
      Listener.sourceSlots.push(sSlot);
    }
    if (!this.observers) {
      this.observers = [Listener];
      this.observerSlots = [Listener.sources.length - 1];
    } else {
      this.observers.push(Listener);
      this.observerSlots.push(Listener.sources.length - 1);
    }
  }
  return this.value;
}
function writeSignal(node, value, isComp) {
  let current = node.value;
  if (!node.comparator || !node.comparator(current, value)) {
    node.value = value;
    if (node.observers && node.observers.length) {
      runUpdates(() => {
        for (let i = 0; i < node.observers.length; i += 1) {
          const o = node.observers[i];
          const TransitionRunning = Transition && Transition.running;
          if (TransitionRunning && Transition.disposed.has(o)) ;
          if (TransitionRunning ? !o.tState : !o.state) {
            if (o.pure) Updates.push(o);else Effects.push(o);
            if (o.observers) markDownstream(o);
          }
          if (!TransitionRunning) o.state = STALE;
        }
        if (Updates.length > 10e5) {
          Updates = [];
          if (false) ;
          throw new Error();
        }
      }, false);
    }
  }
  return value;
}
function updateComputation(node) {
  if (!node.fn) return;
  cleanNode(node);
  const owner = Owner,
    listener = Listener,
    time = ExecCount;
  Listener = Owner = node;
  runComputation(node, node.value, time);
  Listener = listener;
  Owner = owner;
}
function runComputation(node, value, time) {
  let nextValue;
  try {
    nextValue = node.fn(value);
  } catch (err) {
    if (node.pure) {
      {
        node.state = STALE;
        node.owned && node.owned.forEach(cleanNode);
        node.owned = null;
      }
    }
    node.updatedAt = time + 1;
    return handleError(err);
  }
  if (!node.updatedAt || node.updatedAt <= time) {
    if (node.updatedAt != null && "observers" in node) {
      writeSignal(node, nextValue);
    } else node.value = nextValue;
    node.updatedAt = time;
  }
}
function createComputation(fn, init, pure, state = STALE, options) {
  const c = {
    fn,
    state: state,
    updatedAt: null,
    owned: null,
    sources: null,
    sourceSlots: null,
    cleanups: null,
    value: init,
    owner: Owner,
    context: null,
    pure
  };
  if (Owner === null) ;else if (Owner !== UNOWNED) {
    {
      if (!Owner.owned) Owner.owned = [c];else Owner.owned.push(c);
    }
  }
  return c;
}
function runTop(node) {
  if ((node.state) === 0) return;
  if ((node.state) === PENDING) return lookUpstream(node);
  if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);
  const ancestors = [node];
  while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {
    if (node.state) ancestors.push(node);
  }
  for (let i = ancestors.length - 1; i >= 0; i--) {
    node = ancestors[i];
    if ((node.state) === STALE) {
      updateComputation(node);
    } else if ((node.state) === PENDING) {
      const updates = Updates;
      Updates = null;
      runUpdates(() => lookUpstream(node, ancestors[0]), false);
      Updates = updates;
    }
  }
}
function runUpdates(fn, init) {
  if (Updates) return fn();
  let wait = false;
  if (!init) Updates = [];
  if (Effects) wait = true;else Effects = [];
  ExecCount++;
  try {
    const res = fn();
    completeUpdates(wait);
    return res;
  } catch (err) {
    if (!wait) Effects = null;
    Updates = null;
    handleError(err);
  }
}
function completeUpdates(wait) {
  if (Updates) {
    runQueue(Updates);
    Updates = null;
  }
  if (wait) return;
  const e = Effects;
  Effects = null;
  if (e.length) runUpdates(() => runEffects(e), false);
}
function runQueue(queue) {
  for (let i = 0; i < queue.length; i++) runTop(queue[i]);
}
function runUserEffects(queue) {
  let i,
    userLength = 0;
  for (i = 0; i < queue.length; i++) {
    const e = queue[i];
    if (!e.user) runTop(e);else queue[userLength++] = e;
  }
  for (i = 0; i < userLength; i++) runTop(queue[i]);
}
function lookUpstream(node, ignore) {
  node.state = 0;
  for (let i = 0; i < node.sources.length; i += 1) {
    const source = node.sources[i];
    if (source.sources) {
      const state = source.state;
      if (state === STALE) {
        if (source !== ignore && (!source.updatedAt || source.updatedAt < ExecCount)) runTop(source);
      } else if (state === PENDING) lookUpstream(source, ignore);
    }
  }
}
function markDownstream(node) {
  for (let i = 0; i < node.observers.length; i += 1) {
    const o = node.observers[i];
    if (!o.state) {
      o.state = PENDING;
      if (o.pure) Updates.push(o);else Effects.push(o);
      o.observers && markDownstream(o);
    }
  }
}
function cleanNode(node) {
  let i;
  if (node.sources) {
    while (node.sources.length) {
      const source = node.sources.pop(),
        index = node.sourceSlots.pop(),
        obs = source.observers;
      if (obs && obs.length) {
        const n = obs.pop(),
          s = source.observerSlots.pop();
        if (index < obs.length) {
          n.sourceSlots[s] = index;
          obs[index] = n;
          source.observerSlots[index] = s;
        }
      }
    }
  }
  if (node.owned) {
    for (i = node.owned.length - 1; i >= 0; i--) cleanNode(node.owned[i]);
    node.owned = null;
  }
  if (node.cleanups) {
    for (i = node.cleanups.length - 1; i >= 0; i--) node.cleanups[i]();
    node.cleanups = null;
  }
  node.state = 0;
  node.context = null;
}
function handleError(err) {
  throw err;
}
function lookup(owner, key) {
  return owner ? owner.context && owner.context[key] !== undefined ? owner.context[key] : lookup(owner.owner, key) : undefined;
}
function resolveChildren(children) {
  if (typeof children === "function" && !children.length) return resolveChildren(children());
  if (Array.isArray(children)) {
    const results = [];
    for (let i = 0; i < children.length; i++) {
      const result = resolveChildren(children[i]);
      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
    }
    return results;
  }
  return children;
}
function createProvider(id, options) {
  return function provider(props) {
    let res;
    createRenderEffect(() => res = untrack(() => {
      Owner.context = {
        [id]: props.value
      };
      return children(() => props.children);
    }), undefined);
    return res;
  };
}

const FALLBACK = Symbol("fallback");
function dispose(d) {
  for (let i = 0; i < d.length; i++) d[i]();
}
function mapArray(list, mapFn, options = {}) {
  let items = [],
    mapped = [],
    disposers = [],
    len = 0,
    indexes = mapFn.length > 1 ? [] : null;
  onCleanup(() => dispose(disposers));
  return () => {
    let newItems = list() || [],
      i,
      j;
    newItems[$TRACK];
    return untrack(() => {
      let newLen = newItems.length,
        newIndices,
        newIndicesNext,
        temp,
        tempdisposers,
        tempIndexes,
        start,
        end,
        newEnd,
        item;
      if (newLen === 0) {
        if (len !== 0) {
          dispose(disposers);
          disposers = [];
          items = [];
          mapped = [];
          len = 0;
          indexes && (indexes = []);
        }
        if (options.fallback) {
          items = [FALLBACK];
          mapped[0] = createRoot(disposer => {
            disposers[0] = disposer;
            return options.fallback();
          });
          len = 1;
        }
      }
      else if (len === 0) {
        mapped = new Array(newLen);
        for (j = 0; j < newLen; j++) {
          items[j] = newItems[j];
          mapped[j] = createRoot(mapper);
        }
        len = newLen;
      } else {
        temp = new Array(newLen);
        tempdisposers = new Array(newLen);
        indexes && (tempIndexes = new Array(newLen));
        for (start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);
        for (end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {
          temp[newEnd] = mapped[end];
          tempdisposers[newEnd] = disposers[end];
          indexes && (tempIndexes[newEnd] = indexes[end]);
        }
        newIndices = new Map();
        newIndicesNext = new Array(newEnd + 1);
        for (j = newEnd; j >= start; j--) {
          item = newItems[j];
          i = newIndices.get(item);
          newIndicesNext[j] = i === undefined ? -1 : i;
          newIndices.set(item, j);
        }
        for (i = start; i <= end; i++) {
          item = items[i];
          j = newIndices.get(item);
          if (j !== undefined && j !== -1) {
            temp[j] = mapped[i];
            tempdisposers[j] = disposers[i];
            indexes && (tempIndexes[j] = indexes[i]);
            j = newIndicesNext[j];
            newIndices.set(item, j);
          } else disposers[i]();
        }
        for (j = start; j < newLen; j++) {
          if (j in temp) {
            mapped[j] = temp[j];
            disposers[j] = tempdisposers[j];
            if (indexes) {
              indexes[j] = tempIndexes[j];
              indexes[j](j);
            }
          } else mapped[j] = createRoot(mapper);
        }
        mapped = mapped.slice(0, len = newLen);
        items = newItems.slice(0);
      }
      return mapped;
    });
    function mapper(disposer) {
      disposers[j] = disposer;
      if (indexes) {
        const [s, set] = createSignal(j);
        indexes[j] = set;
        return mapFn(newItems[j], s);
      }
      return mapFn(newItems[j]);
    }
  };
}
function createComponent(Comp, props) {
  return untrack(() => Comp(props || {}));
}
function trueFn() {
  return true;
}
const propTraps = {
  get(_, property, receiver) {
    if (property === $PROXY) return receiver;
    return _.get(property);
  },
  has(_, property) {
    if (property === $PROXY) return true;
    return _.has(property);
  },
  set: trueFn,
  deleteProperty: trueFn,
  getOwnPropertyDescriptor(_, property) {
    return {
      configurable: true,
      enumerable: true,
      get() {
        return _.get(property);
      },
      set: trueFn,
      deleteProperty: trueFn
    };
  },
  ownKeys(_) {
    return _.keys();
  }
};
function resolveSource(s) {
  return !(s = typeof s === "function" ? s() : s) ? {} : s;
}
function mergeProps(...sources) {
  let proxy = false;
  for (let i = 0; i < sources.length; i++) {
    const s = sources[i];
    proxy = proxy || !!s && $PROXY in s;
    sources[i] = typeof s === "function" ? (proxy = true, createMemo(s)) : s;
  }
  if (proxy) {
    return new Proxy({
      get(property) {
        for (let i = sources.length - 1; i >= 0; i--) {
          const v = resolveSource(sources[i])[property];
          if (v !== undefined) return v;
        }
      },
      has(property) {
        for (let i = sources.length - 1; i >= 0; i--) {
          if (property in resolveSource(sources[i])) return true;
        }
        return false;
      },
      keys() {
        const keys = [];
        for (let i = 0; i < sources.length; i++) keys.push(...Object.keys(resolveSource(sources[i])));
        return [...new Set(keys)];
      }
    }, propTraps);
  }
  const target = {};
  for (let i = sources.length - 1; i >= 0; i--) {
    if (sources[i]) {
      const descriptors = Object.getOwnPropertyDescriptors(sources[i]);
      for (const key in descriptors) {
        if (key in target) continue;
        Object.defineProperty(target, key, {
          enumerable: true,
          get() {
            for (let i = sources.length - 1; i >= 0; i--) {
              const v = (sources[i] || {})[key];
              if (v !== undefined) return v;
            }
          }
        });
      }
    }
  }
  return target;
}
function splitProps(props, ...keys) {
  const blocked = new Set(keys.flat());
  if ($PROXY in props) {
    const res = keys.map(k => {
      return new Proxy({
        get(property) {
          return k.includes(property) ? props[property] : undefined;
        },
        has(property) {
          return k.includes(property) && property in props;
        },
        keys() {
          return k.filter(property => property in props);
        }
      }, propTraps);
    });
    res.push(new Proxy({
      get(property) {
        return blocked.has(property) ? undefined : props[property];
      },
      has(property) {
        return blocked.has(property) ? false : property in props;
      },
      keys() {
        return Object.keys(props).filter(k => !blocked.has(k));
      }
    }, propTraps));
    return res;
  }
  const descriptors = Object.getOwnPropertyDescriptors(props);
  keys.push(Object.keys(descriptors).filter(k => !blocked.has(k)));
  return keys.map(k => {
    const clone = {};
    for (let i = 0; i < k.length; i++) {
      const key = k[i];
      if (!(key in props)) continue;
      Object.defineProperty(clone, key, descriptors[key] ? descriptors[key] : {
        get() {
          return props[key];
        },
        set() {
          return true;
        },
        enumerable: true
      });
    }
    return clone;
  });
}

const narrowedError = name => `Stale read from <${name}>.`;
function For(props) {
  const fallback = "fallback" in props && {
    fallback: () => props.fallback
  };
  return createMemo(mapArray(() => props.each, props.children, fallback || undefined));
}
function Show(props) {
  const keyed = props.keyed;
  const condition = createMemo(() => props.when, undefined, {
    equals: (a, b) => keyed ? a === b : !a === !b
  });
  return createMemo(() => {
    const c = condition();
    if (c) {
      const child = props.children;
      const fn = typeof child === "function" && child.length > 0;
      return fn ? untrack(() => child(keyed ? c : () => {
        if (!untrack(condition)) throw narrowedError("Show");
        return props.when;
      })) : child;
    }
    return props.fallback;
  }, undefined, undefined);
}

const booleans = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "controls", "default", "disabled", "formnovalidate", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "seamless", "selected"];
const Properties = /*#__PURE__*/new Set(["className", "value", "readOnly", "formNoValidate", "isMap", "noModule", "playsInline", ...booleans]);
const ChildProperties = /*#__PURE__*/new Set(["innerHTML", "textContent", "innerText", "children"]);
const Aliases = /*#__PURE__*/Object.assign(Object.create(null), {
  className: "class",
  htmlFor: "for"
});
const PropAliases = /*#__PURE__*/Object.assign(Object.create(null), {
  class: "className",
  formnovalidate: {
    $: "formNoValidate",
    BUTTON: 1,
    INPUT: 1
  },
  ismap: {
    $: "isMap",
    IMG: 1
  },
  nomodule: {
    $: "noModule",
    SCRIPT: 1
  },
  playsinline: {
    $: "playsInline",
    VIDEO: 1
  },
  readonly: {
    $: "readOnly",
    INPUT: 1,
    TEXTAREA: 1
  }
});
function getPropAlias(prop, tagName) {
  const a = PropAliases[prop];
  return typeof a === "object" ? a[tagName] ? a["$"] : undefined : a;
}
const DelegatedEvents = /*#__PURE__*/new Set(["beforeinput", "click", "dblclick", "contextmenu", "focusin", "focusout", "input", "keydown", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "pointerdown", "pointermove", "pointerout", "pointerover", "pointerup", "touchend", "touchmove", "touchstart"]);
const SVGElements = /*#__PURE__*/new Set([
"altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignObject", "g", "glyph", "glyphRef", "hkern", "image", "line", "linearGradient", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect",
"set", "stop",
"svg", "switch", "symbol", "text", "textPath",
"tref", "tspan", "use", "view", "vkern"]);
const SVGNamespace = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
};

function reconcileArrays(parentNode, a, b) {
  let bLength = b.length,
    aEnd = a.length,
    bEnd = bLength,
    aStart = 0,
    bStart = 0,
    after = a[aEnd - 1].nextSibling,
    map = null;
  while (aStart < aEnd || bStart < bEnd) {
    if (a[aStart] === b[bStart]) {
      aStart++;
      bStart++;
      continue;
    }
    while (a[aEnd - 1] === b[bEnd - 1]) {
      aEnd--;
      bEnd--;
    }
    if (aEnd === aStart) {
      const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;
      while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);
    } else if (bEnd === bStart) {
      while (aStart < aEnd) {
        if (!map || !map.has(a[aStart])) a[aStart].remove();
        aStart++;
      }
    } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {
      const node = a[--aEnd].nextSibling;
      parentNode.insertBefore(b[bStart++], a[aStart++].nextSibling);
      parentNode.insertBefore(b[--bEnd], node);
      a[aEnd] = b[bEnd];
    } else {
      if (!map) {
        map = new Map();
        let i = bStart;
        while (i < bEnd) map.set(b[i], i++);
      }
      const index = map.get(a[aStart]);
      if (index != null) {
        if (bStart < index && index < bEnd) {
          let i = aStart,
            sequence = 1,
            t;
          while (++i < aEnd && i < bEnd) {
            if ((t = map.get(a[i])) == null || t !== index + sequence) break;
            sequence++;
          }
          if (sequence > index - bStart) {
            const node = a[aStart];
            while (bStart < index) parentNode.insertBefore(b[bStart++], node);
          } else parentNode.replaceChild(b[bStart++], a[aStart++]);
        } else aStart++;
      } else a[aStart++].remove();
    }
  }
}

const $$EVENTS = "_$DX_DELEGATE";
function template(html, isCE, isSVG) {
  let node;
  const create = () => {
    const t = document.createElement("template");
    t.innerHTML = html;
    return isSVG ? t.content.firstChild.firstChild : t.content.firstChild;
  };
  const fn = isCE ? () => (node || (node = create())).cloneNode(true) : () => untrack(() => document.importNode(node || (node = create()), true));
  fn.cloneNode = fn;
  return fn;
}
function delegateEvents(eventNames, document = window.document) {
  const e = document[$$EVENTS] || (document[$$EVENTS] = new Set());
  for (let i = 0, l = eventNames.length; i < l; i++) {
    const name = eventNames[i];
    if (!e.has(name)) {
      e.add(name);
      document.addEventListener(name, eventHandler);
    }
  }
}
function setAttribute(node, name, value) {
  if (value == null) node.removeAttribute(name);else node.setAttribute(name, value);
}
function setAttributeNS(node, namespace, name, value) {
  if (value == null) node.removeAttributeNS(namespace, name);else node.setAttributeNS(namespace, name, value);
}
function className(node, value) {
  if (value == null) node.removeAttribute("class");else node.className = value;
}
function addEventListener(node, name, handler, delegate) {
  if (delegate) {
    if (Array.isArray(handler)) {
      node[`$$${name}`] = handler[0];
      node[`$$${name}Data`] = handler[1];
    } else node[`$$${name}`] = handler;
  } else if (Array.isArray(handler)) {
    const handlerFn = handler[0];
    node.addEventListener(name, handler[0] = e => handlerFn.call(node, handler[1], e));
  } else node.addEventListener(name, handler);
}
function classList(node, value, prev = {}) {
  const classKeys = Object.keys(value || {}),
    prevKeys = Object.keys(prev);
  let i, len;
  for (i = 0, len = prevKeys.length; i < len; i++) {
    const key = prevKeys[i];
    if (!key || key === "undefined" || value[key]) continue;
    toggleClassKey(node, key, false);
    delete prev[key];
  }
  for (i = 0, len = classKeys.length; i < len; i++) {
    const key = classKeys[i],
      classValue = !!value[key];
    if (!key || key === "undefined" || prev[key] === classValue || !classValue) continue;
    toggleClassKey(node, key, true);
    prev[key] = classValue;
  }
  return prev;
}
function style(node, value, prev) {
  if (!value) return prev ? setAttribute(node, "style") : value;
  const nodeStyle = node.style;
  if (typeof value === "string") return nodeStyle.cssText = value;
  typeof prev === "string" && (nodeStyle.cssText = prev = undefined);
  prev || (prev = {});
  value || (value = {});
  let v, s;
  for (s in prev) {
    value[s] == null && nodeStyle.removeProperty(s);
    delete prev[s];
  }
  for (s in value) {
    v = value[s];
    if (v !== prev[s]) {
      nodeStyle.setProperty(s, v);
      prev[s] = v;
    }
  }
  return prev;
}
function spread(node, props = {}, isSVG, skipChildren) {
  const prevProps = {};
  if (!skipChildren) {
    createRenderEffect(() => prevProps.children = insertExpression(node, props.children, prevProps.children));
  }
  createRenderEffect(() => props.ref && props.ref(node));
  createRenderEffect(() => assign(node, props, isSVG, true, prevProps, true));
  return prevProps;
}
function use(fn, element, arg) {
  return untrack(() => fn(element, arg));
}
function insert(parent, accessor, marker, initial) {
  if (marker !== undefined && !initial) initial = [];
  if (typeof accessor !== "function") return insertExpression(parent, accessor, initial, marker);
  createRenderEffect(current => insertExpression(parent, accessor(), current, marker), initial);
}
function assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {
  props || (props = {});
  for (const prop in prevProps) {
    if (!(prop in props)) {
      if (prop === "children") continue;
      prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);
    }
  }
  for (const prop in props) {
    if (prop === "children") {
      if (!skipChildren) insertExpression(node, props.children);
      continue;
    }
    const value = props[prop];
    prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);
  }
}
function toPropertyName(name) {
  return name.toLowerCase().replace(/-([a-z])/g, (_, w) => w.toUpperCase());
}
function toggleClassKey(node, key, value) {
  const classNames = key.trim().split(/\s+/);
  for (let i = 0, nameLen = classNames.length; i < nameLen; i++) node.classList.toggle(classNames[i], value);
}
function assignProp(node, prop, value, prev, isSVG, skipRef) {
  let isCE, isProp, isChildProp, propAlias, forceProp;
  if (prop === "style") return style(node, value, prev);
  if (prop === "classList") return classList(node, value, prev);
  if (value === prev) return prev;
  if (prop === "ref") {
    if (!skipRef) value(node);
  } else if (prop.slice(0, 3) === "on:") {
    const e = prop.slice(3);
    prev && node.removeEventListener(e, prev);
    value && node.addEventListener(e, value);
  } else if (prop.slice(0, 10) === "oncapture:") {
    const e = prop.slice(10);
    prev && node.removeEventListener(e, prev, true);
    value && node.addEventListener(e, value, true);
  } else if (prop.slice(0, 2) === "on") {
    const name = prop.slice(2).toLowerCase();
    const delegate = DelegatedEvents.has(name);
    if (!delegate && prev) {
      const h = Array.isArray(prev) ? prev[0] : prev;
      node.removeEventListener(name, h);
    }
    if (delegate || value) {
      addEventListener(node, name, value, delegate);
      delegate && delegateEvents([name]);
    }
  } else if (prop.slice(0, 5) === "attr:") {
    setAttribute(node, prop.slice(5), value);
  } else if ((forceProp = prop.slice(0, 5) === "prop:") || (isChildProp = ChildProperties.has(prop)) || !isSVG && ((propAlias = getPropAlias(prop, node.tagName)) || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes("-"))) {
    if (forceProp) {
      prop = prop.slice(5);
      isProp = true;
    }
    if (prop === "class" || prop === "className") className(node, value);else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;else node[propAlias || prop] = value;
  } else {
    const ns = isSVG && prop.indexOf(":") > -1 && SVGNamespace[prop.split(":")[0]];
    if (ns) setAttributeNS(node, ns, prop, value);else setAttribute(node, Aliases[prop] || prop, value);
  }
  return value;
}
function eventHandler(e) {
  const key = `$$${e.type}`;
  let node = e.composedPath && e.composedPath()[0] || e.target;
  if (e.target !== node) {
    Object.defineProperty(e, "target", {
      configurable: true,
      value: node
    });
  }
  Object.defineProperty(e, "currentTarget", {
    configurable: true,
    get() {
      return node || document;
    }
  });
  while (node) {
    const handler = node[key];
    if (handler && !node.disabled) {
      const data = node[`${key}Data`];
      data !== undefined ? handler.call(node, data, e) : handler.call(node, e);
      if (e.cancelBubble) return;
    }
    node = node._$host || node.parentNode || node.host;
  }
}
function insertExpression(parent, value, current, marker, unwrapArray) {
  while (typeof current === "function") current = current();
  if (value === current) return current;
  const t = typeof value,
    multi = marker !== undefined;
  parent = multi && current[0] && current[0].parentNode || parent;
  if (t === "string" || t === "number") {
    if (t === "number") value = value.toString();
    if (multi) {
      let node = current[0];
      if (node && node.nodeType === 3) {
        node.data = value;
      } else node = document.createTextNode(value);
      current = cleanChildren(parent, current, marker, node);
    } else {
      if (current !== "" && typeof current === "string") {
        current = parent.firstChild.data = value;
      } else current = parent.textContent = value;
    }
  } else if (value == null || t === "boolean") {
    current = cleanChildren(parent, current, marker);
  } else if (t === "function") {
    createRenderEffect(() => {
      let v = value();
      while (typeof v === "function") v = v();
      current = insertExpression(parent, v, current, marker);
    });
    return () => current;
  } else if (Array.isArray(value)) {
    const array = [];
    const currentArray = current && Array.isArray(current);
    if (normalizeIncomingArray(array, value, current, unwrapArray)) {
      createRenderEffect(() => current = insertExpression(parent, array, current, marker, true));
      return () => current;
    }
    if (array.length === 0) {
      current = cleanChildren(parent, current, marker);
      if (multi) return current;
    } else if (currentArray) {
      if (current.length === 0) {
        appendNodes(parent, array, marker);
      } else reconcileArrays(parent, current, array);
    } else {
      current && cleanChildren(parent);
      appendNodes(parent, array);
    }
    current = array;
  } else if (value instanceof Node) {
    if (Array.isArray(current)) {
      if (multi) return current = cleanChildren(parent, current, marker, value);
      cleanChildren(parent, current, null, value);
    } else if (current == null || current === "" || !parent.firstChild) {
      parent.appendChild(value);
    } else parent.replaceChild(value, parent.firstChild);
    current = value;
  } else console.warn(`Unrecognized value. Skipped inserting`, value);
  return current;
}
function normalizeIncomingArray(normalized, array, current, unwrap) {
  let dynamic = false;
  for (let i = 0, len = array.length; i < len; i++) {
    let item = array[i],
      prev = current && current[i];
    if (item instanceof Node) {
      normalized.push(item);
    } else if (item == null || item === true || item === false) ; else if (Array.isArray(item)) {
      dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
    } else if ((typeof item) === "function") {
      if (unwrap) {
        while (typeof item === "function") item = item();
        dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item], Array.isArray(prev) ? prev : [prev]) || dynamic;
      } else {
        normalized.push(item);
        dynamic = true;
      }
    } else {
      const value = String(item);
      if (prev && prev.nodeType === 3) {
        prev.data = value;
        normalized.push(prev);
      } else normalized.push(document.createTextNode(value));
    }
  }
  return dynamic;
}
function appendNodes(parent, array, marker = null) {
  for (let i = 0, len = array.length; i < len; i++) parent.insertBefore(array[i], marker);
}
function cleanChildren(parent, current, marker, replacement) {
  if (marker === undefined) return parent.textContent = "";
  const node = replacement || document.createTextNode("");
  if (current.length) {
    let inserted = false;
    for (let i = current.length - 1; i >= 0; i--) {
      const el = current[i];
      if (node !== el) {
        const isParent = el.parentNode === parent;
        if (!inserted && !i) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);else isParent && el.remove();
      } else inserted = true;
    }
  } else parent.insertBefore(node, marker);
  return [node];
}
const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
function createElement(tagName, isSVG = false) {
  return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);
}
function Dynamic(props) {
  const [p, others] = splitProps(props, ["component"]);
  const cached = createMemo(() => p.component);
  return createMemo(() => {
    const component = cached();
    switch (typeof component) {
      case "function":
        Object.assign(component, {
          [$DEVCOMP]: true
        });
        return untrack(() => component(others));
      case "string":
        const isSvg = SVGElements.has(component);
        const el = createElement(component, isSvg);
        spread(el, others, isSvg);
        return el;
    }
  });
}

function createProps(raw) {
    const keys = Object.keys(raw);
    const props = {};
    for (let i = 0; i < keys.length; i++) {
        const [get, set] = createSignal(raw[keys[i]]);
        Object.defineProperty(props, keys[i], {
            get,
            set(v) {
                set(() => v);
            }
        });
    }
    return props;
}
function lookupContext(el) {
    if (el.assignedSlot && el.assignedSlot._$owner)
        return el.assignedSlot._$owner;
    let next = el.parentNode;
    while (next &&
        !next._$owner &&
        !(next.assignedSlot && next.assignedSlot._$owner))
        next = next.parentNode;
    return next && next.assignedSlot
        ? next.assignedSlot._$owner
        : el._$owner;
}
function withSolid(ComponentType) {
    return (rawProps, options) => {
        const { element } = options;
        return createRoot((dispose) => {
            const props = createProps(rawProps);
            element.addPropertyChangedCallback((key, val) => (props[key] = val));
            element.addReleaseCallback(() => {
                element.renderRoot.textContent = "";
                dispose();
            });
            const comp = ComponentType(props, options);
            return insert(element.renderRoot, comp);
        }, lookupContext(element));
    };
}
function customElement(tag, props, ComponentType) {
    if (arguments.length === 2) {
        ComponentType = props;
        props = {};
    }
    return register(tag, props)(withSolid(ComponentType));
}

const defaultBotProps = {
  chatflowid: '',
  apiHost: undefined,
  onRequest: undefined,
  chatflowConfig: undefined,
  theme: undefined,
  observersConfig: undefined,
  authentication: undefined
};

var css_248z = "/*\n! tailwindcss v3.3.1 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n.container {\n  width: 100%;\n}\n@media (min-width: 640px) {\n\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n\n  .container {\n    max-width: 1536px;\n  }\n}\n.prose {\n  color: var(--tw-prose-body);\n  max-width: 65ch;\n}\n.prose :where(p):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 1.25em;\n  margin-bottom: 1.25em;\n}\n.prose :where([class~=\"lead\"]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-lead);\n  font-size: 1.25em;\n  line-height: 1.6;\n  margin-top: 1.2em;\n  margin-bottom: 1.2em;\n}\n.prose :where(a):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-links);\n  text-decoration: underline;\n  font-weight: 500;\n}\n.prose :where(strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-bold);\n  font-weight: 600;\n}\n.prose :where(a strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(blockquote strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(thead th strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(ol):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: decimal;\n  margin-top: 1.25em;\n  margin-bottom: 1.25em;\n  padding-left: 1.625em;\n}\n.prose :where(ol[type=\"A\"]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: upper-alpha;\n}\n.prose :where(ol[type=\"a\"]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: lower-alpha;\n}\n.prose :where(ol[type=\"A\" s]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: upper-alpha;\n}\n.prose :where(ol[type=\"a\" s]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: lower-alpha;\n}\n.prose :where(ol[type=\"I\"]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: upper-roman;\n}\n.prose :where(ol[type=\"i\"]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: lower-roman;\n}\n.prose :where(ol[type=\"I\" s]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: upper-roman;\n}\n.prose :where(ol[type=\"i\" s]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: lower-roman;\n}\n.prose :where(ol[type=\"1\"]):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: decimal;\n}\n.prose :where(ul):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  list-style-type: disc;\n  margin-top: 1.25em;\n  margin-bottom: 1.25em;\n  padding-left: 1.625em;\n}\n.prose :where(ol > li):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::marker {\n  font-weight: 400;\n  color: var(--tw-prose-counters);\n}\n.prose :where(ul > li):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::marker {\n  color: var(--tw-prose-bullets);\n}\n.prose :where(dt):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-headings);\n  font-weight: 600;\n  margin-top: 1.25em;\n}\n.prose :where(hr):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  border-color: var(--tw-prose-hr);\n  border-top-width: 1px;\n  margin-top: 3em;\n  margin-bottom: 3em;\n}\n.prose :where(blockquote):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  font-weight: 500;\n  font-style: italic;\n  color: var(--tw-prose-quotes);\n  border-left-width: 0.25rem;\n  border-left-color: var(--tw-prose-quote-borders);\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  margin-top: 1.6em;\n  margin-bottom: 1.6em;\n  padding-left: 1em;\n}\n.prose :where(blockquote p:first-of-type):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::before {\n  content: open-quote;\n}\n.prose :where(blockquote p:last-of-type):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::after {\n  content: close-quote;\n}\n.prose :where(h1):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-headings);\n  font-weight: 800;\n  font-size: 2.25em;\n  margin-top: 0;\n  margin-bottom: 0.8888889em;\n  line-height: 1.1111111;\n}\n.prose :where(h1 strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  font-weight: 900;\n  color: inherit;\n}\n.prose :where(h2):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-headings);\n  font-weight: 700;\n  font-size: 1.5em;\n  margin-top: 2em;\n  margin-bottom: 1em;\n  line-height: 1.3333333;\n}\n.prose :where(h2 strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  font-weight: 800;\n  color: inherit;\n}\n.prose :where(h3):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-headings);\n  font-weight: 600;\n  font-size: 1.25em;\n  margin-top: 1.6em;\n  margin-bottom: 0.6em;\n  line-height: 1.6;\n}\n.prose :where(h3 strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  font-weight: 700;\n  color: inherit;\n}\n.prose :where(h4):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-headings);\n  font-weight: 600;\n  margin-top: 1.5em;\n  margin-bottom: 0.5em;\n  line-height: 1.5;\n}\n.prose :where(h4 strong):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  font-weight: 700;\n  color: inherit;\n}\n.prose :where(img):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 2em;\n  margin-bottom: 2em;\n}\n.prose :where(picture):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  display: block;\n  margin-top: 2em;\n  margin-bottom: 2em;\n}\n.prose :where(kbd):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  font-weight: 500;\n  font-family: inherit;\n  color: var(--tw-prose-kbd);\n  box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);\n  font-size: 0.875em;\n  border-radius: 0.3125rem;\n  padding-top: 0.1875em;\n  padding-right: 0.375em;\n  padding-bottom: 0.1875em;\n  padding-left: 0.375em;\n}\n.prose :where(code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-code);\n  font-weight: 600;\n  font-size: 0.875em;\n}\n.prose :where(code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::before {\n  content: \"`\";\n}\n.prose :where(code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::after {\n  content: \"`\";\n}\n.prose :where(a code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(h1 code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(h2 code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n  font-size: 0.875em;\n}\n.prose :where(h3 code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n  font-size: 0.9em;\n}\n.prose :where(h4 code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(blockquote code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(thead th code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: inherit;\n}\n.prose :where(pre):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-pre-code);\n  background-color: var(--tw-prose-pre-bg);\n  overflow-x: auto;\n  font-weight: 400;\n  font-size: 0.875em;\n  line-height: 1.7142857;\n  margin-top: 1.7142857em;\n  margin-bottom: 1.7142857em;\n  border-radius: 0.375rem;\n  padding-top: 0.8571429em;\n  padding-right: 1.1428571em;\n  padding-bottom: 0.8571429em;\n  padding-left: 1.1428571em;\n}\n.prose :where(pre code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  background-color: transparent;\n  border-width: 0;\n  border-radius: 0;\n  padding: 0;\n  font-weight: inherit;\n  color: inherit;\n  font-size: inherit;\n  font-family: inherit;\n  line-height: inherit;\n}\n.prose :where(pre code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::before {\n  content: none;\n}\n.prose :where(pre code):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *))::after {\n  content: none;\n}\n.prose :where(table):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  width: 100%;\n  table-layout: auto;\n  text-align: left;\n  margin-top: 2em;\n  margin-bottom: 2em;\n  font-size: 0.875em;\n  line-height: 1.7142857;\n}\n.prose :where(thead):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  border-bottom-width: 1px;\n  border-bottom-color: var(--tw-prose-th-borders);\n}\n.prose :where(thead th):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-headings);\n  font-weight: 600;\n  vertical-align: bottom;\n  padding-right: 0.5714286em;\n  padding-bottom: 0.5714286em;\n  padding-left: 0.5714286em;\n}\n.prose :where(tbody tr):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  border-bottom-width: 1px;\n  border-bottom-color: var(--tw-prose-td-borders);\n}\n.prose :where(tbody tr:last-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  border-bottom-width: 0;\n}\n.prose :where(tbody td):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  vertical-align: baseline;\n}\n.prose :where(tfoot):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  border-top-width: 1px;\n  border-top-color: var(--tw-prose-th-borders);\n}\n.prose :where(tfoot td):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  vertical-align: top;\n}\n.prose :where(figure > *):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.prose :where(figcaption):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  color: var(--tw-prose-captions);\n  font-size: 0.875em;\n  line-height: 1.4285714;\n  margin-top: 0.8571429em;\n}\n.prose {\n  --tw-prose-body: #374151;\n  --tw-prose-headings: #111827;\n  --tw-prose-lead: #4b5563;\n  --tw-prose-links: #111827;\n  --tw-prose-bold: #111827;\n  --tw-prose-counters: #6b7280;\n  --tw-prose-bullets: #d1d5db;\n  --tw-prose-hr: #e5e7eb;\n  --tw-prose-quotes: #111827;\n  --tw-prose-quote-borders: #e5e7eb;\n  --tw-prose-captions: #6b7280;\n  --tw-prose-kbd: #111827;\n  --tw-prose-kbd-shadows: 17 24 39;\n  --tw-prose-code: #111827;\n  --tw-prose-pre-code: #e5e7eb;\n  --tw-prose-pre-bg: #1f2937;\n  --tw-prose-th-borders: #d1d5db;\n  --tw-prose-td-borders: #e5e7eb;\n  --tw-prose-invert-body: #d1d5db;\n  --tw-prose-invert-headings: #fff;\n  --tw-prose-invert-lead: #9ca3af;\n  --tw-prose-invert-links: #fff;\n  --tw-prose-invert-bold: #fff;\n  --tw-prose-invert-counters: #9ca3af;\n  --tw-prose-invert-bullets: #4b5563;\n  --tw-prose-invert-hr: #374151;\n  --tw-prose-invert-quotes: #f3f4f6;\n  --tw-prose-invert-quote-borders: #374151;\n  --tw-prose-invert-captions: #9ca3af;\n  --tw-prose-invert-kbd: #fff;\n  --tw-prose-invert-kbd-shadows: 255 255 255;\n  --tw-prose-invert-code: #fff;\n  --tw-prose-invert-pre-code: #d1d5db;\n  --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);\n  --tw-prose-invert-th-borders: #4b5563;\n  --tw-prose-invert-td-borders: #374151;\n  font-size: 1rem;\n  line-height: 1.75;\n}\n.prose :where(picture > img):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.prose :where(video):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 2em;\n  margin-bottom: 2em;\n}\n.prose :where(li):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n}\n.prose :where(ol > li):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  padding-left: 0.375em;\n}\n.prose :where(ul > li):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  padding-left: 0.375em;\n}\n.prose :where(.prose > ul > li p):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0.75em;\n  margin-bottom: 0.75em;\n}\n.prose :where(.prose > ul > li > *:first-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 1.25em;\n}\n.prose :where(.prose > ul > li > *:last-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-bottom: 1.25em;\n}\n.prose :where(.prose > ol > li > *:first-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 1.25em;\n}\n.prose :where(.prose > ol > li > *:last-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-bottom: 1.25em;\n}\n.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0.75em;\n  margin-bottom: 0.75em;\n}\n.prose :where(dl):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 1.25em;\n  margin-bottom: 1.25em;\n}\n.prose :where(dd):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0.5em;\n  padding-left: 1.625em;\n}\n.prose :where(hr + *):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0;\n}\n.prose :where(h2 + *):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0;\n}\n.prose :where(h3 + *):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0;\n}\n.prose :where(h4 + *):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0;\n}\n.prose :where(thead th:first-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  padding-left: 0;\n}\n.prose :where(thead th:last-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  padding-right: 0;\n}\n.prose :where(tbody td, tfoot td):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  padding-top: 0.5714286em;\n  padding-right: 0.5714286em;\n  padding-bottom: 0.5714286em;\n  padding-left: 0.5714286em;\n}\n.prose :where(tbody td:first-child, tfoot td:first-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  padding-left: 0;\n}\n.prose :where(tbody td:last-child, tfoot td:last-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  padding-right: 0;\n}\n.prose :where(figure):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 2em;\n  margin-bottom: 2em;\n}\n.prose :where(.prose > :first-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-top: 0;\n}\n.prose :where(.prose > :last-child):not(:where([class~=\"not-prose\"],[class~=\"not-prose\"] *)) {\n  margin-bottom: 0;\n}\n.pointer-events-none {\n  pointer-events: none;\n}\n.visible {\n  visibility: visible;\n}\n.fixed {\n  position: fixed;\n}\n.absolute {\n  position: absolute;\n}\n.relative {\n  position: relative;\n}\n.inset-0 {\n  inset: 0px;\n}\n.bottom-0 {\n  bottom: 0px;\n}\n.left-0 {\n  left: 0px;\n}\n.right-0 {\n  right: 0px;\n}\n.right-\\[-8px\\] {\n  right: -8px;\n}\n.top-0 {\n  top: 0px;\n}\n.z-0 {\n  z-index: 0;\n}\n.z-10 {\n  z-index: 10;\n}\n.z-40 {\n  z-index: 40;\n}\n.z-50 {\n  z-index: 50;\n}\n.z-\\[1001\\] {\n  z-index: 1001;\n}\n.z-\\[1002\\] {\n  z-index: 1002;\n}\n.float-right {\n  float: right;\n}\n.m-0 {\n  margin: 0px;\n}\n.m-\\[6px\\] {\n  margin: 6px;\n}\n.m-auto {\n  margin: auto;\n}\n.mx-4 {\n  margin-left: 16px;\n  margin-right: 16px;\n}\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.my-2 {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.my-6 {\n  margin-top: 24px;\n  margin-bottom: 24px;\n}\n.-ml-1 {\n  margin-left: -4px;\n}\n.mb-1 {\n  margin-bottom: 4px;\n}\n.mb-2 {\n  margin-bottom: 8px;\n}\n.mb-3 {\n  margin-bottom: 12px;\n}\n.mb-4 {\n  margin-bottom: 16px;\n}\n.mb-6 {\n  margin-bottom: 24px;\n}\n.ml-1 {\n  margin-left: 4px;\n}\n.ml-1\\.5 {\n  margin-left: 6px;\n}\n.ml-10 {\n  margin-left: 40px;\n}\n.ml-2 {\n  margin-left: 8px;\n}\n.ml-auto {\n  margin-left: auto;\n}\n.mr-1 {\n  margin-right: 4px;\n}\n.mr-2 {\n  margin-right: 8px;\n}\n.mr-3 {\n  margin-right: 12px;\n}\n.mr-\\[10px\\] {\n  margin-right: 10px;\n}\n.mt-2 {\n  margin-top: 8px;\n}\n.block {\n  display: block;\n}\n.inline-block {\n  display: inline-block;\n}\n.flex {\n  display: flex;\n}\n.inline-flex {\n  display: inline-flex;\n}\n.hidden {\n  display: none;\n}\n.h-10 {\n  height: 40px;\n}\n.h-12 {\n  height: 48px;\n}\n.h-14 {\n  height: 56px;\n}\n.h-2 {\n  height: 8px;\n}\n.h-4 {\n  height: 16px;\n}\n.h-5 {\n  height: 20px;\n}\n.h-6 {\n  height: 24px;\n}\n.h-7 {\n  height: 28px;\n}\n.h-8 {\n  height: 32px;\n}\n.h-\\[50px\\] {\n  height: 50px;\n}\n.h-\\[58px\\] {\n  height: 58px;\n}\n.h-auto {\n  height: auto;\n}\n.h-full {\n  height: 100%;\n}\n.max-h-60 {\n  max-height: 240px;\n}\n.max-h-\\[128px\\] {\n  max-height: 128px;\n}\n.max-h-\\[192px\\] {\n  max-height: 192px;\n}\n.max-h-\\[704px\\] {\n  max-height: 704px;\n}\n.min-h-\\[56px\\] {\n  min-height: 56px;\n}\n.min-h-full {\n  min-height: 100%;\n}\n.w-10 {\n  width: 40px;\n}\n.w-12 {\n  width: 48px;\n}\n.w-2 {\n  width: 8px;\n}\n.w-4 {\n  width: 16px;\n}\n.w-5 {\n  width: 20px;\n}\n.w-6 {\n  width: 24px;\n}\n.w-64 {\n  width: 256px;\n}\n.w-7 {\n  width: 28px;\n}\n.w-8 {\n  width: 32px;\n}\n.w-\\[200px\\] {\n  width: 200px;\n}\n.w-full {\n  width: 100%;\n}\n.min-w-full {\n  min-width: 100%;\n}\n.max-w-3xl {\n  max-width: 768px;\n}\n.max-w-\\[128px\\] {\n  max-width: 128px;\n}\n.max-w-full {\n  max-width: 100%;\n}\n.max-w-max {\n  max-width: -moz-max-content;\n  max-width: max-content;\n}\n.max-w-md {\n  max-width: 448px;\n}\n.flex-1 {\n  flex: 1 1 0%;\n}\n.flex-auto {\n  flex: 1 1 auto;\n}\n.flex-none {\n  flex: none;\n}\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\n.flex-grow {\n  flex-grow: 1;\n}\n.flex-grow-0 {\n  flex-grow: 0;\n}\n.basis-auto {\n  flex-basis: auto;\n}\n.-rotate-180 {\n  --tw-rotate: -180deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.rotate-0 {\n  --tw-rotate: 0deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.scale-0 {\n  --tw-scale-x: 0;\n  --tw-scale-y: 0;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.scale-100 {\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.transform {\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n@keyframes fade-in {\n\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n.animate-fade-in {\n  animation: fade-in 0.3s ease-out;\n}\n@keyframes spin {\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n.resize {\n  resize: both;\n}\n.flex-row {\n  flex-direction: row;\n}\n.flex-col {\n  flex-direction: column;\n}\n.flex-wrap {\n  flex-wrap: wrap;\n}\n.items-start {\n  align-items: flex-start;\n}\n.items-end {\n  align-items: flex-end;\n}\n.items-center {\n  align-items: center;\n}\n.justify-start {\n  justify-content: flex-start;\n}\n.justify-end {\n  justify-content: flex-end;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.gap-1 {\n  gap: 4px;\n}\n.gap-2 {\n  gap: 8px;\n}\n.gap-3 {\n  gap: 12px;\n}\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(8px * var(--tw-space-x-reverse));\n  margin-left: calc(8px * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(16px * var(--tw-space-x-reverse));\n  margin-left: calc(16px * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(8px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(8px * var(--tw-space-y-reverse));\n}\n.space-y-3 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(12px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(12px * var(--tw-space-y-reverse));\n}\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(16px * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(16px * var(--tw-space-y-reverse));\n}\n.overflow-auto {\n  overflow: auto;\n}\n.overflow-hidden {\n  overflow: hidden;\n}\n.overflow-y-auto {\n  overflow-y: auto;\n}\n.overflow-x-hidden {\n  overflow-x: hidden;\n}\n.overflow-y-scroll {\n  overflow-y: scroll;\n}\n.scroll-smooth {\n  scroll-behavior: smooth;\n}\n.whitespace-pre-wrap {\n  white-space: pre-wrap;\n}\n.rounded {\n  border-radius: 4px;\n}\n.rounded-\\[10px\\] {\n  border-radius: 10px;\n}\n.rounded-\\[6px\\] {\n  border-radius: 6px;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n.rounded-lg {\n  border-radius: 8px;\n}\n.rounded-md {\n  border-radius: 6px;\n}\n.rounded-none {\n  border-radius: 0px;\n}\n.rounded-xl {\n  border-radius: 12px;\n}\n.rounded-b {\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.rounded-t {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.border {\n  border-width: 1px;\n}\n.border-0 {\n  border-width: 0px;\n}\n.border-2 {\n  border-width: 2px;\n}\n.border-4 {\n  border-width: 4px;\n}\n.border-b {\n  border-bottom-width: 1px;\n}\n.border-t {\n  border-top-width: 1px;\n}\n.border-t-4 {\n  border-top-width: 4px;\n}\n.border-solid {\n  border-style: solid;\n}\n.border-dashed {\n  border-style: dashed;\n}\n.border-\\[\\#eeeeee\\] {\n  --tw-border-opacity: 1;\n  border-color: rgb(238 238 238 / var(--tw-border-opacity));\n}\n.border-gray-200 {\n  --tw-border-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\n}\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n.border-green-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(22 163 74 / var(--tw-border-opacity));\n}\n.border-red-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(252 165 165 / var(--tw-border-opacity));\n}\n.border-red-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(220 38 38 / var(--tw-border-opacity));\n}\n.border-yellow-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(253 224 71 / var(--tw-border-opacity));\n}\n.border-t-white {\n  --tw-border-opacity: 1;\n  border-top-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n.bg-\\[rgba\\(0\\2c 0\\2c 0\\2c 0\\.3\\)\\] {\n  background-color: rgba(0,0,0,0.3);\n}\n.bg-\\[rgba\\(0\\2c 0\\2c 0\\2c 0\\.4\\)\\] {\n  background-color: rgba(0,0,0,0.4);\n}\n.bg-black {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\n.bg-black\\/10 {\n  background-color: rgb(0 0 0 / 0.1);\n}\n.bg-black\\/60 {\n  background-color: rgb(0 0 0 / 0.6);\n}\n.bg-blue-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(219 234 254 / var(--tw-bg-opacity));\n}\n.bg-emerald-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(16 185 129 / var(--tw-bg-opacity));\n}\n.bg-gray-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n.bg-red-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n}\n.bg-red-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n}\n.bg-transparent {\n  background-color: transparent;\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.bg-yellow-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 249 195 / var(--tw-bg-opacity));\n}\n.bg-opacity-50 {\n  --tw-bg-opacity: 0.5;\n}\n.bg-cover {\n  background-size: cover;\n}\n.bg-center {\n  background-position: center;\n}\n.fill-transparent {\n  fill: transparent;\n}\n.stroke-2 {\n  stroke-width: 2;\n}\n.object-cover {\n  -o-object-fit: cover;\n     object-fit: cover;\n}\n.p-0 {\n  padding: 0px;\n}\n.p-1 {\n  padding: 4px;\n}\n.p-10 {\n  padding: 40px;\n}\n.p-2 {\n  padding: 8px;\n}\n.p-2\\.5 {\n  padding: 10px;\n}\n.p-3 {\n  padding: 12px;\n}\n.p-4 {\n  padding: 16px;\n}\n.p-5 {\n  padding: 20px;\n}\n.p-6 {\n  padding: 24px;\n}\n.px-1 {\n  padding-left: 4px;\n  padding-right: 4px;\n}\n.px-12 {\n  padding-left: 48px;\n  padding-right: 48px;\n}\n.px-2 {\n  padding-left: 8px;\n  padding-right: 8px;\n}\n.px-3 {\n  padding-left: 12px;\n  padding-right: 12px;\n}\n.px-4 {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n.px-5 {\n  padding-left: 20px;\n  padding-right: 20px;\n}\n.px-6 {\n  padding-left: 24px;\n  padding-right: 24px;\n}\n.px-\\[10px\\] {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n.py-1 {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n.py-2 {\n  padding-top: 8px;\n  padding-bottom: 8px;\n}\n.py-4 {\n  padding-top: 16px;\n  padding-bottom: 16px;\n}\n.py-8 {\n  padding-top: 32px;\n  padding-bottom: 32px;\n}\n.py-\\[10px\\] {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n.pb-1 {\n  padding-bottom: 4px;\n}\n.pb-2 {\n  padding-bottom: 8px;\n}\n.pb-\\[10px\\] {\n  padding-bottom: 10px;\n}\n.pl-4 {\n  padding-left: 16px;\n}\n.pr-0 {\n  padding-right: 0px;\n}\n.pr-3 {\n  padding-right: 12px;\n}\n.pt-2 {\n  padding-top: 8px;\n}\n.pt-4 {\n  padding-top: 16px;\n}\n.pt-\\[6px\\] {\n  padding-top: 6px;\n}\n.pt-\\[70px\\] {\n  padding-top: 70px;\n}\n.text-left {\n  text-align: left;\n}\n.text-center {\n  text-align: center;\n}\n.font-mono {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n}\n.font-sans {\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n}\n.text-2xl {\n  font-size: 24px;\n  line-height: 32px;\n}\n.text-\\[13px\\] {\n  font-size: 13px;\n}\n.text-base {\n  font-size: 16px;\n  line-height: 24px;\n}\n.text-lg {\n  font-size: 18px;\n  line-height: 28px;\n}\n.text-sm {\n  font-size: 14px;\n  line-height: 20px;\n}\n.text-xl {\n  font-size: 20px;\n  line-height: 28px;\n}\n.text-xs {\n  font-size: 12px;\n  line-height: 16px;\n}\n.font-bold {\n  font-weight: 700;\n}\n.font-medium {\n  font-weight: 500;\n}\n.font-normal {\n  font-weight: 400;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.uppercase {\n  text-transform: uppercase;\n}\n.italic {\n  font-style: italic;\n}\n.leading-none {\n  line-height: 1;\n}\n.text-black {\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\n.text-blue-600 {\n  --tw-text-opacity: 1;\n  color: rgb(37 99 235 / var(--tw-text-opacity));\n}\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n.text-green-600 {\n  --tw-text-opacity: 1;\n  color: rgb(22 163 74 / var(--tw-text-opacity));\n}\n.text-inherit {\n  color: inherit;\n}\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\n.text-red-600 {\n  --tw-text-opacity: 1;\n  color: rgb(220 38 38 / var(--tw-text-opacity));\n}\n.text-red-700 {\n  --tw-text-opacity: 1;\n  color: rgb(185 28 28 / var(--tw-text-opacity));\n}\n.text-transparent {\n  color: transparent;\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.text-yellow-700 {\n  --tw-text-opacity: 1;\n  color: rgb(161 98 7 / var(--tw-text-opacity));\n}\n.opacity-0 {\n  opacity: 0;\n}\n.opacity-100 {\n  opacity: 1;\n}\n.opacity-25 {\n  opacity: 0.25;\n}\n.opacity-75 {\n  opacity: 0.75;\n}\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-xl {\n  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.blur-\\[2px\\] {\n  --tw-blur: blur(2px);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.blur-none {\n  --tw-blur: blur(0);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.drop-shadow {\n  --tw-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / 0.1)) drop-shadow(0 1px 1px rgb(0 0 0 / 0.06));\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.backdrop-blur-sm {\n  --tw-backdrop-blur: blur(4px);\n  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n          backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n}\n.transition {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-all {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-colors {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-opacity {\n  transition-property: opacity;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-transform {\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.duration-150 {\n  transition-duration: 150ms;\n}\n.duration-200 {\n  transition-duration: 200ms;\n}\n.duration-300 {\n  transition-duration: 300ms;\n}\n.ease-in-out {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n.ease-linear {\n  transition-timing-function: linear;\n}\n.ease-out {\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n\n:host {\n  --chatbot-container-bg-image: none;\n  --chatbot-container-bg-color: transparent;\n  --chatbot-container-font-family: 'Open Sans';\n\n  --chatbot-button-bg-color: #0042da;\n  --chatbot-button-color: #ffffff;\n\n  --chatbot-host-bubble-bg-color: #f7f8ff;\n  --chatbot-host-bubble-color: #303235;\n\n  --chatbot-guest-bubble-bg-color: #3b81f6;\n  --chatbot-guest-bubble-color: #ffffff;\n\n  --chatbot-input-bg-color: #ffffff;\n  --chatbot-input-color: #303235;\n  --chatbot-input-placeholder-color: #9095a0;\n\n  --chatbot-header-bg-color: #ffffff;\n  --chatbot-header-color: #303235;\n\n  --chatbot-border-radius: 6px;\n\n  /* Phone input */\n  --PhoneInputCountryFlag-borderColor: transparent;\n  --PhoneInput-color--focus: transparent;\n}\n\na {\n  color: #16bed7;\n  font-weight: 500;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\npre {\n  padding: 5px;\n  font-size: 13px;\n  margin: 5px;\n  width: auto;\n  overflow: auto;\n  white-space: pre-wrap; /* css-3 */\n  white-space: -moz-pre-wrap; /* Mozilla, since 1999 */\n  white-space: -pre-wrap; /* Opera 4-6 */\n  white-space: -o-pre-wrap; /* Opera 7 */\n  word-wrap: break-word; /* Internet Explorer 5.5+ */\n}\n.string {\n  color: green;\n}\n.number {\n  color: darkorange;\n}\n.boolean {\n  color: blue;\n}\n.null {\n  color: magenta;\n}\n.key {\n  color: rgb(0, 43, 54);\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.scrollable-container::-webkit-scrollbar {\n  display: none;\n}\n\n/* Hide scrollbar for IE, Edge and Firefox */\n.scrollable-container {\n  -ms-overflow-style: none; /* IE and Edge */\n  scrollbar-width: none; /* Firefox */\n}\n\n.text-fade-in {\n  transition: opacity 400ms ease-in 200ms;\n}\n\n.bubble-typing {\n  transition:\n    width 400ms ease-out,\n    height 400ms ease-out;\n}\n\n.bubble1,\n.bubble2,\n.bubble3 {\n  background-color: var(--chatbot-host-bubble-color);\n  opacity: 0.5;\n}\n\n.bubble1 {\n  animation: chatBubbles 1s ease-in-out infinite;\n}\n\n.bubble2 {\n  animation: chatBubbles 1s ease-in-out infinite;\n  animation-delay: 0.3s;\n}\n\n.bubble3 {\n  animation: chatBubbles 1s ease-in-out infinite;\n  animation-delay: 0.5s;\n}\n\n@keyframes chatBubbles {\n  0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-5px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n}\n\nbutton,\ninput,\ntextarea {\n  font-weight: 300;\n}\n\n.slate-a {\n  text-decoration: underline;\n}\n\n.slate-html-container > div {\n  min-height: 24px;\n}\n\n.slate-bold {\n  font-weight: bold;\n}\n\n.slate-italic {\n  font-style: oblique;\n}\n\n.slate-underline {\n  text-decoration: underline;\n}\n.text-input::-moz-placeholder {\n  color: #9095a0 !important;\n  opacity: 1 !important;\n}\n.text-input::placeholder {\n  color: #9095a0 !important;\n  opacity: 1 !important;\n}\n\n.chatbot-container {\n  background-image: var(--chatbot-container-bg-image);\n  background-color: var(--chatbot-container-bg-color);\n  font-family:\n    'Open Sans',\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Helvetica,\n    Arial,\n    sans-serif,\n    'Apple Color Emoji',\n    'Segoe UI Emoji',\n    'Segoe UI Symbol';\n}\n\n.file-annotation-button {\n  color: var(--chatbot-button-color);\n  background-color: #02a0a0c2;\n  border: 1px solid #02a0a0c2;\n  border-radius: var(--chatbot-border-radius);\n}\n\n.chatbot-button {\n  color: var(--chatbot-button-color);\n  background-color: #0042da;\n  border: 1px solid #0042da;\n  border-radius: var(--chatbot-border-radius);\n}\n\n.chatbot-button.selectable {\n  color: var(--chatbot-host-bubble-color);\n  background-color: #f7f8ff;\n  border: 1px solid #0042da;\n}\n\n.chatbot-host-bubble {\n  color: var(--chatbot-host-bubble-color);\n  background-color: #f7f8ff;\n  /* force wrapping of long text or links */\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  word-break: break-word;\n  /* ensure it actually wraps instead of running off the screen */\n  white-space: normal;\n}\n\n.chatbot-host-bubble > .bubble-typing {\n  background-color: #f7f8ff;\n  border: var(--chatbot-host-bubble-border);\n  border-radius: 6px;\n}\n\n.chatbot-host-bubble img,\n.chatbot-host-bubble iframe,\n.chatbot-host-bubble video {\n  border-radius: var(--chatbot-border-radius);\n}\n\n.chatbot-guest-bubble {\n  color: var(--chatbot-guest-bubble-color);\n  background-color: #3b81f6;\n  border-radius: 6px;\n  /* force wrapping of long text or links */\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  word-break: break-word;\n  /* ensure it actually wraps instead of running off the screen */\n  white-space: normal;\n}\n\n.chatbot-input,\n.feedback-input {\n  color: #303235;\n  background-color: #ffffff;\n  box-shadow: 0 2px 6px -1px rgba(0, 0, 0, 0.1);\n  border-radius: var(--chatbot-border-radius);\n}\n\n.chatbot-input-error-message {\n  color: #303235;\n}\n\n.chatbot-button > .send-icon {\n  fill: var(--chatbot-button-color);\n  stroke: var(--chatbot-button-color);\n}\n\n.chatbot-chat-view {\n  max-width: 800px;\n}\n\n.ping span {\n  background-color: #0042da;\n}\n\n.rating-icon-container svg {\n  width: 42px;\n  height: 42px;\n  stroke: #0042da;\n  fill: #f7f8ff;\n  transition: fill 100ms ease-out;\n}\n\n.rating-icon-container.selected svg {\n  fill: #0042da;\n}\n\n.rating-icon-container:hover svg {\n  filter: brightness(0.9);\n}\n\n.rating-icon-container:active svg {\n  filter: brightness(0.75);\n}\n\n.upload-progress-bar {\n  background-color: #0042da;\n  border-radius: var(--chatbot-border-radius);\n}\n\n.total-files-indicator {\n  background-color: #0042da;\n  color: var(--chatbot-button-color);\n  font-size: 10px;\n}\n\n.chatbot-upload-input {\n  transition: border-color 100ms ease-out;\n}\n\n.chatbot-upload-input.dragging-over {\n  border-color: #0042da;\n}\n\n.secondary-button {\n  background-color: #f7f8ff;\n  color: var(--chatbot-host-bubble-color);\n  border-radius: var(--chatbot-border-radius);\n}\n\n.chatbot-country-select {\n  color: #303235;\n  background-color: #ffffff;\n  border-radius: var(--chatbot-border-radius);\n}\n\n.chatbot-date-input {\n  color-scheme: light;\n  color: #303235;\n  background-color: #ffffff;\n  border-radius: var(--chatbot-border-radius);\n}\n\n.chatbot-popup-blocked-toast {\n  border-radius: var(--chatbot-border-radius);\n}\n\n.messagelist {\n  width: 100%;\n  height: 100%;\n  overflow-y: scroll;\n  border-radius: 0.5rem;\n}\n\n.messagelistloading {\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin-top: 1rem;\n}\n\n.usermessage {\n  padding: 1rem 1.5rem 1rem 1.5rem;\n}\n\n.usermessagewaiting-light {\n  padding: 1rem 1.5rem 1rem 1.5rem;\n  background: linear-gradient(to left, #ede7f6, #e3f2fd, #ede7f6);\n  background-size: 200% 200%;\n  background-position: -100% 0;\n  animation: loading-gradient 2s ease-in-out infinite;\n  animation-direction: alternate;\n  animation-name: loading-gradient;\n}\n\n.usermessagewaiting-dark {\n  padding: 1rem 1.5rem 1rem 1.5rem;\n  color: #ececf1;\n  background: linear-gradient(to left, #2e2352, #1d3d60, #2e2352);\n  background-size: 200% 200%;\n  background-position: -100% 0;\n  animation: loading-gradient 2s ease-in-out infinite;\n  animation-direction: alternate;\n  animation-name: loading-gradient;\n}\n\n@keyframes loading-gradient {\n  0% {\n    background-position: -100% 0;\n  }\n  100% {\n    background-position: 100% 0;\n  }\n}\n\n.apimessage {\n  padding: 1rem 1.5rem 1rem 1.5rem;\n  animation: fadein 0.5s;\n}\n\n@keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.apimessage,\n.usermessage,\n.usermessagewaiting {\n  display: flex;\n}\n\n.markdownanswer {\n  line-height: 1.75;\n}\n\n.markdownanswer a:hover {\n  opacity: 0.8;\n}\n\n.markdownanswer a {\n  color: #16bed7;\n  font-weight: 500;\n}\n\n.markdownanswer code {\n  color: #15cb19;\n  font-weight: 500;\n  white-space: pre-wrap !important;\n}\n\n.markdownanswer ol,\n.markdownanswer ul {\n  margin: 1rem;\n}\n\n.boticon,\n.usericon {\n  margin-right: 1rem;\n  border-radius: 1rem;\n}\n\n.markdownanswer h1,\n.markdownanswer h2,\n.markdownanswer h3 {\n  font-size: inherit;\n}\n\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  flex-direction: column;\n  padding: 10px;\n}\n\n.cloud {\n  width: 400px;\n  height: calc(100% - 50px);\n  border-radius: 0.5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\ninput,\ntextarea {\n  background-color: transparent;\n  border: none;\n  padding: 10px 10px;\n  font-family: 'Poppins', sans-serif;\n}\n@media (max-width: 640px) {\n  div[part='bot'] {\n    width: 100% !important;\n    position: fixed !important;\n    top: 0 !important;\n    left: 0 !important;\n    max-width: unset !important;\n    max-height: unset !important;\n    height: 100% !important;\n    overflow: auto; \n    overflow-x: hidden; /* Prevent horizontal scrolling */\n  }\n\n    div[part='button'], div[class='flex flex-row items-center w-full h-[50px] absolute top-0 left-0 z-10'], .chatbot-container, .rounded-lg {\n    border-radius: 0px !important;\n  }\n\nbutton {\n  cursor: default !important;\n}\n\n}\n.tooltip {\n  position: fixed;\n  background: var(--tooltip-background-color, black);\n  color: var(--tooltip-text-color, white);\n  padding: 5px 10px;\n  border-radius: 5px;\n  z-index: 42424242;\n  white-space: pre-wrap;\n  word-break: break-word;\n  max-width: calc(100vw - 20px);\n  font-size: var(--tooltip-font-size, 12px);\n  transition: opacity 0.3s ease-in-out;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.spinner {\n  border: 4px solid rgba(255, 255, 255, 0.3); /* Light gray border */\n  border-top: 4px solid white; /* White spinner */\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  animation: spin 1s linear infinite;\n}\n\n.hover\\:scale-110:hover {\n  --tw-scale-x: 1.1;\n  --tw-scale-y: 1.1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n\n.hover\\:bg-gray-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-gray-50:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-green-600:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(22 163 74 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-red-600:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-transparent:hover {\n  background-color: transparent;\n}\n\n.hover\\:text-gray-700:hover {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n\n.hover\\:text-white:hover {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n.hover\\:opacity-90:hover {\n  opacity: 0.9;\n}\n\n.hover\\:shadow-lg:hover {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.hover\\:brightness-90:hover {\n  --tw-brightness: brightness(.9);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n\n.focus\\:border-blue-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(59 130 246 / var(--tw-border-opacity));\n}\n\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n.focus\\:ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n.focus\\:ring-blue-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity));\n}\n\n.focus\\:ring-offset-2:focus {\n  --tw-ring-offset-width: 2px;\n}\n\n.active\\:scale-95:active {\n  --tw-scale-x: .95;\n  --tw-scale-y: .95;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n\n.active\\:bg-emerald-600:active {\n  --tw-bg-opacity: 1;\n  background-color: rgb(5 150 105 / var(--tw-bg-opacity));\n}\n\n.active\\:brightness-75:active {\n  --tw-brightness: brightness(.75);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n\n.disabled\\:cursor-not-allowed:disabled {\n  cursor: not-allowed;\n}\n\n.disabled\\:opacity-50:disabled {\n  opacity: 0.5;\n}\n\n.disabled\\:brightness-100:disabled {\n  --tw-brightness: brightness(1);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n\n.group:hover .group-hover\\:flex {\n  display: flex;\n}\n\n@media (min-width: 640px) {\n\n  .sm\\:right-5 {\n    right: 20px;\n  }\n\n  .sm\\:my-8 {\n    margin-top: 32px;\n    margin-bottom: 32px;\n  }\n\n  .sm\\:w-\\[400px\\] {\n    width: 400px;\n  }\n\n  .sm\\:w-full {\n    width: 100%;\n  }\n\n  .sm\\:max-w-lg {\n    max-width: 512px;\n  }\n\n  .sm\\:flex-row {\n    flex-direction: row;\n  }\n\n  .sm\\:space-x-3 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 0;\n    margin-right: calc(12px * var(--tw-space-x-reverse));\n    margin-left: calc(12px * calc(1 - var(--tw-space-x-reverse)));\n  }\n\n  .sm\\:space-y-0 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-y-reverse: 0;\n    margin-top: calc(0px * calc(1 - var(--tw-space-y-reverse)));\n    margin-bottom: calc(0px * var(--tw-space-y-reverse));\n  }\n\n  .sm\\:p-0 {\n    padding: 0px;\n  }\n}\n\n@media (min-width: 768px) {\n\n  .md\\:mb-0 {\n    margin-bottom: 0px;\n  }\n\n  .md\\:flex-row {\n    flex-direction: row;\n  }\n}";

const isNotDefined = value => value === undefined || value === null;
const isDefined = value => value !== undefined && value !== null;
const isNotEmpty = value => value !== undefined && value !== null && value !== '';
const sendRequest = async params => {
  try {
    const url = typeof params === 'string' ? params : params.url;
    const headers = typeof params !== 'string' && isDefined(params.body) ? {
      'Content-Type': 'application/json',
      ...params.headers
    } : undefined;
    let body = typeof params !== 'string' && isDefined(params.body) ? JSON.stringify(params.body) : undefined;
    if (typeof params !== 'string' && params.formData) body = params.formData;
    const requestInfo = {
      method: typeof params === 'string' ? 'GET' : params.method,
      mode: 'cors',
      headers,
      body
    };
    if (typeof params !== 'string' && params.onRequest) {
      await params.onRequest(requestInfo);
    }
    const response = await fetch(url, requestInfo);
    let data;
    const contentType = response.headers.get('Content-Type');
    if (contentType && contentType.includes('application/json')) {
      data = await response.json();
    } else if (typeof params !== 'string' && params.type === 'blob') {
      data = await response.blob();
    } else {
      data = await response.text();
    }
    if (!response.ok) {
      let errorMessage;
      if (typeof data === 'object' && 'error' in data) {
        errorMessage = data.error;
      } else {
        errorMessage = data || response.statusText;
      }
      throw errorMessage;
    }
    return {
      data
    };
  } catch (e) {
    console.error(e);
    return {
      error: e
    };
  }
};
const setLocalStorageChatflow = (chatflowid, chatId, saveObj = {}) => {
  const chatDetails = localStorage.getItem(`${chatflowid}_EXTERNAL`);
  const obj = {
    ...saveObj
  };
  if (chatId) obj.chatId = chatId;
  if (!chatDetails) {
    localStorage.setItem(`${chatflowid}_EXTERNAL`, JSON.stringify(obj));
  } else {
    try {
      const parsedChatDetails = JSON.parse(chatDetails);
      localStorage.setItem(`${chatflowid}_EXTERNAL`, JSON.stringify({
        ...parsedChatDetails,
        ...obj
      }));
    } catch (e) {
      const chatId = chatDetails;
      obj.chatId = chatId;
      localStorage.setItem(`${chatflowid}_EXTERNAL`, JSON.stringify(obj));
    }
  }
};
const getLocalStorageChatflow = chatflowid => {
  const chatDetails = localStorage.getItem(`${chatflowid}_EXTERNAL`);
  if (!chatDetails) return {};
  try {
    return JSON.parse(chatDetails);
  } catch (e) {
    return {};
  }
};
const removeLocalStorageChatHistory = chatflowid => {
  const chatDetails = localStorage.getItem(`${chatflowid}_EXTERNAL`);
  if (!chatDetails) return;
  try {
    const parsedChatDetails = JSON.parse(chatDetails);
    if (parsedChatDetails.lead) {
      // Dont remove lead when chat is cleared
      const obj = {
        lead: parsedChatDetails.lead
      };
      localStorage.removeItem(`${chatflowid}_EXTERNAL`);
      localStorage.setItem(`${chatflowid}_EXTERNAL`, JSON.stringify(obj));
    } else {
      localStorage.removeItem(`${chatflowid}_EXTERNAL`);
    }
  } catch (e) {
    return;
  }
};
const getBubbleButtonSize = size => {
  if (!size) return 48;
  if (typeof size === 'number') return size;
  if (size === 'small') return 32;
  if (size === 'medium') return 48;
  if (size === 'large') return 64;
  return 48;
};
const setCookie = (cname, cvalue, exdays) => {
  const d = new Date();
  d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
  const expires = 'expires=' + d.toUTCString();
  document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';
};
const getCookie = cname => {
  const name = cname + '=';
  const decodedCookie = decodeURIComponent(document.cookie);
  const ca = decodedCookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) === 0) {
      return c.substring(name.length, c.length);
    }
  }
  return '';
};

const _tmpl$$J = /*#__PURE__*/template(`<svg viewBox="0 0 24 24"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z">`),
  _tmpl$2$m = /*#__PURE__*/template(`<img alt="Bubble button icon">`),
  _tmpl$3$d = /*#__PURE__*/template(`<button part="button" class="fixed shadow-md rounded-full hover:scale-110 active:scale-95 transition-transform duration-200 flex justify-center items-center animate-fade-in"><svg viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M18.601 8.39897C18.269 8.06702 17.7309 8.06702 17.3989 8.39897L12 13.7979L6.60099 8.39897C6.26904 8.06702 5.73086 8.06702 5.39891 8.39897C5.06696 8.73091 5.06696 9.2691 5.39891 9.60105L11.3989 15.601C11.7309 15.933 12.269 15.933 12.601 15.601L18.601 9.60105C18.9329 9.2691 18.9329 8.73091 18.601 8.39897Z">`);
const defaultButtonColor$f = '#3B81F6';
const defaultIconColor$2 = 'white';
const defaultBottom = 20;
const defaultRight = 20;
const BubbleButton = props => {
  const buttonSize = getBubbleButtonSize(props.size);
  const [position, setPosition] = createSignal({
    bottom: props.bottom ?? defaultBottom,
    right: props.right ?? defaultRight
  });
  const [isSmallScreen, setIsSmallScreen] = createSignal(false);
  const [userInteracted, setUserInteracted] = createSignal(false);
  let dragStartX;
  let initialRight;
  const onMouseDown = e => {
    if (props.dragAndDrop) {
      dragStartX = e.clientX;
      initialRight = position().right;
      document.addEventListener('mousemove', onMouseMove);
      document.addEventListener('mouseup', onMouseUp);
    }
  };
  const onMouseMove = e => {
    const deltaX = dragStartX - e.clientX;
    const newRight = initialRight + deltaX;
    const screenWidth = window.innerWidth;
    const maxRight = screenWidth - buttonSize;
    const newPosition = {
      right: Math.min(Math.max(newRight, defaultRight), maxRight),
      bottom: position().bottom
    };
    setPosition(newPosition);
    props.setButtonPosition(newPosition);
  };
  const onMouseUp = () => {
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  };
  const handleButtonClick = () => {
    props.toggleBot();
    setUserInteracted(true); // Mark that the user has interacted
    if (window.innerWidth <= 640) {
      setIsSmallScreen(true);
    }
  };
  createEffect(() => {
    // Automatically open the chat window if autoOpen is true
    if (props.autoOpen && (props.autoOpenOnMobile || window.innerWidth > 640)) {
      const delayInSeconds = props.openDelay ?? 2; // Default to 2 seconds if openDelay is not defined
      const delayInMilliseconds = delayInSeconds * 1000; // Convert seconds to milliseconds
      setTimeout(() => {
        if (!props.isBotOpened && !userInteracted()) {
          props.toggleBot();
        }
      }, delayInMilliseconds);
    }
  });
  return createComponent(Show, {
    get when() {
      return !isSmallScreen() || !props.isBotOpened;
    },
    keyed: true,
    get children() {
      const _el$ = _tmpl$3$d(),
        _el$4 = _el$.firstChild;
      _el$.$$mousedown = onMouseDown;
      _el$.$$click = handleButtonClick;
      _el$.style.setProperty("z-index", "42424242");
      `${buttonSize}px` != null ? _el$.style.setProperty("width", `${buttonSize}px`) : _el$.style.removeProperty("width");
      `${buttonSize}px` != null ? _el$.style.setProperty("height", `${buttonSize}px`) : _el$.style.removeProperty("height");
      insert(_el$, createComponent(Show, {
        get when() {
          return isNotDefined(props.customIconSrc);
        },
        keyed: true,
        get children() {
          const _el$2 = _tmpl$$J();
          setAttribute(_el$2, "width", buttonSize * 0.6);
          setAttribute(_el$2, "height", buttonSize * 0.6);
          createRenderEffect(_p$ => {
            const _v$ = props.iconColor ?? defaultIconColor$2,
              _v$2 = `stroke-2 fill-transparent absolute duration-200 transition ` + (props.isBotOpened ? 'scale-0 opacity-0' : 'scale-100 opacity-100');
            _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$2.style.setProperty("stroke", _v$) : _el$2.style.removeProperty("stroke"));
            _v$2 !== _p$._v$2 && setAttribute(_el$2, "class", _p$._v$2 = _v$2);
            return _p$;
          }, {
            _v$: undefined,
            _v$2: undefined
          });
          return _el$2;
        }
      }), _el$4);
      insert(_el$, createComponent(Show, {
        get when() {
          return props.customIconSrc;
        },
        get children() {
          const _el$3 = _tmpl$2$m();
          `${buttonSize * 0.6}px` != null ? _el$3.style.setProperty("width", `${buttonSize * 0.6}px`) : _el$3.style.removeProperty("width");
          `${buttonSize * 0.6}px` != null ? _el$3.style.setProperty("height", `${buttonSize * 0.6}px`) : _el$3.style.removeProperty("height");
          createRenderEffect(_p$ => {
            const _v$3 = props.customIconSrc,
              _v$4 = 'rounded-full object-cover' + (props.isBotOpened ? 'scale-0 opacity-0' : 'scale-100 opacity-100');
            _v$3 !== _p$._v$3 && setAttribute(_el$3, "src", _p$._v$3 = _v$3);
            _v$4 !== _p$._v$4 && className(_el$3, _p$._v$4 = _v$4);
            return _p$;
          }, {
            _v$3: undefined,
            _v$4: undefined
          });
          return _el$3;
        }
      }), _el$4);
      setAttribute(_el$4, "width", buttonSize * 0.6);
      setAttribute(_el$4, "height", buttonSize * 0.6);
      createRenderEffect(_p$ => {
        const _v$5 = props.backgroundColor ?? defaultButtonColor$f,
          _v$6 = `${position().right}px`,
          _v$7 = `${position().bottom}px`,
          _v$8 = props.dragAndDrop ? 'grab' : 'pointer',
          _v$9 = props.iconColor ?? 'white',
          _v$10 = `absolute duration-200 transition ` + (props.isBotOpened ? 'scale-100 rotate-0 opacity-100' : 'scale-0 -rotate-180 opacity-0');
        _v$5 !== _p$._v$5 && ((_p$._v$5 = _v$5) != null ? _el$.style.setProperty("background-color", _v$5) : _el$.style.removeProperty("background-color"));
        _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$.style.setProperty("right", _v$6) : _el$.style.removeProperty("right"));
        _v$7 !== _p$._v$7 && ((_p$._v$7 = _v$7) != null ? _el$.style.setProperty("bottom", _v$7) : _el$.style.removeProperty("bottom"));
        _v$8 !== _p$._v$8 && ((_p$._v$8 = _v$8) != null ? _el$.style.setProperty("cursor", _v$8) : _el$.style.removeProperty("cursor"));
        _v$9 !== _p$._v$9 && ((_p$._v$9 = _v$9) != null ? _el$4.style.setProperty("fill", _v$9) : _el$4.style.removeProperty("fill"));
        _v$10 !== _p$._v$10 && setAttribute(_el$4, "class", _p$._v$10 = _v$10);
        return _p$;
      }, {
        _v$5: undefined,
        _v$6: undefined,
        _v$7: undefined,
        _v$8: undefined,
        _v$9: undefined,
        _v$10: undefined
      });
      return _el$;
    }
  });
};
delegateEvents(["click", "mousedown"]);

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};

function v4(options, buf, offset) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

const sendFeedbackQuery = ({
  chatflowid,
  apiHost = 'http://localhost:3000',
  body,
  onRequest
}) => sendRequest({
  method: 'POST',
  url: `${apiHost}/api/v1/feedback/${chatflowid}`,
  body,
  onRequest: onRequest
});
const updateFeedbackQuery = ({
  id,
  apiHost = 'http://localhost:3000',
  body,
  onRequest
}) => sendRequest({
  method: 'PUT',
  url: `${apiHost}/api/v1/feedback/${id}`,
  body,
  onRequest: onRequest
});
const sendMessageQuery = ({
  chatflowid,
  apiHost = 'http://localhost:3000',
  body,
  onRequest
}) => sendRequest({
  method: 'POST',
  url: `${apiHost}/api/v1/prediction/${chatflowid}`,
  body,
  onRequest: onRequest
});
const createAttachmentWithFormData = ({
  chatflowid,
  apiHost = 'http://localhost:3000',
  formData,
  onRequest
}) => sendRequest({
  method: 'POST',
  url: `${apiHost}/api/v1/attachments/${chatflowid}/${formData.get('chatId')}`,
  formData,
  headers: {
    'Content-Type': 'multipart/form-data'
  },
  onRequest: onRequest
});
const upsertVectorStoreWithFormData = ({
  chatflowid,
  apiHost = 'http://localhost:3000',
  formData,
  onRequest
}) => sendRequest({
  method: 'POST',
  url: `${apiHost}/api/v1/vector/upsert/${chatflowid}`,
  formData,
  headers: {
    'Content-Type': 'multipart/form-data'
  },
  onRequest: onRequest
});
const getChatbotConfig = ({
  chatflowid,
  apiHost = 'http://localhost:3000',
  onRequest
}) => sendRequest({
  method: 'GET',
  url: `${apiHost}/api/v1/public-chatbotConfig/${chatflowid}`,
  onRequest: onRequest
});
const isStreamAvailableQuery = ({
  chatflowid,
  apiHost = 'http://localhost:3000',
  onRequest
}) => sendRequest({
  method: 'GET',
  url: `${apiHost}/api/v1/chatflows-streaming/${chatflowid}`,
  onRequest: onRequest
});
const sendFileDownloadQuery = ({
  apiHost = 'http://localhost:3000',
  body,
  onRequest
}) => sendRequest({
  method: 'POST',
  url: `${apiHost}/api/v1/openai-assistants-file/download`,
  body,
  type: 'blob',
  onRequest: onRequest
});
const addLeadQuery = ({
  apiHost = 'http://localhost:3000',
  body,
  onRequest
}) => sendRequest({
  method: 'POST',
  url: `${apiHost}/api/v1/leads/`,
  body,
  onRequest: onRequest
});

const _tmpl$$I = /*#__PURE__*/template(`<textarea class="focus:outline-none bg-transparent px-4 py-4 flex-1 w-full h-full min-h-[56px] max-h-[128px] text-input disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 ">`);
const DEFAULT_HEIGHT = 56;
const ShortTextInput = props => {
  const [local, others] = splitProps(props, ['ref', 'onInput']);
  const [height, setHeight] = createSignal(56);
  // @ts-expect-error: unknown type
  const handleInput = e => {
    if (props.ref) {
      if (e.currentTarget.value === '') {
        // reset height when value is empty
        setHeight(DEFAULT_HEIGHT);
      } else {
        setHeight(e.currentTarget.scrollHeight - 24);
      }
      e.currentTarget.scrollTo(0, e.currentTarget.scrollHeight);
      local.onInput(e.currentTarget.value);
    }
  };
  // @ts-expect-error: unknown type
  const handleKeyDown = e => {
    // Handle Shift + Enter new line
    if (e.keyCode == 13 && e.shiftKey) {
      e.preventDefault();
      e.stopPropagation();
      e.currentTarget.value += '\n';
      handleInput(e);
    }
  };
  return (() => {
    const _el$ = _tmpl$$I();
    _el$.$$keydown = handleKeyDown;
    _el$.$$input = handleInput;
    const _ref$ = props.ref;
    typeof _ref$ === "function" ? use(_ref$, _el$) : props.ref = _el$;
    spread(_el$, mergeProps({
      get disabled() {
        return props.disabled;
      },
      get style() {
        return {
          'font-size': props.fontSize ? `${props.fontSize}px` : '16px',
          resize: 'none',
          height: `${props.value !== '' ? height() : DEFAULT_HEIGHT}px`
        };
      }
    }, others), false, false);
    return _el$;
  })();
};
delegateEvents(["input", "keydown"]);

const [isMobile, setIsMobile] = createSignal();

const _tmpl$$H = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-refresh w-4 h-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2">`);
const defaultButtonColor$e = '#3B81F6';
const ClipboardIcon = props => (() => {
  const _el$ = _tmpl$$H();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$e));
  return _el$;
})();

const _tmpl$$G = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-refresh w-4 h-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 14V2"></path><path d="M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z">`);
const defaultButtonColor$d = '#3B81F6';
const ThumbsDownIcon = props => (() => {
  const _el$ = _tmpl$$G();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$d));
  return _el$;
})();

const _tmpl$$F = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-refresh w-4 h-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M7 10v12"></path><path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z">`);
const defaultButtonColor$c = '#3B81F6';
const ThumbsUpIcon = props => (() => {
  const _el$ = _tmpl$$F();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$c));
  return _el$;
})();

const _tmpl$$E = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"></path><line x1="16" x2="22" y1="5" y2="5"></line><line x1="19" x2="19" y1="2" y2="8"></line><circle cx="9" cy="9" r="2"></circle><path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21">`);
const defaultButtonColor$b = '#3B81F6';
const AddImageIcon = props => (() => {
  const _el$ = _tmpl$$E();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$b));
  return _el$;
})();

const _tmpl$$D = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="1">`);
const defaultButtonColor$a = '#3B81F6';
const CircleDotIcon = props => (() => {
  const _el$ = _tmpl$$D();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$a));
  return _el$;
})();

const _tmpl$$C = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-refresh" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4"></path><path d="M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4">`);
const defaultButtonColor$9 = '#3B81F6';
const DeleteIcon = props => (() => {
  const _el$ = _tmpl$$C();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$9));
  return _el$;
})();

const _tmpl$$B = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><line x1="12" x2="12" y1="19" y2="22">`);
const defaultButtonColor$8 = '#3B81F6';
const RecordIcon = props => (() => {
  const _el$ = _tmpl$$B();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$8));
  return _el$;
})();

const _tmpl$$A = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="19px"><path d="M476.59 227.05l-.16-.07L49.35 49.84A23.56 23.56 0 0027.14 52 24.65 24.65 0 0016 72.59v113.29a24 24 0 0019.52 23.57l232.93 43.07a4 4 0 010 7.86L35.53 303.45A24 24 0 0016 327v113.31A23.57 23.57 0 0026.59 460a23.94 23.94 0 0013.22 4 24.55 24.55 0 009.52-1.93L476.4 285.94l.19-.09a32 32 0 000-58.8z">`);
const defaultButtonColor$7 = '#3B81F6';
const SendIcon = props => (() => {
  const _el$ = _tmpl$$A();
  spread(_el$, mergeProps({
    get style() {
      return {
        fill: props.color ?? defaultButtonColor$7
      };
    }
  }, props), true, true);
  return _el$;
})();

const _tmpl$$z = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17">`);
const defaultButtonColor$6 = '#3B81F6';
const TrashIcon = props => (() => {
  const _el$ = _tmpl$$z();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.color ?? defaultButtonColor$6));
  return _el$;
})();

const _tmpl$$y = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"></path><path d="m6 6 12 12">`);
const defaultButtonColor$5 = '#3B81F6';
const XIcon = props => (() => {
  const _el$ = _tmpl$$y();
  createRenderEffect(() => setAttribute(_el$, "stroke", props.isCurrentColor ? 'currentColor' : props.color ?? defaultButtonColor$5));
  return _el$;
})();

const _tmpl$$x = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="flex-shrink-0"><polyline points="20 6 9 17 4 12">`);
const TickIcon = () => _tmpl$$x();

const _tmpl$$w = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M15 7l-6.5 6.5a1.5 1.5 0 0 0 3 3l6.5 -6.5a3 3 0 0 0 -6 -6l-6.5 6.5a4.5 4.5 0 0 0 9 9l6.5 -6.5">`);
const defaultButtonColor$4 = '#3B81F6';
const AttachmentIcon = props => (() => {
  const _el$ = _tmpl$$w();
  createRenderEffect(_p$ => {
    const _v$ = props.class,
      _v$2 = props.color ?? defaultButtonColor$4;
    _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
    _v$2 !== _p$._v$2 && setAttribute(_el$, "stroke", _p$._v$2 = _v$2);
    return _p$;
  }, {
    _v$: undefined,
    _v$2: undefined
  });
  return _el$;
})();

const _tmpl$$v = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M16 18a2 2 0 0 1 2 2a2 2 0 0 1 2 -2a2 2 0 0 1 -2 -2a2 2 0 0 1 -2 2zm0 -12a2 2 0 0 1 2 2a2 2 0 0 1 2 -2a2 2 0 0 1 -2 -2a2 2 0 0 1 -2 2zm-7 12a6 6 0 0 1 6 -6a6 6 0 0 1 -6 -6a6 6 0 0 1 -6 6a6 6 0 0 1 6 6z">`);
const defaultButtonColor$3 = '#3B81F6';
const SparklesIcon = props => (() => {
  const _el$ = _tmpl$$v();
  spread(_el$, mergeProps({
    get stroke() {
      return props.color ?? defaultButtonColor$3;
    }
  }, props), true, true);
  return _el$;
})();

const _tmpl$$u = /*#__PURE__*/template(`<button type="submit">`),
  _tmpl$2$l = /*#__PURE__*/template(`<svg><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">`);
const SendButton = props => {
  return (() => {
    const _el$ = _tmpl$$u();
    spread(_el$, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'py-2 px-4 justify-center font-semibold text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      }
    }), false, true);
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner$3, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(SendIcon, {
          get color() {
            return props.sendButtonColor;
          },
          get ["class"]() {
            return 'send-icon flex ' + (props.disableIcon ? 'hidden' : '');
          }
        });
      }
    }));
    return _el$;
  })();
};
const DeleteButton = props => {
  // Check if <flowise-fullchatbot> is present in the DOM
  const isFullChatbot = document.querySelector('flowise-fullchatbot') !== null;
  const paddingClass = isFullChatbot ? 'px-4' : 'px-12';
  return (() => {
    const _el$2 = _tmpl$$u();
    spread(_el$2, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return `py-2 ${paddingClass} justify-center font-semibold text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ` + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      },
      "title": "Reset Chat"
    }), false, true);
    insert(_el$2, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner$3, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(DeleteIcon, {
          get color() {
            return props.sendButtonColor;
          },
          get ["class"]() {
            return 'send-icon flex ' + (props.disableIcon ? 'hidden' : '');
          }
        });
      }
    }));
    return _el$2;
  })();
};
const Spinner$3 = props => (() => {
  const _el$3 = _tmpl$2$l();
  spread(_el$3, mergeProps(props, {
    get ["class"]() {
      return 'animate-spin -ml-1 mr-3 h-5 w-5 ' + props.class;
    },
    "xmlns": "http://www.w3.org/2000/svg",
    "fill": "none",
    "viewBox": "0 0 24 24",
    "data-testid": "loading-spinner"
  }), true, true);
  return _el$3;
})();

const _tmpl$$t = /*#__PURE__*/template(`<button type="submit">`),
  _tmpl$2$k = /*#__PURE__*/template(`<svg><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">`);
const ImageUploadButton = props => {
  return (() => {
    const _el$ = _tmpl$$t();
    spread(_el$, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'py-2 pl-4 pr-0 justify-center font-semibold focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      }
    }), false, true);
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner$2, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(AddImageIcon, {
          get color() {
            return props.buttonColor;
          }
        });
      }
    }));
    return _el$;
  })();
};
const Spinner$2 = props => (() => {
  const _el$2 = _tmpl$2$k();
  spread(_el$2, mergeProps(props, {
    get ["class"]() {
      return 'animate-spin -ml-1 mr-3 h-5 w-5 ' + props.class;
    },
    "xmlns": "http://www.w3.org/2000/svg",
    "fill": "none",
    "viewBox": "0 0 24 24",
    "data-testid": "loading-spinner"
  }), true, true);
  return _el$2;
})();

const _tmpl$$s = /*#__PURE__*/template(`<button type="submit">`),
  _tmpl$2$j = /*#__PURE__*/template(`<svg><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">`);
const RecordAudioButton = props => {
  return (() => {
    const _el$ = _tmpl$$s();
    spread(_el$, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'py-2 px-4 justify-center font-semibold focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      }
    }), false, true);
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner$1, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(RecordIcon, {
          get color() {
            return props.buttonColor;
          }
        });
      }
    }));
    return _el$;
  })();
};
const Spinner$1 = props => (() => {
  const _el$2 = _tmpl$2$j();
  spread(_el$2, mergeProps(props, {
    get ["class"]() {
      return 'animate-spin -ml-1 mr-3 h-5 w-5 ' + props.class;
    },
    "xmlns": "http://www.w3.org/2000/svg",
    "fill": "none",
    "viewBox": "0 0 24 24",
    "data-testid": "loading-spinner"
  }), true, true);
  return _el$2;
})();

const _tmpl$$r = /*#__PURE__*/template(`<button type="submit">`),
  _tmpl$2$i = /*#__PURE__*/template(`<svg><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">`);
const AttachmentUploadButton = props => {
  return (() => {
    const _el$ = _tmpl$$r();
    spread(_el$, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'py-2 pl-4 pr-0 justify-center font-semibold focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      }
    }), false, true);
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(AttachmentIcon, {
          get color() {
            return props.buttonColor;
          }
        });
      }
    }));
    return _el$;
  })();
};
const Spinner = props => (() => {
  const _el$2 = _tmpl$2$i();
  spread(_el$2, mergeProps(props, {
    get ["class"]() {
      return 'animate-spin -ml-1 mr-3 h-5 w-5 ' + props.class;
    },
    "xmlns": "http://www.w3.org/2000/svg",
    "fill": "none",
    "viewBox": "0 0 24 24",
    "data-testid": "loading-spinner"
  }), true, true);
  return _el$2;
})();

class ChatInputHistory {
  history = [];
  currentIndex = -1;
  tempInput = '';
  constructor(getMaxHistory = () => 10, storage = localStorage) {
    this.getMaxHistory = getMaxHistory;
    this.storage = storage;
    this.maxHistory = this.getMaxHistory() ?? 10;
    this.loadHistory();
  }
  getHistory() {
    return this.history;
  }
  getCurrentIndex() {
    return this.currentIndex;
  }
  addToHistory(input) {
    if (!input.trim()) return;
    // Don't add duplicate consecutive entries
    if (this.history[0] !== input) {
      this.history.unshift(input);
      if (this.history.length > this.maxHistory) {
        this.history.pop();
      }
    }
    this.currentIndex = -1;
    this.saveHistory();
  }
  getPreviousInput(currentInput) {
    if (this.currentIndex === -1) {
      this.tempInput = currentInput;
    }
    if (this.currentIndex < this.history.length - 1) {
      this.currentIndex++;
      return this.history[this.currentIndex];
    }
    return this.history[this.currentIndex] || this.tempInput;
  }
  getNextInput() {
    if (this.currentIndex > -1) {
      this.currentIndex--;
      if (this.currentIndex === -1) {
        return this.tempInput;
      }
      return this.history[this.currentIndex];
    }
    return this.tempInput;
  }
  saveHistory() {
    try {
      this.storage.setItem('chatInputHistory', JSON.stringify(this.history));
    } catch (error) {
      console.warn('Failed to save chat history to localStorage:', error instanceof Error ? error.message : error);
    }
  }
  loadHistory() {
    try {
      const saved = this.storage.getItem('chatInputHistory');
      if (saved) {
        const parsed = JSON.parse(saved);
        this.history = Array.isArray(parsed) ? parsed : [];
      }
    } catch (error) {
      console.warn('Failed to load chat history from localStorage:', error instanceof Error ? error.message : error);
    }
  }
}

const _tmpl$$q = /*#__PURE__*/template(`<div class="w-full px-4 pt-4 pb-1 text-red-500 text-sm" data-testid="warning-message">`),
  _tmpl$2$h = /*#__PURE__*/template(`<span>Send`),
  _tmpl$3$c = /*#__PURE__*/template(`<div class="w-full h-auto max-h-[192px] min-h-[56px] flex flex-col items-end justify-between chatbot-input border border-[#eeeeee]" data-testid="input"><div class="w-full flex items-end justify-between">`),
  _tmpl$4$9 = /*#__PURE__*/template(`<span>Image Upload`),
  _tmpl$5$8 = /*#__PURE__*/template(`<input multiple type="file">`),
  _tmpl$6$6 = /*#__PURE__*/template(`<span>File Upload`),
  _tmpl$7$5 = /*#__PURE__*/template(`<span>Record Audio`);
const defaultBackgroundColor$8 = '#ffffff';
const defaultTextColor$9 = '#303235';
// CDN link for default send sound
const defaultSendSound = 'https://cdn.jsdelivr.net/gh/FlowiseAI/FlowiseChatEmbed@latest/src/assets/send_message.mp3';
const TextInput = props => {
  const [isSendButtonDisabled, setIsSendButtonDisabled] = createSignal(false);
  const [warningMessage, setWarningMessage] = createSignal('');
  const [inputHistory] = createSignal(new ChatInputHistory(() => props.maxHistorySize || 10));
  let inputRef;
  let fileUploadRef;
  let imgUploadRef;
  let audioRef;
  const handleInput = inputValue => {
    const wordCount = inputValue.length;
    if (props.maxChars && wordCount > props.maxChars) {
      setWarningMessage(props.maxCharsWarningMessage ?? `You exceeded the characters limit. Please input less than ${props.maxChars} characters.`);
      setIsSendButtonDisabled(true);
      return;
    }
    props.onInputChange(inputValue);
    setWarningMessage('');
    setIsSendButtonDisabled(false);
  };
  const checkIfInputIsValid = () => warningMessage() === '' && inputRef?.reportValidity();
  const submit = () => {
    if (checkIfInputIsValid()) {
      if (props.enableInputHistory) {
        inputHistory().addToHistory(props.inputValue);
      }
      props.onSubmit(props.inputValue);
      if (props.sendMessageSound && audioRef) {
        audioRef.play();
      }
    }
  };
  const handleImageUploadClick = () => {
    if (imgUploadRef) imgUploadRef.click();
  };
  const handleFileUploadClick = () => {
    if (fileUploadRef) fileUploadRef.click();
  };
  const handleKeyDown = e => {
    if (e.key === 'Enter' && !e.shiftKey) {
      const isIMEComposition = e.isComposing || e.keyCode === 229;
      if (!isIMEComposition) {
        e.preventDefault();
        submit();
      }
    } else if (props.enableInputHistory) {
      if (e.key === 'ArrowUp') {
        e.preventDefault();
        const previousInput = inputHistory().getPreviousInput(props.inputValue);
        props.onInputChange(previousInput);
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        const nextInput = inputHistory().getNextInput();
        props.onInputChange(nextInput);
      }
    }
  };
  createEffect(() => {
    const shouldAutoFocus = props.autoFocus !== undefined ? props.autoFocus : !isMobile() && window.innerWidth > 640;
    if (!props.disabled && shouldAutoFocus && inputRef) inputRef.focus();
  });
  onMount(() => {
    const shouldAutoFocus = props.autoFocus !== undefined ? props.autoFocus : !isMobile() && window.innerWidth > 640;
    if (!props.disabled && shouldAutoFocus && inputRef) inputRef.focus();
    if (props.sendMessageSound) {
      if (props.sendSoundLocation) {
        audioRef = new Audio(props.sendSoundLocation);
      } else {
        audioRef = new Audio(defaultSendSound);
      }
    }
  });
  const handleFileChange = event => {
    props.handleFileChange(event);
    if (event.target) event.target.value = '';
  };
  const getFileType = () => {
    if (props.isFullFileUpload) return props.fullFileUploadAllowedTypes === '' ? '*' : props.fullFileUploadAllowedTypes;
    if (props.uploadsConfig?.fileUploadSizeAndTypes?.length) {
      const allowedFileTypes = props.uploadsConfig?.fileUploadSizeAndTypes.map(allowed => allowed.fileTypes).join(',');
      if (allowedFileTypes.includes('*')) return '*';else return allowedFileTypes;
    }
    return '*';
  };
  return (() => {
    const _el$ = _tmpl$3$c(),
      _el$3 = _el$.firstChild;
    _el$.$$keydown = handleKeyDown;
    _el$.style.setProperty("margin", "auto");
    insert(_el$, createComponent(Show, {
      get when() {
        return warningMessage() !== '';
      },
      get children() {
        const _el$2 = _tmpl$$q();
        insert(_el$2, warningMessage);
        return _el$2;
      }
    }), _el$3);
    insert(_el$3, (() => {
      const _c$ = createMemo(() => !!props.uploadsConfig?.isImageUploadAllowed);
      return () => _c$() ? [createComponent(ImageUploadButton, {
        get buttonColor() {
          return props.sendButtonColor;
        },
        type: "button",
        "class": "m-0 h-14 flex items-center justify-center",
        get isDisabled() {
          return props.disabled || isSendButtonDisabled();
        },
        "on:click": handleImageUploadClick,
        get children() {
          const _el$5 = _tmpl$4$9();
          _el$5.style.setProperty("font-family", "Poppins, sans-serif");
          return _el$5;
        }
      }), (() => {
        const _el$6 = _tmpl$5$8();
        _el$6.addEventListener("change", handleFileChange);
        const _ref$2 = imgUploadRef;
        typeof _ref$2 === "function" ? use(_ref$2, _el$6) : imgUploadRef = _el$6;
        _el$6.style.setProperty("display", "none");
        createRenderEffect(() => setAttribute(_el$6, "accept", props.uploadsConfig?.imgUploadSizeAndTypes?.length ? props.uploadsConfig?.imgUploadSizeAndTypes.map(allowed => allowed.fileTypes).join(',') : '*'));
        return _el$6;
      })()] : null;
    })(), null);
    insert(_el$3, (() => {
      const _c$2 = createMemo(() => !!(props.uploadsConfig?.isRAGFileUploadAllowed || props.isFullFileUpload));
      return () => _c$2() ? [createComponent(AttachmentUploadButton, {
        get buttonColor() {
          return props.sendButtonColor;
        },
        type: "button",
        "class": "m-0 h-14 flex items-center justify-center",
        get isDisabled() {
          return props.disabled || isSendButtonDisabled();
        },
        "on:click": handleFileUploadClick,
        get children() {
          const _el$7 = _tmpl$6$6();
          _el$7.style.setProperty("font-family", "Poppins, sans-serif");
          return _el$7;
        }
      }), (() => {
        const _el$8 = _tmpl$5$8();
        _el$8.addEventListener("change", handleFileChange);
        const _ref$3 = fileUploadRef;
        typeof _ref$3 === "function" ? use(_ref$3, _el$8) : fileUploadRef = _el$8;
        _el$8.style.setProperty("display", "none");
        createRenderEffect(() => setAttribute(_el$8, "accept", getFileType()));
        return _el$8;
      })()] : null;
    })(), null);
    insert(_el$3, createComponent(ShortTextInput, {
      ref(r$) {
        const _ref$ = inputRef;
        typeof _ref$ === "function" ? _ref$(r$) : inputRef = r$;
      },
      onInput: handleInput,
      get value() {
        return props.inputValue;
      },
      get fontSize() {
        return props.fontSize;
      },
      get disabled() {
        return props.disabled;
      },
      get placeholder() {
        return props.placeholder ?? 'Type your question';
      }
    }), null);
    insert(_el$3, (() => {
      const _c$3 = createMemo(() => !!props.uploadsConfig?.isSpeechToTextEnabled);
      return () => _c$3() ? createComponent(RecordAudioButton, {
        get buttonColor() {
          return props.sendButtonColor;
        },
        type: "button",
        "class": "m-0 start-recording-button h-14 flex items-center justify-center",
        get isDisabled() {
          return props.disabled || isSendButtonDisabled();
        },
        get ["on:click"]() {
          return props.onMicrophoneClicked;
        },
        get children() {
          const _el$9 = _tmpl$7$5();
          _el$9.style.setProperty("font-family", "Poppins, sans-serif");
          return _el$9;
        }
      }) : null;
    })(), null);
    insert(_el$3, createComponent(SendButton, {
      get sendButtonColor() {
        return props.sendButtonColor;
      },
      type: "button",
      get isDisabled() {
        return props.disabled || isSendButtonDisabled();
      },
      "class": "m-0 h-14 flex items-center justify-center",
      "on:click": submit,
      get children() {
        const _el$4 = _tmpl$2$h();
        _el$4.style.setProperty("font-family", "Poppins, sans-serif");
        return _el$4;
      }
    }), null);
    createRenderEffect(_p$ => {
      const _v$ = props.backgroundColor ?? defaultBackgroundColor$8,
        _v$2 = props.textColor ?? defaultTextColor$9;
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$.style.setProperty("background-color", _v$) : _el$.style.removeProperty("background-color"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$.style.setProperty("color", _v$2) : _el$.style.removeProperty("color"));
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined
    });
    return _el$;
  })();
};
delegateEvents(["keydown"]);

const _tmpl$$p = /*#__PURE__*/template(`<div class="relative inline-block"><div><span>`),
  _tmpl$2$g = /*#__PURE__*/template(`<button class="absolute top-0 left-0 right-0 bottom-0 bg-transparent hover:bg-transparent flex items-center justify-center" title="Remove attachment">`),
  _tmpl$3$b = /*#__PURE__*/template(`<div class="absolute inset-0 bg-[rgba(0,0,0,0.4)] flex items-center justify-center z-10 rounded-md"><div class="spinner border-4 border-gray-200 border-t-4 border-t-white rounded-full w-6 h-6 animate-spin">`);
const FilePreview = props => {
  const [isHovered, setIsHovered] = createSignal(false);
  const defaultBackgroundColor = 'transparent';
  const onMouseEnter = () => {
    if (props.disabled) return;
    setIsHovered(true);
  };
  const onMouseLeave = () => {
    if (props.disabled) return;
    setIsHovered(false);
  };
  return (() => {
    const _el$ = _tmpl$$p(),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.firstChild;
    _el$.addEventListener("mouseleave", onMouseLeave);
    _el$.addEventListener("mouseenter", onMouseEnter);
    insert(_el$2, createComponent(AttachmentIcon, {
      color: "#303235",
      get ["class"]() {
        return `transition-filter duration-300 ${isHovered() ? 'blur-[2px]' : 'blur-none'}`;
      }
    }), _el$3);
    insert(_el$3, () => props.item.name);
    insert(_el$, (() => {
      const _c$ = createMemo(() => !!(isHovered() && !props.disabled));
      return () => _c$() && (() => {
        const _el$4 = _tmpl$2$g();
        _el$4.$$click = () => props.onDelete(props.item);
        insert(_el$4, createComponent(TrashIcon, {
          color: "white"
        }));
        createRenderEffect(() => _el$4.disabled = props.disabled);
        return _el$4;
      })();
    })(), null);
    insert(_el$, (() => {
      const _c$2 = createMemo(() => !!props.disabled);
      return () => _c$2() && _tmpl$3$b();
    })(), null);
    createRenderEffect(_p$ => {
      const _v$ = `inline-flex items-center h-12 max-w-max p-2 flex-none transition-opacity duration-300 ${isHovered() ? 'opacity-100' : 'opacity-100'} ${isHovered() ? 'bg-[rgba(0,0,0,0.3)]' : `bg-[${defaultBackgroundColor}]`} border border-gray-300 rounded-md`,
        _v$2 = `ml-1.5 'text-inherit transition-filter duration-300 ${isHovered() ? 'blur-[2px]' : 'blur-none'}`;
      _v$ !== _p$._v$ && className(_el$2, _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && className(_el$3, _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined
    });
    return _el$;
  })();
};
delegateEvents(["click"]);

const _tmpl$$o = /*#__PURE__*/template(`<figure data-testid="default-avatar"><svg width="75" height="75" viewBox="0 0 75 75" fill="none" xmlns="http://www.w3.org/2000/svg"><mask id="mask0" x="0" y="0" mask-type="alpha"><circle cx="37.5" cy="37.5" r="37.5" fill="#0042DA"></circle></mask><g mask="url(#mask0)"><rect x="-30" y="-43" width="131" height="154" fill="#0042DA"></rect><rect x="2.50413" y="120.333" width="81.5597" height="86.4577" rx="2.5" transform="rotate(-52.6423 2.50413 120.333)" stroke="#FED23D" stroke-width="5"></rect><circle cx="76.5" cy="-1.5" r="29" stroke="#FF8E20" stroke-width="5"></circle><path d="M-49.8224 22L-15.5 -40.7879L18.8224 22H-49.8224Z" stroke="#F7F8FF" stroke-width="5">`);
const DefaultAvatar = () => {
  return (() => {
    const _el$ = _tmpl$$o(),
      _el$2 = _el$.firstChild;
    createRenderEffect(_p$ => {
      const _v$ = 'flex justify-center items-center rounded-full text-white relative flex-shrink-0 ' + (isMobile() ? 'w-6 h-6 text-sm' : 'w-10 h-10 text-xl'),
        _v$2 = 'absolute top-0 left-0 ' + (isMobile() ? ' w-6 h-6 text-sm' : 'w-full h-full text-xl');
      _v$ !== _p$._v$ && className(_el$, _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "class", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined
    });
    return _el$;
  })();
};

const _tmpl$$n = /*#__PURE__*/template(`<figure><img alt="Bot avatar" class="rounded-full object-cover w-full h-full">`);
const Avatar = props => {
  const [avatarSrc, setAvatarSrc] = createSignal(props.initialAvatarSrc);
  createEffect(() => {
    if (avatarSrc()?.startsWith('{{') && props.initialAvatarSrc?.startsWith('http')) setAvatarSrc(props.initialAvatarSrc);
  });
  return createComponent(Show, {
    get when() {
      return isNotEmpty(avatarSrc());
    },
    keyed: true,
    get fallback() {
      return createComponent(DefaultAvatar, {});
    },
    get children() {
      const _el$ = _tmpl$$n(),
        _el$2 = _el$.firstChild;
      createRenderEffect(_p$ => {
        const _v$ = 'flex justify-center items-center rounded-full text-white relative flex-shrink-0 ' + (isMobile() ? 'w-6 h-6 text-sm' : 'w-10 h-10 text-xl'),
          _v$2 = avatarSrc();
        _v$ !== _p$._v$ && className(_el$, _p$._v$ = _v$);
        _v$2 !== _p$._v$2 && setAttribute(_el$2, "src", _p$._v$2 = _v$2);
        return _p$;
      }, {
        _v$: undefined,
        _v$2: undefined
      });
      return _el$;
    }
  });
};

/*
 * @license
 *
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
class ExtendRegexp {
    source;
    flags;
    constructor(regex, flags = '') {
        this.source = regex.source;
        this.flags = flags;
    }
    /**
     * Extend regular expression.
     *
     * @param groupName Regular expression for search a group name.
     * @param groupRegexp Regular expression of named group.
     */
    setGroup(groupName, groupRegexp) {
        let newRegexp = typeof groupRegexp == 'string' ? groupRegexp : groupRegexp.source;
        newRegexp = newRegexp.replace(/(^|[^\[])\^/g, '$1');
        // Extend regexp.
        this.source = this.source.replace(groupName, newRegexp);
        return this;
    }
    /**
     * Returns a result of extending a regular expression.
     */
    getRegexp() {
        return new RegExp(this.source, this.flags);
    }
}

/**
 * @license
 *
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
const escapeTest = /[&<>"']/;
const escapeReplace = /[&<>"']/g;
const replacements = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    // tslint:disable-next-line:quotemark
    "'": '&#39;',
};
const escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
const escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
function escape(html, encode) {
    if (encode) {
        if (escapeTest.test(html)) {
            return html.replace(escapeReplace, (ch) => replacements[ch]);
        }
    }
    else {
        if (escapeTestNoEncode.test(html)) {
            return html.replace(escapeReplaceNoEncode, (ch) => replacements[ch]);
        }
    }
    return html;
}
function unescape(html) {
    // Explicitly match decimal, hex, and named HTML entities
    return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi, function (_, n) {
        n = n.toLowerCase();
        if (n === 'colon') {
            return ':';
        }
        if (n.charAt(0) === '#') {
            return n.charAt(1) === 'x'
                ? String.fromCharCode(parseInt(n.substring(2), 16))
                : String.fromCharCode(+n.substring(1));
        }
        return '';
    });
}

/**
 * @license
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
var TokenType;
(function (TokenType) {
    TokenType[TokenType["space"] = 1] = "space";
    TokenType[TokenType["text"] = 2] = "text";
    TokenType[TokenType["paragraph"] = 3] = "paragraph";
    TokenType[TokenType["heading"] = 4] = "heading";
    TokenType[TokenType["listStart"] = 5] = "listStart";
    TokenType[TokenType["listEnd"] = 6] = "listEnd";
    TokenType[TokenType["looseItemStart"] = 7] = "looseItemStart";
    TokenType[TokenType["looseItemEnd"] = 8] = "looseItemEnd";
    TokenType[TokenType["listItemStart"] = 9] = "listItemStart";
    TokenType[TokenType["listItemEnd"] = 10] = "listItemEnd";
    TokenType[TokenType["blockquoteStart"] = 11] = "blockquoteStart";
    TokenType[TokenType["blockquoteEnd"] = 12] = "blockquoteEnd";
    TokenType[TokenType["code"] = 13] = "code";
    TokenType[TokenType["table"] = 14] = "table";
    TokenType[TokenType["html"] = 15] = "html";
    TokenType[TokenType["hr"] = 16] = "hr";
})(TokenType || (TokenType = {}));
class MarkedOptions {
    gfm = true;
    tables = true;
    breaks = false;
    pedantic = false;
    sanitize = false;
    sanitizer;
    mangle = true;
    smartLists = false;
    silent = false;
    /**
     * @param code The section of code to pass to the highlighter.
     * @param lang The programming language specified in the code block.
     */
    highlight;
    langPrefix = 'lang-';
    smartypants = false;
    headerPrefix = '';
    /**
     * An object containing functions to render tokens to HTML. Default: `new Renderer()`
     */
    renderer;
    /**
     * Self-close the tags for void elements (&lt;br/&gt;, &lt;img/&gt;, etc.)
     * with a "/" as required by XHTML.
     */
    xhtml = false;
    /**
     * The function that will be using to escape HTML entities.
     * By default using inner helper.
     */
    escape = escape;
    /**
     * The function that will be using to unescape HTML entities.
     * By default using inner helper.
     */
    unescape = unescape;
    /**
     * If set to `true`, an inline text will not be taken in paragraph.
     *
     * ```ts
     * // isNoP == false
     * Marked.parse('some text'); // returns '<p>some text</p>'
     *
     * Marked.setOptions({isNoP: true});
     *
     * Marked.parse('some text'); // returns 'some text'
     * ```
     */
    isNoP;
}

/**
 * @license
 *
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
class Renderer {
    options;
    constructor(options) {
        this.options = options || Marked.options;
    }
    code(code, lang, escaped, meta) {
        if (this.options.highlight) {
            const out = this.options.highlight(code, lang);
            if (out != null && out !== code) {
                escaped = true;
                code = out;
            }
        }
        const escapedCode = (escaped ? code : this.options.escape(code, true));
        if (!lang) {
            return `\n<pre><code>${escapedCode}\n</code></pre>\n`;
        }
        const className = this.options.langPrefix + this.options.escape(lang, true);
        return `\n<pre><code class="${className}">${escapedCode}\n</code></pre>\n`;
    }
    blockquote(quote) {
        return `<blockquote>\n${quote}</blockquote>\n`;
    }
    html(html) {
        return html;
    }
    heading(text, level, raw) {
        const id = this.options.headerPrefix + raw.toLowerCase().replace(/[^\w]+/g, '-');
        return `<h${level} id="${id}">${text}</h${level}>\n`;
    }
    hr() {
        return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
    }
    list(body, ordered) {
        const type = ordered ? 'ol' : 'ul';
        return `\n<${type}>\n${body}</${type}>\n`;
    }
    listitem(text) {
        return '<li>' + text + '</li>\n';
    }
    paragraph(text) {
        return '<p>' + text + '</p>\n';
    }
    table(header, body) {
        return `
<table>
<thead>
${header}</thead>
<tbody>
${body}</tbody>
</table>
`;
    }
    tablerow(content) {
        return '<tr>\n' + content + '</tr>\n';
    }
    tablecell(content, flags) {
        const type = flags.header ? 'th' : 'td';
        const tag = flags.align ? '<' + type + ' style="text-align:' + flags.align + '">' : '<' + type + '>';
        return tag + content + '</' + type + '>\n';
    }
    // *** Inline level renderer methods. ***
    strong(text) {
        return '<strong>' + text + '</strong>';
    }
    em(text) {
        return '<em>' + text + '</em>';
    }
    codespan(text) {
        return '<code>' + text + '</code>';
    }
    br() {
        return this.options.xhtml ? '<br/>' : '<br>';
    }
    del(text) {
        return '<del>' + text + '</del>';
    }
    link(href, title, text) {
        if (this.options.sanitize) {
            let prot;
            try {
                prot = decodeURIComponent(this.options.unescape(href))
                    .replace(/[^\w:]/g, '')
                    .toLowerCase();
            }
            catch (e) {
                return text;
            }
            if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
                return text;
            }
        }
        let out = '<a href="' + href + '"';
        if (title) {
            out += ' title="' + title + '"';
        }
        out += '>' + text + '</a>';
        return out;
    }
    image(href, title, text) {
        let out = '<img src="' + href + '" alt="' + text + '"';
        if (title) {
            out += ' title="' + title + '"';
        }
        out += this.options.xhtml ? '/>' : '>';
        return out;
    }
    text(text) {
        return text;
    }
}

/**
 * @license
 *
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
/**
 * Inline Lexer & Compiler.
 */
class InlineLexer {
    staticThis;
    links;
    options;
    static rulesBase = null;
    /**
     * Pedantic Inline Grammar.
     */
    static rulesPedantic = null;
    /**
     * GFM Inline Grammar
     */
    static rulesGfm = null;
    /**
     * GFM + Line Breaks Inline Grammar.
     */
    static rulesBreaks = null;
    rules;
    renderer;
    inLink;
    hasRulesGfm;
    ruleCallbacks;
    constructor(staticThis, links, options = Marked.options, renderer) {
        this.staticThis = staticThis;
        this.links = links;
        this.options = options;
        this.renderer = renderer || this.options.renderer || new Renderer(this.options);
        if (!this.links) {
            throw new Error("InlineLexer requires 'links' parameter.");
        }
        this.setRules();
    }
    /**
     * Static Lexing/Compiling Method.
     */
    static output(src, links, options) {
        const inlineLexer = new this(this, links, options);
        return inlineLexer.output(src);
    }
    static getRulesBase() {
        if (this.rulesBase) {
            return this.rulesBase;
        }
        /**
         * Inline-Level Grammar.
         */
        const base = {
            escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
            autolink: /^<([^ <>]+(@|:\/)[^ <>]+)>/,
            tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^<'">])*?>/,
            link: /^!?\[(inside)\]\(href\)/,
            reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
            nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
            strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
            em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
            code: /^(`+)([\s\S]*?[^`])\1(?!`)/,
            br: /^ {2,}\n(?!\s*$)/,
            text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/,
            _inside: /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/,
            _href: /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,
        };
        base.link = new ExtendRegexp(base.link).setGroup('inside', base._inside).setGroup('href', base._href).getRegexp();
        base.reflink = new ExtendRegexp(base.reflink).setGroup('inside', base._inside).getRegexp();
        return (this.rulesBase = base);
    }
    static getRulesPedantic() {
        if (this.rulesPedantic) {
            return this.rulesPedantic;
        }
        return (this.rulesPedantic = {
            ...this.getRulesBase(),
            ...{
                strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
                em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,
            },
        });
    }
    static getRulesGfm() {
        if (this.rulesGfm) {
            return this.rulesGfm;
        }
        const base = this.getRulesBase();
        const escape = new ExtendRegexp(base.escape).setGroup('])', '~|])').getRegexp();
        const text = new ExtendRegexp(base.text).setGroup(']|', '~]|').setGroup('|', '|https?://|').getRegexp();
        return (this.rulesGfm = {
            ...base,
            ...{
                escape,
                url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
                del: /^~~(?=\S)([\s\S]*?\S)~~/,
                text,
            },
        });
    }
    static getRulesBreaks() {
        if (this.rulesBreaks) {
            return this.rulesBreaks;
        }
        const inline = this.getRulesGfm();
        const gfm = this.getRulesGfm();
        return (this.rulesBreaks = {
            ...gfm,
            ...{
                br: new ExtendRegexp(inline.br).setGroup('{2,}', '*').getRegexp(),
                text: new ExtendRegexp(gfm.text).setGroup('{2,}', '*').getRegexp(),
            },
        });
    }
    setRules() {
        if (this.options.gfm) {
            if (this.options.breaks) {
                this.rules = this.staticThis.getRulesBreaks();
            }
            else {
                this.rules = this.staticThis.getRulesGfm();
            }
        }
        else if (this.options.pedantic) {
            this.rules = this.staticThis.getRulesPedantic();
        }
        else {
            this.rules = this.staticThis.getRulesBase();
        }
        this.hasRulesGfm = this.rules.url !== undefined;
    }
    /**
     * Lexing/Compiling.
     */
    output(nextPart) {
        let execArr;
        let out = '';
        while (nextPart) {
            // escape
            if ((execArr = this.rules.escape.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                out += execArr[1];
                continue;
            }
            // autolink
            if ((execArr = this.rules.autolink.exec(nextPart))) {
                let text;
                let href;
                nextPart = nextPart.substring(execArr[0].length);
                if (execArr[2] === '@') {
                    text = this.options.escape(execArr[1].charAt(6) === ':' ? this.mangle(execArr[1].substring(7)) : this.mangle(execArr[1]));
                    href = this.mangle('mailto:') + text;
                }
                else {
                    text = this.options.escape(execArr[1]);
                    href = text;
                }
                out += this.renderer.link(href, null, text);
                continue;
            }
            // url (gfm)
            if (!this.inLink && this.hasRulesGfm && (execArr = this.rules.url.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                const text = this.options.escape(execArr[1]);
                const href = text;
                out += this.renderer.link(href, null, text);
                continue;
            }
            // tag
            if ((execArr = this.rules.tag.exec(nextPart))) {
                if (!this.inLink && /^<a /i.test(execArr[0])) {
                    this.inLink = true;
                }
                else if (this.inLink && /^<\/a>/i.test(execArr[0])) {
                    this.inLink = false;
                }
                nextPart = nextPart.substring(execArr[0].length);
                out += this.options.sanitize
                    ? this.options.sanitizer
                        ? this.options.sanitizer(execArr[0])
                        : this.options.escape(execArr[0])
                    : execArr[0];
                continue;
            }
            // link
            if ((execArr = this.rules.link.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.inLink = true;
                out += this.outputLink(execArr, {
                    href: execArr[2],
                    title: execArr[3],
                });
                this.inLink = false;
                continue;
            }
            // reflink, nolink
            if ((execArr = this.rules.reflink.exec(nextPart)) || (execArr = this.rules.nolink.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                const keyLink = (execArr[2] || execArr[1]).replace(/\s+/g, ' ');
                const link = this.links[keyLink.toLowerCase()];
                if (!link || !link.href) {
                    out += execArr[0].charAt(0);
                    nextPart = execArr[0].substring(1) + nextPart;
                    continue;
                }
                this.inLink = true;
                out += this.outputLink(execArr, link);
                this.inLink = false;
                continue;
            }
            // strong
            if ((execArr = this.rules.strong.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                out += this.renderer.strong(this.output(execArr[2] || execArr[1]));
                continue;
            }
            // em
            if ((execArr = this.rules.em.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                out += this.renderer.em(this.output(execArr[2] || execArr[1]));
                continue;
            }
            // code
            if ((execArr = this.rules.code.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                out += this.renderer.codespan(this.options.escape(execArr[2].trim(), true));
                continue;
            }
            // br
            if ((execArr = this.rules.br.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                out += this.renderer.br();
                continue;
            }
            // del (gfm)
            if (this.hasRulesGfm && (execArr = this.rules.del.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                out += this.renderer.del(this.output(execArr[1]));
                continue;
            }
            // text
            if ((execArr = this.rules.text.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                out += this.renderer.text(this.options.escape(this.smartypants(execArr[0])));
                continue;
            }
            if (nextPart) {
                throw new Error('Infinite loop on byte: ' + nextPart.charCodeAt(0));
            }
        }
        return out;
    }
    /**
     * Compile Link.
     */
    outputLink(execArr, link) {
        const href = this.options.escape(link.href);
        const title = link.title ? this.options.escape(link.title) : null;
        return execArr[0].charAt(0) !== '!'
            ? this.renderer.link(href, title, this.output(execArr[1]))
            : this.renderer.image(href, title, this.options.escape(execArr[1]));
    }
    /**
     * Smartypants Transformations.
     */
    smartypants(text) {
        if (!this.options.smartypants) {
            return text;
        }
        return (text
            // em-dashes
            .replace(/---/g, '\u2014')
            // en-dashes
            .replace(/--/g, '\u2013')
            // opening singles
            .replace(/(^|[-\u2014/([{"\s])'/g, '$1\u2018')
            // closing singles & apostrophes
            .replace(/'/g, '\u2019')
            // opening doubles
            .replace(/(^|[-\u2014/([{\u2018\s])"/g, '$1\u201c')
            // closing doubles
            .replace(/"/g, '\u201d')
            // ellipses
            .replace(/\.{3}/g, '\u2026'));
    }
    /**
     * Mangle Links.
     */
    mangle(text) {
        if (!this.options.mangle) {
            return text;
        }
        let out = '';
        const length = text.length;
        for (let i = 0; i < length; i++) {
            let str;
            if (Math.random() > 0.5) {
                str = 'x' + text.charCodeAt(i).toString(16);
            }
            out += '&#' + str + ';';
        }
        return out;
    }
}

/**
 * @license
 *
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
/**
 * Parsing & Compiling.
 */
class Parser {
    simpleRenderers = [];
    tokens;
    token;
    inlineLexer;
    options;
    renderer;
    line = 0;
    constructor(options) {
        this.tokens = [];
        this.token = null;
        this.options = options || Marked.options;
        this.renderer = this.options.renderer || new Renderer(this.options);
    }
    static parse(tokens, links, options) {
        const parser = new this(options);
        return parser.parse(links, tokens);
    }
    parse(links, tokens) {
        this.inlineLexer = new InlineLexer(InlineLexer, links, this.options, this.renderer);
        this.tokens = tokens.reverse();
        let out = '';
        while (this.next()) {
            out += this.tok();
        }
        return out;
    }
    debug(links, tokens) {
        this.inlineLexer = new InlineLexer(InlineLexer, links, this.options, this.renderer);
        this.tokens = tokens.reverse();
        let out = '';
        while (this.next()) {
            const outToken = this.tok();
            this.token.line = this.line += outToken.split('\n').length - 1;
            out += outToken;
        }
        return out;
    }
    next() {
        return (this.token = this.tokens.pop());
    }
    getNextElement() {
        return this.tokens[this.tokens.length - 1];
    }
    parseText() {
        let body = this.token.text;
        let nextElement;
        while ((nextElement = this.getNextElement()) && nextElement.type == TokenType.text) {
            body += '\n' + this.next().text;
        }
        return this.inlineLexer.output(body);
    }
    tok() {
        switch (this.token.type) {
            case TokenType.space: {
                return '';
            }
            case TokenType.paragraph: {
                return this.renderer.paragraph(this.inlineLexer.output(this.token.text));
            }
            case TokenType.text: {
                if (this.options.isNoP) {
                    return this.parseText();
                }
                else {
                    return this.renderer.paragraph(this.parseText());
                }
            }
            case TokenType.heading: {
                return this.renderer.heading(this.inlineLexer.output(this.token.text), this.token.depth, this.token.text);
            }
            case TokenType.listStart: {
                let body = '';
                const ordered = this.token.ordered;
                while (this.next().type != TokenType.listEnd) {
                    body += this.tok();
                }
                return this.renderer.list(body, ordered);
            }
            case TokenType.listItemStart: {
                let body = '';
                while (this.next().type != TokenType.listItemEnd) {
                    body += this.token.type == TokenType.text ? this.parseText() : this.tok();
                }
                return this.renderer.listitem(body);
            }
            case TokenType.looseItemStart: {
                let body = '';
                while (this.next().type != TokenType.listItemEnd) {
                    body += this.tok();
                }
                return this.renderer.listitem(body);
            }
            case TokenType.code: {
                return this.renderer.code(this.token.text, this.token.lang, this.token.escaped, this.token.meta);
            }
            case TokenType.table: {
                let header = '';
                let body = '';
                let cell;
                // header
                cell = '';
                for (let i = 0; i < this.token.header.length; i++) {
                    const flags = { header: true, align: this.token.align[i] };
                    const out = this.inlineLexer.output(this.token.header[i]);
                    cell += this.renderer.tablecell(out, flags);
                }
                header += this.renderer.tablerow(cell);
                for (const row of this.token.cells) {
                    cell = '';
                    for (let j = 0; j < row.length; j++) {
                        cell += this.renderer.tablecell(this.inlineLexer.output(row[j]), {
                            header: false,
                            align: this.token.align[j]
                        });
                    }
                    body += this.renderer.tablerow(cell);
                }
                return this.renderer.table(header, body);
            }
            case TokenType.blockquoteStart: {
                let body = '';
                while (this.next().type != TokenType.blockquoteEnd) {
                    body += this.tok();
                }
                return this.renderer.blockquote(body);
            }
            case TokenType.hr: {
                return this.renderer.hr();
            }
            case TokenType.html: {
                const html = !this.token.pre && !this.options.pedantic ? this.inlineLexer.output(this.token.text) : this.token.text;
                return this.renderer.html(html);
            }
            default: {
                if (this.simpleRenderers.length) {
                    for (let i = 0; i < this.simpleRenderers.length; i++) {
                        if (this.token.type == 'simpleRule' + (i + 1)) {
                            return this.simpleRenderers[i].call(this.renderer, this.token.execArr);
                        }
                    }
                }
                const errMsg = `Token with "${this.token.type}" type was not found.`;
                if (this.options.silent) {
                    console.log(errMsg);
                }
                else {
                    throw new Error(errMsg);
                }
            }
        }
    }
}

/**
 * @license
 *
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
class Marked {
    static options = new MarkedOptions();
    static simpleRenderers = [];
    /**
     * Merges the default options with options that will be set.
     *
     * @param options Hash of options.
     */
    static setOptions(options) {
        Object.assign(this.options, options);
        return this;
    }
    /**
     * Setting simple block rule.
     */
    static setBlockRule(regexp, renderer = () => '') {
        BlockLexer.simpleRules.push(regexp);
        this.simpleRenderers.push(renderer);
        return this;
    }
    /**
     * Accepts Markdown text and returns text in HTML format.
     *
     * @param src String of markdown source to be compiled.
     * @param options Hash of options. They replace, but do not merge with the default options.
     * If you want the merging, you can to do this via `Marked.setOptions()`.
     */
    static parse(src, options) {
        try {
            options = { ...this.options, ...options };
            const { tokens, links } = this.callBlockLexer(src, options);
            return this.callParser(tokens, links, options);
        }
        catch (e) {
            return this.callMe(e);
        }
    }
    /**
     * Accepts Markdown text and returns object with text in HTML format,
     * tokens and links from `BlockLexer.parser()`.
     *
     * @param src String of markdown source to be compiled.
     * @param options Hash of options. They replace, but do not merge with the default options.
     * If you want the merging, you can to do this via `Marked.setOptions()`.
     */
    static debug(src, options = this.options) {
        const { tokens, links } = this.callBlockLexer(src, options);
        let origin = tokens.slice();
        const parser = new Parser(options);
        parser.simpleRenderers = this.simpleRenderers;
        const result = parser.debug(links, tokens);
        /**
         * Translates a token type into a readable form,
         * and moves `line` field to a first place in a token object.
         */
        origin = origin.map((token) => {
            token.type = TokenType[token.type] || token.type;
            const line = token.line;
            delete token.line;
            if (line) {
                return { ...{ line }, ...token };
            }
            else {
                return token;
            }
        });
        return { tokens: origin, links, result };
    }
    static callBlockLexer(src = '', options) {
        if (typeof src != 'string') {
            throw new Error(`Expected that the 'src' parameter would have a 'string' type, got '${typeof src}'`);
        }
        // Preprocessing.
        src = src
            .replace(/\r\n|\r/g, '\n')
            .replace(/\t/g, '    ')
            .replace(/\u00a0/g, ' ')
            .replace(/\u2424/g, '\n')
            .replace(/^ +$/gm, '');
        return BlockLexer.lex(src, options, true);
    }
    static callParser(tokens, links, options) {
        if (this.simpleRenderers.length) {
            const parser = new Parser(options);
            parser.simpleRenderers = this.simpleRenderers;
            return parser.parse(links, tokens);
        }
        else {
            return Parser.parse(tokens, links, options);
        }
    }
    static callMe(err) {
        err.message += '\nPlease report this to https://github.com/ts-stack/markdown';
        if (this.options.silent) {
            return '<p>An error occured:</p><pre>' + this.options.escape(err.message + '', true) + '</pre>';
        }
        throw err;
    }
}

/**
 * @license
 *
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
class BlockLexer {
    staticThis;
    static simpleRules = [];
    static rulesBase = null;
    /**
     * GFM Block Grammar.
     */
    static rulesGfm = null;
    /**
     * GFM + Tables Block Grammar.
     */
    static rulesTables = null;
    rules;
    options;
    links = {};
    tokens = [];
    hasRulesGfm;
    hasRulesTables;
    constructor(staticThis, options) {
        this.staticThis = staticThis;
        this.options = options || Marked.options;
        this.setRules();
    }
    /**
     * Accepts Markdown text and returns object with tokens and links.
     *
     * @param src String of markdown source to be compiled.
     * @param options Hash of options.
     */
    static lex(src, options, top, isBlockQuote) {
        const lexer = new this(this, options);
        return lexer.getTokens(src, top, isBlockQuote);
    }
    static getRulesBase() {
        if (this.rulesBase) {
            return this.rulesBase;
        }
        const base = {
            newline: /^\n+/,
            code: /^( {4}[^\n]+\n*)+/,
            hr: /^( *[-*_]){3,} *(?:\n+|$)/,
            heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
            lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
            blockquote: /^( *>[^\n]+(\n[^\n]+)*\n*)+/,
            list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
            html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
            def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
            paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
            text: /^[^\n]+/,
            bullet: /(?:[*+-]|\d+\.)/,
            item: /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,
        };
        base.item = new ExtendRegexp(base.item, 'gm').setGroup(/bull/g, base.bullet).getRegexp();
        base.list = new ExtendRegexp(base.list)
            .setGroup(/bull/g, base.bullet)
            .setGroup('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
            .setGroup('def', '\\n+(?=' + base.def.source + ')')
            .getRegexp();
        const tag = '(?!(?:' +
            'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code' +
            '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo' +
            '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';
        base.html = new ExtendRegexp(base.html)
            .setGroup('comment', /<!--[\s\S]*?-->/)
            .setGroup('closed', /<(tag)[\s\S]+?<\/\1>/)
            .setGroup('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
            .setGroup(/tag/g, tag)
            .getRegexp();
        base.paragraph = new ExtendRegexp(base.paragraph)
            .setGroup('hr', base.hr)
            .setGroup('heading', base.heading)
            .setGroup('lheading', base.lheading)
            .setGroup('blockquote', base.blockquote)
            .setGroup('tag', '<' + tag)
            .setGroup('def', base.def)
            .getRegexp();
        return (this.rulesBase = base);
    }
    static getRulesGfm() {
        if (this.rulesGfm) {
            return this.rulesGfm;
        }
        const base = this.getRulesBase();
        const gfm = {
            ...base,
            ...{
                fences: /^ *(`{3,}|~{3,})[ \.]*((\S+)? *[^\n]*)\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
                paragraph: /^/,
                heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/,
            },
        };
        const group1 = gfm.fences.source.replace('\\1', '\\2');
        const group2 = base.list.source.replace('\\1', '\\3');
        gfm.paragraph = new ExtendRegexp(base.paragraph).setGroup('(?!', `(?!${group1}|${group2}|`).getRegexp();
        return (this.rulesGfm = gfm);
    }
    static getRulesTable() {
        if (this.rulesTables) {
            return this.rulesTables;
        }
        return (this.rulesTables = {
            ...this.getRulesGfm(),
            ...{
                nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
                table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/,
            },
        });
    }
    setRules() {
        if (this.options.gfm) {
            if (this.options.tables) {
                this.rules = this.staticThis.getRulesTable();
            }
            else {
                this.rules = this.staticThis.getRulesGfm();
            }
        }
        else {
            this.rules = this.staticThis.getRulesBase();
        }
        this.hasRulesGfm = this.rules.fences !== undefined;
        this.hasRulesTables = this.rules.table !== undefined;
    }
    /**
     * Lexing.
     */
    getTokens(src, top, isBlockQuote) {
        let nextPart = src;
        let execArr;
        mainLoop: while (nextPart) {
            // newline
            if ((execArr = this.rules.newline.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                if (execArr[0].length > 1) {
                    this.tokens.push({ type: TokenType.space });
                }
            }
            // code
            if ((execArr = this.rules.code.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                const code = execArr[0].replace(/^ {4}/gm, '');
                this.tokens.push({
                    type: TokenType.code,
                    text: !this.options.pedantic ? code.replace(/\n+$/, '') : code,
                });
                continue;
            }
            // fences code (gfm)
            if (this.hasRulesGfm && (execArr = this.rules.fences.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.tokens.push({
                    type: TokenType.code,
                    meta: execArr[2],
                    lang: execArr[3],
                    text: execArr[4] || '',
                });
                continue;
            }
            // heading
            if ((execArr = this.rules.heading.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.tokens.push({
                    type: TokenType.heading,
                    depth: execArr[1].length,
                    text: execArr[2],
                });
                continue;
            }
            // table no leading pipe (gfm)
            if (top && this.hasRulesTables && (execArr = this.rules.nptable.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                const item = {
                    type: TokenType.table,
                    header: execArr[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
                    align: execArr[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
                    cells: [],
                };
                for (let i = 0; i < item.align.length; i++) {
                    if (/^ *-+: *$/.test(item.align[i])) {
                        item.align[i] = 'right';
                    }
                    else if (/^ *:-+: *$/.test(item.align[i])) {
                        item.align[i] = 'center';
                    }
                    else if (/^ *:-+ *$/.test(item.align[i])) {
                        item.align[i] = 'left';
                    }
                    else {
                        item.align[i] = null;
                    }
                }
                const td = execArr[3].replace(/\n$/, '').split('\n');
                for (let i = 0; i < td.length; i++) {
                    item.cells[i] = td[i].split(/ *\| */);
                }
                this.tokens.push(item);
                continue;
            }
            // lheading
            if ((execArr = this.rules.lheading.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.tokens.push({
                    type: TokenType.heading,
                    depth: execArr[2] === '=' ? 1 : 2,
                    text: execArr[1],
                });
                continue;
            }
            // hr
            if ((execArr = this.rules.hr.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.tokens.push({ type: TokenType.hr });
                continue;
            }
            // blockquote
            if ((execArr = this.rules.blockquote.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.tokens.push({ type: TokenType.blockquoteStart });
                const str = execArr[0].replace(/^ *> ?/gm, '');
                // Pass `top` to keep the current
                // "toplevel" state. This is exactly
                // how markdown.pl works.
                this.getTokens(str);
                this.tokens.push({ type: TokenType.blockquoteEnd });
                continue;
            }
            // list
            if ((execArr = this.rules.list.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                const bull = execArr[2];
                this.tokens.push({ type: TokenType.listStart, ordered: bull.length > 1 });
                // Get each top-level item.
                const str = execArr[0].match(this.rules.item);
                const length = str.length;
                let next = false;
                let space;
                let blockBullet;
                let loose;
                for (let i = 0; i < length; i++) {
                    let item = str[i];
                    // Remove the list item's bullet so it is seen as the next token.
                    space = item.length;
                    item = item.replace(/^ *([*+-]|\d+\.) +/, '');
                    // Outdent whatever the list item contains. Hacky.
                    if (item.indexOf('\n ') !== -1) {
                        space -= item.length;
                        item = !this.options.pedantic
                            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
                            : item.replace(/^ {1,4}/gm, '');
                    }
                    // Determine whether the next list item belongs here.
                    // Backpedal if it does not belong in this list.
                    if (this.options.smartLists && i !== length - 1) {
                        blockBullet = this.staticThis.getRulesBase().bullet.exec(str[i + 1])[0];
                        if (bull !== blockBullet && !(bull.length > 1 && blockBullet.length > 1)) {
                            nextPart = str.slice(i + 1).join('\n') + nextPart;
                            i = length - 1;
                        }
                    }
                    // Determine whether item is loose or not.
                    // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
                    // for discount behavior.
                    loose = next || /\n\n(?!\s*$)/.test(item);
                    if (i !== length - 1) {
                        next = item.charAt(item.length - 1) === '\n';
                        if (!loose) {
                            loose = next;
                        }
                    }
                    this.tokens.push({ type: loose ? TokenType.looseItemStart : TokenType.listItemStart });
                    // Recurse.
                    this.getTokens(item, false, isBlockQuote);
                    this.tokens.push({ type: TokenType.listItemEnd });
                }
                this.tokens.push({ type: TokenType.listEnd });
                continue;
            }
            // html
            if ((execArr = this.rules.html.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                const attr = execArr[1];
                const isPre = attr === 'pre' || attr === 'script' || attr === 'style';
                this.tokens.push({
                    type: this.options.sanitize ? TokenType.paragraph : TokenType.html,
                    pre: !this.options.sanitizer && isPre,
                    text: execArr[0],
                });
                continue;
            }
            // def
            if (top && (execArr = this.rules.def.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.links[execArr[1].toLowerCase()] = {
                    href: execArr[2],
                    title: execArr[3],
                };
                continue;
            }
            // table (gfm)
            if (top && this.hasRulesTables && (execArr = this.rules.table.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                const item = {
                    type: TokenType.table,
                    header: execArr[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
                    align: execArr[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
                    cells: [],
                };
                for (let i = 0; i < item.align.length; i++) {
                    if (/^ *-+: *$/.test(item.align[i])) {
                        item.align[i] = 'right';
                    }
                    else if (/^ *:-+: *$/.test(item.align[i])) {
                        item.align[i] = 'center';
                    }
                    else if (/^ *:-+ *$/.test(item.align[i])) {
                        item.align[i] = 'left';
                    }
                    else {
                        item.align[i] = null;
                    }
                }
                const td = execArr[3].replace(/(?: *\| *)?\n$/, '').split('\n');
                for (let i = 0; i < td.length; i++) {
                    item.cells[i] = td[i].replace(/^ *\| *| *\| *$/g, '').split(/ *\| */);
                }
                this.tokens.push(item);
                continue;
            }
            // simple rules
            if (this.staticThis.simpleRules.length) {
                const simpleRules = this.staticThis.simpleRules;
                for (let i = 0; i < simpleRules.length; i++) {
                    if ((execArr = simpleRules[i].exec(nextPart))) {
                        nextPart = nextPart.substring(execArr[0].length);
                        const type = 'simpleRule' + (i + 1);
                        this.tokens.push({ type, execArr });
                        continue mainLoop;
                    }
                }
            }
            // top-level paragraph
            if (top && (execArr = this.rules.paragraph.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                if (execArr[1].slice(-1) === '\n') {
                    this.tokens.push({
                        type: TokenType.paragraph,
                        text: execArr[1].slice(0, -1),
                    });
                }
                else {
                    this.tokens.push({
                        type: this.tokens.length > 0 ? TokenType.paragraph : TokenType.text,
                        text: execArr[1],
                    });
                }
                continue;
            }
            // text
            // Top-level should never reach here.
            if ((execArr = this.rules.text.exec(nextPart))) {
                nextPart = nextPart.substring(execArr[0].length);
                this.tokens.push({ type: TokenType.text, text: execArr[0] });
                continue;
            }
            if (nextPart) {
                throw new Error('Infinite loop on byte: ' + nextPart.charCodeAt(0) + `, near text '${nextPart.slice(0, 30)}...'`);
            }
        }
        return { tokens: this.tokens, links: this.links };
    }
}

const _tmpl$$m = /*#__PURE__*/template(`<div class="flex items-center justify-center max-w-[128px] mr-[10px] p-0 m-0"><img class="w-full h-full bg-cover">`),
  _tmpl$2$f = /*#__PURE__*/template(`<audio class="w-[200px] h-10 block bg-cover bg-center rounded-none text-transparent" controls>Your browser does not support the &lt;audio&gt; tag.<source>`),
  _tmpl$3$a = /*#__PURE__*/template(`<div class="inline-flex items-center h-12 max-w-max p-2 mr-1 flex-none bg-transparent border border-gray-300 rounded-md"><span class="ml-1.5 text-inherit">`),
  _tmpl$4$8 = /*#__PURE__*/template(`<div class="flex justify-end mb-2 items-end guest-container"><div class="max-w-full flex flex-col justify-center items-start chatbot-guest-bubble px-4 py-2 gap-2 mr-2" data-testid="guest-bubble">`),
  _tmpl$5$7 = /*#__PURE__*/template(`<div class="flex flex-col items-start flex-wrap w-full gap-2">`),
  _tmpl$6$5 = /*#__PURE__*/template(`<span class="mr-2 whitespace-pre-wrap">`);
const defaultBackgroundColor$7 = '#3B81F6';
const defaultTextColor$8 = '#ffffff';
const defaultFontSize$4 = 16;
const GuestBubble = props => {
  Marked.setOptions({
    isNoP: true,
    sanitize: props.renderHTML !== undefined ? !props.renderHTML : true
  });
  // Callback ref to set innerHTML and apply text color to all Markdown elements
  const setUserMessageRef = el => {
    if (el) {
      el.innerHTML = Marked.parse(props.message.message);
      // Apply textColor to all links, headings, and other markdown elements
      const textColor = props.textColor ?? defaultTextColor$8;
      el.querySelectorAll('a, h1, h2, h3, h4, h5, h6, strong, em, blockquote, li').forEach(element => {
        element.style.color = textColor;
      });
      // Code blocks (with pre) get white text
      el.querySelectorAll('pre').forEach(element => {
        element.style.color = '#FFFFFF';
        // Also ensure any code elements inside pre have white text
        element.querySelectorAll('code').forEach(codeElement => {
          codeElement.style.color = '#FFFFFF';
        });
      });
      // Inline code (not in pre) gets green text
      el.querySelectorAll('code:not(pre code)').forEach(element => {
        element.style.color = '#4CAF50'; // Green color
      });
      // Set target="_blank" for links
      el.querySelectorAll('a').forEach(link => {
        link.target = '_blank';
      });
    }
  };
  const renderFileUploads = item => {
    if (item?.mime?.startsWith('image/')) {
      const fileData = `${props.apiHost}/api/v1/get-upload-file?chatflowId=${props.chatflowid}&chatId=${props.chatId}&fileName=${item.name}`;
      const src = item.data ?? fileData;
      return (() => {
        const _el$ = _tmpl$$m(),
          _el$2 = _el$.firstChild;
        setAttribute(_el$2, "src", src);
        return _el$;
      })();
    } else if (item?.mime?.startsWith('audio/')) {
      const fileData = `${props.apiHost}/api/v1/get-upload-file?chatflowId=${props.chatflowid}&chatId=${props.chatId}&fileName=${item.name}`;
      const src = item.data ?? fileData;
      return (() => {
        const _el$3 = _tmpl$2$f(),
          _el$4 = _el$3.firstChild,
          _el$5 = _el$4.nextSibling;
        setAttribute(_el$5, "src", src);
        createRenderEffect(() => setAttribute(_el$5, "type", item.mime));
        return _el$3;
      })();
    } else {
      return (() => {
        const _el$6 = _tmpl$3$a(),
          _el$7 = _el$6.firstChild;
        insert(_el$6, createComponent(AttachmentIcon, {
          get color() {
            return props.textColor ?? defaultTextColor$8;
          }
        }), _el$7);
        insert(_el$7, () => item.name);
        return _el$6;
      })();
    }
  };
  return (() => {
    const _el$8 = _tmpl$4$8(),
      _el$9 = _el$8.firstChild;
    _el$8.style.setProperty("margin-left", "50px");
    _el$9.style.setProperty("border-radius", "6px");
    insert(_el$9, (() => {
      const _c$ = createMemo(() => !!(props.message.fileUploads && props.message.fileUploads.length > 0));
      return () => _c$() && (() => {
        const _el$10 = _tmpl$5$7();
        insert(_el$10, createComponent(For, {
          get each() {
            return props.message.fileUploads;
          },
          children: item => {
            return renderFileUploads(item);
          }
        }));
        return _el$10;
      })();
    })(), null);
    insert(_el$9, (() => {
      const _c$2 = createMemo(() => !!props.message.message);
      return () => _c$2() && (() => {
        const _el$11 = _tmpl$6$5();
        use(setUserMessageRef, _el$11);
        createRenderEffect(() => (props.fontSize ? `${props.fontSize}px` : `${defaultFontSize$4}px`) != null ? _el$11.style.setProperty("font-size", props.fontSize ? `${props.fontSize}px` : `${defaultFontSize$4}px`) : _el$11.style.removeProperty("font-size"));
        return _el$11;
      })();
    })(), null);
    insert(_el$8, createComponent(Show, {
      get when() {
        return props.showAvatar;
      },
      get children() {
        return createComponent(Avatar, {
          get initialAvatarSrc() {
            return props.avatarSrc;
          }
        });
      }
    }), null);
    createRenderEffect(_p$ => {
      const _v$ = props.backgroundColor ?? defaultBackgroundColor$7,
        _v$2 = props.textColor ?? defaultTextColor$8;
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$9.style.setProperty("background-color", _v$) : _el$9.style.removeProperty("background-color"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$9.style.setProperty("color", _v$2) : _el$9.style.removeProperty("color"));
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined
    });
    return _el$8;
  })();
};

const _tmpl$$l = /*#__PURE__*/template(`<button>`),
  _tmpl$2$e = /*#__PURE__*/template(`<button type="submit">`);
const defaultFeedbackColor$1 = '#3B81F6';
const CopyToClipboardButton = props => {
  return (() => {
    const _el$ = _tmpl$$l();
    spread(_el$, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'p-2 justify-center font-semibold text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      },
      "title": "Copy to clipboard"
    }), false, true);
    insert(_el$, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner$3, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(ClipboardIcon, {
          get color() {
            return props.feedbackColor ?? defaultFeedbackColor$1;
          },
          get ["class"]() {
            return 'send-icon flex ' + (props.disableIcon ? 'hidden' : '');
          }
        });
      }
    }));
    return _el$;
  })();
};
const ThumbsUpButton = props => {
  return (() => {
    const _el$2 = _tmpl$2$e();
    spread(_el$2, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'p-2 justify-center font-semibold text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      },
      "title": "Thumbs Up"
    }), false, true);
    insert(_el$2, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner$3, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(ThumbsUpIcon, {
          get color() {
            return props.feedbackColor ?? defaultFeedbackColor$1;
          },
          get ["class"]() {
            return 'send-icon flex ' + (props.disableIcon ? 'hidden' : '');
          }
        });
      }
    }));
    return _el$2;
  })();
};
const ThumbsDownButton = props => {
  return (() => {
    const _el$3 = _tmpl$2$e();
    spread(_el$3, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'p-2 justify-center font-semibold text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      },
      "title": "Thumbs Down"
    }), false, true);
    insert(_el$3, createComponent(Show, {
      get when() {
        return !props.isLoading;
      },
      get fallback() {
        return createComponent(Spinner$3, {
          "class": "text-white"
        });
      },
      get children() {
        return createComponent(ThumbsDownIcon, {
          get color() {
            return props.feedbackColor ?? defaultFeedbackColor$1;
          },
          get ["class"]() {
            return 'send-icon flex ' + (props.disableIcon ? 'hidden' : '');
          }
        });
      }
    }));
    return _el$3;
  })();
};

const _tmpl$$k = /*#__PURE__*/template(`<div class="flex overflow-x-hidden overflow-y-auto fixed inset-0 z-[1002] outline-none focus:outline-none justify-center items-center"><div class="relative w-full my-6 max-w-3xl mx-4"><div class="border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none"><div class="flex items-center justify-between p-5 border-b border-solid border-blueGray-200 rounded-t"><span class="whitespace-pre-wrap font-semibold max-w-full">Provide additional feedback</span><button class="p-1 ml-auto bg-transparent border-0 text-black float-right text-xl leading-none font-semibold outline-none focus:outline-none" type="button"><span class="bg-transparent block outline-none focus:outline-none"><svg xmlns="http://www.w3.org/2000/svg" class="text-black h-6 w-6" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg></span></button></div><div class="relative p-6 flex-auto"><textarea rows="4" class="block p-2.5 rounded-lg border focus:ring-blue-500 focus:border-blue-500 bg-transparent flex-1 w-full feedback-input disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 font-normal" placeholder="What do you think of the response?"></textarea></div><div class="flex items-center justify-end p-4 border-t border-solid border-blueGray-200 rounded-b"><button class="bg-emerald-500 text-white active:bg-emerald-600 font-bold text-sm px-4 py-2 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button">Submit Feedback`),
  _tmpl$2$d = /*#__PURE__*/template(`<div class="flex opacity-25 fixed inset-0 z-[1001] bg-black">`);
const defaultBackgroundColor$6 = '#ffffff';
const defaultTextColor$7 = '#303235';
const FeedbackContentDialog = props => {
  const [inputValue, setInputValue] = createSignal('');
  let inputRef;
  const handleInput = value => setInputValue(value);
  const checkIfInputIsValid = () => inputValue() !== '' && inputRef?.reportValidity();
  const submit = () => {
    if (checkIfInputIsValid()) props.onSubmit(inputValue());
    setInputValue('');
  };
  const onClose = () => {
    props.onClose();
  };
  return [(() => {
    const _el$ = _tmpl$$k(),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.firstChild,
      _el$4 = _el$3.firstChild,
      _el$5 = _el$4.firstChild,
      _el$6 = _el$5.nextSibling,
      _el$7 = _el$4.nextSibling,
      _el$8 = _el$7.firstChild,
      _el$9 = _el$7.nextSibling,
      _el$10 = _el$9.firstChild;
    _el$4.style.setProperty("border", "1px solid #eeeeee");
    _el$6.$$click = onClose;
    const _ref$ = inputRef;
    typeof _ref$ === "function" ? use(_ref$, _el$8) : inputRef = _el$8;
    _el$8.$$input = e => handleInput(e.currentTarget.value);
    _el$8.style.setProperty("border", "1px solid #eeeeee");
    _el$10.$$click = submit;
    createRenderEffect(_p$ => {
      const _v$ = props.backgroundColor ?? defaultBackgroundColor$6,
        _v$2 = props.textColor ?? defaultTextColor$7,
        _v$3 = props.textColor ?? defaultTextColor$7;
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$3.style.setProperty("background-color", _v$) : _el$3.style.removeProperty("background-color"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$3.style.setProperty("color", _v$2) : _el$3.style.removeProperty("color"));
      _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$8.style.setProperty("color", _v$3) : _el$8.style.removeProperty("color"));
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined
    });
    createRenderEffect(() => _el$8.value = inputValue());
    return _el$;
  })(), _tmpl$2$d()];
};
delegateEvents(["click", "input"]);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var lodash = {exports: {}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash.exports;

(function (module, exports) {
(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined$1;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.21';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function',
	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading whitespace. */
	  var reTrimStart = /^\s+/;

	  /** Used to match a single whitespace character. */
	  var reWhitespace = /\s/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /**
	   * Used to validate the `validate` option in `_.template` variable.
	   *
	   * Forbids characters which could potentially change the meaning of the function argument definition:
	   * - "()," (modification of function parameters)
	   * - "=" (default value)
	   * - "[]{}" (destructuring of function parameters)
	   * - "/" (beginning of a comment)
	   * - whitespace
	   */
	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined$1) {
	        result = result === undefined$1 ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.trim`.
	   *
	   * @private
	   * @param {string} string The string to trim.
	   * @returns {string} Returns the trimmed string.
	   */
	  function baseTrim(string) {
	    return string
	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	      : string;
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined$1 : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedEndIndex(string) {
	    var index = string.length;

	    while (index-- && reWhitespace.test(string.charAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined$1,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
	        symIterator = Symbol ? Symbol.iterator : undefined$1,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined$1;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined$1;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined$1 : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined$1 : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined$1 && !eq(object[key], value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined$1 : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined$1) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined$1) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined$1) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });
	      } else if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined$1 : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined$1
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined$1;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined$1 ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined$1;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined$1 : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined$1 && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined$1
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined$1 && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        stack || (stack = new Stack);
	        if (isObject(srcValue)) {
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined$1;

	          if (newValue === undefined$1) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined$1;

	      var isCommon = newValue === undefined$1;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined$1;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      if (iteratees.length) {
	        iteratees = arrayMap(iteratees, function(iteratee) {
	          if (isArray(iteratee)) {
	            return function(value) {
	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
	            }
	          }
	          return iteratee;
	        });
	      } else {
	        iteratees = [identity];
	      }

	      var index = -1;
	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	          return object;
	        }

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
	          if (newValue === undefined$1) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      var low = 0,
	          high = array == null ? 0 : array.length;
	      if (high === 0) {
	        return 0;
	      }

	      value = iteratee(value);
	      var valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined$1;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined$1,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined$1;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined$1 ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined$1,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined$1,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined$1;

	        if (newValue === undefined$1) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined$1,
	            guard = length > 2 ? sources[2] : undefined$1;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined$1;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined$1 : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined$1;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
	            args, holders, undefined$1, undefined$1, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined$1 : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined$1 && other === undefined$1) {
	          return defaultValue;
	        }
	        if (value !== undefined$1) {
	          result = value;
	        }
	        if (other !== undefined$1) {
	          if (result === undefined$1) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined$1;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined$1,
	          newHoldersRight = isCurry ? undefined$1 : holders,
	          newPartials = isCurry ? partials : undefined$1,
	          newPartialsRight = isCurry ? undefined$1 : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined$1, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision && nativeIsFinite(number)) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined$1;
	      }
	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined$1 ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined$1;
	      }
	      var data = isBindKey ? undefined$1 : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined$1
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined$1, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined$1 ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined$1 : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Check that cyclic values are equal.
	      var arrStacked = stack.get(array);
	      var othStacked = stack.get(other);
	      if (arrStacked && othStacked) {
	        return arrStacked == other && othStacked == array;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined$1) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Check that cyclic values are equal.
	      var objStacked = stack.get(object);
	      var othStacked = stack.get(other);
	      if (objStacked && othStacked) {
	        return objStacked == other && othStacked == object;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined$1
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined$1, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined$1;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined$1;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined$1,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined$1 || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key === 'constructor' && typeof object[key] === 'function') {
	        return;
	      }

	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined$1, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined$1 ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined$1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined$1;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined$1;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined$1, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined$1 ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined$1, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined$1
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined$1);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined$1) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined$1 : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined$1;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined$1
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     *
	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	     * // => objects for ['fred', 'barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined$1 : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined$1 : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined$1;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined$1;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined$1;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined$1;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined$1) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
	      }

	      function flush() {
	        return timerId === undefined$1 ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined$1) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined$1) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined$1 ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      var result = customizer ? customizer(value, other) : undefined$1;
	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined$1;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = baseTrim(value);
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined$1;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined$1 ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined$1, customDefaultsMerge);
	      return apply(mergeWith, undefined$1, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined$1 : baseGet(object, path);
	      return result === undefined$1 ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined$1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined$1 : object[toKey(path[index])];
	        if (value === undefined$1) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined$1) {
	        upper = lower;
	        lower = undefined$1;
	      }
	      if (upper !== undefined$1) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined$1) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined$1) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined$1;
	      }
	      if (floating === undefined$1) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined$1;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined$1;
	        }
	      }
	      if (lower === undefined$1 && upper === undefined$1) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined$1) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined$1
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined$1;
	      }
	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined$1;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      // The sourceURL gets injected into the source that's eval-ed, so be careful
	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
	      // and escape the comment, thus injecting code that gets evaled.
	      var sourceURL = '//# sourceURL=' +
	        (hasOwnProperty.call(options, 'sourceURL')
	          ? (options.sourceURL + '').replace(/\s/g, ' ')
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Throw an error if a forbidden character was found in `variable`, to prevent
	      // potential command injection attacks.
	      else if (reForbiddenIdentifierChars.test(variable)) {
	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
	      }

	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined$1, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return baseTrim(string);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.slice(0, trimmedEndIndex(string) + 1);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined$1) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined$1 : pattern;

	      if (pattern === undefined$1) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined$1, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     *
	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined$1 : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined$1;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined$1;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined$1) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name + '';
	        if (!hasOwnProperty.call(realNames, key)) {
	          realNames[key] = [];
	        }
	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined$1
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(commonjsGlobal)); 
} (lodash, lodash.exports));

var lodashExports = lodash.exports;

const _tmpl$$j = /*#__PURE__*/template(`<div class="flex items-center justify-center max-w-[128px] mr-[10px] p-0 m-0"><img class="w-full h-full bg-cover">`),
  _tmpl$2$c = /*#__PURE__*/template(`<div class="mt-2"><div>`),
  _tmpl$3$9 = /*#__PURE__*/template(`<span class="prose">`),
  _tmpl$4$7 = /*#__PURE__*/template(`<div class="mb-6">`),
  _tmpl$5$6 = /*#__PURE__*/template(`<div class="flex flex-row items-start flex-wrap w-full gap-2">`);
const defaultBackgroundColor$5 = '#f7f8ff';
const defaultTextColor$6 = '#303235';
const defaultFontSize$3 = 16;
const AgentReasoningBubble = props => {
  let botMessageEl;
  Marked.setOptions({
    isNoP: true,
    sanitize: props.renderHTML !== undefined ? !props.renderHTML : true
  });
  onMount(() => {
    if (botMessageEl) {
      botMessageEl.innerHTML = Marked.parse(`**✅ ${props.agentName}** \n\n${props.agentMessage}`);
      botMessageEl.querySelectorAll('a').forEach(link => {
        link.target = '_blank';
      });
    }
  });
  const agentReasoningArtifacts = artifacts => {
    const newArtifacts = lodashExports.cloneDeep(artifacts);
    for (let i = 0; i < newArtifacts.length; i++) {
      const artifact = newArtifacts[i];
      if (artifact && (artifact.type === 'png' || artifact.type === 'jpeg')) {
        const data = artifact.data;
        newArtifacts[i].data = `${props.apiHost}/api/v1/get-upload-file?chatflowId=${props.chatflowid}&chatId=${props.chatId}&fileName=${data.replace('FILE-STORAGE::', '')}`;
      }
    }
    return newArtifacts;
  };
  const renderArtifacts = item => {
    if (item.type === 'png' || item.type === 'jpeg') {
      const src = item.data;
      return (() => {
        const _el$ = _tmpl$$j(),
          _el$2 = _el$.firstChild;
        setAttribute(_el$2, "src", src);
        return _el$;
      })();
    } else if (item.type === 'html') {
      const src = item.data;
      return (() => {
        const _el$3 = _tmpl$2$c(),
          _el$4 = _el$3.firstChild;
        _el$4.innerHTML = src;
        return _el$3;
      })();
    } else {
      const src = item.data;
      return (() => {
        const _el$5 = _tmpl$3$9();
        _el$5.style.setProperty("border-radius", "6px");
        createRenderEffect(_p$ => {
          const _v$ = Marked.parse(src),
            _v$2 = props.backgroundColor ?? defaultBackgroundColor$5,
            _v$3 = props.textColor ?? defaultTextColor$6,
            _v$4 = props.fontSize ? `${props.fontSize}px` : `${defaultFontSize$3}px`;
          _v$ !== _p$._v$ && (_el$5.innerHTML = _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$5.style.setProperty("background-color", _v$2) : _el$5.style.removeProperty("background-color"));
          _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$5.style.setProperty("color", _v$3) : _el$5.style.removeProperty("color"));
          _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$5.style.setProperty("font-size", _v$4) : _el$5.style.removeProperty("font-size"));
          return _p$;
        }, {
          _v$: undefined,
          _v$2: undefined,
          _v$3: undefined,
          _v$4: undefined
        });
        return _el$5;
      })();
    }
  };
  return (() => {
    const _el$6 = _tmpl$4$7();
    insert(_el$6, (() => {
      const _c$ = createMemo(() => !!props.agentArtifacts);
      return () => _c$() && (() => {
        const _el$7 = _tmpl$5$6();
        insert(_el$7, createComponent(For, {
          get each() {
            return agentReasoningArtifacts(props.agentArtifacts);
          },
          children: item => {
            return item !== null ? createMemo(() => renderArtifacts(item)) : null;
          }
        }));
        return _el$7;
      })();
    })(), null);
    insert(_el$6, (() => {
      const _c$2 = createMemo(() => !!props.agentMessage);
      return () => _c$2() && (() => {
        const _el$8 = _tmpl$3$9();
        const _ref$ = botMessageEl;
        typeof _ref$ === "function" ? use(_ref$, _el$8) : botMessageEl = _el$8;
        createRenderEffect(_p$ => {
          const _v$5 = props.backgroundColor ?? defaultBackgroundColor$5,
            _v$6 = props.textColor ?? defaultTextColor$6,
            _v$7 = props.fontSize ? `${props.fontSize}px` : `${defaultFontSize$3}px`;
          _v$5 !== _p$._v$5 && ((_p$._v$5 = _v$5) != null ? _el$8.style.setProperty("background-color", _v$5) : _el$8.style.removeProperty("background-color"));
          _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$8.style.setProperty("color", _v$6) : _el$8.style.removeProperty("color"));
          _v$7 !== _p$._v$7 && ((_p$._v$7 = _v$7) != null ? _el$8.style.setProperty("font-size", _v$7) : _el$8.style.removeProperty("font-size"));
          return _p$;
        }, {
          _v$5: undefined,
          _v$6: undefined,
          _v$7: undefined
        });
        return _el$8;
      })();
    })(), null);
    return _el$6;
  })();
};

const _tmpl$$i = /*#__PURE__*/template(`<div data-modal-target="defaultModal" data-modal-toggle="defaultModal" class="flex justify-start mb-2 items-start animate-fade-in host-container hover:brightness-90 active:brightness-75"><span class="px-2 py-1 ml-1 whitespace-pre-wrap max-w-full chatbot-host-bubble" data-testid="host-bubble">`);
const SourceBubble = props => (() => {
  const _el$ = _tmpl$$i(),
    _el$2 = _el$.firstChild;
  _el$.$$click = () => props.onSourceClick?.();
  _el$2.style.setProperty("width", "max-content");
  _el$2.style.setProperty("max-width", "80px");
  _el$2.style.setProperty("font-size", "13px");
  _el$2.style.setProperty("border-radius", "15px");
  _el$2.style.setProperty("cursor", "pointer");
  _el$2.style.setProperty("text-overflow", "ellipsis");
  _el$2.style.setProperty("overflow", "hidden");
  _el$2.style.setProperty("white-space", "nowrap");
  insert(_el$2, () => props.pageContent);
  return _el$;
})();
delegateEvents(["click"]);

const $RAW = Symbol("store-raw"),
  $NODE = Symbol("store-node");
function wrap$1(value) {
  let p = value[$PROXY];
  if (!p) {
    Object.defineProperty(value, $PROXY, {
      value: p = new Proxy(value, proxyTraps$1)
    });
    if (!Array.isArray(value)) {
      const keys = Object.keys(value),
        desc = Object.getOwnPropertyDescriptors(value);
      for (let i = 0, l = keys.length; i < l; i++) {
        const prop = keys[i];
        if (desc[prop].get) {
          Object.defineProperty(value, prop, {
            enumerable: desc[prop].enumerable,
            get: desc[prop].get.bind(p)
          });
        }
      }
    }
  }
  return p;
}
function isWrappable(obj) {
  let proto;
  return obj != null && typeof obj === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
}
function unwrap(item, set = new Set()) {
  let result, unwrapped, v, prop;
  if (result = item != null && item[$RAW]) return result;
  if (!isWrappable(item) || set.has(item)) return item;
  if (Array.isArray(item)) {
    if (Object.isFrozen(item)) item = item.slice(0);else set.add(item);
    for (let i = 0, l = item.length; i < l; i++) {
      v = item[i];
      if ((unwrapped = unwrap(v, set)) !== v) item[i] = unwrapped;
    }
  } else {
    if (Object.isFrozen(item)) item = Object.assign({}, item);else set.add(item);
    const keys = Object.keys(item),
      desc = Object.getOwnPropertyDescriptors(item);
    for (let i = 0, l = keys.length; i < l; i++) {
      prop = keys[i];
      if (desc[prop].get) continue;
      v = item[prop];
      if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;
    }
  }
  return item;
}
function getDataNodes(target) {
  let nodes = target[$NODE];
  if (!nodes) Object.defineProperty(target, $NODE, {
    value: nodes = {}
  });
  return nodes;
}
function getDataNode(nodes, property, value) {
  return nodes[property] || (nodes[property] = createDataNode(value));
}
function proxyDescriptor$1(target, property) {
  const desc = Reflect.getOwnPropertyDescriptor(target, property);
  if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE) return desc;
  delete desc.value;
  delete desc.writable;
  desc.get = () => target[$PROXY][property];
  return desc;
}
function trackSelf(target) {
  if (getListener()) {
    const nodes = getDataNodes(target);
    (nodes._ || (nodes._ = createDataNode()))();
  }
}
function ownKeys(target) {
  trackSelf(target);
  return Reflect.ownKeys(target);
}
function createDataNode(value) {
  const [s, set] = createSignal(value, {
    equals: false,
    internal: true
  });
  s.$ = set;
  return s;
}
const proxyTraps$1 = {
  get(target, property, receiver) {
    if (property === $RAW) return target;
    if (property === $PROXY) return receiver;
    if (property === $TRACK) {
      trackSelf(target);
      return receiver;
    }
    const nodes = getDataNodes(target);
    const tracked = nodes.hasOwnProperty(property);
    let value = tracked ? nodes[property]() : target[property];
    if (property === $NODE || property === "__proto__") return value;
    if (!tracked) {
      const desc = Object.getOwnPropertyDescriptor(target, property);
      if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get)) value = getDataNode(nodes, property, value)();
    }
    return isWrappable(value) ? wrap$1(value) : value;
  },
  has(target, property) {
    if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === "__proto__") return true;
    this.get(target, property, target);
    return property in target;
  },
  set() {
    return true;
  },
  deleteProperty() {
    return true;
  },
  ownKeys: ownKeys,
  getOwnPropertyDescriptor: proxyDescriptor$1
};
function setProperty(state, property, value, deleting = false) {
  if (!deleting && state[property] === value) return;
  const prev = state[property],
    len = state.length;
  if (value === undefined) delete state[property];else state[property] = value;
  let nodes = getDataNodes(state),
    node;
  if (node = getDataNode(nodes, property, prev)) node.$(() => value);
  if (Array.isArray(state) && state.length !== len) (node = getDataNode(nodes, "length", len)) && node.$(state.length);
  (node = nodes._) && node.$();
}
function mergeStoreNode(state, value) {
  const keys = Object.keys(value);
  for (let i = 0; i < keys.length; i += 1) {
    const key = keys[i];
    setProperty(state, key, value[key]);
  }
}
function updateArray(current, next) {
  if (typeof next === "function") next = next(current);
  next = unwrap(next);
  if (Array.isArray(next)) {
    if (current === next) return;
    let i = 0,
      len = next.length;
    for (; i < len; i++) {
      const value = next[i];
      if (current[i] !== value) setProperty(current, i, value);
    }
    setProperty(current, "length", len);
  } else mergeStoreNode(current, next);
}
function updatePath(current, path, traversed = []) {
  let part,
    prev = current;
  if (path.length > 1) {
    part = path.shift();
    const partType = typeof part,
      isArray = Array.isArray(current);
    if (Array.isArray(part)) {
      for (let i = 0; i < part.length; i++) {
        updatePath(current, [part[i]].concat(path), traversed);
      }
      return;
    } else if (isArray && partType === "function") {
      for (let i = 0; i < current.length; i++) {
        if (part(current[i], i)) updatePath(current, [i].concat(path), traversed);
      }
      return;
    } else if (isArray && partType === "object") {
      const {
        from = 0,
        to = current.length - 1,
        by = 1
      } = part;
      for (let i = from; i <= to; i += by) {
        updatePath(current, [i].concat(path), traversed);
      }
      return;
    } else if (path.length > 1) {
      updatePath(current[part], path, [part].concat(traversed));
      return;
    }
    prev = current[part];
    traversed = [part].concat(traversed);
  }
  let value = path[0];
  if (typeof value === "function") {
    value = value(prev, traversed);
    if (value === prev) return;
  }
  if (part === undefined && value == undefined) return;
  value = unwrap(value);
  if (part === undefined || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {
    mergeStoreNode(prev, value);
  } else setProperty(current, part, value);
}
function createStore(...[store, options]) {
  const unwrappedStore = unwrap(store || {});
  const isArray = Array.isArray(unwrappedStore);
  const wrappedStore = wrap$1(unwrappedStore);
  function setStore(...args) {
    batch(() => {
      isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
    });
  }
  return [wrappedStore, setStore];
}

const _tmpl$$h = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-200"><path d="m9 18 6-6-6-6">`),
  _tmpl$2$b = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-200"><path d="m6 9 6 6 6-6">`),
  _tmpl$3$8 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z">`),
  _tmpl$4$6 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2">`),
  _tmpl$5$5 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8">`),
  _tmpl$6$4 = /*#__PURE__*/template(`<style>`),
  _tmpl$7$4 = /*#__PURE__*/template(`<div>`),
  _tmpl$8$3 = /*#__PURE__*/template(`<div class="tree-item-end-icon">`),
  _tmpl$9$3 = /*#__PURE__*/template(`<div class="tree-item-children">`),
  _tmpl$10$3 = /*#__PURE__*/template(`<div class="tree-item-root"><div><div class="tree-item-icon-container mr-1"></div><div class="tree-item-icon mr-2"></div><div class="tree-item-label flex-grow">`);
// Create TreeView Context
const TreeViewContext = createContext({
  expandedItems: [],
  selectedItem: null,
  highlightedItems: [],
  // eslint-disable-next-line
  toggleItem: () => {},
  // eslint-disable-next-line
  selectItem: () => {},
  isExpanded: () => false,
  isSelected: () => false,
  isHighlighted: () => false
});
// Icons for expanded and collapsed states
const ChevronRightIcon$1 = () => _tmpl$$h();
const ChevronDownIcon$1 = () => _tmpl$2$b();
// Default folder icons
const FolderIcon = () => _tmpl$3$8();
const FolderOpenIcon = () => _tmpl$4$6();
const FileIcon = () => _tmpl$5$5();
// RichTreeView component
const RichTreeView = props => {
  const mergedProps = mergeProps({
    defaultExpanded: [],
    indentationLevel: 16 // Default indentation of 16px
  }, props);
  const [state, setState] = createStore({
    expandedItems: mergedProps.defaultExpanded,
    selectedItem: null,
    highlightedItems: props.highlightItems || []
  });
  createEffect(() => {
    if (props.highlightItems) {
      setState('highlightedItems', [...props.highlightItems]);
    }
  });
  const toggleItem = itemId => {
    setState('expandedItems', prev => {
      if (prev.includes(itemId)) {
        return prev.filter(id => id !== itemId);
      } else {
        return [...prev, itemId];
      }
    });
  };
  const selectItem = itemId => {
    setState('selectedItem', itemId);
    props.onNodeSelect && props.onNodeSelect(itemId);
  };
  const isExpanded = itemId => {
    return state.expandedItems.includes(itemId);
  };
  const isSelected = itemId => {
    return state.selectedItem === itemId;
  };
  const isHighlighted = itemId => {
    return state.highlightedItems.includes(itemId);
  };
  const contextValue = {
    expandedItems: state.expandedItems,
    selectedItem: state.selectedItem,
    highlightedItems: state.highlightedItems,
    toggleItem,
    selectItem,
    isExpanded,
    isSelected,
    isHighlighted
  };
  // Add a style block for dynamic indentation
  const treeViewStyle = `
    .tree-item-children {
      padding-left: ${mergedProps.indentationLevel}px !important;
    }
  `;
  return createComponent(TreeViewContext.Provider, {
    value: contextValue,
    get children() {
      return [(() => {
        const _el$6 = _tmpl$6$4();
        insert(_el$6, treeViewStyle);
        return _el$6;
      })(), (() => {
        const _el$7 = _tmpl$7$4();
        insert(_el$7, () => props.children);
        createRenderEffect(() => className(_el$7, `tree-view ${props.class || ''}`));
        return _el$7;
      })()];
    }
  });
};
// TreeItem component
const TreeItem = props => {
  const context = useContext(TreeViewContext);
  const hasChildren = !!props.children;
  const isLeaf = props.isLeaf !== undefined ? props.isLeaf : !hasChildren;
  const handleClick = e => {
    e.stopPropagation();
    context.selectItem(props.itemId);
    if (hasChildren) {
      context.toggleItem(props.itemId);
    }
  };
  const getDefaultIcon = () => {
    if (isLeaf) {
      return createComponent(FileIcon, {});
    }
    return createMemo((() => {
      const _c$ = createMemo(() => !!context.isExpanded(props.itemId));
      return () => _c$() ? createComponent(FolderOpenIcon, {}) : createComponent(FolderIcon, {});
    })());
  };
  return (() => {
    const _el$8 = _tmpl$10$3(),
      _el$9 = _el$8.firstChild,
      _el$10 = _el$9.firstChild,
      _el$11 = _el$10.nextSibling,
      _el$12 = _el$11.nextSibling;
    _el$9.$$click = handleClick;
    insert(_el$10, !isLeaf && createComponent(Dynamic, {
      get component() {
        return context.isExpanded(props.itemId) ? ChevronDownIcon$1 : ChevronRightIcon$1;
      }
    }));
    insert(_el$11, (() => {
      const _c$2 = createMemo(() => !!props.icon);
      return () => _c$2() ? props.icon : (() => {
        const _c$3 = createMemo(() => !!(props.expandedIcon && context.isExpanded(props.itemId)));
        return () => _c$3() ? props.expandedIcon : getDefaultIcon();
      })();
    })());
    insert(_el$12, () => props.label);
    insert(_el$9, createComponent(Show, {
      get when() {
        return props.endIcon;
      },
      get children() {
        const _el$13 = _tmpl$8$3();
        insert(_el$13, () => props.endIcon);
        return _el$13;
      }
    }), null);
    insert(_el$8, createComponent(Show, {
      get when() {
        return hasChildren && context.isExpanded(props.itemId);
      },
      get children() {
        const _el$14 = _tmpl$9$3();
        insert(_el$14, () => props.children);
        return _el$14;
      }
    }), null);
    createRenderEffect(() => className(_el$9, `tree-item-content flex items-center py-2 px-1 rounded cursor-pointer ${context.isSelected(props.itemId) ? 'selected' : ''} ${context.isHighlighted(props.itemId) ? 'highlighted' : ''}`));
    return _el$8;
  })();
};
delegateEvents(["click"]);

const _tmpl$$g = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1">`),
  _tmpl$2$a = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12">`),
  _tmpl$3$7 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#4CAF50" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01">`),
  _tmpl$4$5 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#FFC107" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14">`),
  _tmpl$5$4 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2196F3" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16l4-4-4-4"></path><path d="M8 12h8">`),
  _tmpl$6$3 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#F44336" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16">`),
  _tmpl$7$3 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-200"><path d="m6 9 6 6 6-6">`),
  _tmpl$8$2 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-200"><path d="m9 18 6-6-6-6">`),
  _tmpl$9$2 = /*#__PURE__*/template(`<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#FF9800" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><rect x="9" y="9" width="6" height="6">`),
  _tmpl$10$2 = /*#__PURE__*/template(`<div class="flex items-center"><span>`),
  _tmpl$11$2 = /*#__PURE__*/template(`<div class="mr-1 text-blue-500"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M17 2.1l4 4-4 4"></path><path d="M3 12.2v-2a4 4 0 0 1 4-4h12.8M7 21.9l-4-4 4-4"></path><path d="M21 11.8v2a4 4 0 0 1-4 4H4.2">`),
  _tmpl$12$2 = /*#__PURE__*/template(`<div class="status-icon">`),
  _tmpl$13$2 = /*#__PURE__*/template(`<div class="border-t"><div class="p-4 mb-2">`),
  _tmpl$14$2 = /*#__PURE__*/template(`<div><div class="flex items-center justify-between p-4 cursor-pointer hover:bg-gray-100 transition-colors duration-150"><div class="flex items-center space-x-2"><div class="flex-shrink-0"></div><h2 class="font-semibold flex items-center"></h2></div></div><style>
        .json-viewer .string { color: #7ac35c; }
        .json-viewer .number { color: #e08331; }
        .json-viewer .boolean { color: #326dc3; }
        .json-viewer .null { color: #a951ad; }
        .json-viewer .key { color: #d73e3e; font-weight: bold; }

        /* Custom tree view styles */
        .tree-item-content.selected {
          background-color: rgba(25, 118, 210, 0.15);
          font-weight: 500;
          border-left: 3px solid #1976d2;
          padding-left: calc(0.25rem - 3px) !important;
          box-shadow: 0 0 0 1px rgba(25, 118, 210, 0.05);
          transform: translateX(2px);
        }
        .tree-item-content.selected:hover {
          background-color: rgba(25, 118, 210, 0.25);
        }
        .tree-item-content {
          border-left: 3px solid transparent;
          transition: background-color 0.2s ease, 
                      border-color 0.2s ease, 
                      transform 0.2s ease,
                      box-shadow 0.2s ease;
        }
        
        /* Animation for node details panel */
        .node-details-panel {
          transition: opacity 0.2s ease, transform 0.2s ease;
        }
        
        /* Enhanced status icons */
        .status-icon {
          filter: drop-shadow(0 1px 1px rgba(0,0,0,0.1));
        }
      `),
  _tmpl$15$2 = /*#__PURE__*/template(`<span class="ml-2 status-icon">`),
  _tmpl$16$1 = /*#__PURE__*/template(`<div class="mx-4 mb-4 p-4 rounded border node-details-panel"><div class="flex flex-col md:flex-row justify-between items-start mb-3"><div class="flex items-center mb-2 md:mb-0"><span class="mr-2 status-icon"></span><h3 class="font-medium"><span class="font-bold"></span></h3></div><button class="text-gray-500 hover:text-gray-700 transition-colors p-1 rounded hover:bg-gray-100" title="Copy to clipboard"></button></div><div class="json-viewer text-xs overflow-auto max-h-60 p-2 rounded font-mono">`);
// Default styling values consistent with BotBubble
const defaultBackgroundColor$4 = '#f7f8ff';
const defaultTextColor$5 = '#303235';
const defaultFontSize$2 = 16;
const FLOWISE_CREDENTIAL_ID = 'FLOWISE_CREDENTIAL_ID';
// Recursive function to remove credential IDs from data
const removeFlowiseCredentialId = data => {
  if (!data || typeof data !== 'object') return data;
  // Handle arrays
  if (Array.isArray(data)) {
    return data.map(item => removeFlowiseCredentialId(item));
  }
  // Clone the object to avoid modifying the original
  const cleanedData = {
    ...data
  };
  for (const key in cleanedData) {
    if (key === FLOWISE_CREDENTIAL_ID) {
      delete cleanedData[key];
    } else if (typeof cleanedData[key] === 'object' && cleanedData[key] !== null) {
      cleanedData[key] = removeFlowiseCredentialId(cleanedData[key]);
    }
  }
  return cleanedData;
};
// Syntax highlighting function for JSON
function syntaxHighlight$1(json) {
  if (!json) return '';
  // Escape HTML special characters
  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return json.replace(
  // eslint-disable-next-line no-useless-escape
  /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
    let cls = 'number';
    if (/^"/.test(match)) {
      if (/:$/.test(match)) {
        cls = 'key';
      } else {
        cls = 'string';
      }
    } else if (/true|false/.test(match)) {
      cls = 'boolean';
    } else if (/null/.test(match)) {
      cls = 'null';
    }
    return '<span class="' + cls + '">' + match + '</span>';
  });
}
// Copy icon component
const CopyIcon = () => _tmpl$$g();
// Check icon component
const CheckIcon = () => _tmpl$2$a();
// Status icon components
const FinishedIcon = () => _tmpl$3$7();
const PendingIcon = () => _tmpl$4$5();
const RunningIcon = () => _tmpl$5$4();
const ErrorIcon = () => _tmpl$6$3();
// Chevron icons for the collapsible panel
const ChevronDownIcon = () => _tmpl$7$3();
const ChevronRightIcon = () => _tmpl$8$2();
// Function to get the appropriate icon based on node status
const getStatusIcon = status => {
  let icon;
  switch (status) {
    case 'FINISHED':
      icon = createComponent(FinishedIcon, {});
      break;
    case 'PENDING':
      icon = createComponent(PendingIcon, {});
      break;
    case 'RUNNING':
    case 'INPROGRESS':
      icon = createComponent(RunningIcon, {});
      break;
    case 'ERROR':
      icon = createComponent(ErrorIcon, {});
      break;
    case 'STOPPED':
      icon = createComponent(StoppedIcon, {});
      break;
    default:
      icon = createComponent(PendingIcon, {});
  }
  return icon;
};
// Add a new icon for the STOPPED status
const StoppedIcon = () => _tmpl$9$2();
// Main component for visualizing workflow as a tree
const WorkflowTreeView = props => {
  const [expandedNodes, setExpandedNodes] = createSignal([]);
  const [selectedNode, setSelectedNode] = createSignal(null);
  const [isPanelExpanded, setIsPanelExpanded] = createSignal(props.initiallyExpanded !== false);
  const [copied, setCopied] = createSignal(false);
  const [treeData, setTreeData] = createSignal([]);
  const [executionStatus, setExecutionStatus] = createSignal(null);
  // Get overall execution status of the workflow
  const getExecutionStatus = executionTree => {
    const getAllStatuses = nodes => {
      let statuses = [];
      nodes.forEach(node => {
        if (node.status) statuses.push(node.status);
        if (node.children && node.children.length > 0) {
          statuses = [...statuses, ...getAllStatuses(node.children)];
        }
      });
      return statuses;
    };
    const statuses = getAllStatuses(executionTree);
    if (statuses.includes('ERROR')) return 'ERROR';
    if (statuses.includes('RUNNING') || statuses.includes('INPROGRESS')) return 'INPROGRESS';
    if (statuses.includes('STOPPED')) return 'STOPPED';
    if (statuses.every(status => status === 'FINISHED')) return 'FINISHED';
    return null;
  };
  // Transform the execution data into a tree structure
  const buildTreeData = nodes => {
    // for each node, loop through each and every nested key of node.data, and remove the key if it is equal to FLOWISE_CREDENTIAL_ID
    nodes.forEach(node => {
      const removeFlowiseCredentialId = data => {
        for (const key in data) {
          if (key === FLOWISE_CREDENTIAL_ID) {
            delete data[key];
          }
          if (typeof data[key] === 'object' && data[key] !== null) {
            removeFlowiseCredentialId(data[key]);
          }
        }
      };
      if (node.data) removeFlowiseCredentialId(node.data);
    });
    // Create a map for quick node lookup
    // Use execution index to make each node instance unique
    const nodeMap = new Map();
    nodes.forEach((node, index) => {
      const uniqueNodeId = `${node.nodeId}_${index}`;
      nodeMap.set(uniqueNodeId, {
        ...node,
        uniqueNodeId,
        children: [],
        executionIndex: index
      });
    });
    // Identify iteration nodes and their children
    const iterationGroups = new Map(); // parentId -> Map of iterationIndex -> nodes
    // Group iteration child nodes by their parent and iteration index
    nodes.forEach((node, index) => {
      if (node.data?.parentNodeId && node.data?.iterationIndex !== undefined) {
        const parentId = node.data.parentNodeId;
        const iterationIndex = node.data.iterationIndex;
        if (!iterationGroups.has(parentId)) {
          iterationGroups.set(parentId, new Map());
        }
        const iterationMap = iterationGroups.get(parentId);
        if (!iterationMap.has(iterationIndex)) {
          iterationMap.set(iterationIndex, []);
        }
        iterationMap.get(iterationIndex).push(`${node.nodeId}_${index}`);
      }
    });
    // Create virtual iteration container nodes
    iterationGroups.forEach((iterationMap, parentId) => {
      iterationMap.forEach((nodeIds, iterationIndex) => {
        // Find the parent iteration node
        let parentNode = null;
        for (let i = 0; i < nodes.length; i++) {
          if (nodes[i].nodeId === parentId) {
            parentNode = nodes[i];
            break;
          }
        }
        if (!parentNode) return;
        // Get iteration context from first child node
        const firstChildId = nodeIds[0];
        const firstChild = nodeMap.get(firstChildId);
        const iterationContext = firstChild?.data?.iterationContext || {
          index: iterationIndex
        };
        // Create a virtual node for this iteration
        const iterationNodeId = `${parentId}_${iterationIndex}`;
        const iterationLabel = `Iteration #${iterationIndex}`;
        // Determine status based on child nodes
        const childNodes = nodeIds.map(id => nodeMap.get(id));
        const iterationStatus = childNodes.some(n => n.status === 'ERROR') ? 'ERROR' : childNodes.some(n => n.status === 'INPROGRESS' || n.status === 'RUNNING') ? 'INPROGRESS' : childNodes.every(n => n.status === 'FINISHED') ? 'FINISHED' : 'PENDING';
        // Create the virtual node and add to nodeMap
        const virtualNode = {
          nodeId: iterationNodeId,
          nodeLabel: iterationLabel,
          data: {
            name: 'iterationAgentflow',
            iterationIndex,
            iterationContext,
            isVirtualNode: true,
            parentIterationId: parentId
          },
          previousNodeIds: [],
          status: iterationStatus,
          uniqueNodeId: iterationNodeId,
          children: [],
          executionIndex: -1 // Flag as a virtual node
        };

        nodeMap.set(iterationNodeId, virtualNode);
        // Set this virtual node as the parent for all nodes in this iteration
        nodeIds.forEach(childId => {
          const childNode = nodeMap.get(childId);
          if (childNode) {
            childNode.virtualParentId = iterationNodeId;
          }
        });
      });
    });
    // Root nodes have no previous nodes
    const rootNodes = [];
    const processedNodes = new Set();
    // First pass: Build the main tree structure (excluding iteration children)
    nodes.forEach((node, index) => {
      const uniqueNodeId = `${node.nodeId}_${index}`;
      const treeNode = nodeMap.get(uniqueNodeId);
      // Skip nodes that belong to an iteration (they'll be added to their virtual parent)
      if (node.data?.parentNodeId && node.data?.iterationIndex !== undefined) {
        return;
      }
      if (node.previousNodeIds.length === 0) {
        rootNodes.push(treeNode);
      } else {
        // Find the most recent (latest) parent node among all previous nodes
        let mostRecentParentIndex = -1;
        let mostRecentParentId = null;
        node.previousNodeIds.forEach(parentId => {
          // Find the most recent instance of this parent node
          for (let i = 0; i < index; i++) {
            if (nodes[i].nodeId === parentId && i > mostRecentParentIndex) {
              mostRecentParentIndex = i;
              mostRecentParentId = parentId;
            }
          }
        });
        // Only add to the most recent parent
        if (mostRecentParentIndex !== -1 && mostRecentParentId) {
          const parentUniqueId = `${mostRecentParentId}_${mostRecentParentIndex}`;
          const parentNode = nodeMap.get(parentUniqueId);
          if (parentNode) {
            parentNode.children.push(treeNode);
            processedNodes.add(uniqueNodeId);
          }
        }
      }
    });
    // Second pass: Build the iteration sub-trees
    iterationGroups.forEach((iterationMap, parentId) => {
      // Find all instances of the parent node
      const parentInstances = [];
      nodes.forEach((node, index) => {
        if (node.nodeId === parentId) {
          parentInstances.push(`${node.nodeId}_${index}`);
        }
      });
      // Find the latest instance of the parent node that exists in the tree
      let latestParent = null;
      for (let i = parentInstances.length - 1; i >= 0; i--) {
        const parentId = parentInstances[i];
        const parent = nodeMap.get(parentId);
        if (parent) {
          latestParent = parent;
          break;
        }
      }
      if (!latestParent) return;
      // Add all virtual iteration nodes to the parent
      iterationMap.forEach((nodeIds, iterationIndex) => {
        const iterationNodeId = `${parentId}_${iterationIndex}`;
        const virtualNode = nodeMap.get(iterationNodeId);
        if (virtualNode) {
          latestParent.children.push(virtualNode);
        }
      });
    });
    // Third pass: Build the structure inside each virtual iteration node
    nodeMap.forEach(node => {
      if (node.virtualParentId) {
        const virtualParent = nodeMap.get(node.virtualParentId);
        if (virtualParent) {
          if (node.previousNodeIds.length === 0) {
            // This is a root node within the iteration
            virtualParent.children.push(node);
          } else {
            // Find its parent within the same iteration
            let parentFound = false;
            for (const prevNodeId of node.previousNodeIds) {
              // Look for nodes with the same previous node ID in the same iteration
              nodeMap.forEach(potentialParent => {
                if (potentialParent.nodeId === prevNodeId && potentialParent.data?.iterationIndex === node.data?.iterationIndex && potentialParent.data?.parentNodeId === node.data?.parentNodeId && !parentFound) {
                  potentialParent.children.push(node);
                  parentFound = true;
                }
              });
            }
            // If no parent was found within the iteration, add directly to virtual parent
            if (!parentFound) {
              virtualParent.children.push(node);
            }
          }
        }
      }
    });
    // Final pass: Sort all children arrays to ensure iteration nodes appear first
    const sortChildrenNodes = node => {
      if (node.children && node.children.length > 0) {
        // Sort children: iteration nodes first, then others by their original execution order
        node.children.sort((a, b) => {
          // Check if a is an iteration node
          const aIsIteration = a.data?.name === 'iterationAgentflow' || a.data?.isVirtualNode;
          // Check if b is an iteration node
          const bIsIteration = b.data?.name === 'iterationAgentflow' || b.data?.isVirtualNode;
          // If both are iterations or both are not iterations, preserve original order
          if (aIsIteration === bIsIteration) {
            return a.executionIndex - b.executionIndex;
          }
          // Otherwise, put iterations first
          return aIsIteration ? -1 : 1;
        });
        // Recursively sort children's children
        node.children.forEach(sortChildrenNodes);
      }
    };
    // Apply sorting to all root nodes and their children
    rootNodes.forEach(sortChildrenNodes);
    // Transform to the required format
    const transformNode = node => ({
      id: node.uniqueNodeId,
      label: node.nodeLabel,
      name: node.data?.name,
      status: node.status,
      data: node.data,
      children: node.children.map(transformNode)
    });
    const transformedNodes = rootNodes.map(transformNode);
    // Determine the overall execution status
    const status = getExecutionStatus(transformedNodes);
    setExecutionStatus(status);
    return transformedNodes;
  };
  // Initialize tree data on mount
  onMount(() => {
    const treeNodes = buildTreeData(props.workflowData);
    setTreeData(treeNodes);
    // Expand root nodes by default
    if (treeNodes.length > 0) {
      setExpandedNodes(treeNodes.map(node => node.id));
    }
  });
  // Handle node selection
  const handleNodeSelect = nodeId => {
    setSelectedNode(nodeId);
  };
  // Toggle the collapsible panel
  const togglePanel = () => {
    setIsPanelExpanded(!isPanelExpanded());
  };
  // Copy JSON to clipboard
  const copyToClipboard = async () => {
    const nodeDetails = getSelectedNodeDetails();
    if (!nodeDetails) return;
    try {
      await navigator.clipboard.writeText(JSON.stringify(nodeDetails.data || {}, null, 2));
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };
  // Recursive function to render a node and its children
  const renderNode = node => {
    // Check if this is an iteration node
    const isIterationNode = node.name === 'iterationAgentflow' || node.data?.isVirtualNode;
    // Add a special class or icon for iteration nodes
    const nodeLabel = (() => {
      const _el$10 = _tmpl$10$2(),
        _el$11 = _el$10.firstChild;
      insert(_el$10, isIterationNode && _tmpl$11$2(), _el$11);
      className(_el$11, isIterationNode ? 'iteration-node-label' : '');
      insert(_el$11, () => node.label);
      return _el$10;
    })();
    // Create a wrapper for the status icon to apply the status-icon class
    const statusIcon = (() => {
      const _el$13 = _tmpl$12$2();
      insert(_el$13, () => getStatusIcon(node.status));
      return _el$13;
    })();
    return createComponent(TreeItem, {
      get itemId() {
        return node.id;
      },
      label: nodeLabel,
      icon: statusIcon,
      get children() {
        return createMemo(() => !!(node.children && node.children.length > 0))() && node.children.map(childNode => renderNode(childNode));
      }
    });
  };
  // Get selected node details
  const getSelectedNodeDetails = () => {
    if (!selectedNode()) return null;
    // Find the node in the tree data
    const findNodeById = (nodes, id) => {
      for (const node of nodes) {
        if (node.id === id) return node;
        if (node.children && node.children.length) {
          const found = findNodeById(node.children, id);
          if (found) return found;
        }
      }
      return null;
    };
    const selectedNodeId = selectedNode();
    if (!selectedNodeId) return null;
    const node = findNodeById(treeData(), selectedNodeId);
    if (node) {
      return {
        nodeLabel: node.label,
        data: removeFlowiseCredentialId(node.data),
        status: node.status
      };
    }
    return null;
  };
  // Get highlighted JSON string for the selected node
  const getHighlightedJson = () => {
    const nodeDetails = getSelectedNodeDetails();
    if (!nodeDetails) return '';
    return syntaxHighlight$1(JSON.stringify(nodeDetails.data || {}, null, 2));
  };
  return (() => {
    const _el$14 = _tmpl$14$2(),
      _el$15 = _el$14.firstChild,
      _el$16 = _el$15.firstChild,
      _el$17 = _el$16.firstChild,
      _el$18 = _el$17.nextSibling;
      _el$15.nextSibling;
    _el$15.$$click = togglePanel;
    _el$15.style.setProperty("background-color", "rgba(0,0,0,0.03)");
    insert(_el$17, (() => {
      const _c$ = createMemo(() => !!isPanelExpanded());
      return () => _c$() ? createComponent(ChevronDownIcon, {}) : createComponent(ChevronRightIcon, {});
    })());
    insert(_el$18, () => props.title || 'Process Flow', null);
    insert(_el$18, (() => {
      const _c$2 = createMemo(() => !!executionStatus());
      return () => _c$2() && (() => {
        const _el$22 = _tmpl$15$2();
        insert(_el$22, () => getStatusIcon(executionStatus() || 'PENDING'));
        createRenderEffect(() => setAttribute(_el$22, "title", `Execution Status: ${executionStatus()}`));
        return _el$22;
      })();
    })(), null);
    insert(_el$14, createComponent(Show, {
      get when() {
        return isPanelExpanded();
      },
      get children() {
        const _el$20 = _tmpl$13$2(),
          _el$21 = _el$20.firstChild;
        insert(_el$21, createComponent(RichTreeView, {
          get defaultExpanded() {
            return expandedNodes();
          },
          onNodeSelect: handleNodeSelect,
          get indentationLevel() {
            return props.indentationLevel || 24;
          },
          get children() {
            return createComponent(For, {
              get each() {
                return treeData();
              },
              children: rootNode => renderNode(rootNode)
            });
          }
        }));
        insert(_el$20, (() => {
          const _c$3 = createMemo(() => !!selectedNode());
          return () => _c$3() && (() => {
            const _el$23 = _tmpl$16$1(),
              _el$24 = _el$23.firstChild,
              _el$25 = _el$24.firstChild,
              _el$26 = _el$25.firstChild,
              _el$27 = _el$26.nextSibling,
              _el$28 = _el$27.firstChild,
              _el$29 = _el$25.nextSibling,
              _el$30 = _el$24.nextSibling;
            _el$23.style.setProperty("background-color", "rgba(0,0,0,0.03)");
            insert(_el$26, () => getStatusIcon(getSelectedNodeDetails()?.status || 'PENDING'));
            insert(_el$28, () => getSelectedNodeDetails()?.nodeLabel);
            _el$29.$$click = copyToClipboard;
            insert(_el$29, (() => {
              const _c$4 = createMemo(() => !!copied());
              return () => _c$4() ? createComponent(CheckIcon, {}) : createComponent(CopyIcon, {});
            })());
            _el$30.style.setProperty("background-color", "rgba(0,0,0,0.05)");
            _el$30.style.setProperty("white-space", "pre-wrap");
            _el$30.style.setProperty("word-break", "break-word");
            createRenderEffect(() => _el$30.innerHTML = getHighlightedJson());
            return _el$23;
          })();
        })(), null);
        return _el$20;
      }
    }), null);
    createRenderEffect(_p$ => {
      const _v$ = `mb-2 ml-2 border rounded-lg shadow-sm overflow-hidden ${props.class || ''}`,
        _v$2 = props.backgroundColor ?? defaultBackgroundColor$4,
        _v$3 = props.textColor ?? defaultTextColor$5,
        _v$4 = props.fontSize ? `${props.fontSize}px` : `${defaultFontSize$2}px`;
      _v$ !== _p$._v$ && className(_el$14, _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$14.style.setProperty("background-color", _v$2) : _el$14.style.removeProperty("background-color"));
      _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$14.style.setProperty("color", _v$3) : _el$14.style.removeProperty("color"));
      _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$14.style.setProperty("font-size", _v$4) : _el$14.style.removeProperty("font-size"));
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined,
      _v$4: undefined
    });
    return _el$14;
  })();
};
delegateEvents(["click"]);

const _tmpl$$f = /*#__PURE__*/template(`<div class="flex items-center justify-center p-0 m-0"><img class="w-full h-full bg-cover">`),
  _tmpl$2$9 = /*#__PURE__*/template(`<div class="mt-2"><div>`),
  _tmpl$3$6 = /*#__PURE__*/template(`<span class="prose">`),
  _tmpl$4$4 = /*#__PURE__*/template(`<div><div class="flex flex-row justify-start mb-2 items-start host-container"><div class="flex flex-col justify-start"></div></div><div></div><div>`),
  _tmpl$5$3 = /*#__PURE__*/template(`<div>`),
  _tmpl$6$2 = /*#__PURE__*/template(`<details class="mb-2 px-4 py-2 ml-2 chatbot-host-bubble rounded-[6px]"><summary class="cursor-pointer"><span class="italic">Agent Messages</span></summary><br>`),
  _tmpl$7$2 = /*#__PURE__*/template(`<div class="flex flex-row items-start flex-wrap w-full gap-2">`),
  _tmpl$8$1 = /*#__PURE__*/template(`<span class="px-4 py-2 ml-2 max-w-full chatbot-host-bubble prose" data-testid="host-bubble">`),
  _tmpl$9$1 = /*#__PURE__*/template(`<div class="px-4 py-2 flex flex-row justify-start space-x-2">`),
  _tmpl$10$1 = /*#__PURE__*/template(`<button type="button" class="px-4 py-2 font-medium text-green-600 border border-green-600 rounded-full hover:bg-green-600 hover:text-white transition-colors duration-300 flex items-center space-x-2">&nbsp;`),
  _tmpl$11$1 = /*#__PURE__*/template(`<button type="button" class="px-4 py-2 font-medium text-red-600 border border-red-600 rounded-full hover:bg-red-600 hover:text-white transition-colors duration-300 flex items-center space-x-2">&nbsp;`),
  _tmpl$12$1 = /*#__PURE__*/template(`<button>`),
  _tmpl$13$1 = /*#__PURE__*/template(`<span class="px-2 py-[10px] font-semibold">`),
  _tmpl$14$1 = /*#__PURE__*/template(`<div class="copied-message">Copied!`),
  _tmpl$15$1 = /*#__PURE__*/template(`<div class="text-sm text-gray-500 ml-2">`);
const defaultBackgroundColor$3 = '#f7f8ff';
const defaultTextColor$4 = '#303235';
const defaultFontSize$1 = 16;
const defaultFeedbackColor = '#3B81F6';
const BotBubble = props => {
  let botDetailsEl;
  Marked.setOptions({
    isNoP: true,
    sanitize: props.renderHTML !== undefined ? !props.renderHTML : true
  });
  const [rating, setRating] = createSignal('');
  const [feedbackId, setFeedbackId] = createSignal('');
  const [showFeedbackContentDialog, setShowFeedbackContentModal] = createSignal(false);
  const [copiedMessage, setCopiedMessage] = createSignal(false);
  const [thumbsUpColor, setThumbsUpColor] = createSignal(props.feedbackColor ?? defaultFeedbackColor); // default color
  const [thumbsDownColor, setThumbsDownColor] = createSignal(props.feedbackColor ?? defaultFeedbackColor); // default color
  // Store a reference to the bot message element for the copyMessageToClipboard function
  const [botMessageElement, setBotMessageElement] = createSignal(null);
  const setBotMessageRef = el => {
    if (el) {
      el.innerHTML = Marked.parse(props.message.message);
      // Apply textColor to all links, headings, and other markdown elements except code
      const textColor = props.textColor ?? defaultTextColor$4;
      el.querySelectorAll('a, h1, h2, h3, h4, h5, h6, strong, em, blockquote, li').forEach(element => {
        element.style.color = textColor;
      });
      // Code blocks (with pre) get white text
      el.querySelectorAll('pre').forEach(element => {
        element.style.color = '#FFFFFF';
        // Also ensure any code elements inside pre have white text
        element.querySelectorAll('code').forEach(codeElement => {
          codeElement.style.color = '#FFFFFF';
        });
      });
      // Inline code (not in pre) gets green text
      el.querySelectorAll('code:not(pre code)').forEach(element => {
        element.style.color = '#4CAF50'; // Green color
      });
      // Set target="_blank" for links
      el.querySelectorAll('a').forEach(link => {
        link.target = '_blank';
      });
      // Store the element ref for the copy function
      setBotMessageElement(el);
      if (props.message.rating) {
        setRating(props.message.rating);
        if (props.message.rating === 'THUMBS_UP') {
          setThumbsUpColor('#006400');
        } else if (props.message.rating === 'THUMBS_DOWN') {
          setThumbsDownColor('#8B0000');
        }
      }
      if (props.fileAnnotations && props.fileAnnotations.length) {
        for (const annotations of props.fileAnnotations) {
          const button = document.createElement('button');
          button.textContent = annotations.fileName;
          button.className = 'py-2 px-4 mb-2 justify-center font-semibold text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 file-annotation-button';
          button.addEventListener('click', function () {
            downloadFile(annotations);
          });
          const svgContainer = document.createElement('div');
          svgContainer.className = 'ml-2';
          svgContainer.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-download" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2" /><path d="M7 11l5 5l5 -5" /><path d="M12 4l0 12" /></svg>`;
          button.appendChild(svgContainer);
          el.appendChild(button);
        }
      }
    }
  };
  const downloadFile = async fileAnnotation => {
    try {
      const response = await sendFileDownloadQuery({
        apiHost: props.apiHost,
        body: {
          fileName: fileAnnotation.fileName,
          chatflowId: props.chatflowid,
          chatId: props.chatId
        },
        onRequest: props.onRequest
      });
      const blob = new Blob([response.data]);
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = fileAnnotation.fileName;
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error('Download failed:', error);
    }
  };
  const copyMessageToClipboard = async () => {
    try {
      const text = botMessageElement() ? botMessageElement()?.textContent : '';
      await navigator.clipboard.writeText(text || '');
      setCopiedMessage(true);
      setTimeout(() => {
        setCopiedMessage(false);
      }, 2000); // Hide the message after 2 seconds
    } catch (error) {
      console.error('Error copying to clipboard:', error);
    }
  };
  const saveToLocalStorage = rating => {
    const chatDetails = localStorage.getItem(`${props.chatflowid}_EXTERNAL`);
    if (!chatDetails) return;
    try {
      const parsedDetails = JSON.parse(chatDetails);
      const messages = parsedDetails.chatHistory || [];
      const message = messages.find(msg => msg.messageId === props.message.messageId);
      if (!message) return;
      message.rating = rating;
      localStorage.setItem(`${props.chatflowid}_EXTERNAL`, JSON.stringify({
        ...parsedDetails,
        chatHistory: messages
      }));
    } catch (e) {
      return;
    }
  };
  const isValidURL = url => {
    try {
      return new URL(url);
    } catch (err) {
      return undefined;
    }
  };
  const removeDuplicateURL = message => {
    const visitedURLs = [];
    const newSourceDocuments = [];
    message.sourceDocuments.forEach(source => {
      if (isValidURL(source.metadata.source) && !visitedURLs.includes(source.metadata.source)) {
        visitedURLs.push(source.metadata.source);
        newSourceDocuments.push(source);
      } else if (!isValidURL(source.metadata.source)) {
        newSourceDocuments.push(source);
      }
    });
    return newSourceDocuments;
  };
  const onThumbsUpClick = async () => {
    if (rating() === '') {
      const body = {
        chatflowid: props.chatflowid,
        chatId: props.chatId,
        messageId: props.message?.messageId,
        rating: 'THUMBS_UP',
        content: ''
      };
      const result = await sendFeedbackQuery({
        chatflowid: props.chatflowid,
        apiHost: props.apiHost,
        body,
        onRequest: props.onRequest
      });
      if (result.data) {
        const data = result.data;
        let id = '';
        if (data && data.id) id = data.id;
        setRating('THUMBS_UP');
        setFeedbackId(id);
        setShowFeedbackContentModal(true);
        // update the thumbs up color state
        setThumbsUpColor('#006400');
        saveToLocalStorage('THUMBS_UP');
      }
    }
  };
  const onThumbsDownClick = async () => {
    if (rating() === '') {
      const body = {
        chatflowid: props.chatflowid,
        chatId: props.chatId,
        messageId: props.message?.messageId,
        rating: 'THUMBS_DOWN',
        content: ''
      };
      const result = await sendFeedbackQuery({
        chatflowid: props.chatflowid,
        apiHost: props.apiHost,
        body,
        onRequest: props.onRequest
      });
      if (result.data) {
        const data = result.data;
        let id = '';
        if (data && data.id) id = data.id;
        setRating('THUMBS_DOWN');
        setFeedbackId(id);
        setShowFeedbackContentModal(true);
        // update the thumbs down color state
        setThumbsDownColor('#8B0000');
        saveToLocalStorage('THUMBS_DOWN');
      }
    }
  };
  const submitFeedbackContent = async text => {
    const body = {
      content: text
    };
    const result = await updateFeedbackQuery({
      id: feedbackId(),
      apiHost: props.apiHost,
      body,
      onRequest: props.onRequest
    });
    if (result.data) {
      setFeedbackId('');
      setShowFeedbackContentModal(false);
    }
  };
  onMount(() => {
    if (botDetailsEl && props.isLoading) {
      botDetailsEl.open = true;
    }
  });
  createEffect(() => {
    if (botDetailsEl && props.isLoading) {
      botDetailsEl.open = true;
    } else if (botDetailsEl && !props.isLoading) {
      botDetailsEl.open = false;
    }
  });
  const renderArtifacts = item => {
    // Instead of onMount, we'll use a callback ref to apply styles
    const setArtifactRef = el => {
      if (el) {
        const textColor = props.textColor ?? defaultTextColor$4;
        // Apply textColor to all elements except code blocks
        el.querySelectorAll('a, h1, h2, h3, h4, h5, h6, strong, em, blockquote, li').forEach(element => {
          element.style.color = textColor;
        });
        // Code blocks (with pre) get white text
        el.querySelectorAll('pre').forEach(element => {
          element.style.color = '#FFFFFF';
          // Also ensure any code elements inside pre have white text
          element.querySelectorAll('code').forEach(codeElement => {
            codeElement.style.color = '#FFFFFF';
          });
        });
        // Inline code (not in pre) gets green text
        el.querySelectorAll('code:not(pre code)').forEach(element => {
          element.style.color = '#4CAF50'; // Green color
        });

        el.querySelectorAll('a').forEach(link => {
          link.target = '_blank';
        });
      }
    };
    return [createComponent(Show, {
      get when() {
        return item.type === 'png' || item.type === 'jpeg';
      },
      get children() {
        const _el$ = _tmpl$$f(),
          _el$2 = _el$.firstChild;
        createRenderEffect(() => setAttribute(_el$2, "src", (() => {
          const isFileStorage = typeof item.data === 'string' && item.data.startsWith('FILE-STORAGE::');
          return isFileStorage ? `${props.apiHost}/api/v1/get-upload-file?chatflowId=${props.chatflowid}&chatId=${props.chatId}&fileName=${item.data.replace('FILE-STORAGE::', '')}` : item.data;
        })()));
        return _el$;
      }
    }), createComponent(Show, {
      get when() {
        return item.type === 'html';
      },
      get children() {
        const _el$3 = _tmpl$2$9(),
          _el$4 = _el$3.firstChild;
        createRenderEffect(() => _el$4.innerHTML = item.data);
        return _el$3;
      }
    }), createComponent(Show, {
      get when() {
        return item.type !== 'png' && item.type !== 'jpeg' && item.type !== 'html';
      },
      get children() {
        const _el$5 = _tmpl$3$6();
        use(setArtifactRef, _el$5);
        _el$5.style.setProperty("border-radius", "6px");
        createRenderEffect(_p$ => {
          const _v$ = Marked.parse(item.data),
            _v$2 = props.backgroundColor ?? defaultBackgroundColor$3,
            _v$3 = props.textColor ?? defaultTextColor$4,
            _v$4 = props.fontSize ? `${props.fontSize}px` : `${defaultFontSize$1}px`;
          _v$ !== _p$._v$ && (_el$5.innerHTML = _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$5.style.setProperty("background-color", _v$2) : _el$5.style.removeProperty("background-color"));
          _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$5.style.setProperty("color", _v$3) : _el$5.style.removeProperty("color"));
          _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$5.style.setProperty("font-size", _v$4) : _el$5.style.removeProperty("font-size"));
          return _p$;
        }, {
          _v$: undefined,
          _v$2: undefined,
          _v$3: undefined,
          _v$4: undefined
        });
        return _el$5;
      }
    })];
  };
  const formatDateTime = (dateTimeString, showDate, showTime) => {
    if (!dateTimeString) return '';
    try {
      const date = new Date(dateTimeString);
      // Check if the date is valid
      if (isNaN(date.getTime())) {
        console.error('Invalid ISO date string:', dateTimeString);
        return '';
      }
      let formatted = '';
      if (showDate) {
        const dateFormatter = new Intl.DateTimeFormat('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        });
        const [{
          value: month
        },, {
          value: day
        },, {
          value: year
        }] = dateFormatter.formatToParts(date);
        formatted = `${month.charAt(0).toUpperCase() + month.slice(1)} ${day}, ${year}`;
      }
      if (showTime) {
        const timeFormatter = new Intl.DateTimeFormat('en-US', {
          hour: 'numeric',
          minute: '2-digit',
          hour12: true,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
        });
        const timeString = timeFormatter.format(date).toLowerCase();
        formatted = formatted ? `${formatted}, ${timeString}` : timeString;
      }
      return formatted;
    } catch (error) {
      console.error('Error formatting date:', error);
      return '';
    }
  };
  return (() => {
    const _el$6 = _tmpl$4$4(),
      _el$7 = _el$6.firstChild,
      _el$8 = _el$7.firstChild,
      _el$9 = _el$7.nextSibling,
      _el$10 = _el$9.nextSibling;
    _el$7.style.setProperty("margin-right", "50px");
    insert(_el$7, createComponent(Show, {
      get when() {
        return props.showAvatar;
      },
      get children() {
        return createComponent(Avatar, {
          get initialAvatarSrc() {
            return props.avatarSrc;
          }
        });
      }
    }), _el$8);
    insert(_el$8, (() => {
      const _c$ = createMemo(() => !!(props.showAgentMessages && props.message.agentFlowExecutedData && Array.isArray(props.message.agentFlowExecutedData) && props.message.agentFlowExecutedData.length > 0));
      return () => _c$() && (() => {
        const _el$11 = _tmpl$5$3();
        insert(_el$11, createComponent(WorkflowTreeView, {
          get workflowData() {
            return props.message.agentFlowExecutedData;
          },
          indentationLevel: 24
        }));
        return _el$11;
      })();
    })(), null);
    insert(_el$8, (() => {
      const _c$2 = createMemo(() => !!(props.showAgentMessages && props.message.agentReasoning));
      return () => _c$2() && (() => {
        const _el$12 = _tmpl$6$2(),
          _el$13 = _el$12.firstChild;
          _el$13.nextSibling;
        const _ref$ = botDetailsEl;
        typeof _ref$ === "function" ? use(_ref$, _el$12) : botDetailsEl = _el$12;
        insert(_el$12, createComponent(For, {
          get each() {
            return props.message.agentReasoning;
          },
          children: agent => {
            const agentMessages = agent.messages ?? [];
            let msgContent = agent.instructions || (agentMessages.length > 1 ? agentMessages.join('\\n') : agentMessages[0]);
            if (agentMessages.length === 0 && !agent.instructions) msgContent = `<p>Finished</p>`;
            return createComponent(AgentReasoningBubble, {
              get agentName() {
                return agent.agentName ?? '';
              },
              agentMessage: msgContent,
              get agentArtifacts() {
                return agent.artifacts;
              },
              get backgroundColor() {
                return props.backgroundColor;
              },
              get textColor() {
                return props.textColor;
              },
              get fontSize() {
                return props.fontSize;
              },
              get apiHost() {
                return props.apiHost;
              },
              get chatflowid() {
                return props.chatflowid;
              },
              get chatId() {
                return props.chatId;
              },
              get renderHTML() {
                return props.renderHTML;
              }
            });
          }
        }), null);
        return _el$12;
      })();
    })(), null);
    insert(_el$8, (() => {
      const _c$3 = createMemo(() => !!(props.message.artifacts && props.message.artifacts.length > 0));
      return () => _c$3() && (() => {
        const _el$15 = _tmpl$7$2();
        insert(_el$15, createComponent(For, {
          get each() {
            return props.message.artifacts;
          },
          children: item => {
            return item !== null ? createMemo(() => renderArtifacts(item)) : null;
          }
        }));
        return _el$15;
      })();
    })(), null);
    insert(_el$8, (() => {
      const _c$4 = createMemo(() => !!props.message.message);
      return () => _c$4() && (() => {
        const _el$16 = _tmpl$8$1();
        use(setBotMessageRef, _el$16);
        _el$16.style.setProperty("border-radius", "6px");
        createRenderEffect(_p$ => {
          const _v$5 = props.backgroundColor ?? defaultBackgroundColor$3,
            _v$6 = props.textColor ?? defaultTextColor$4,
            _v$7 = props.fontSize ? `${props.fontSize}px` : `${defaultFontSize$1}px`;
          _v$5 !== _p$._v$5 && ((_p$._v$5 = _v$5) != null ? _el$16.style.setProperty("background-color", _v$5) : _el$16.style.removeProperty("background-color"));
          _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$16.style.setProperty("color", _v$6) : _el$16.style.removeProperty("color"));
          _v$7 !== _p$._v$7 && ((_p$._v$7 = _v$7) != null ? _el$16.style.setProperty("font-size", _v$7) : _el$16.style.removeProperty("font-size"));
          return _p$;
        }, {
          _v$5: undefined,
          _v$6: undefined,
          _v$7: undefined
        });
        return _el$16;
      })();
    })(), null);
    insert(_el$8, (() => {
      const _c$5 = createMemo(() => !!props.message.action);
      return () => _c$5() && (() => {
        const _el$17 = _tmpl$9$1();
        insert(_el$17, createComponent(For, {
          get each() {
            return props.message.action.elements || [];
          },
          children: action => {
            return createMemo((() => {
              const _c$8 = createMemo(() => !!(action.type === 'approve-button' && action.label === 'Yes' || action.type === 'agentflowv2-approve-button'));
              return () => _c$8() ? (() => {
                const _el$18 = _tmpl$10$1(),
                  _el$19 = _el$18.firstChild;
                _el$18.$$click = () => props.handleActionClick(action, props.message.action);
                insert(_el$18, createComponent(TickIcon, {}), _el$19);
                insert(_el$18, () => action.label, null);
                return _el$18;
              })() : (() => {
                const _c$9 = createMemo(() => !!(action.type === 'reject-button' && action.label === 'No' || action.type === 'agentflowv2-reject-button'));
                return () => _c$9() ? (() => {
                  const _el$20 = _tmpl$11$1(),
                    _el$21 = _el$20.firstChild;
                  _el$20.$$click = () => props.handleActionClick(action, props.message.action);
                  insert(_el$20, createComponent(XIcon, {
                    isCurrentColor: true
                  }), _el$21);
                  insert(_el$20, () => action.label, null);
                  return _el$20;
                })() : (() => {
                  const _el$22 = _tmpl$12$1();
                  insert(_el$22, () => action.label);
                  return _el$22;
                })();
              })();
            })());
          }
        }));
        return _el$17;
      })();
    })(), null);
    insert(_el$9, (() => {
      const _c$6 = createMemo(() => !!(props.message.sourceDocuments && props.message.sourceDocuments.length));
      return () => _c$6() && [createComponent(Show, {
        get when() {
          return props.sourceDocsTitle;
        },
        get children() {
          const _el$23 = _tmpl$13$1();
          insert(_el$23, () => props.sourceDocsTitle);
          return _el$23;
        }
      }), (() => {
        const _el$24 = _tmpl$5$3();
        _el$24.style.setProperty("display", "flex");
        _el$24.style.setProperty("flex-direction", "row");
        _el$24.style.setProperty("width", "100%");
        _el$24.style.setProperty("flex-wrap", "wrap");
        insert(_el$24, createComponent(For, {
          get each() {
            return [...removeDuplicateURL(props.message)];
          },
          children: src => {
            const URL = isValidURL(src.metadata.source);
            return createComponent(SourceBubble, {
              get pageContent() {
                return URL ? URL.pathname : src.pageContent;
              },
              get metadata() {
                return src.metadata;
              },
              onSourceClick: () => {
                if (URL) {
                  window.open(src.metadata.source, '_blank');
                } else {
                  props.handleSourceDocumentsClick(src);
                }
              }
            });
          }
        }));
        return _el$24;
      })()];
    })());
    insert(_el$10, (() => {
      const _c$7 = createMemo(() => !!(props.chatFeedbackStatus && props.message.messageId));
      return () => _c$7() && [(() => {
        const _el$25 = _tmpl$5$3();
        insert(_el$25, createComponent(CopyToClipboardButton, {
          get feedbackColor() {
            return props.feedbackColor;
          },
          onClick: () => copyMessageToClipboard()
        }), null);
        insert(_el$25, createComponent(Show, {
          get when() {
            return copiedMessage();
          },
          get children() {
            const _el$26 = _tmpl$14$1();
            createRenderEffect(() => (props.feedbackColor ?? defaultFeedbackColor) != null ? _el$26.style.setProperty("color", props.feedbackColor ?? defaultFeedbackColor) : _el$26.style.removeProperty("color"));
            return _el$26;
          }
        }), null);
        insert(_el$25, (() => {
          const _c$10 = createMemo(() => !!(rating() === '' || rating() === 'THUMBS_UP'));
          return () => _c$10() ? createComponent(ThumbsUpButton, {
            get feedbackColor() {
              return thumbsUpColor();
            },
            get isDisabled() {
              return rating() === 'THUMBS_UP';
            },
            get rating() {
              return rating();
            },
            onClick: onThumbsUpClick
          }) : null;
        })(), null);
        insert(_el$25, (() => {
          const _c$11 = createMemo(() => !!(rating() === '' || rating() === 'THUMBS_DOWN'));
          return () => _c$11() ? createComponent(ThumbsDownButton, {
            get feedbackColor() {
              return thumbsDownColor();
            },
            get isDisabled() {
              return rating() === 'THUMBS_DOWN';
            },
            get rating() {
              return rating();
            },
            onClick: onThumbsDownClick
          }) : null;
        })(), null);
        insert(_el$25, createComponent(Show, {
          get when() {
            return props.message.dateTime;
          },
          get children() {
            const _el$27 = _tmpl$15$1();
            insert(_el$27, () => formatDateTime(props.message.dateTime, props?.dateTimeToggle?.date, props?.dateTimeToggle?.time));
            return _el$27;
          }
        }), null);
        createRenderEffect(() => className(_el$25, `flex items-center px-2 pb-2 ${props.showAvatar ? 'ml-10' : ''}`));
        return _el$25;
      })(), createComponent(Show, {
        get when() {
          return showFeedbackContentDialog();
        },
        get children() {
          return createComponent(FeedbackContentDialog, {
            get isOpen() {
              return showFeedbackContentDialog();
            },
            onClose: () => setShowFeedbackContentModal(false),
            onSubmit: submitFeedbackContent,
            get backgroundColor() {
              return props.backgroundColor;
            },
            get textColor() {
              return props.textColor;
            }
          });
        }
      })];
    })());
    return _el$6;
  })();
};
delegateEvents(["click"]);

const _tmpl$$e = /*#__PURE__*/template(`<div class="flex items-center"><div class="w-2 h-2 mr-1 rounded-full bubble1"></div><div class="w-2 h-2 mr-1 rounded-full bubble2"></div><div class="w-2 h-2 rounded-full bubble3">`);
const TypingBubble = () => _tmpl$$e();

const _tmpl$$d = /*#__PURE__*/template(`<div class="flex justify-start mb-2 items-start animate-fade-in host-container"><span class="px-4 py-4 ml-2 whitespace-pre-wrap max-w-full chatbot-host-bubble" data-testid="host-bubble">`);
const LoadingBubble = () => (() => {
  const _el$ = _tmpl$$d(),
    _el$2 = _el$.firstChild;
  insert(_el$2, createComponent(TypingBubble, {}));
  return _el$;
})();

const _tmpl$$c = /*#__PURE__*/template(`<div data-modal-target="defaultModal" data-modal-toggle="defaultModal" class="flex justify-start items-start animate-fade-in host-container hover:brightness-90 active:brightness-75"><span class="px-2 py-1 ml-1 whitespace-pre-wrap max-w-full chatbot-host-bubble" data-testid="host-bubble">`);
const StarterPromptBubble = props => (() => {
  const _el$ = _tmpl$$c(),
    _el$2 = _el$.firstChild;
  _el$.$$click = () => props.onPromptClick?.();
  _el$2.style.setProperty("width", "max-content");
  _el$2.style.setProperty("border-radius", "15px");
  _el$2.style.setProperty("cursor", "pointer");
  insert(_el$2, () => props.prompt);
  createRenderEffect(() => (props.starterPromptFontSize ? `${props.starterPromptFontSize}px` : '15px') != null ? _el$2.style.setProperty("font-size", props.starterPromptFontSize ? `${props.starterPromptFontSize}px` : '15px') : _el$2.style.removeProperty("font-size"));
  return _el$;
})();
delegateEvents(["click"]);

const _tmpl$$b = /*#__PURE__*/template(`<span class="w-full text-center px-[10px] pt-[6px] pb-[10px] m-auto text-[13px]"><a target="_blank" rel="noopener noreferrer" class="lite-badge" id="lite-badge"><span>&nbsp;`),
  _tmpl$2$8 = /*#__PURE__*/template(`<span class="w-full text-center px-[10px] pt-[6px] pb-[10px] m-auto text-[13px]">`);
const defaultTextColor$3 = '#303235';
const Badge = props => {
  let liteBadge;
  let observer;
  const appendBadgeIfNecessary = mutations => {
    mutations.forEach(mutation => {
      mutation.removedNodes.forEach(removedNode => {
        if ('id' in removedNode && liteBadge && removedNode.id == 'lite-badge') {
          console.log("Sorry, you can't remove the brand 😅");
          props.botContainer?.append(liteBadge);
        }
      });
    });
  };
  onMount(() => {
    if (!document || !props.botContainer) return;
    observer = new MutationObserver(appendBadgeIfNecessary);
    observer.observe(props.botContainer, {
      subtree: false,
      childList: true
    });
  });
  onCleanup(() => {
    if (observer) observer.disconnect();
  });
  return [createComponent(Show, {
    get when() {
      return props.footer?.showFooter === undefined || props.footer?.showFooter === null || props.footer?.showFooter === true;
    },
    get children() {
      const _el$ = _tmpl$$b(),
        _el$2 = _el$.firstChild,
        _el$3 = _el$2.firstChild;
        _el$3.firstChild;
      insert(_el$, () => props.footer?.text ?? 'Powered by', _el$2);
      const _ref$ = liteBadge;
      typeof _ref$ === "function" ? use(_ref$, _el$2) : liteBadge = _el$2;
      _el$2.style.setProperty("font-weight", "bold");
      insert(_el$3, () => props.footer?.company ?? 'Flowise', null);
      createRenderEffect(_p$ => {
        const _v$ = props.footer?.textColor ?? props.poweredByTextColor ?? defaultTextColor$3,
          _v$2 = props.badgeBackgroundColor ?? '#ffffff',
          _v$3 = props.footer?.companyLink ?? 'https://flowiseai.com',
          _v$4 = props.footer?.textColor ?? props.poweredByTextColor ?? defaultTextColor$3;
        _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$.style.setProperty("color", _v$) : _el$.style.removeProperty("color"));
        _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$.style.setProperty("background-color", _v$2) : _el$.style.removeProperty("background-color"));
        _v$3 !== _p$._v$3 && setAttribute(_el$2, "href", _p$._v$3 = _v$3);
        _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$2.style.setProperty("color", _v$4) : _el$2.style.removeProperty("color"));
        return _p$;
      }, {
        _v$: undefined,
        _v$2: undefined,
        _v$3: undefined,
        _v$4: undefined
      });
      return _el$;
    }
  }), createComponent(Show, {
    get when() {
      return props.footer?.showFooter === false;
    },
    get children() {
      const _el$5 = _tmpl$2$8();
      createRenderEffect(_p$ => {
        const _v$5 = props.footer?.textColor ?? props.poweredByTextColor ?? defaultTextColor$3,
          _v$6 = props.badgeBackgroundColor ?? '#ffffff';
        _v$5 !== _p$._v$5 && ((_p$._v$5 = _v$5) != null ? _el$5.style.setProperty("color", _v$5) : _el$5.style.removeProperty("color"));
        _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$5.style.setProperty("background-color", _v$6) : _el$5.style.removeProperty("background-color"));
        return _p$;
      }, {
        _v$5: undefined,
        _v$6: undefined
      });
      return _el$5;
    }
  })];
};

const _tmpl$$a = /*#__PURE__*/template(`<style>`),
  _tmpl$2$7 = /*#__PURE__*/template(`<div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true"><style></style><div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity animate-fade-in"></div><div class="fixed inset-0 z-10 overflow-y-auto"><div class="flex min-h-full items-center justify-center p-4 text-center sm:p-0"><div class="relative transform overflow-hidden rounded-lg text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">`),
  _tmpl$3$5 = /*#__PURE__*/template(`<div><pre>`);
function syntaxHighlight(json) {
  if (typeof json != 'string') {
    json = JSON.stringify(json, undefined, 2);
  }
  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  // eslint-disable-next-line
  return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)/g, function (match) {
    let cls = 'number';
    if (/^"/.test(match)) {
      if (/:$/.test(match)) {
        cls = 'key';
      } else {
        cls = 'string';
      }
    } else if (/true|false/.test(match)) {
      cls = 'boolean';
    } else if (/null/.test(match)) {
      cls = 'null';
    }
    return '<span class="' + cls + '">' + match + '</span>';
  });
}
const Popup = props => {
  let preEl;
  const [popupProps] = splitProps(props, ['onOpen', 'onClose', 'isOpen', 'value']);
  onMount(() => {
    if (preEl) {
      preEl.innerHTML = syntaxHighlight(JSON.stringify(props?.value, undefined, 2));
    }
  });
  const [isBotOpened, setIsBotOpened] = createSignal(
  // eslint-disable-next-line solid/reactivity
  popupProps.isOpen ?? false);
  createEffect(() => {
    if (isNotDefined(props.isOpen) || props.isOpen === isBotOpened()) return;
    toggleBot();
  });
  const stopPropagation = event => {
    event.stopPropagation();
  };
  const openBot = () => {
    setIsBotOpened(true);
    popupProps.onOpen?.();
    document.body.style.overflow = 'hidden';
  };
  const closeBot = () => {
    setIsBotOpened(false);
    popupProps.onClose?.();
    document.body.style.overflow = 'auto';
  };
  const toggleBot = () => {
    isBotOpened() ? closeBot() : openBot();
  };
  return createComponent(Show, {
    get when() {
      return isBotOpened();
    },
    get children() {
      return [(() => {
        const _el$ = _tmpl$$a();
        insert(_el$, css_248z);
        return _el$;
      })(), (() => {
        const _el$2 = _tmpl$2$7(),
          _el$3 = _el$2.firstChild,
          _el$4 = _el$3.nextSibling,
          _el$5 = _el$4.nextSibling,
          _el$6 = _el$5.firstChild,
          _el$7 = _el$6.firstChild;
        _el$2.style.setProperty("z-index", "1100");
        _el$2.addEventListener("click", closeBot);
        insert(_el$3, css_248z);
        _el$7.style.setProperty("background-color", "transparent");
        _el$7.style.setProperty("margin-left", "20px");
        _el$7.style.setProperty("margin-right", "20px");
        _el$7.addEventListener("click", stopPropagation);
        _el$7.addEventListener("pointerdown", stopPropagation);
        insert(_el$7, (() => {
          const _c$ = createMemo(() => !!props.value);
          return () => _c$() && (() => {
            const _el$8 = _tmpl$3$5(),
              _el$9 = _el$8.firstChild;
            _el$8.style.setProperty("background", "white");
            _el$8.style.setProperty("margin", "auto");
            _el$8.style.setProperty("padding", "7px");
            const _ref$ = preEl;
            typeof _ref$ === "function" ? use(_ref$, _el$9) : preEl = _el$9;
            return _el$8;
          })();
        })());
        return _el$2;
      })()];
    }
  });
};

const _tmpl$$9 = /*#__PURE__*/template(`<button class="font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline">`),
  _tmpl$2$6 = /*#__PURE__*/template(`<div class="fixed inset-0 rounded-lg flex items-center justify-center backdrop-blur-sm z-50"><div class="p-10 rounded-lg shadow-lg max-w-md w-full text-center mx-4 font-sans"><h2 class="text-2xl font-semibold mb-4 flex justify-center items-center"></h2><p class="text-gray-700 text-base mb-6"></p><div class="flex justify-center space-x-4"><button class="font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline">`);
const DisclaimerPopup = props => {
  const [popupProps] = splitProps(props, ['onAccept', 'onDeny', 'isOpen', 'isFullPage', 'title', 'message', 'textColor', 'buttonColor', 'buttonText', 'denyButtonText', 'buttonTextColor', 'denyButtonBgColor', 'blurredBackgroundColor', 'backgroundColor']);
  const handleAccept = () => {
    popupProps.onAccept?.();
  };
  const handleDeny = () => {
    popupProps.onDeny?.();
  };
  return createComponent(Show, {
    get when() {
      return popupProps.isOpen;
    },
    get children() {
      const _el$ = _tmpl$2$6(),
        _el$2 = _el$.firstChild,
        _el$3 = _el$2.firstChild,
        _el$4 = _el$3.nextSibling,
        _el$5 = _el$4.nextSibling,
        _el$6 = _el$5.firstChild;
      insert(_el$3, () => popupProps.title ?? 'Disclaimer');
      _el$6.$$click = handleAccept;
      insert(_el$6, () => popupProps.buttonText ?? 'Start Chatting');
      insert(_el$5, createComponent(Show, {
        get when() {
          return !popupProps.isFullPage;
        },
        get children() {
          const _el$7 = _tmpl$$9();
          _el$7.$$click = handleDeny;
          insert(_el$7, () => popupProps.denyButtonText ?? 'Cancel');
          createRenderEffect(_p$ => {
            const _v$ = popupProps.denyButtonBgColor || '#ef4444',
              _v$2 = popupProps.buttonTextColor || 'white';
            _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$7.style.setProperty("background", _v$) : _el$7.style.removeProperty("background"));
            _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$7.style.setProperty("color", _v$2) : _el$7.style.removeProperty("color"));
            return _p$;
          }, {
            _v$: undefined,
            _v$2: undefined
          });
          return _el$7;
        }
      }), null);
      createRenderEffect(_p$ => {
        const _v$3 = popupProps.blurredBackgroundColor || 'rgba(0, 0, 0, 0.4)',
          _v$4 = popupProps.backgroundColor || 'white',
          _v$5 = popupProps.textColor || 'black',
          _v$6 = popupProps.textColor || 'black',
          _v$7 = popupProps.message ?? 'By using this chatbot, you agree to the <a target="_blank" href="https://flowiseai.com/terms">Terms & Condition</a>.',
          _v$8 = popupProps.buttonColor || '#3b82f6',
          _v$9 = popupProps.buttonTextColor || 'white';
        _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$.style.setProperty("background", _v$3) : _el$.style.removeProperty("background"));
        _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$2.style.setProperty("background", _v$4) : _el$2.style.removeProperty("background"));
        _v$5 !== _p$._v$5 && ((_p$._v$5 = _v$5) != null ? _el$2.style.setProperty("color", _v$5) : _el$2.style.removeProperty("color"));
        _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$4.style.setProperty("color", _v$6) : _el$4.style.removeProperty("color"));
        _v$7 !== _p$._v$7 && (_el$4.innerHTML = _p$._v$7 = _v$7);
        _v$8 !== _p$._v$8 && ((_p$._v$8 = _v$8) != null ? _el$6.style.setProperty("background", _v$8) : _el$6.style.removeProperty("background"));
        _v$9 !== _p$._v$9 && ((_p$._v$9 = _v$9) != null ? _el$6.style.setProperty("color", _v$9) : _el$6.style.removeProperty("color"));
        return _p$;
      }, {
        _v$3: undefined,
        _v$4: undefined,
        _v$5: undefined,
        _v$6: undefined,
        _v$7: undefined,
        _v$8: undefined,
        _v$9: undefined
      });
      return _el$;
    }
  });
};
delegateEvents(["click"]);

const _tmpl$$8 = /*#__PURE__*/template(`<button type="submit">`);
const CancelButton = props => {
  return (() => {
    const _el$ = _tmpl$$8();
    spread(_el$, mergeProps({
      get disabled() {
        return props.isDisabled || props.isLoading;
      }
    }, props, {
      get ["class"]() {
        return 'py-2 px-4 justify-center font-semibold focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 chatbot-button ' + props.class;
      },
      "style": {
        background: 'transparent',
        border: 'none'
      }
    }), false, true);
    insert(_el$, createComponent(XIcon, {
      get color() {
        return props.buttonColor;
      }
    }));
    return _el$;
  })();
};

var client = {};

var browser = {};

var version = {};

var trim = {};

Object.defineProperty(trim, "__esModule", { value: true });
trim.trim = (str, char) => {
    return str.replace(new RegExp("^[" + char + "]+|[" + char + "]+$", "g"), "");
};

Object.defineProperty(version, "__esModule", { value: true });
const trim_1 = trim;
version.formatVersion = (version, versionTruncation) => {
    if (version === undefined)
        return "";
    const versionString = trim_1.trim(version, ". ").replace(new RegExp("_", "g"), ".");
    const versionParts = versionString.split(".");
    // Return if the string is not only digits once we removed the dots
    if (!/^\d+$/.test(versionParts.join(""))) {
        return versionString;
    }
    if (versionTruncation !== 0) {
        if (Number.isInteger(parseFloat(versionString))) {
            return parseInt(versionString, 10).toFixed(1);
        }
    }
    if (versionParts.length > 1) {
        if (versionTruncation !== null) {
            return versionParts.slice(0, versionTruncation + 1).join(".");
        }
    }
    return versionString;
};
version.parseBrowserEngineVersion = (userAgent, engine) => {
    if (!engine)
        return "";
    if (engine === "Gecko") {
        const geckoVersionRegex = /[ ](?:rv[: ]([0-9\.]+)).*gecko\/[0-9]{8,10}/i;
        const match = userAgent.match(geckoVersionRegex);
        if (match) {
            return match.pop();
        }
    }
    const regex = new RegExp(`${engine}\\s*\\/?\\s*((?:(?=\\d+\\.\\d)\\d+[.\\d]*|\\d{1,7}(?=(?:\\D|$))))`, "i");
    const match = userAgent.match(regex);
    if (!match)
        return "";
    return match.pop();
};

var variableReplacement = {};

Object.defineProperty(variableReplacement, "__esModule", { value: true });
variableReplacement.variableReplacement = (template, variables) => {
    const regex = new RegExp(`\\$\\d`, "g");
    if (template === null || template === undefined)
        return "";
    return template.replace(regex, (match) => {
        const index = parseInt(match.substr(1), 10);
        const variable = variables[index - 1];
        return variable || "";
    });
};

var userAgent = {};

var memoryCache = {};

Object.defineProperty(memoryCache, "__esModule", { value: true });
memoryCache.memoryCache = () => {
    const memoryCacheBucket = {};
    const set = (key, value) => {
        memoryCacheBucket[key] = value;
    };
    const get = (key) => {
        if (memoryCacheBucket.hasOwnProperty(key)) {
            return memoryCacheBucket[key];
        }
    };
    return {
        set,
        get
    };
};

Object.defineProperty(userAgent, "__esModule", { value: true });
const memory_cache_1 = memoryCache;
const cache = memory_cache_1.memoryCache();
const getRegexInstance = (rawRegex) => {
    const cachedRegexInstance = cache.get(rawRegex);
    if (cachedRegexInstance)
        return cachedRegexInstance.value;
    const regexInstance = RegExp(`(?:^|[^A-Z0-9\-_]|[^A-Z0-9\-]_|sprd-)(?:${rawRegex})`, "i");
    cache.set(rawRegex, {
        value: regexInstance
    });
    return regexInstance;
};
userAgent.userAgentParser = (rawRegex, userAgent) => {
    // TODO: find out why it fails in some browsers
    try {
        const regexInstance = getRegexInstance(rawRegex);
        const match = regexInstance.exec(userAgent);
        return match ? match.slice(1) : null;
    }
    catch (_a) {
        return null;
    }
};

var require$$3 = [
	{
		regex: "Helio/(\\d+[\\.\\d]+)",
		name: "Helio",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "7654Browser/(\\d+[\\.\\d]+)",
		name: "7654 Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Qazweb/(\\d+[\\.\\d]+)",
		name: "Qazweb",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Degdegan/(\\d+[\\.\\d]+)",
		name: "deg-degan",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "JavaFX/(\\d+[\\.\\d]+)",
		name: "JavaFX",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Chedot/(\\d+[\\.\\d]+)",
		name: "Chedot",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Chrome/(\\d+[\\.\\d]+) \\(Chromium GOST\\)",
		name: "Chromium GOST",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "(?:DeledaoPersonal|DeledaoFamily)/(\\d+[\\.\\d]+)",
		name: "Deledao",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "HasBrowser/(\\d+[\\.\\d]+)",
		name: "HasBrowser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Byffox/(\\d+[\\.\\d]+)",
		name: "Byffox",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Chrome/(\\d+[\\.\\d]+).+AgentWeb.+UCBrowser",
		name: "CoolBrowser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "DotBrowser/(\\d+[\\.\\d]+)",
		name: "Dot Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "CravingExplorer/(\\d+[\\.\\d]+)",
		name: "Craving Explorer",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "DeskBrowse/(\\d+[\\.\\d]+)",
		name: "DeskBrowse",
		version: "$1"
	},
	{
		regex: "Lolifox/(\\d+[\\.\\d]+)",
		name: "Lolifox",
		version: "$1"
	},
	{
		regex: "qutebrowser/(\\d+[\\.\\d]+).+Chrome",
		name: "Qutebrowser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "qutebrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Qutebrowser",
		version: "$1"
	},
	{
		regex: "flast/(\\d+[\\.\\d]+)",
		name: "Flast",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "PolyBrowser/(\\d+[\\.\\d]+)",
		name: "PolyBrowser",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Chrome.+BriskBard/(\\d+[\\.\\d]+)",
		name: "BriskBard",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "BriskBard(?:/(\\d+[\\.\\d]+))?",
		name: "BriskBard",
		version: "$1"
	},
	{
		regex: "GinxDroidBrowser/(\\d+[\\.\\d]+)",
		name: "GinxDroid Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "AviraScout/(\\d+[\\.\\d]+)",
		name: "Avira Scout",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "VenusBrowser/(\\d+[\\.\\d]+)",
		name: "Venus Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Chrome.+Otter(?:[ /](\\d+[\\.\\d]+))?",
		name: "Otter Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Otter(?:[ /](\\d+[\\.\\d]+))?",
		name: "Otter Browser",
		version: "$1"
	},
	{
		regex: "Chrome.+Smooz/(\\d+[\\.\\d]+)",
		name: "Smooz",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Smooz/(\\d+[\\.\\d]+)",
		name: "Smooz",
		version: "$1"
	},
	{
		regex: "Cornowser/(\\d+[\\.\\d]+)",
		name: "Cornowser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Orca/(\\d+[\\.\\d]+)",
		name: "Orca",
		version: "$1"
	},
	{
		regex: "Flow/(?:(\\d+[\\.\\d]+))",
		name: "Flow",
		version: "$1",
		engine: {
			"default": "EkiohFlow"
		}
	},
	{
		regex: "Ekioh/(?:(\\d+[\\.\\d]+))",
		name: "Flow",
		version: "$1",
		engine: {
			"default": "EkiohFlow"
		}
	},
	{
		regex: "xStand/(\\d+[\\.\\d]+)",
		name: "xStand",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Biyubi/(\\d+[\\.\\d]+)",
		name: "Biyubi",
		version: "$1"
	},
	{
		regex: "(?:Perfect%20Browser(?:-iPad)?|Perfect(?:BrowserPro)?)/(\\d+[\\.\\d]+)",
		name: "Perfect Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Browser/Phantom/V(\\d+[\\.\\d]+)",
		name: "Phantom Browser",
		version: "$1"
	},
	{
		regex: "AwoX(?:/(\\d+[\\.\\d]+))? Browser",
		name: "AwoX",
		version: "$1"
	},
	{
		regex: "Zetakey/(\\d+[\\.\\d]+)",
		name: "Zetakey",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "PlayFreeBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "PlayFree Browser",
		version: "$1"
	},
	{
		regex: "(?:chimlac_browser|chimlac)/(?:(\\d+[\\.\\d]+))",
		name: "Chim Lac",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Odin/(?:(\\d+[\\.\\d]+))",
		name: "Odin",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Tbrowser/(\\d+[\\.\\d]+)",
		name: "T-Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "SFive(?:_Android)?/.+ Chrome/(\\d+[\\.\\d]+)",
		name: "SFive",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "SFive_IOS/(\\d+[\\.\\d]+)",
		name: "SFive",
		version: "$1"
	},
	{
		regex: "Navigateur web/(?:(\\d+[\\.\\d]+))?",
		name: "Navigateur Web",
		version: "$1"
	},
	{
		regex: "Sraf(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Seraphic Sraf",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "SeewoBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "Seewo Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "(?:Kode(?:iOS)?/(?:(\\d+[\\.\\d]+))?|TansoDL)",
		name: "Kode Browser",
		version: "$1"
	},
	{
		regex: "UR/(?:(\\d+[\\.\\d]+))",
		name: "UR Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "OceanHero/([\\.\\d]+)",
		name: "OceanHero",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Chrome/.+ SLBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "Smart Lenovo Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "SLBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "Smart Lenovo Browser",
		version: "$1"
	},
	{
		regex: "Browzar",
		name: "Browzar",
		version: ""
	},
	{
		regex: "Stargon/(?:(\\d+[\\.\\d]+))?",
		name: "Stargon",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "NFSBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "NFS Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Borealis/(\\d+[\\.\\d]+)",
		name: "Borealis Navigator",
		version: "$1"
	},
	{
		regex: "YoloBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "Yolo Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "PHX/(?:(\\d+[\\.\\d]+))?",
		name: "Phoenix Browser",
		version: "$1"
	},
	{
		regex: "PrivacyWall/(?:(\\d+[\\.\\d]+))?",
		name: "PrivacyWall",
		version: "$1"
	},
	{
		regex: "Ghostery:?(\\d+[\\.\\d]+)?",
		name: "Ghostery Privacy Browser",
		version: "$1"
	},
	{
		regex: "Firefox/.*(?:Turkcell-)?YaaniBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Yaani Browser",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "(?:Turkcell-)?YaaniBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Yaani Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "SEB/(?:(\\d+[\\.\\d]+))?",
		name: "Safe Exam Browser",
		version: "$1"
	},
	{
		regex: "Colibri/(?:(\\d+[\\.\\d]+))?",
		name: "Colibri",
		version: "$1"
	},
	{
		regex: "Xvast/(?:(\\d+[\\.\\d]+))?",
		name: "Xvast",
		version: "$1"
	},
	{
		regex: "TungstenBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "Tungsten",
		version: "$1"
	},
	{
		regex: "Lulumi-browser/(?:(\\d+[\\.\\d]+))?",
		name: "Lulumi",
		version: "$1"
	},
	{
		regex: "ybrowser/(?:(\\d+[\\.\\d]+))?",
		name: "Yahoo! Japan Browser",
		version: "$1"
	},
	{
		regex: "iLunascapeLite/(?:(\\d+[\\.\\d]+))?",
		name: "Lunascape Lite",
		version: "$1"
	},
	{
		regex: "Polypane/(?:(\\d+[\\.\\d]+))?",
		name: "Polypane",
		version: "$1"
	},
	{
		regex: "OhHaiBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "OhHai Browser",
		version: "$1"
	},
	{
		regex: "Sizzy/(?:(\\d+[\\.\\d]+))?",
		name: "Sizzy",
		version: "$1"
	},
	{
		regex: "GlassBrowser/(?:(\\d+[\\.\\d]+))?",
		name: "Glass Browser",
		version: "$1"
	},
	{
		regex: "ToGate/(?:(\\d+[\\.\\d]+))?",
		name: "ToGate",
		version: "$1"
	},
	{
		regex: "AirWatch Browser v(?:(\\d+[\\.\\d]+))?",
		name: "VMware AirWatch",
		version: "$1"
	},
	{
		regex: "ADG/(?:(\\d+[\\.\\d]+))?",
		name: "AOL Desktop",
		version: "$1"
	},
	{
		regex: "Elements Browser/(?:(\\d+[\\.\\d]+))?",
		name: "Elements Browser",
		version: "$1"
	},
	{
		regex: "Light/(\\d+[\\.\\d]+)",
		name: "Light",
		version: "$1"
	},
	{
		regex: "Valve Steam GameOverlay/(?:(\\d+[\\.\\d]+))?",
		name: "Steam In-Game Overlay",
		version: "$1"
	},
	{
		regex: "115Browser/(?:(\\d+[\\.\\d]+))?",
		name: "115 Browser",
		version: "$1"
	},
	{
		regex: "Atom/(?:(\\d+[\\.\\d]+))?",
		name: "Atom",
		version: "$1"
	},
	{
		regex: "Mobile VR.+Firefox",
		name: "Firefox Reality",
		version: ""
	},
	{
		regex: "AVG(?:/(\\d+[\\.\\d]+))?",
		name: "AVG Secure Browser",
		version: "$1"
	},
	{
		regex: "Start/(?:(\\d+[\\.\\d]+))?",
		name: "START Internet Browser",
		version: "$1"
	},
	{
		regex: "Lovense(?:/(\\d+[\\.\\d]+))?",
		name: "Lovense Browser",
		version: "$1"
	},
	{
		regex: "com.airfind.deltabrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Delta Browser",
		version: "$1"
	},
	{
		regex: "(?:Ordissimo|webissimo3)(?:/(\\d+[\\.\\d]+))?",
		name: "Ordissimo",
		version: "$1"
	},
	{
		regex: "CCleaner(?:/(\\d+[\\.\\d]+))?",
		name: "CCleaner",
		version: "$1"
	},
	{
		regex: "AlohaLite(?:/(\\d+[\\.\\d]+))?",
		name: "Aloha Browser Lite",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "TaoBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Tao Browser",
		version: "$1"
	},
	{
		regex: "Falkon(?:/(\\d+[\\.\\d]+))?",
		name: "Falkon",
		version: "$1"
	},
	{
		regex: "mCent(?:/(\\d+[\\.\\d]+))?",
		name: "mCent",
		version: "$1"
	},
	{
		regex: "SalamWeb(?:/(\\d+[\\.\\d]+))?",
		name: "SalamWeb",
		version: "$1"
	},
	{
		regex: "BlackHawk(?:/(\\d+[\\.\\d]+))?",
		name: "BlackHawk",
		version: "$1"
	},
	{
		regex: "Minimo(?:/(\\d+[\\.\\d]+))?",
		name: "Minimo",
		version: "$1"
	},
	{
		regex: "WIB(?:/(\\d+[\\.\\d]+))?",
		name: "Wear Internet Browser",
		version: "$1"
	},
	{
		regex: "Origyn Web Browser",
		name: "Origyn Web Browser",
		version: ""
	},
	{
		regex: "Kinza(?:/(\\d+[\\.\\d]+))?",
		name: "Kinza",
		version: "$1"
	},
	{
		regex: "Beamrise(?:/(\\d+[\\.\\d]+))?",
		name: "Beamrise",
		version: "$1"
	},
	{
		regex: "Faux(?:/(\\d+[\\.\\d]+))?",
		name: "Faux Browser",
		version: "$1"
	},
	{
		regex: "splash Version(?:/(\\d+[\\.\\d]+))?",
		name: "Splash",
		version: "$1"
	},
	{
		regex: "MZBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Meizu Browser",
		version: "$1"
	},
	{
		regex: "COSBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "COS Browser",
		version: "$1"
	},
	{
		regex: "Crusta(?:/(\\d+[\\.\\d]+))?",
		name: "Crusta",
		version: "$1"
	},
	{
		regex: "Hawk/TurboBrowser(?:/v?(\\d+[\\.\\d]+))?",
		name: "Hawk Turbo Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "FreeU(?:/(\\d+[\\.\\d]+))?",
		name: "FreeU",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "NoxBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Nox Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Basilisk(?:/(\\d+[\\.\\d]+))?",
		name: "Basilisk",
		version: "$1",
		engine: {
			"default": "Goanna"
		}
	},
	{
		regex: "SputnikBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Sputnik Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "TNSBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "K.Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "OculusBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Oculus Browser",
		version: "$1"
	},
	{
		regex: "Jio(?:Browser|Pages)(?:/(\\d+[\\.\\d]+))?",
		name: "Jio Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Chrome/.+ Hola(?:/(\\d+[\\.\\d]+))?",
		name: "hola! Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Slimjet/(?:(\\d+[\\.\\d]+))",
		name: "Slimjet",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "7Star/(?:(\\d+[\\.\\d]+))",
		name: "7Star",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "MxNitro/(?:(\\d+[\\.\\d]+))",
		name: "MxNitro",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "HuaweiBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Huawei Browser",
		version: "$1"
	},
	{
		regex: "VivoBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "vivo Browser",
		version: "$1"
	},
	{
		regex: "RealmeBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Realme Browser",
		version: "$1"
	},
	{
		regex: "Beaker ?Browser(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Beaker Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "QwantiOS/(\\d+[\\.\\d]+)",
		name: "Qwant Mobile",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "QwantMobile(?:/(\\d+[\\.\\d]+))?",
		name: "Qwant Mobile",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Qwant/(\\d+[\\.\\d]+)",
		name: "Qwant Mobile",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "TenFourFox(?:/(\\d+[\\.\\d]+))?",
		name: "TenFourFox",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "AOLShield(?:/(\\d+[\\.\\d]+))?",
		name: "AOL Shield",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Edge[ /](\\d+[\\.\\d]+)",
		name: "Microsoft Edge",
		version: "$1",
		engine: {
			"default": "Edge"
		}
	},
	{
		regex: "EdgiOS[ /](\\d+[\\.\\d]+)",
		name: "Microsoft Edge",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "EdgA[ /](\\d+[\\.\\d]+)",
		name: "Microsoft Edge",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Edg[ /](\\d+[\\.\\d]+)",
		name: "Microsoft Edge",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "QIHU 360[ES]E",
		name: "360 Browser",
		version: ""
	},
	{
		regex: "360 Aphone Browser(?: \\((\\d+[\\.\\d]+)(?:beta)?\\))?",
		name: "360 Phone Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "SailfishBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Sailfish Browser",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "IceCat(?:/(\\d+[\\.\\d]+))?",
		name: "IceCat",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Mobicip",
		name: "Mobicip",
		version: "",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Camino(?:/(\\d+[\\.\\d]+))?",
		name: "Camino",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Waterfox(?:/(\\d+[\\.\\d]+))?",
		name: "Waterfox",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Chrome/.+ AlohaBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Aloha Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "AlohaBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Aloha Browser",
		version: "$1"
	},
	{
		regex: "(?:Avast|ASW|Safer)(?:/(\\d+[\\.\\d]+))?",
		name: "Avast Secure Browser",
		version: "$1"
	},
	{
		regex: "Epic(?:/(\\d+[\\.\\d]+))",
		name: "Epic",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Fennec(?:/(\\d+[\\.\\d]+))?",
		name: "Fennec",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Firefox.*Tablet browser (\\d+[\\.\\d]+)",
		name: "MicroB",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Maemo Browser(?: (\\d+[\\.\\d]+))?",
		name: "MicroB",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Deepnet Explorer (\\d+[\\.\\d]+)?",
		name: "Deepnet Explorer",
		version: "$1"
	},
	{
		regex: "Avant ?Browser",
		name: "Avant Browser",
		version: "",
		engine: {
			"default": ""
		}
	},
	{
		regex: "OppoBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Oppo Browser",
		version: "$1"
	},
	{
		regex: "Chrome/(\\d+[\\.\\d]+).*MRCHROME",
		name: "Amigo",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "AtomicBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Atomic Web Browser",
		version: "$1"
	},
	{
		regex: "Bunjalloo(?:/(\\d+[\\.\\d]+))?",
		name: "Bunjalloo",
		version: "$1"
	},
	{
		regex: "Brave(?:/(\\d+[\\.\\d]+))?",
		name: "Brave",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Iridium(?:/(\\d+[\\.\\d]+))?",
		name: "Iridium",
		version: "$1"
	},
	{
		regex: "Iceweasel(?:/(\\d+[\\.\\d]+))?",
		name: "Iceweasel",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "WebPositive",
		name: "WebPositive",
		version: "",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: ".*Goanna.*PaleMoon(?:/(\\d+[\\.\\d]+))?",
		name: "Pale Moon",
		version: "$1",
		engine: {
			"default": "Goanna"
		}
	},
	{
		regex: "PaleMoon(?:/(\\d+[\\.\\d]+))?",
		name: "Pale Moon",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "CometBird(?:/(\\d+[\\.\\d]+))?",
		name: "CometBird",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "IceDragon(?:/(\\d+[\\.\\d]+))?",
		name: "IceDragon",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Flock(?:/(\\d+[\\.\\d]+))?",
		name: "Flock",
		version: "$1",
		engine: {
			"default": "Gecko",
			versions: {
				"3": "WebKit"
			}
		}
	},
	{
		regex: "JigBrowserPlus/(?:(\\d+[\\.\\d]+))?",
		name: "Jig Browser Plus",
		version: "$1"
	},
	{
		regex: "jig browser(?: web;|9i?)?(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Jig Browser",
		version: "$1"
	},
	{
		regex: "Kapiko(?:/(\\d+[\\.\\d]+))?",
		name: "Kapiko",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Kylo(?:/(\\d+[\\.\\d]+))?",
		name: "Kylo",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Origin/(?:(\\d+[\\.\\d]+))?",
		name: "Origin In-Game Overlay",
		version: "$1"
	},
	{
		regex: "Cunaguaro(?:/(\\d+[\\.\\d]+))?",
		name: "Cunaguaro",
		version: "$1"
	},
	{
		regex: "(?:TO-Browser/TOB|DT-Browser/DTB)(\\d+[\\.\\d]+)",
		name: "t-online.de Browser",
		version: "$1"
	},
	{
		regex: "Kazehakase(?:/(\\d+[\\.\\d]+))?",
		name: "Kazehakase",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "ArcticFox(?:/(\\d+[\\.\\d]+))?",
		name: "Arctic Fox",
		version: "$1",
		engine: {
			"default": "Goanna"
		}
	},
	{
		regex: "Mypal(?:/(\\d+[\\.\\d]+))?",
		name: "Mypal",
		version: "$1",
		engine: {
			"default": "Goanna"
		}
	},
	{
		regex: "Centaury(?:/(\\d+[\\.\\d]+))?",
		name: "Centaury",
		version: "$1",
		engine: {
			"default": "Goanna"
		}
	},
	{
		regex: "(?:Focus|Klar)(?:/(\\d+[\\.\\d]+))?",
		name: "Firefox Focus",
		version: "$1"
	},
	{
		regex: "Cyberfox(?:/(\\d+[\\.\\d]+))?",
		name: "Cyberfox",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Firefox/(\\d+[\\.\\d]+).*\\(Swiftfox\\)",
		name: "Swiftfox",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "(?:Mobile|Tablet).*Servo.*Firefox(?:/(\\d+[\\.\\d]+))?",
		name: "Firefox Mobile",
		version: "$1",
		engine: {
			"default": "Servo"
		}
	},
	{
		regex: "(?:Mobile|Tablet).*Firefox(?:/(\\d+[\\.\\d]+))?",
		name: "Firefox Mobile",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "FxiOS/(\\d+[\\.\\d]+)",
		name: "Firefox Mobile iOS",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: ".*Servo.*Firefox(?:/(\\d+[\\.\\d]+))?",
		name: "Firefox",
		version: "$1",
		engine: {
			"default": "Servo"
		}
	},
	{
		regex: "(?!.*Opera[ /])Firefox(?:/(\\d+[\\.\\d]+))?",
		name: "Firefox",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "(?:BonEcho|GranParadiso|Lorentz|Minefield|Namoroka|Shiretoko)/(\\d+[\\.\\d]+)",
		name: "Firefox",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "ANTFresco(?:[/ ](\\d+[\\.\\d]+))?",
		name: "ANT Fresco",
		version: "$1"
	},
	{
		regex: "ANTGalio(?:/(\\d+[\\.\\d]+))?",
		name: "ANTGalio",
		version: "$1"
	},
	{
		regex: "(?:Espial|Escape)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Espial TV Browser",
		version: "$1"
	},
	{
		regex: "RockMelt(?:/(\\d+[\\.\\d]+))?",
		name: "RockMelt",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Fireweb Navigator(?:/(\\d+[\\.\\d]+))?",
		name: "Fireweb Navigator",
		version: "$1"
	},
	{
		regex: "Fireweb(?:/(\\d+[\\.\\d]+))?",
		name: "Fireweb",
		version: "$1"
	},
	{
		regex: "(?:Navigator|Netscape6?)(?:/(\\d+[\\.\\d]+))?",
		name: "Netscape",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "(?:Polarity)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Polarity",
		version: "$1"
	},
	{
		regex: "(?:QupZilla)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "QupZilla",
		version: "$1"
	},
	{
		regex: "(?:Dooble)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Dooble",
		version: "$1"
	},
	{
		regex: "Whale/(\\d+[\\.\\d]+)",
		name: "Whale Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Obigo[ ]?(?:InternetBrowser|Browser)?(?:[ /]([a-z0-9]*))?",
		name: "Obigo",
		version: "$1"
	},
	{
		regex: "Obigo|Teleca",
		name: "Obigo",
		version: ""
	},
	{
		regex: "UCBrowserHD/(\\d[\\d\\.]+)",
		name: "UC Browser HD",
		version: "$1"
	},
	{
		regex: "UCMini(?:[ /]?(\\d+[\\.\\d]+))?",
		name: "UC Browser Mini",
		version: "$1"
	},
	{
		regex: "UC[ ]?Browser.* \\(UCMini\\)",
		name: "UC Browser Mini",
		version: ""
	},
	{
		regex: "UCTurbo(?:[ /]?(\\d+[\\.\\d]+))?",
		name: "UC Browser Turbo",
		version: "$1"
	},
	{
		regex: "UC[ ]?Browser.* \\(UCTurbo\\)",
		name: "UC Browser Turbo",
		version: ""
	},
	{
		regex: "OPRGX(?:/(\\d+[\\.\\d]+))?",
		name: "Opera GX",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "(?:Opera Tablet.*Version|Opera/.+Opera Mobi.+Version|Mobile.+OPR)/(\\d+[\\.\\d]+)",
		name: "Opera Mobile",
		version: "$1",
		engine: {
			"default": "Presto",
			versions: {
				"15": "Blink"
			}
		}
	},
	{
		regex: "MMS/(\\d+[\\.\\d]+)",
		name: "Opera Neon",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "OMI/(\\d+[\\.\\d]+)",
		name: "Opera Devices",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Opera%20Touch/(\\d+[\\.\\d]+)? CFNetwork/.+Darwin/.+(?!.*x86_64)",
		name: "Opera Touch",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "OPT/(\\d+[\\.\\d]+)",
		name: "Opera Touch",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Opera/(\\d+[\\.\\d]+).+Opera Mobi",
		name: "Opera Mobile",
		version: "$1",
		engine: {
			"default": "Presto",
			versions: {
				"15": "Blink"
			}
		}
	},
	{
		regex: "Opera ?Mini/(?:att/)?(\\d+[\\.\\d]+)",
		name: "Opera Mini",
		version: "$1",
		engine: {
			"default": "Presto"
		}
	},
	{
		regex: "Opera ?Mini.+Version/(\\d+[\\.\\d]+)",
		name: "Opera Mini",
		version: "$1",
		engine: {
			"default": "Presto"
		}
	},
	{
		regex: "OPiOS/(\\d+[\\.\\d]+)",
		name: "Opera Mini iOS",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Opera%20Mini/(\\d+[\\.\\d]+) CFNetwork",
		name: "Opera Mini iOS",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Opera.+Edition Next.+Version/(\\d+[\\.\\d]+)",
		name: "Opera Next",
		version: "$1",
		engine: {
			"default": "Presto",
			versions: {
				"15": "Blink"
			}
		}
	},
	{
		regex: "(?:Opera|OPR)[/ ](?:9.80.*Version/)?(\\d+[\\.\\d]+).+Edition Next",
		name: "Opera Next",
		version: "$1",
		engine: {
			"default": "Presto",
			versions: {
				"15": "Blink"
			}
		}
	},
	{
		regex: "(?:Opera[/ ]?|OPR[/ ])(?:9.80.*Version/)?(\\d+[\\.\\d]+)",
		name: "Opera",
		version: "$1",
		engine: {
			"default": "",
			versions: {
				"7": "Presto",
				"15": "Blink",
				"3.5": "Elektra"
			}
		}
	},
	{
		regex: "rekonq(?:/(\\d+[\\.\\d]+))?",
		name: "Rekonq",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "CoolNovo(?:/(\\d+[\\.\\d]+))?",
		name: "CoolNovo",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "(?:Comodo[ _])?Dragon(?!fruit)(?:/(\\d+[\\.\\d]+))?",
		name: "Comodo Dragon",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "ChromePlus(?:/(\\d+[\\.\\d]+))?",
		name: "ChromePlus",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Conkeror(?:/(\\d+[\\.\\d]+))?",
		name: "Conkeror",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Konqueror(?:/(\\d+[\\.\\d]+))?",
		name: "Konqueror",
		version: "$1",
		engine: {
			"default": "KHTML",
			versions: {
				"4": ""
			}
		}
	},
	{
		regex: "(?:baidubrowser|bdbrowser(?:(?:hd)?_i18n)?|FlyFlow|BaiduHD)(?:[/ ](\\d+[\\.\\d]*))?",
		name: "Baidu Browser",
		version: "$1"
	},
	{
		regex: "(?:(?:BD)?Spark(?:Safe)?|BIDUBrowser)[/ ](\\d+[\\.\\d]*)",
		name: "Baidu Spark",
		version: "$1"
	},
	{
		regex: "YaBrowser(?:/(\\d+[\\.\\d]*)) \\(lite\\)?",
		name: "Yandex Browser Lite",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "YaBrowser(?:/(\\d+[\\.\\d]*))(?: \\((alpha|beta)\\))?",
		name: "Yandex Browser",
		version: "$1 $2",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Ya(?:ndex)?SearchBrowser(?:/(\\d+[\\.\\d]*))",
		name: "Yandex Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Vivaldi(?:/(\\d+[\\.\\d]+))?",
		name: "Vivaldi",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "TweakStyle(?:/(\\d+[\\.\\d]+))?",
		name: "TweakStyle",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Chrome.+Midori Browser/(\\d+[\\.\\d]+)",
		name: "Midori",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Midori(?:/(\\d+[\\.\\d]+))?",
		name: "Midori",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Mercury(?:/(\\d+[\\.\\d]+))?",
		name: "Mercury",
		version: "$1"
	},
	{
		regex: "Chrome.+Maxthon(?:.+\\(portable\\))?/(\\d+[\\.\\d]+)",
		name: "Maxthon",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"5.2": "Blink"
			}
		}
	},
	{
		regex: "(?:Maxthon(?:%20Browser)?|MxBrowser(?:-inhouse|-iPhone)?)[ /](\\d+[\\.\\d]+)",
		name: "Maxthon",
		version: "$1",
		engine: {
			"default": "",
			versions: {
				"3": "WebKit"
			}
		}
	},
	{
		regex: "(?:Maxthon|MyIE2)",
		name: "Maxthon",
		version: "",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Puffin(?:/(\\d+[\\.\\d]+))?",
		name: "Puffin",
		version: "$1"
	},
	{
		regex: "MobileIron(?:/(\\d+[\\.\\d]+))?",
		name: "Iron Mobile",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Chrome(?:/(\\d+[\\.\\d]+))?.*Iron",
		name: "Iron",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Iron(?:/(\\d+[\\.\\d]+))?",
		name: "Iron",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "Epiphany(?:/(\\d+[\\.\\d]+))?",
		name: "GNOME Web",
		version: "$1",
		engine: {
			"default": "Gecko",
			versions: {
				"2.9.16": "",
				"2.28": "WebKit"
			}
		}
	},
	{
		regex: "LieBaoFast(?:[ /](\\d+[\\.\\d]+))?",
		name: "LieBaoFast",
		version: "$1"
	},
	{
		regex: "LBBrowser(?:[ /](\\d+[\\.\\d]+))?",
		name: "Cheetah Browser",
		version: "$1"
	},
	{
		regex: "SE (\\d+[\\.\\d]+)",
		name: "Sogou Explorer",
		version: "$1"
	},
	{
		regex: "QQBrowserLite/([\\d\\.]+)",
		name: "QQ Browser Lite",
		version: "$1"
	},
	{
		regex: "M?QQBrowser/Mini([\\.\\d]+)?",
		name: "QQ Browser Mini",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "M?QQBrowser(?:/([\\.\\d]+))?",
		name: "QQ Browser",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "(?:MIUIBrowser|MiuiBrowser)(?:/(\\d+[\\.\\d]+))?",
		name: "MIUI Browser",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "(?:coc_coc_browser|coccocbrowser|CocCoc)(?:/(\\d+[\\.\\d]+))?",
		name: "Coc Coc",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "DuckDuckGo/(\\d+[\\.\\d]*)",
		name: "DuckDuckGo Privacy Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Samsung ?Browser(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Samsung Browser",
		version: "$1"
	},
	{
		regex: "(?:SFB(?:rowser)?)/(\\d+[\\.\\d]+)",
		name: "Super Fast Browser",
		version: "$1"
	},
	{
		regex: "com.browser.tssomas(?:/(\\d+[\\.\\d]+))?",
		name: "Super Fast Browser",
		version: "$1"
	},
	{
		regex: "EUI Browser(?:/(\\d+[\\.\\d]+))?",
		name: "EUI Browser",
		version: "$1"
	},
	{
		regex: "UBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "UBrowser",
		version: "$1"
	},
	{
		regex: "Streamy(?:/(\\d+[\\.\\d]+))?",
		name: "Streamy",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "isivioo",
		name: "Isivioo",
		version: "",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "UC[ ]?Browser(?:[ /]?(\\d+[\\.\\d]+))?",
		name: "UC Browser",
		version: "$1"
	},
	{
		regex: "UCWEB(?:[ /]?(\\d+[\\.\\d]+))?",
		name: "UC Browser",
		version: "$1"
	},
	{
		regex: "UC AppleWebKit",
		name: "UC Browser",
		version: ""
	},
	{
		regex: "Tenta/(\\d+[\\.\\d]+)",
		name: "Tenta Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Rocket/(\\d+[\\.\\d]+)",
		name: "Firefox Rocket",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Web Explorer/(\\d+[\\.\\d]+).*Chrome",
		name: "Web Explorer",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "SznProhlizec/(\\d+[\\.\\d]+)",
		name: "Seznam Browser",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "SogouMobileBrowser/(\\d+[\\.\\d]+)",
		name: "Sogou Mobile Browser",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Mint Browser/(\\d+[\\.\\d]+)",
		name: "Mint Browser",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Ecosia (?:android|ios)@(\\d+[\\.\\d]+)",
		name: "Ecosia",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "ACHEETAHI",
		name: "CM Browser",
		version: "",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Kiwi Chrome",
		name: "Kiwi",
		version: "",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Mb2345Browser/(\\d+[\\.\\d]+)",
		name: "2345 Browser",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "QtWebEngine/(\\d+[\\.\\d]+)",
		name: "QtWebEngine",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Silk/(\\d+[\\.\\d]+) like Chrome",
		name: "Mobile Silk",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Silk(?:/(\\d+[\\.\\d]+))?",
		name: "Mobile Silk",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "IBrowse(?:[ /](\\d+[\\.\\d]+))?",
		name: "IBrowse",
		version: "$1"
	},
	{
		regex: "UP.Browser(?:/(\\d+[\\.\\d]+))?",
		name: "Openwave Mobile Browser",
		version: "$1"
	},
	{
		regex: "Openwave(?:/(\\d+[\\.\\d]+))?",
		name: "Openwave Mobile Browser",
		version: "$1"
	},
	{
		regex: "OneBrowser(?:[ /](\\d+[\\.\\d]+))?",
		name: "ONE Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "(?:NokiaBrowser|BrowserNG)(?:/(\\d+[\\.\\d]+))?",
		name: "Nokia Browser",
		version: "$1"
	},
	{
		regex: "Series60/5\\.0",
		name: "Nokia Browser",
		version: "7.0"
	},
	{
		regex: "Series60/(\\d+[\\.\\d]+)",
		name: "Nokia OSS Browser",
		version: "$1"
	},
	{
		regex: "S40OviBrowser/(\\d+[\\.\\d]+)",
		name: "Nokia Ovi Browser",
		version: "$1"
	},
	{
		regex: "^Nokia|Nokia[EN]?\\d+",
		name: "Nokia Browser",
		version: ""
	},
	{
		regex: "Sleipnir(?:(?:%20Browser)?[ /](\\d+[\\.\\d]+))?",
		name: "Sleipnir",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "NTENTBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "NTENT Browser",
		version: "$1"
	},
	{
		regex: "TV Bro/(\\d+[\\.\\d]+)",
		name: "TV Bro",
		version: "$1"
	},
	{
		regex: "Chrome/.+ Quark(?:/(\\d+[\\.\\d]+))?",
		name: "Quark",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "MonumentBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Monument Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "BlueBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "Blue Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "JAPAN Browser(?:/(\\d+[\\.\\d]+))?",
		name: "Japan Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Version/.* Chrome(?:/(\\d+[\\.\\d]+))?",
		name: "Chrome Webview",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "CrMo(?:/(\\d+[\\.\\d]+))?",
		name: "Chrome Mobile",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "CriOS(?:/(\\d+[\\.\\d]+))?",
		name: "Chrome Mobile iOS",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Chrome(?:/(\\d+[\\.\\d]+))? Mobile",
		name: "Chrome Mobile",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "chromeframe(?:/(\\d+[\\.\\d]+))?",
		name: "Chrome Frame",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Chromium(?:/(\\d+[\\.\\d]+))?",
		name: "Chromium",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "HeadlessChrome(?:/(\\d+[\\.\\d]+))?",
		name: "Headless Chrome",
		version: "$1",
		engine: {
			"default": "Blink"
		}
	},
	{
		regex: "Chrome(?!book)(?:/(\\d+[\\.\\d]+))?",
		name: "Chrome",
		version: "$1",
		engine: {
			"default": "WebKit",
			versions: {
				"28": "Blink"
			}
		}
	},
	{
		regex: "(?:Tizen|SLP) Browser(?:/(\\d+[\\.\\d]+))?",
		name: "Tizen Browser",
		version: "$1"
	},
	{
		regex: "Blazer(?:/(\\d+[\\.\\d]+))?",
		name: "Palm Blazer",
		version: "$1"
	},
	{
		regex: "Pre/(\\d+[\\.\\d]+)",
		name: "Palm Pre",
		version: "$1"
	},
	{
		regex: "(?:hpw|web)OS/(\\d+[\\.\\d]+)",
		name: "wOSBrowser",
		version: "$1"
	},
	{
		regex: "WebPro(?:[ /](\\d+[\\.\\d]+))?",
		name: "Palm WebPro",
		version: "$1"
	},
	{
		regex: "Palmscape(?:[ /](\\d+[\\.\\d]+))?",
		name: "Palmscape",
		version: "$1"
	},
	{
		regex: "Jasmine(?:[ /](\\d+[\\.\\d]+))?",
		name: "Jasmine",
		version: "$1"
	},
	{
		regex: "Lynx(?:/(\\d+[\\.\\d]+))?",
		name: "Lynx",
		version: "$1",
		engine: {
			"default": "Text-based"
		}
	},
	{
		regex: "NCSA_Mosaic(?:/(\\d+[\\.\\d]+))?",
		name: "NCSA Mosaic",
		version: "$1"
	},
	{
		regex: "ABrowse(?: (\\d+[\\.\\d]+))?",
		name: "ABrowse",
		version: "$1"
	},
	{
		regex: "amaya(?:/(\\d+[\\.\\d]+))?",
		name: "Amaya",
		version: "$1"
	},
	{
		regex: "AmigaVoyager(?:/(\\d+[\\.\\d]+))?",
		name: "Amiga Voyager",
		version: "$1"
	},
	{
		regex: "Amiga-Aweb(?:/(\\d+[\\.\\d]+))?",
		name: "Amiga Aweb",
		version: "$1"
	},
	{
		regex: "Arora(?:/(\\d+[\\.\\d]+))?",
		name: "Arora",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Beonex(?:/(\\d+[\\.\\d]+))?",
		name: "Beonex",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "bline(?:/(\\d+[\\.\\d]+))?",
		name: "B-Line",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "BrowseX \\((\\d+[\\.\\d]+)",
		name: "BrowseX",
		version: "$1"
	},
	{
		regex: "Charon(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Charon",
		version: "$1"
	},
	{
		regex: "Cheshire(?:/(\\d+[\\.\\d]+))?",
		name: "Cheshire",
		version: "$1"
	},
	{
		regex: "dbrowser",
		name: "dbrowser",
		version: "",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Dillo(?:/(\\d+[\\.\\d]+))?",
		name: "Dillo",
		version: "$1",
		engine: {
			"default": "Dillo"
		}
	},
	{
		regex: "Dolfin(?:/(\\d+[\\.\\d]+))?|dolphin",
		name: "Dolphin",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Elinks(?:/(\\d+[\\.\\d]+))?",
		name: "Elinks",
		version: "$1",
		engine: {
			"default": "Text-based"
		}
	},
	{
		regex: "Element Browser(?:[ /](\\d+[\\.\\d]+))?",
		name: "Element Browser",
		version: "$1"
	},
	{
		regex: "eZBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "eZ Browser",
		version: "$1"
	},
	{
		regex: "Firebird(?! Build)(?:/(\\d+[\\.\\d]+))?",
		name: "Firebird",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Fluid(?:/(\\d+[\\.\\d]+))?",
		name: "Fluid",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Galeon(?:/(\\d+[\\.\\d]+))?",
		name: "Galeon",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Google Earth(?:/(\\d+[\\.\\d]+))?",
		name: "Google Earth",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "HotJava(?:/(\\d+[\\.\\d]+))?",
		name: "HotJava",
		version: "$1"
	},
	{
		regex: "iCabMobile(?:[ /](\\d+[\\.\\d]+))?",
		name: "iCab Mobile",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "iCab(?:[ /](\\d+[\\.\\d]+))?",
		name: "iCab",
		version: "$1",
		engine: {
			"default": "iCab",
			versions: {
				"4": "WebKit"
			}
		}
	},
	{
		regex: "i?Lunascape(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Lunascape",
		version: "$1",
		engine: {
			"default": ""
		}
	},
	{
		regex: "Crazy Browser (\\d+[\\.\\d]+)",
		name: "Crazy Browser",
		version: "$1",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "IEMobile[ /](\\d+[\\.\\d]+)",
		name: "IE Mobile",
		version: "$1",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "MSIE (\\d+[\\.\\d]+).*XBLWP7",
		name: "IE Mobile",
		version: "$1",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "MSIE.*Trident/4.0",
		name: "Internet Explorer",
		version: "8.0",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "MSIE.*Trident/5.0",
		name: "Internet Explorer",
		version: "9.0",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "MSIE.*Trident/6.0",
		name: "Internet Explorer",
		version: "10.0",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "Trident/[78].0",
		name: "Internet Explorer",
		version: "11.0",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "MSIE (\\d+[\\.\\d]+)",
		name: "Internet Explorer",
		version: "$1",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "IE[ /](\\d+[\\.\\d]+)",
		name: "Internet Explorer",
		version: "$1",
		engine: {
			"default": "Trident"
		}
	},
	{
		regex: "Kindle/(\\d+[\\.\\d]+)",
		name: "Kindle Browser",
		version: "$1"
	},
	{
		regex: "K-meleon(?:/(\\d+[\\.\\d]+))?",
		name: "K-meleon",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "Links(?: \\((\\d+[\\.\\d]+))?",
		name: "Links",
		version: "$1",
		engine: {
			"default": "Text-based"
		}
	},
	{
		regex: "LG Browser(?:/(\\d+[\\.\\d]+))",
		name: "LG Browser",
		version: "$1"
	},
	{
		regex: "LuaKit(?:/(\\d+[\\.\\d]+))?",
		name: "LuaKit",
		version: "$1"
	},
	{
		regex: "OmniWeb(?:/[v]?(\\d+[\\.\\d]+))?",
		name: "OmniWeb",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Phoenix(?:/(\\d+[\\.\\d]+))?",
		name: "Phoenix",
		version: "$1"
	},
	{
		regex: "NetFrontLifeBrowser(?:/(\\d+[\\.\\d]+))?",
		name: "NetFront Life",
		version: "$1",
		engine: {
			"default": "NetFront"
		}
	},
	{
		regex: "NetFront(?:/(\\d+[\\.\\d]+))?",
		name: "NetFront",
		version: "$1",
		engine: {
			"default": "NetFront"
		}
	},
	{
		regex: "PLAYSTATION|NINTENDO 3|AppleWebKit.+ N[XF]/\\d+\\.\\d+\\.\\d+",
		name: "NetFront",
		version: ""
	},
	{
		regex: "NetPositive(?:/(\\d+[\\.\\d]+))?",
		name: "NetPositive",
		version: "$1"
	},
	{
		regex: "Odyssey Web Browser(?:.*OWB/(\\d+[\\.\\d]+))?",
		name: "Odyssey Web Browser",
		version: "$1"
	},
	{
		regex: "OffByOne",
		name: "Off By One",
		version: ""
	},
	{
		regex: "(?:Oregano|OreganMediaBrowser)(?:[ /](\\d+[\\.\\d]+))?",
		name: "Oregano",
		version: "$1"
	},
	{
		regex: "(?:Polaris|Embider)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Polaris",
		version: "$1"
	},
	{
		regex: "SEMC-Browser(?:[/ ](\\d+[\\.\\d]+))?",
		name: "SEMC-Browser",
		version: "$1"
	},
	{
		regex: "Shiira(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Shiira",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Skyfire(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Skyfire",
		version: "$1"
	},
	{
		regex: "Snowshoe(?:/(\\d+[\\.\\d]+))?",
		name: "Snowshoe",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Sunrise(?:Browser)?(?:/(\\d+[\\.\\d]+))?",
		name: "Sunrise",
		version: "$1"
	},
	{
		regex: "SuperBird(?:/(\\d+[\\.\\d]+))?",
		name: "SuperBird",
		version: "$1"
	},
	{
		regex: "Vision-Browser(?:/(\\d+[\\.\\d]+))",
		name: "Vision Mobile Browser",
		version: "$1"
	},
	{
		regex: "WeTab-Browser",
		name: "WeTab Browser",
		version: ""
	},
	{
		regex: "Xiino(?:/(\\d+[\\.\\d]+))?",
		name: "Xiino",
		version: "$1"
	},
	{
		regex: "BlackBerry|PlayBook|BB10",
		name: "BlackBerry Browser",
		version: ""
	},
	{
		regex: "Android",
		name: "Android Browser",
		version: "",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Coast(?:/(\\d+[\\.\\d]+))?",
		name: "Coast",
		version: "$1"
	},
	{
		regex: "Surf(?:/(\\d+[\\.\\d]+))?",
		name: "surf",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "(?:(?:iPod|iPad|iPhone).+Version|MobileSafari)/(\\d+[\\.\\d]+)",
		name: "Mobile Safari",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "(?:Version/(\\d+[\\.\\d]+).*)?Mobile.*Safari/",
		name: "Mobile Safari",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "(?:iPod|iPhone|iPad)",
		name: "Mobile Safari",
		version: "",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Version/(\\d+[\\.\\d]+).*Safari/|Safari/?\\d+",
		name: "Safari",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	},
	{
		regex: "Dorado WAP-Browser[/ ](\\d+[\\.\\d]+)",
		name: "Dorado",
		version: "$1"
	},
	{
		regex: "NetSurf(?:/(\\d+[\\.\\d]+))?",
		name: "NetSurf",
		version: "$1",
		engine: {
			"default": "NetSurf"
		}
	},
	{
		regex: "Uzbl",
		name: "Uzbl",
		version: ""
	},
	{
		regex: "SimpleBrowser",
		name: "SimpleBrowser",
		version: ""
	},
	{
		regex: "Zvu(?:/(\\d+[\\.\\d]+))?",
		name: "Zvu",
		version: "$1",
		engine: {
			"default": "Gecko"
		}
	},
	{
		regex: "GOGGalaxyClient/(\\d+[\\.\\d]+)?",
		name: "GOG Galaxy",
		version: "$1"
	},
	{
		regex: "WAP Browser/MAUI|(?:\\w+)?Maui Wap Browser|MAUI[- ]Browser",
		name: "MAUI WAP Browser",
		version: ""
	},
	{
		regex: "SP%20Browser/(\\d+[\\.\\d]+)",
		name: "SP Browser",
		version: "$1",
		engine: {
			"default": "WebKit"
		}
	}
];

var require$$4$1 = [
	{
		regex: "NetFront",
		name: "NetFront"
	},
	{
		regex: "Edge",
		name: "Edge"
	},
	{
		regex: "Trident",
		name: "Trident"
	},
	{
		regex: "(?<!SmartHu)Blink",
		name: "Blink"
	},
	{
		regex: "(?:Apple)?WebKit",
		name: "WebKit"
	},
	{
		regex: "Presto",
		name: "Presto"
	},
	{
		regex: "Goanna",
		name: "Goanna"
	},
	{
		regex: "(?<!like )Gecko",
		name: "Gecko"
	},
	{
		regex: "KHTML",
		name: "KHTML"
	},
	{
		regex: "NetSurf",
		name: "NetSurf"
	},
	{
		regex: "Servo",
		name: "Servo"
	},
	{
		regex: "Goanna",
		name: "Goanna"
	},
	{
		regex: "Ekioh(?:Flow)?",
		name: "EkiohFlow"
	}
];

var AA = "Avant Browser";
var AB = "ABrowse";
var AF = "ANT Fresco";
var AG = "ANTGalio";
var AL = "Aloha Browser";
var AH = "Aloha Browser Lite";
var AM = "Amaya";
var AO = "Amigo";
var AN = "Android Browser";
var AE = "AOL Desktop";
var AD = "AOL Shield";
var AR = "Arora";
var AX = "Arctic Fox";
var AV = "Amiga Voyager";
var AW = "Amiga Aweb";
var A0 = "Atom";
var AT = "Atomic Web Browser";
var AS = "Avast Secure Browser";
var VG = "AVG Secure Browser";
var AC = "Avira Scout";
var A1$1 = "AwoX";
var BA = "Beaker Browser";
var BM = "Beamrise";
var BB = "BlackBerry Browser";
var BD = "Baidu Browser";
var BS = "Baidu Spark";
var BI = "Basilisk";
var BE = "Beonex";
var BH = "BlackHawk";
var BJ = "Bunjalloo";
var BL = "B-Line";
var BU = "Blue Browser";
var BN = "Borealis Navigator";
var BR = "Brave";
var BK = "BriskBard";
var BX = "BrowseX";
var BZ = "Browzar";
var BY = "Biyubi";
var BF = "Byffox";
var CA = "Camino";
var CL = "CCleaner";
var C6 = "Chedot";
var C0 = "Centaury";
var CC = "Coc Coc";
var C4 = "CoolBrowser";
var C2 = "Colibri";
var CD = "Comodo Dragon";
var C1 = "Coast";
var CX = "Charon";
var CE = "CM Browser";
var CF = "Chrome Frame";
var HC = "Headless Chrome";
var CH = "Chrome";
var CI = "Chrome Mobile iOS";
var CK = "Conkeror";
var CM = "Chrome Mobile";
var CN = "CoolNovo";
var CO = "CometBird";
var CB = "COS Browser";
var CW = "Cornowser";
var C3 = "Chim Lac";
var CP = "ChromePlus";
var CR = "Chromium";
var C5 = "Chromium GOST";
var CY = "Cyberfox";
var CS = "Cheshire";
var CT = "Crusta";
var CG = "Craving Explorer";
var CZ = "Crazy Browser";
var CU = "Cunaguaro";
var CV = "Chrome Webview";
var DB = "dbrowser";
var DE = "Deepnet Explorer";
var DG = "deg-degan";
var DA = "Deledao";
var DT = "Delta Browser";
var DS = "DeskBrowse";
var DF = "Dolphin";
var DO = "Dorado";
var DR = "Dot Browser";
var DL = "Dooble";
var DI = "Dillo";
var DD = "DuckDuckGo Privacy Browser";
var EC = "Ecosia";
var EI = "Epic";
var EL = "Elinks";
var EB = "Element Browser";
var EE$1 = "Elements Browser";
var EZ = "eZ Browser";
var EU = "EUI Browser";
var EP = "GNOME Web";
var ES = "Espial TV Browser";
var FA = "Falkon";
var FX = "Faux Browser";
var F1 = "Firefox Mobile iOS";
var FB = "Firebird";
var FD = "Fluid";
var FE = "Fennec";
var FF = "Firefox";
var FK = "Firefox Focus";
var FY = "Firefox Reality";
var FR = "Firefox Rocket";
var FL = "Flock";
var FO = "Flow";
var FM = "Firefox Mobile";
var FW = "Fireweb";
var FN = "Fireweb Navigator";
var FS = "Flast";
var FU = "FreeU";
var GA = "Galeon";
var GH = "Ghostery Privacy Browser";
var GI = "GinxDroid Browser";
var GB = "Glass Browser";
var GE = "Google Earth";
var GO = "GOG Galaxy";
var HS = "HasBrowser";
var HA = "Hawk Turbo Browser";
var HE = "Helio";
var HO = "hola! Browser";
var HJ = "HotJava";
var HU = "Huawei Browser";
var IB = "IBrowse";
var IC = "iCab";
var I2 = "iCab Mobile";
var I1 = "Iridium";
var I3 = "Iron Mobile";
var I4 = "IceCat";
var ID = "IceDragon";
var IV = "Isivioo";
var IW = "Iceweasel";
var IE = "Internet Explorer";
var IM = "IE Mobile";
var IR = "Iron";
var JB = "Japan Browser";
var JS = "Jasmine";
var JA = "JavaFX";
var JI = "Jig Browser";
var JP = "Jig Browser Plus";
var JO = "Jio Browser";
var KB = "K.Browser";
var KI = "Kindle Browser";
var KM = "K-meleon";
var KO = "Konqueror";
var KP = "Kapiko";
var KN = "Kinza";
var KW = "Kiwi";
var KD = "Kode Browser";
var KY = "Kylo";
var KZ = "Kazehakase";
var LB = "Cheetah Browser";
var LF = "LieBaoFast";
var LG$2 = "LG Browser";
var LH = "Light";
var LI = "Links";
var IF = "Lolifox";
var LO = "Lovense Browser";
var LU = "LuaKit";
var LL = "Lulumi";
var LS = "Lunascape";
var LN = "Lunascape Lite";
var LX = "Lynx";
var M1 = "mCent";
var MB = "MicroB";
var MC = "NCSA Mosaic";
var MZ = "Meizu Browser";
var ME = "Mercury";
var MF = "Mobile Safari";
var MI = "Midori";
var MO = "Mobicip";
var MU = "MIUI Browser";
var MS = "Mobile Silk";
var MN = "Minimo";
var MT = "Mint Browser";
var MX = "Maxthon";
var NM = "MxNitro";
var MY = "Mypal";
var MR = "Monument Browser";
var MW = "MAUI WAP Browser";
var NW = "Navigateur Web";
var NR = "NFS Browser";
var NB = "Nokia Browser";
var NO = "Nokia OSS Browser";
var NV = "Nokia Ovi Browser";
var NX = "Nox Browser";
var NE = "NetSurf";
var NF = "NetFront";
var NL = "NetFront Life";
var NP = "NetPositive";
var NS = "Netscape";
var NT = "NTENT Browser";
var OC = "Oculus Browser";
var O1 = "Opera Mini iOS";
var OB = "Obigo";
var O2$1 = "Odin";
var H2 = "OceanHero";
var OD = "Odyssey Web Browser";
var OF = "Off By One";
var HH = "OhHai Browser";
var OE = "ONE Browser";
var OX = "Opera GX";
var OG = "Opera Neon";
var OH = "Opera Devices";
var OI = "Opera Mini";
var OM = "Opera Mobile";
var OP = "Opera";
var ON = "Opera Next";
var OO = "Opera Touch";
var OA = "Orca";
var OS = "Ordissimo";
var OR = "Oregano";
var O0 = "Origin In-Game Overlay";
var OY = "Origyn Web Browser";
var OV = "Openwave Mobile Browser";
var OW = "OmniWeb";
var OT = "Otter Browser";
var PL = "Palm Blazer";
var PM = "Pale Moon";
var PY = "Polypane";
var PP = "Oppo Browser";
var PR = "Palm Pre";
var PU = "Puffin";
var PW = "Palm WebPro";
var PA = "Palmscape";
var PE = "Perfect Browser";
var PH = "Phantom Browser";
var PX = "Phoenix";
var PB = "Phoenix Browser";
var PF = "PlayFree Browser";
var PO = "Polaris";
var PT = "Polarity";
var LY = "PolyBrowser";
var PI = "PrivacyWall";
var PS = "Microsoft Edge";
var QA = "Qazweb";
var Q2 = "QQ Browser Lite";
var Q1 = "QQ Browser Mini";
var QQ = "QQ Browser";
var QT = "Qutebrowser";
var QU = "Quark";
var QZ = "QupZilla";
var QM = "Qwant Mobile";
var QW = "QtWebEngine";
var RE = "Realme Browser";
var RK = "Rekonq";
var RM = "RockMelt";
var SB = "Samsung Browser";
var SA = "Sailfish Browser";
var S8 = "Seewo Browser";
var SC = "SEMC-Browser";
var SE = "Sogou Explorer";
var SF = "Safari";
var S5 = "Safe Exam Browser";
var SW = "SalamWeb";
var SV = "SFive";
var SH = "Shiira";
var S1 = "SimpleBrowser";
var SY = "Sizzy";
var SK = "Skyfire";
var SS = "Seraphic Sraf";
var SL = "Sleipnir";
var S6 = "Slimjet";
var S7 = "SP Browser";
var LE = "Smart Lenovo Browser";
var OZ = "Smooz";
var SN = "Snowshoe";
var SO = "Sogou Mobile Browser";
var S2 = "Splash";
var SI = "Sputnik Browser";
var SR = "Sunrise";
var SP = "SuperBird";
var SU = "Super Fast Browser";
var S3 = "surf";
var SG = "Stargon";
var S0 = "START Internet Browser";
var S4 = "Steam In-Game Overlay";
var ST = "Streamy";
var SX = "Swiftfox";
var SZ = "Seznam Browser";
var TR = "T-Browser";
var TO = "t-online.de Browser";
var TA = "Tao Browser";
var TF = "TenFourFox";
var TB = "Tenta Browser";
var TZ = "Tizen Browser";
var TU = "Tungsten";
var TG = "ToGate";
var TS = "TweakStyle";
var TV = "TV Bro";
var UB = "UBrowser";
var UC = "UC Browser";
var UH = "UC Browser HD";
var UM = "UC Browser Mini";
var UT = "UC Browser Turbo";
var UR = "UR Browser";
var UZ = "Uzbl";
var VE = "Venus Browser";
var VI = "Vivaldi";
var VV = "vivo Browser";
var VB = "Vision Mobile Browser";
var VM = "VMware AirWatch";
var WI = "Wear Internet Browser";
var WP = "Web Explorer";
var WE$1 = "WebPositive";
var WF = "Waterfox";
var WH = "Whale Browser";
var WO = "wOSBrowser";
var WT = "WeTab Browser";
var YJ = "Yahoo! Japan Browser";
var YA = "Yandex Browser";
var YL = "Yandex Browser Lite";
var YN = "Yaani Browser";
var YB = "Yolo Browser";
var XS = "xStand";
var XI = "Xiino";
var XV = "Xvast";
var ZE = "Zetakey";
var ZV = "Zvu";
var require$$5 = {
	"36": "360 Phone Browser",
	"1B": "115 Browser",
	"2B": "2345 Browser",
	"3B": "360 Browser",
	"7B": "7654 Browser",
	AA: AA,
	AB: AB,
	AF: AF,
	AG: AG,
	AL: AL,
	AH: AH,
	AM: AM,
	AO: AO,
	AN: AN,
	AE: AE,
	AD: AD,
	AR: AR,
	AX: AX,
	AV: AV,
	AW: AW,
	A0: A0,
	AT: AT,
	AS: AS,
	VG: VG,
	AC: AC,
	A1: A1$1,
	BA: BA,
	BM: BM,
	BB: BB,
	BD: BD,
	BS: BS,
	BI: BI,
	BE: BE,
	BH: BH,
	BJ: BJ,
	BL: BL,
	BU: BU,
	BN: BN,
	BR: BR,
	BK: BK,
	BX: BX,
	BZ: BZ,
	BY: BY,
	BF: BF,
	CA: CA,
	CL: CL,
	C6: C6,
	C0: C0,
	CC: CC,
	C4: C4,
	C2: C2,
	CD: CD,
	C1: C1,
	CX: CX,
	CE: CE,
	CF: CF,
	HC: HC,
	CH: CH,
	CI: CI,
	CK: CK,
	CM: CM,
	CN: CN,
	CO: CO,
	CB: CB,
	CW: CW,
	C3: C3,
	CP: CP,
	CR: CR,
	C5: C5,
	CY: CY,
	CS: CS,
	CT: CT,
	CG: CG,
	CZ: CZ,
	CU: CU,
	CV: CV,
	DB: DB,
	DE: DE,
	DG: DG,
	DA: DA,
	DT: DT,
	DS: DS,
	DF: DF,
	DO: DO,
	DR: DR,
	DL: DL,
	DI: DI,
	DD: DD,
	EC: EC,
	EI: EI,
	EL: EL,
	EB: EB,
	EE: EE$1,
	EZ: EZ,
	EU: EU,
	EP: EP,
	ES: ES,
	FA: FA,
	FX: FX,
	F1: F1,
	FB: FB,
	FD: FD,
	FE: FE,
	FF: FF,
	FK: FK,
	FY: FY,
	FR: FR,
	FL: FL,
	FO: FO,
	FM: FM,
	FW: FW,
	FN: FN,
	FS: FS,
	FU: FU,
	GA: GA,
	GH: GH,
	GI: GI,
	GB: GB,
	GE: GE,
	GO: GO,
	HS: HS,
	HA: HA,
	HE: HE,
	HO: HO,
	HJ: HJ,
	HU: HU,
	IB: IB,
	IC: IC,
	I2: I2,
	I1: I1,
	I3: I3,
	I4: I4,
	ID: ID,
	IV: IV,
	IW: IW,
	IE: IE,
	IM: IM,
	IR: IR,
	JB: JB,
	JS: JS,
	JA: JA,
	JI: JI,
	JP: JP,
	JO: JO,
	KB: KB,
	KI: KI,
	KM: KM,
	KO: KO,
	KP: KP,
	KN: KN,
	KW: KW,
	KD: KD,
	KY: KY,
	KZ: KZ,
	LB: LB,
	LF: LF,
	LG: LG$2,
	LH: LH,
	LI: LI,
	IF: IF,
	LO: LO,
	LU: LU,
	LL: LL,
	LS: LS,
	LN: LN,
	LX: LX,
	M1: M1,
	MB: MB,
	MC: MC,
	MZ: MZ,
	ME: ME,
	MF: MF,
	MI: MI,
	MO: MO,
	MU: MU,
	MS: MS,
	MN: MN,
	MT: MT,
	MX: MX,
	NM: NM,
	MY: MY,
	MR: MR,
	MW: MW,
	NW: NW,
	NR: NR,
	NB: NB,
	NO: NO,
	NV: NV,
	NX: NX,
	NE: NE,
	NF: NF,
	NL: NL,
	NP: NP,
	NS: NS,
	NT: NT,
	OC: OC,
	O1: O1,
	OB: OB,
	O2: O2$1,
	H2: H2,
	OD: OD,
	OF: OF,
	HH: HH,
	OE: OE,
	OX: OX,
	OG: OG,
	OH: OH,
	OI: OI,
	OM: OM,
	OP: OP,
	ON: ON,
	OO: OO,
	OA: OA,
	OS: OS,
	OR: OR,
	O0: O0,
	OY: OY,
	OV: OV,
	OW: OW,
	OT: OT,
	PL: PL,
	PM: PM,
	PY: PY,
	PP: PP,
	PR: PR,
	PU: PU,
	PW: PW,
	PA: PA,
	PE: PE,
	PH: PH,
	PX: PX,
	PB: PB,
	PF: PF,
	PO: PO,
	PT: PT,
	LY: LY,
	PI: PI,
	PS: PS,
	QA: QA,
	Q2: Q2,
	Q1: Q1,
	QQ: QQ,
	QT: QT,
	QU: QU,
	QZ: QZ,
	QM: QM,
	QW: QW,
	RE: RE,
	RK: RK,
	RM: RM,
	SB: SB,
	SA: SA,
	S8: S8,
	SC: SC,
	SE: SE,
	SF: SF,
	S5: S5,
	SW: SW,
	SV: SV,
	SH: SH,
	S1: S1,
	SY: SY,
	SK: SK,
	SS: SS,
	SL: SL,
	S6: S6,
	S7: S7,
	"7S": "7Star",
	LE: LE,
	OZ: OZ,
	SN: SN,
	SO: SO,
	S2: S2,
	SI: SI,
	SR: SR,
	SP: SP,
	SU: SU,
	S3: S3,
	SG: SG,
	S0: S0,
	S4: S4,
	ST: ST,
	SX: SX,
	SZ: SZ,
	TR: TR,
	TO: TO,
	TA: TA,
	TF: TF,
	TB: TB,
	TZ: TZ,
	TU: TU,
	TG: TG,
	TS: TS,
	TV: TV,
	UB: UB,
	UC: UC,
	UH: UH,
	UM: UM,
	UT: UT,
	UR: UR,
	UZ: UZ,
	VE: VE,
	VI: VI,
	VV: VV,
	VB: VB,
	VM: VM,
	WI: WI,
	WP: WP,
	WE: WE$1,
	WF: WF,
	WH: WH,
	WO: WO,
	WT: WT,
	YJ: YJ,
	YA: YA,
	YL: YL,
	YN: YN,
	YB: YB,
	XS: XS,
	XI: XI,
	XV: XV,
	ZE: ZE,
	ZV: ZV
};

var require$$6 = [
	"36",
	"OC",
	"PU",
	"SK",
	"MF",
	"OI",
	"OM",
	"DD",
	"DB",
	"ST",
	"BL",
	"IV",
	"FM",
	"C1",
	"C4",
	"SA",
	"SB",
	"FR",
	"WP",
	"HA",
	"NX",
	"HU",
	"VV",
	"RE",
	"CB",
	"MZ",
	"UM",
	"FK",
	"FX",
	"WI",
	"MN",
	"M1",
	"AH",
	"SU",
	"EU",
	"EZ",
	"UT",
	"DT",
	"S0",
	"QU",
	"YN",
	"JB",
	"GH",
	"PI",
	"SG",
	"KD",
	"PE",
	"UH",
	"S7",
	"CW",
	"OZ",
	"GI",
	"VE"
];

var __importDefault$i = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(browser, "__esModule", { value: true });
const version_1$6 = version;
const variable_replacement_1$d = variableReplacement;
const user_agent_1$g = userAgent;
const browsers_json_1 = __importDefault$i(require$$3);
const browser_engine_json_1 = __importDefault$i(require$$4$1);
const available_browsers_json_1 = __importDefault$i(require$$5);
const mobile_only_browsers_json_1 = __importDefault$i(require$$6);
class BrowserParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            const result = {
                type: "",
                name: "",
                version: "",
                engine: "",
                engineVersion: ""
            };
            for (const browser of browsers_json_1.default) {
                const match = user_agent_1$g.userAgentParser(browser.regex, userAgent);
                if (!match)
                    continue;
                const vrpVersion = variable_replacement_1$d.variableReplacement(browser.version, match);
                const version = version_1$6.formatVersion(vrpVersion, this.options.versionTruncation);
                const shortVersion = version && parseFloat(version_1$6.formatVersion(vrpVersion, 1)) || "";
                if (browser.engine) {
                    result.engine = browser.engine.default;
                    if (browser.engine && browser.engine.versions && shortVersion) {
                        const sortedEngineVersions = Object.entries(browser.engine.versions).sort((a, b) => {
                            return parseFloat(a[0]) > parseFloat(b[0]) ? 1 : -1;
                        });
                        for (const [versionThreshold, engineByVersion] of sortedEngineVersions) {
                            if (parseFloat(versionThreshold) <= shortVersion) {
                                result.engine = engineByVersion || "";
                            }
                        }
                    }
                }
                result.type = "browser";
                result.name = variable_replacement_1$d.variableReplacement(browser.name, match);
                result.version = version;
                break;
            }
            if (!result.engine) {
                for (const browserEngine of browser_engine_json_1.default) {
                    let match = null;
                    try {
                        match = RegExp(browserEngine.regex, "i").exec(userAgent);
                    }
                    catch (_a) {
                        // TODO: find out why it fails in some browsers
                    }
                    if (!match)
                        continue;
                    result.engine = browserEngine.name;
                    break;
                }
            }
            result.engineVersion = version_1$6.formatVersion(version_1$6.parseBrowserEngineVersion(userAgent, result.engine), this.options.versionTruncation);
            return result;
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
}
browser.default = BrowserParser;
BrowserParser.getBrowserShortName = (browserName) => {
    for (const [shortName, name] of Object.entries(available_browsers_json_1.default)) {
        if (name === browserName) {
            return shortName;
        }
    }
    return "";
};
BrowserParser.isMobileOnlyBrowser = (browserName) => {
    return mobile_only_browsers_json_1.default.includes(BrowserParser.getBrowserShortName(browserName));
};

var mobileApps = {};

var require$$0$e = [
	{
		regex: "AndroidDownloadManager(?:[ /]([\\d\\.]+))?",
		name: "AndroidDownloadManager",
		version: "$1"
	},
	{
		regex: "(?:Apple)?News(?:[ /][\\d\\.]+)? Version(?:[ /]([\\d\\.]+))?",
		name: "Apple News",
		version: "$1"
	},
	{
		regex: "bPod",
		name: "bPod",
		version: ""
	},
	{
		regex: "MessengerLiteForiOS.(?:FBAV)(?:[ /]([\\d\\.]+))?",
		name: "Facebook Messenger Lite",
		version: "$1"
	},
	{
		regex: "(?:MessengerForiOS|MESSENGER).(?:FBAV)(?:[ /]([\\d\\.]+))?",
		name: "Facebook Messenger",
		version: "$1"
	},
	{
		regex: "(?:FBAV|com.facebook.katana)(?:[ /]([\\d\\.]+))?",
		name: "Facebook",
		version: "$1"
	},
	{
		regex: "(?:FBAN|FBSV|FBID|FBBV)/",
		name: "Facebook",
		version: ""
	},
	{
		regex: "FeedR(?:/([\\d\\.]+))?",
		name: "FeedR",
		version: "$1"
	},
	{
		regex: "com.google.android.apps.searchlite",
		name: "Google Go",
		version: ""
	},
	{
		regex: "com.google.android.apps.magazines",
		name: "Google Play Newsstand",
		version: ""
	},
	{
		regex: "com.google.GooglePlus",
		name: "Google Plus",
		version: ""
	},
	{
		regex: "MicroMessenger/([^; ]+)",
		name: "WeChat",
		version: "$1"
	},
	{
		regex: "WeChatShareExtensionNew/([\\d\\.]+)",
		name: "WeChat Share Extension",
		version: "$1"
	},
	{
		regex: "DingTalk/([0-9\\.]+)",
		name: "DingTalk",
		version: "$1"
	},
	{
		regex: ".*__weibo__([0-9\\.]+)__",
		name: "Sina Weibo",
		version: "$1"
	},
	{
		regex: "Pinterest(?: for (?:Android|iOS))?(?:/([\\d\\.]+))?",
		name: "Pinterest",
		version: "$1"
	},
	{
		regex: "Podcatcher Deluxe",
		name: "Podcatcher Deluxe",
		version: ""
	},
	{
		regex: "com.google.android.youtube(?:/([\\d\\.]+))?",
		name: "YouTube",
		version: "$1"
	},
	{
		regex: "([^/]+)/(\\d+(?:\\.\\d+)+) \\((?:iPhone|iPad); iOS [0-9\\.]+; Scale/[0-9\\.]+\\)",
		name: "$1",
		version: "$2"
	},
	{
		regex: "WhatsApp(?:[ /]([\\d\\.]+))?",
		name: "WhatsApp",
		version: "$1"
	},
	{
		regex: "Line(?:[ /]([\\d\\.]+))",
		name: "Line",
		version: "$1"
	},
	{
		regex: "Instacast(?:HD)?/(\\d\\.[\\d\\.abc]+) CFNetwork/([\\d\\.]+) Darwin/([\\d\\.]+)",
		name: "Instacast",
		version: "$1"
	},
	{
		regex: "Podcasts/([\\d\\.]+)",
		name: "Podcasts",
		version: "$1"
	},
	{
		regex: "Pocket Casts(?:, (?:Android|iOS) v([\\d\\.]+))?",
		name: "Pocket Casts",
		version: "$1"
	},
	{
		regex: "Podcat/([\\d\\.]+)",
		name: "Podcat",
		version: "$1"
	},
	{
		regex: "BeyondPod",
		name: "BeyondPod",
		version: null
	},
	{
		regex: "AntennaPod/?([\\d\\.]+)?",
		name: "AntennaPod",
		version: "$1"
	},
	{
		regex: "Overcast/([\\d\\.]+)",
		name: "Overcast",
		version: "$1"
	},
	{
		regex: "(?:CastBox|fm.castbox.audiobook.radio.podcast)/?([\\d\\.]+)?",
		name: "CastBox",
		version: "$1"
	},
	{
		regex: "Player FM",
		name: "Player FM",
		version: ""
	},
	{
		regex: "Podkicker(?: Pro)?/([\\d\\.]+)",
		name: "Podkicker",
		version: "$1"
	},
	{
		regex: "PodcastRepublic/([\\d\\.]+)",
		name: "Podcast Republic",
		version: "$1"
	},
	{
		regex: "Castro/(\\d+)",
		name: "Castro",
		version: "$1"
	},
	{
		regex: "Castro 2 ([\\d\\.]+)/[\\d]+ Like iTunes",
		name: "Castro 2",
		version: "$1"
	},
	{
		regex: "Castro 2",
		name: "Castro 2",
		version: ""
	},
	{
		regex: "DoggCatcher",
		name: "DoggCatcher",
		version: null
	},
	{
		regex: "PodcastAddict/v([\\d]+)",
		name: "Podcast & Radio Addict",
		version: "$1"
	},
	{
		regex: "Podcat(?:%202)?/([\\d]+) CFNetwork",
		name: "Podcat",
		version: "$1"
	},
	{
		regex: "iCatcher[^\\d]+([\\d\\.]+)",
		name: "iCatcher",
		version: "$1"
	},
	{
		regex: "YelpApp/([\\d\\.]+)",
		name: "Yelp Mobile",
		version: "$1"
	},
	{
		regex: "jp.co.yahoo.android.yjtop/([\\d\\.]+)",
		name: "Yahoo! Japan",
		version: "$1"
	},
	{
		regex: "RSSRadio/([\\d]+)?",
		name: "RSSRadio",
		version: "$1"
	},
	{
		regex: "SogouSearch Android[\\d\\.]+ version([\\d\\.]+)?",
		name: "SogouSearch App",
		version: "$1"
	},
	{
		regex: "NewsArticle/([\\d\\.]+)?",
		name: "NewsArticle App",
		version: "$1"
	},
	{
		regex: "tieba/([\\d\\.]+)?",
		name: "tieba",
		version: "$1"
	},
	{
		regex: "com\\.douban\\.group/([\\d\\.]+)?",
		name: "douban App",
		version: "$1"
	},
	{
		regex: "BingWeb/([\\d\\.]+)?",
		name: "BingWebApp",
		version: "$1"
	},
	{
		regex: "(?:com.google.GoogleMobile|GSA)/([\\d\\.]+)?",
		name: "Google Search App",
		version: "$1"
	},
	{
		regex: "Flipboard/([\\d\\.]+)?",
		name: "Flipboard App",
		version: "$1"
	},
	{
		regex: "Instagram[ /]([\\d\\.]+)?",
		name: "Instagram App",
		version: "$1"
	},
	{
		regex: "baiduboxapp/([\\d\\.]+)?",
		name: "Baidu Box App",
		version: "$1"
	},
	{
		regex: "Crosswalk(?!.*(?:Streamy|QwantMobile))/([\\d\\.]+)?",
		name: "CrosswalkApp",
		version: "$1"
	},
	{
		regex: "Twitter for iPhone[/]?([\\d\\.]+)?",
		name: "Twitter",
		version: "$1"
	},
	{
		regex: "Twitter/([\\d\\.]+)",
		name: "Twitter",
		version: "$1"
	},
	{
		regex: "TwitterAndroid[/]?([\\d\\.]+)?",
		name: "Twitter",
		version: "$1"
	},
	{
		regex: "TopBuzz/([\\d\\.]+)",
		name: "TopBuzz",
		version: "$1"
	},
	{
		regex: "Snapchat/([\\d\\.]+)",
		name: "Snapchat",
		version: "$1"
	},
	{
		regex: "UnityPlayer/([\\d\\.]+)",
		name: "UnityPlayer",
		version: "$1"
	},
	{
		regex: "UCURSOS/v([\\d\\.]+)",
		name: "U-Cursos",
		version: "$1"
	},
	{
		regex: "HeyTapBrowser/([\\d\\.]+)",
		name: "HeyTapBrowser",
		version: "$1"
	},
	{
		regex: "RobloxApp/([\\d\\.]+)",
		name: "Roblox",
		version: "$1"
	},
	{
		regex: "Viber/([\\d\\.]+)",
		name: "Viber",
		version: "$1"
	},
	{
		regex: "Siri/1",
		name: "Siri",
		version: "1.0"
	},
	{
		regex: "LinkedIn/([\\d\\.]+)",
		name: "LinkedIn",
		version: "$1"
	},
	{
		regex: "Instapaper/([\\d\\.]+)",
		name: "Instapaper",
		version: "$1"
	},
	{
		regex: "Keeper/([\\d\\.]+)",
		name: "Keeper Password Manager",
		version: "$1"
	},
	{
		regex: "Skyeng Teachers/([\\d\\.]+)",
		name: "Skyeng Teachers",
		version: "$1"
	},
	{
		regex: "Kik/([\\d\\.]+) \\(Android",
		name: "Kik",
		version: "$1"
	},
	{
		regex: "Procast/?([\\d\\.]+)?",
		name: "Procast",
		version: "$1"
	},
	{
		regex: "DeviantArt/([\\d\\.]+)",
		name: "DeviantArt",
		version: ""
	},
	{
		regex: "Discord/([\\d\\.]+)",
		name: "Discord",
		version: ""
	},
	{
		regex: "Covenant%20Eyes/([\\d\\.]+)",
		name: "Covenant Eyes",
		version: "$1"
	},
	{
		regex: "HP%20Smart/([\\d\\.]+)",
		name: "HP Smart",
		version: ""
	},
	{
		regex: "Bitsboard/([\\d\\.]+)",
		name: "Bitsboard",
		version: "$1"
	},
	{
		regex: "Betbull/([\\d\\.]+)",
		name: "BetBull",
		version: ""
	},
	{
		regex: "U-Cursos/([\\d\\.]+)",
		name: "U-Cursos",
		version: ""
	},
	{
		regex: "1PasswordThumbs/([\\d\\.]+)",
		name: "1Password",
		version: "$1"
	},
	{
		regex: "(?:Microsoft Office )?(Access|Excel|OneDrive for Business|OneNote|PowerPoint|Project|Publisher|Visio|Word)[ /]([\\d\\.]+)",
		name: "Microsoft Office $1",
		version: "$2"
	},
	{
		regex: "OneDriveiOSApp/([\\d\\.]+)",
		name: "Microsoft OneDrive",
		version: "$1"
	},
	{
		regex: "Microsoft Office Mobile/([\\d\\.]+)",
		name: "Microsoft Office Mobile",
		version: "$1"
	},
	{
		regex: "OC/([\\d\\.]+) \\(Skype for Business\\)",
		name: "Skype for Business",
		version: "$1"
	},
	{
		regex: "TikTok[/ ](\\d+\\.(?:[\\.\\d]+))?",
		name: "TikTok",
		version: "$1"
	},
	{
		regex: "NAVER/(\\d+[\\.\\d]+) CFNetwork",
		name: "Naver",
		version: "$1"
	},
	{
		regex: "Copied/(\\d+[\\.\\d]+) CFNetwork",
		name: "Copied",
		version: ""
	},
	{
		regex: "Pic%20Collage/(\\d+[\\.\\d]+) CFNetwork",
		name: "Pic Collage",
		version: "$1"
	},
	{
		regex: "Papers/(\\d+[\\.\\d]+) CFNetwork",
		name: "Papers",
		version: "$1"
	},
	{
		regex: "RoboForm/(\\d+[\\.\\d]+) CFNetwork",
		name: "RoboForm",
		version: ""
	},
	{
		regex: "Slack/(\\d+[\\.\\d]+) CFNetwork",
		name: "Slack",
		version: ""
	},
	{
		regex: "KAKAOTALK (\\d+\\.(?:[\\.\\d]+))?",
		name: "KakaoTalk",
		version: "$1"
	},
	{
		regex: "ShopeeVN/([\\d\\.]+)",
		name: "Shopee",
		version: "$1"
	},
	{
		regex: "SPORT1/([\\d\\.]+)",
		name: "SPORT1",
		version: ""
	},
	{
		regex: "Clovia/([\\d\\.]+)",
		name: "Clovia",
		version: "$1"
	},
	{
		regex: "ShowMe/([\\d\\.]+)",
		name: "ShowMe",
		version: "$1"
	},
	{
		regex: "Wattpad/([\\d\\.]+)",
		name: "Wattpad",
		version: "$1"
	},
	{
		regex: "WSJ/([\\d\\.]+)",
		name: "The Wall Street Journal",
		version: ""
	},
	{
		regex: "WH%20Questions/([\\d\\.]+)",
		name: "WH Questions",
		version: "$1"
	},
	{
		regex: "whisper/([\\d\\.]+)",
		name: "Whisper",
		version: ""
	},
	{
		regex: "Opal/([\\d\\.]+)",
		name: "Opal Travel",
		version: "$1"
	},
	{
		regex: "Zalo/([\\d\\.]+)",
		name: "Zalo",
		version: "$1"
	},
	{
		regex: "Yandex/([\\d\\.]+)",
		name: "Yandex",
		version: ""
	},
	{
		regex: "Zoho%20Chat/([\\d\\.]+)",
		name: "Zoho Chat",
		version: "$1"
	},
	{
		regex: "Thunder/(\\d+[\\.\\d]+)",
		name: "Thunder",
		version: "$1"
	},
	{
		regex: "CGNBrowser/(\\d+[\\.\\d]+)",
		name: "CGN",
		version: "$1"
	},
	{
		regex: "Podbean/.+App (\\d+[\\.\\d]+)",
		name: "Podbean",
		version: "$1"
	},
	{
		regex: "AlexaMediaPlayer/(\\d+[\\.\\d]+)",
		name: "Alexa Media Player",
		version: "$1"
	},
	{
		regex: "TuneIn Radio Pro(?:[^/]+)?/(\\d+[\\.\\d]+)",
		name: "TuneIn Radio Pro",
		version: "$1"
	},
	{
		regex: "TuneIn Radio(?:[^/]+)?/(\\d+[\\.\\d]+)",
		name: "TuneIn Radio",
		version: "$1"
	},
	{
		regex: "Podcaster/(\\d+[\\.\\d]+)",
		name: "Podcaster",
		version: "$1"
	},
	{
		regex: "Swoot/(\\d+[\\.\\d]+)",
		name: "Swoot",
		version: "$1"
	},
	{
		regex: "RadioPublic/android-(\\d+[\\.\\d]+)",
		name: "RadioPublic",
		version: "$1"
	},
	{
		regex: "Podimo/(\\d+[\\.\\d]+)",
		name: "Podimo",
		version: "$1"
	},
	{
		regex: "com.evolve.podcast/(\\d+[\\.\\d]+)",
		name: "Evolve Podcast",
		version: "$1"
	},
	{
		regex: " Rocket.Chat\\+?/(\\d+[\\.\\d]+)",
		name: "Rocket Chat",
		version: "$1"
	},
	{
		regex: "^Pandora Audio.+Android",
		name: "Pandora",
		version: ""
	},
	{
		regex: "^NPROneAndroid",
		name: "NPR One",
		version: ""
	},
	{
		regex: "^WirtschaftsWoche-iOS-(\\d+[\\.\\d]+)",
		name: "Wirtschafts Woche",
		version: "$1"
	},
	{
		regex: "^Outlook-iOS/.+\\((\\d+[\\.\\d]+)\\)$",
		name: "Microsoft Outlook",
		version: "$1"
	},
	{
		regex: "^TVirl/(\\d+[\\.\\d]+)",
		name: "TVirl",
		version: "$1"
	},
	{
		regex: "2?chMate/(\\d+[\\.\\d]+)",
		name: "ChMate",
		version: "$1"
	},
	{
		regex: "2tch/(\\d+[\\.\\d]+)",
		name: "2tch",
		version: "$1"
	},
	{
		regex: "Ciisaa/(\\d+[\\.\\d]+)",
		name: "Ciisaa",
		version: "$1"
	},
	{
		regex: "BB2C (\\d+[\\.\\d]+)",
		name: "BB2C",
		version: "$1"
	},
	{
		regex: "twinkle/(\\d+[\\.\\d]+)",
		name: "twinkle",
		version: "$1"
	},
	{
		regex: "JaneStyle_iOS/(\\d+[\\.\\d]+)",
		name: "JaneStyle",
		version: "$1"
	}
];

var __importDefault$h = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(mobileApps, "__esModule", { value: true });
const mobile_apps_json_1 = __importDefault$h(require$$0$e);
const version_1$5 = version;
const variable_replacement_1$c = variableReplacement;
const user_agent_1$f = userAgent;
class MobileAppParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            const result = {
                type: "",
                name: "",
                version: ""
            };
            for (const mobileApp of mobile_apps_json_1.default) {
                const match = user_agent_1$f.userAgentParser(mobileApp.regex, userAgent);
                if (!match)
                    continue;
                result.type = "mobile app";
                result.name = variable_replacement_1$c.variableReplacement(mobileApp.name, match);
                result.version = version_1$5.formatVersion(variable_replacement_1$c.variableReplacement(mobileApp.version, match), this.options.versionTruncation);
                break;
            }
            return result;
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
}
mobileApps.default = MobileAppParser;

var feedReaders = {};

var require$$0$d = [
	{
		regex: "Akregator(?:/(\\d+[\\.\\d]+))?",
		name: "Akregator",
		version: "$1",
		url: "http://userbase.kde.org/Akregator",
		type: "Feed Reader"
	},
	{
		regex: "Apple-PubSub(?:/(\\d+[\\.\\d]+))?",
		name: "Apple PubSub",
		version: "$1",
		url: "https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pubsub.1.html",
		type: "Feed Reader"
	},
	{
		regex: "BashPodder",
		name: "BashPodder",
		version: "",
		url: "http://lincgeek.org/bashpodder/",
		type: "Feed Reader"
	},
	{
		regex: "Breaker/v([\\d\\.]+)",
		name: "Breaker",
		version: "$1",
		url: "https://www.breaker.audio/",
		type: "Feed Reader App"
	},
	{
		regex: "Downcast/([\\d\\.]+)",
		name: "Downcast",
		version: "$1",
		url: "http://downcastapp.com/",
		type: "Feed Reader App"
	},
	{
		regex: "FeedDemon(?:/(\\d+[\\.\\d]+))?",
		name: "FeedDemon",
		version: "$1",
		url: "http://www.feeddemon.com/",
		type: "Feed Reader"
	},
	{
		regex: "Feeddler(?:RSS|PRO)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Feeddler RSS Reader",
		version: "$1",
		url: "http://www.chebinliu.com/projects/iphone/feeddler-rss-reader/",
		type: "Feed Reader App"
	},
	{
		regex: "QuiteRSS(?:[/ ](\\d+[\\.\\d]+))?",
		name: "QuiteRSS",
		version: "$1",
		url: "https://quiterss.org",
		type: "Feed Reader App"
	},
	{
		regex: "gPodder/([\\d\\.]+)",
		name: "gPodder",
		version: "$1",
		url: "http://gpodder.org/",
		type: "Feed Reader App"
	},
	{
		regex: "JetBrains Omea Reader(?:[/ ](\\d+[\\.\\d]+))?",
		name: "JetBrains Omea Reader",
		version: "$1",
		url: "http://www.jetbrains.com/omea/reader/",
		type: "Feed Reader"
	},
	{
		regex: "Liferea(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Liferea",
		version: "$1",
		url: "http://liferea.sf.net/",
		type: "Feed Reader"
	},
	{
		regex: "(?:NetNewsWire|Evergreen.+MacOS)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "NetNewsWire",
		version: "$1",
		url: "http://netnewswireapp.com/",
		type: "Feed Reader"
	},
	{
		regex: "NewsBlur (?:iPhone|iPad) App(?: v(\\d+[\\.\\d]+))?",
		name: "NewsBlur Mobile App",
		version: "$1",
		url: "http://www.newsblur.com",
		type: "Feed Reader App"
	},
	{
		regex: "NewsBlur(?:/(\\d+[\\.\\d]+))",
		name: "NewsBlur",
		version: "$1",
		url: "http://www.newsblur.com",
		type: "Feed Reader"
	},
	{
		regex: "newsbeuter(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Newsbeuter",
		version: "$1",
		url: "http://www.newsbeuter.org/",
		type: "Feed Reader"
	},
	{
		regex: "PritTorrent/([\\d\\.]+)",
		name: "PritTorrent",
		version: "$1",
		url: "http://bitlove.org",
		type: "Feed Reader"
	},
	{
		regex: "Pulp[/ ](\\d+[\\.\\d]+)",
		name: "Pulp",
		version: "$1",
		url: "http://www.acrylicapps.com/pulp/",
		type: "Feed Reader App"
	},
	{
		regex: "ReadKit(?:[/ ](\\d+[\\.\\d]+))?",
		name: "ReadKit",
		version: "$1",
		url: "http://readkitapp.com/",
		type: "Feed Reader App"
	},
	{
		regex: "Reeder[/ ](\\d+[\\.\\d]+)",
		name: "Reeder",
		version: "$1",
		url: "http://reederapp.com/",
		type: "Feed Reader App"
	},
	{
		regex: "RSSBandit(?:[/ ](\\d+[\\.\\d]+))?",
		name: "RSS Bandit",
		version: "$1",
		url: "http://www.rssbandit.org)",
		type: "Feed Reader"
	},
	{
		regex: "RSS Junkie(?:[/ ](\\d+[\\.\\d]+))?",
		name: "RSS Junkie",
		version: "$1",
		url: "https://play.google.com/store/apps/details?id=com.bitpowder.rssjunkie",
		type: "Feed Reader App"
	},
	{
		regex: "RSSOwl(?:[/ ](\\d+[\\.\\d]+))?",
		name: "RSSOwl",
		version: "$1",
		url: "http://www.rssowl.org/",
		type: "Feed Reader"
	},
	{
		regex: "Stringer",
		name: "Stringer",
		version: "",
		url: "https://github.com/swanson/stringer",
		type: "Feed Reader"
	}
];

var __importDefault$g = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(feedReaders, "__esModule", { value: true });
const feed_readers_json_1 = __importDefault$g(require$$0$d);
const version_1$4 = version;
const variable_replacement_1$b = variableReplacement;
const user_agent_1$e = userAgent;
class FeedReaderParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            const result = {
                type: "",
                name: "",
                version: "",
                url: ""
            };
            for (const feedReader of feed_readers_json_1.default) {
                const match = user_agent_1$e.userAgentParser(feedReader.regex, userAgent);
                if (!match)
                    continue;
                result.type = "feed reader";
                result.name = variable_replacement_1$b.variableReplacement(feedReader.name, match);
                result.version = version_1$4.formatVersion(variable_replacement_1$b.variableReplacement(feedReader.version, match), this.options.versionTruncation);
                result.url = feedReader.url;
                break;
            }
            return result;
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
}
feedReaders.default = FeedReaderParser;

var libraries = {};

var require$$0$c = [
	{
		regex: "Wget(?:/(\\d+[\\.\\d]+))?",
		name: "Wget",
		version: "$1"
	},
	{
		regex: "Guzzle(?:/(\\d+[\\.\\d]+))?",
		name: "Guzzle (PHP HTTP Client)",
		version: "$1"
	},
	{
		regex: "(?:lib)?curl(?:/(\\d+[\\.\\d]+))?",
		name: "curl",
		version: "$1"
	},
	{
		regex: "python-requests(?:/(\\d+[\\.\\d]+))?",
		name: "Python Requests",
		version: "$1"
	},
	{
		regex: "Python-urllib(?:/?(\\d+[\\.\\d]+))?",
		name: "Python urllib",
		version: "$1"
	},
	{
		regex: "Java(?:/?(\\d+[\\.\\d]+))?",
		name: "Java",
		version: "$1"
	},
	{
		regex: "(?:perlclient|libwww-perl)(?:/?(\\d+[\\.\\d]+))?",
		name: "Perl",
		version: "$1"
	},
	{
		regex: "okhttp/([\\d\\.]+)",
		name: "OkHttp",
		version: "$1"
	},
	{
		regex: "HTTP_Request2(?:/(\\d+[\\.\\d]+))?",
		name: "HTTP_Request2",
		version: "$1"
	},
	{
		regex: "HTTP_Request2(?:/(\\d+[\\.\\d]+))?",
		name: "HTTP_Request2",
		version: "$1",
		url: "http://pear.php.net/package/http_request2"
	},
	{
		regex: "Mechanize(?:/(\\d+[\\.\\d]+))?",
		name: "Mechanize",
		version: "$1",
		url: "http://github.com/sparklemotion/mechanize/"
	},
	{
		regex: "aiohttp(?:/(\\d+[\\.\\d]+))?",
		name: "aiohttp",
		version: "$1"
	},
	{
		regex: "Google-HTTP-Java-Client(?:/(\\d+[\\.\\d\\w-]+))?",
		name: "Google HTTP Java Client",
		version: "$1"
	},
	{
		regex: "WWW-Mechanize(?:/(\\d+[\\.\\d]+))?",
		name: "WWW-Mechanize",
		version: "$1"
	},
	{
		regex: "Faraday(?: v(\\d+[\\.\\d]+))?",
		name: "Faraday",
		version: "$1"
	},
	{
		regex: "(?:Go-http-client|Go )/?(?:(\\d+[\\.\\d]+))?(?: package http)?",
		name: "Go-http-client",
		version: "$1"
	},
	{
		regex: "urlgrabber(?:/(\\d+[\\.\\d]+))?",
		name: "urlgrabber (yum)",
		version: "$1"
	},
	{
		regex: "libdnf(?:/(\\d+[\\.\\d]+))?",
		name: "libdnf",
		version: "$1"
	},
	{
		regex: "HTTPie(?:/(\\d+[\\.\\d]+))?",
		name: "HTTPie",
		version: "$1"
	},
	{
		regex: "rest-client/(\\d+[\\.\\d]+).*ruby",
		name: "REST Client for Ruby",
		version: "$1"
	},
	{
		regex: "RestSharp/(\\d+[\\.\\d]+)",
		name: "RestSharp",
		version: "$1",
		url: "http://restsharp.org/"
	},
	{
		regex: "scalaj-http/(\\d+[\\.\\d]+)",
		name: "ScalaJ HTTP",
		version: "$1",
		url: "https://github.com/scalaj/scalaj-http"
	},
	{
		regex: "REST::Client/(\\d+)",
		name: "Perl REST::Client",
		version: "$1",
		url: "https://metacpan.org/pod/REST::Client"
	},
	{
		regex: "node-fetch/(\\d+[\\.\\d]+)",
		name: "Node Fetch",
		version: "$1",
		url: "https://github.com/node-fetch/node-fetch"
	},
	{
		regex: "ReactorNetty/(\\d+[\\.\\d]+)",
		name: "ReactorNetty",
		version: "$1",
		url: "https://github.com/reactor/reactor-netty"
	},
	{
		regex: "PostmanRuntime(?:/(\\d+[\\.\\d]+))?",
		name: "Postman Desktop",
		version: "$1",
		url: "https://github.com/postmanlabs/postman-runtime"
	},
	{
		regex: "Jakarta Commons-HttpClient/([\\.\\d]+)",
		name: "Jakarta Commons HttpClient",
		version: "$1",
		url: "https://hc.apache.org/httpclient-3.x"
	},
	{
		regex: "WinHttp.WinHttpRequest.+([\\.\\d]+)",
		name: "WinHttp WinHttpRequest",
		version: "$1"
	},
	{
		regex: "Embarcadero URI Client/([\\.\\d]+)",
		name: "Embarcadero URI Client",
		version: "$1"
	},
	{
		regex: "Mikrotik/([\\.\\d]+)",
		name: "Mikrotik Fetch",
		version: "$1"
	},
	{
		regex: "GRequests(?:/(\\d+[\\.\\d]+))?",
		name: "GRequests",
		version: "$1"
	},
	{
		regex: "akka-http/([\\.\\d]+)",
		name: "Akka HTTP",
		version: "$1"
	}
];

var __importDefault$f = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(libraries, "__esModule", { value: true });
const libraries_json_1 = __importDefault$f(require$$0$c);
const version_1$3 = version;
const variable_replacement_1$a = variableReplacement;
const user_agent_1$d = userAgent;
class LibraryParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            const result = {
                type: "",
                name: "",
                version: "",
                url: ""
            };
            for (const library of libraries_json_1.default) {
                const match = user_agent_1$d.userAgentParser(library.regex, userAgent);
                if (!match)
                    continue;
                result.type = "library";
                result.name = variable_replacement_1$a.variableReplacement(library.name, match);
                result.version = version_1$3.formatVersion(variable_replacement_1$a.variableReplacement(library.version, match), this.options.versionTruncation);
                result.url = library.url || "";
                break;
            }
            return result;
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
}
libraries.default = LibraryParser;

var mediaPlayers = {};

var require$$0$b = [
	{
		regex: "Audacious(?:[ /]([\\d\\.]+))?",
		name: "Audacious",
		version: "$1"
	},
	{
		regex: "Banshee(?:[ /]([\\d\\.]+))?",
		name: "Banshee",
		version: "$1"
	},
	{
		regex: "Boxee(?:[ /]([\\d\\.]+))?",
		name: "Boxee",
		version: "$1"
	},
	{
		regex: "Clementine(?:[ /]([\\d\\.]+))?",
		name: "Clementine",
		version: "$1"
	},
	{
		regex: "Deezer(?:/([\\d\\.]+))?",
		name: "Deezer",
		version: "$1"
	},
	{
		regex: "iTunes(?:-iPhone|-iPad)?(?:/([\\d\\.]+))?",
		name: "iTunes",
		version: "$1"
	},
	{
		regex: "FlyCast(?:/([\\d\\.]+))?",
		name: "FlyCast",
		version: "$1"
	},
	{
		regex: "foobar2000(?:/([\\d\\.]+))?",
		name: "Foobar2000",
		version: "$1"
	},
	{
		regex: "MediaMonkey(?:[ /](\\d+[\\.\\d]+))?",
		name: "MediaMonkey",
		version: "$1"
	},
	{
		regex: "Miro(?:/(\\d+[\\.\\d]+))?",
		name: "Miro",
		version: "$1"
	},
	{
		regex: "NexPlayer(?:/(\\d+[\\.\\d]+))?",
		name: "NexPlayer",
		version: "$1"
	},
	{
		regex: "Nightingale(?:/([\\d\\.]+))?",
		name: "Nightingale",
		version: "$1"
	},
	{
		regex: "QuickTime(?:(?:(?:.+qtver=)|(?:(?: E-)?[\\./]))([\\d\\.]+))?",
		name: "QuickTime",
		version: "$1"
	},
	{
		regex: "Songbird(?:/([\\d\\.]+))?",
		name: "Songbird",
		version: "$1"
	},
	{
		regex: "SubStream(?:/([\\d\\.]+))?",
		name: "SubStream",
		version: "$1"
	},
	{
		regex: "Sonos/([\\d\\.]+)?",
		name: "SONOS",
		version: "$1"
	},
	{
		regex: "(?:Lib)?VLC(?:/([\\d\\.]+))?",
		name: "VLC",
		version: "$1"
	},
	{
		regex: "Winamp(?:MPEG)?(?:/(\\d+[\\.\\d]+))?",
		name: "Winamp",
		version: "$1"
	},
	{
		regex: "(?:Windows-Media-Player|NSPlayer)(?:/(\\d+[\\.\\d]+))?",
		name: "Windows Media Player",
		version: "$1"
	},
	{
		regex: "XBMC(?:/([\\d\\.]+))?",
		name: "XBMC",
		version: "$1"
	},
	{
		regex: "Kodi(?:/([\\d\\.]+))?",
		name: "Kodi",
		version: "$1"
	},
	{
		regex: "stagefright(?:/([\\d\\.]+))?",
		name: "Stagefright",
		version: "$1"
	},
	{
		regex: "GoogleChirp(?:/(\\d+[\\.\\d]+))?",
		name: "Google Podcasts",
		version: "$1"
	},
	{
		regex: "Music Player Daemon (?:(\\d+[\\.\\d]+))?",
		name: "Music Player Daemon",
		version: "$1"
	},
	{
		regex: "mpv (?:(\\d+[\\.\\d]+))?",
		name: "mpv",
		version: "$1"
	}
];

var __importDefault$e = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(mediaPlayers, "__esModule", { value: true });
const mediaplayers_json_1 = __importDefault$e(require$$0$b);
const version_1$2 = version;
const variable_replacement_1$9 = variableReplacement;
const user_agent_1$c = userAgent;
class MediaPlayerParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            const result = {
                type: "",
                name: "",
                version: ""
            };
            for (const mediaPlayer of mediaplayers_json_1.default) {
                const match = user_agent_1$c.userAgentParser(mediaPlayer.regex, userAgent);
                if (!match)
                    continue;
                result.type = "media player";
                result.name = variable_replacement_1$9.variableReplacement(mediaPlayer.name, match);
                result.version = version_1$2.formatVersion(variable_replacement_1$9.variableReplacement(mediaPlayer.version, match), this.options.versionTruncation);
                break;
            }
            return result;
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
}
mediaPlayers.default = MediaPlayerParser;

var personalInformationManagers = {};

var require$$0$a = [
	{
		regex: "Outlook-Express(?:/(\\d+[\\.\\d]+))?",
		name: "Outlook Express",
		version: "$1"
	},
	{
		regex: "Microsoft Outlook(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Microsoft Outlook",
		version: "$1"
	},
	{
		regex: "(?:Thunderbird|Icedove|Shredder)(?:/(\\d+[\\.\\d]+))?",
		name: "Thunderbird",
		version: "$1"
	},
	{
		regex: "Airmail(?: (\\d+[\\.\\d]+))?",
		name: "Airmail",
		version: "$1"
	},
	{
		regex: "Lotus-Notes(?:/(\\d+[\\.\\d]+))?",
		name: "Lotus Notes",
		version: "$1"
	},
	{
		regex: "Barca(?:Pro)?(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Barca",
		version: "$1"
	},
	{
		regex: "Postbox(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Postbox",
		version: "$1"
	},
	{
		regex: "MailBar(?:[/ ](\\d+[\\.\\d]+))?",
		name: "MailBar",
		version: "$1"
	},
	{
		regex: "The Bat!(?: Voyager)?(?:[/ ](\\d+[\\.\\d]+))?",
		name: "The Bat!",
		version: "$1"
	},
	{
		regex: "DAVdroid(?:/(\\d+[\\.\\d]+))?",
		name: "DAVdroid",
		version: "$1"
	},
	{
		regex: "(?:SeaMonkey|Iceape)(?:/(\\d+[\\.\\d]+))?",
		name: "SeaMonkey",
		version: "$1"
	},
	{
		regex: "Live5ch/(\\d+[\\.\\d]+)",
		name: "Live5ch",
		version: "$1"
	},
	{
		regex: "JaneView/",
		name: "JaneView",
		version: ""
	},
	{
		regex: "BathyScaphe/",
		name: "BathyScaphe",
		version: ""
	}
];

var __importDefault$d = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(personalInformationManagers, "__esModule", { value: true });
const pim_json_1 = __importDefault$d(require$$0$a);
const version_1$1 = version;
const variable_replacement_1$8 = variableReplacement;
const user_agent_1$b = userAgent;
class PersonalInformationManagerParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            const result = {
                type: "",
                name: "",
                version: ""
            };
            for (const personalInformationManager of pim_json_1.default) {
                const match = user_agent_1$b.userAgentParser(personalInformationManager.regex, userAgent);
                if (!match)
                    continue;
                result.type = "personal information manager";
                result.name = variable_replacement_1$8.variableReplacement(personalInformationManager.name, match);
                result.version = version_1$1.formatVersion(variable_replacement_1$8.variableReplacement(personalInformationManager.version, match), this.options.versionTruncation);
                break;
            }
            return result;
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
}
personalInformationManagers.default = PersonalInformationManagerParser;

var __importDefault$c = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(client, "__esModule", { value: true });
const browser_1$1 = __importDefault$c(browser);
const mobile_apps_1 = __importDefault$c(mobileApps);
const feed_readers_1 = __importDefault$c(feedReaders);
const libraries_1 = __importDefault$c(libraries);
const media_players_1 = __importDefault$c(mediaPlayers);
const personal_information_managers_1 = __importDefault$c(personalInformationManagers);
const clientParsers = [
    feed_readers_1.default,
    mobile_apps_1.default,
    media_players_1.default,
    personal_information_managers_1.default,
    browser_1$1.default,
    libraries_1.default
];
let ClientParser$1 = class ClientParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            for (const Parser of clientParsers) {
                const parser = new Parser(this.options);
                const client = parser.parse(userAgent);
                if (client.type !== "")
                    return client;
            }
            return null;
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
};
client.default = ClientParser$1;

var device = {};

var cameras = {};

var Nikon = {
	regex: "Coolpix S800c",
	device: "camera",
	model: "Coolpix S800c"
};
var Samsung$4 = {
	regex: "EK-G[CN][0-9]{3}",
	device: "camera",
	models: [
		{
			regex: "EK-GN120",
			model: "Galaxy NX"
		},
		{
			regex: "EK-GC100",
			model: "Galaxy Camera"
		},
		{
			regex: "EK-GC110",
			model: "Galaxy Camera WiFi only"
		},
		{
			regex: "EK-GC200",
			model: "Galaxy Camera 2"
		},
		{
			regex: "EK-GC([0-9]{3})",
			model: "Galaxy Camera $1"
		}
	]
};
var require$$0$9 = {
	Nikon: Nikon,
	Samsung: Samsung$4
};

var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(cameras, "__esModule", { value: true });
const cameras_json_1 = __importDefault$b(require$$0$9);
const variable_replacement_1$7 = variableReplacement;
const user_agent_1$a = userAgent;
class CameraParser {
    constructor() {
        this.parse = (userAgent) => {
            const result = {
                type: "",
                brand: "",
                model: ""
            };
            for (const [brand, camera] of Object.entries(cameras_json_1.default)) {
                const match = user_agent_1$a.userAgentParser(camera.regex, userAgent);
                if (!match)
                    continue;
                result.type = "camera";
                result.brand = brand;
                if ("model" in camera && camera.model) {
                    result.model = variable_replacement_1$7.variableReplacement(camera.model, match).trim();
                }
                else if ("models" in camera && camera.models) {
                    for (const model of camera.models) {
                        const modelMatch = user_agent_1$a.userAgentParser(model.regex, userAgent);
                        if (!modelMatch)
                            continue;
                        result.model = variable_replacement_1$7.variableReplacement(model.model, modelMatch).trim();
                        break;
                    }
                }
                break;
            }
            return result;
        };
    }
}
cameras.default = CameraParser;

var mobiles = {};

var Ace = {
	regex: "(?:BUZZ [12]|BUZZ 2|CLEVER 1|URBAN 1(?: Pro)?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "BUZZ ([12]) Lite",
			model: "Buzz $1 Lite"
		},
		{
			regex: "BUZZ ([12]) Plus",
			model: "Buzz $1 Plus"
		},
		{
			regex: "BUZZ ([12])",
			model: "Buzz $1"
		},
		{
			regex: "CLEVER 1",
			model: "Clever 1"
		},
		{
			regex: "URBAN 1 Pro",
			model: "Urban 1 Pro"
		},
		{
			regex: "URBAN 1",
			model: "Urban 1"
		}
	]
};
var SFR = {
	regex: "StarShine|StarTrail|STARADDICT|StarText|StarNaute|StarXtrem|StarTab",
	device: "smartphone",
	models: [
		{
			regex: "StarXtrem II(?:[);/ ]|$)",
			model: "StarXtrem 2"
		},
		{
			regex: "StarXtrem ?([3-6])(?:[);/ ]|$)",
			model: "StarXtrem $1"
		},
		{
			regex: "StarXtrem(?:[);/ ]|$)",
			model: "StarXtrem"
		},
		{
			regex: "StarTrail III(?:[);/ ]|$)",
			model: "StarTrail 3"
		},
		{
			regex: "StarTrail II(?:[);/ ]|$)",
			model: "StarTrail 2"
		},
		{
			regex: "StarTrail[ _]?([1-9])[ _]([34])G(?:[);/ ]|$)",
			model: "StarTrail $1 $2G"
		},
		{
			regex: "StarTrail[ _]?([1-9])(?:[);/ ]|$)",
			model: "StarTrail $1"
		},
		{
			regex: "StarTrail(?:[);/ ]|$)",
			model: "StarTrail"
		},
		{
			regex: "StarShine II(?:[);/ ]|$)",
			model: "StarShine 2"
		},
		{
			regex: "StarShine(?:[);/ ]|$)",
			model: "StarShine"
		},
		{
			regex: "STARADDICT 4(?:[);/ ]|$)",
			model: "Staraddict 4"
		},
		{
			regex: "STARADDICT III(?:[);/ ]|$)",
			model: "Staraddict 3"
		},
		{
			regex: "STARADDICT II Plus(?:[);/ ]|$)",
			model: "Staraddict 2 Plus"
		},
		{
			regex: "STARADDICT II(?:[);/ ]|$)",
			model: "Staraddict 2"
		},
		{
			regex: "STARADDICT(?:[);/ ]|$)",
			model: "Staraddict"
		},
		{
			regex: "StarText II(?:[);/ ]|$)",
			model: "StarText 2"
		},
		{
			regex: "StarText(?:[);/ ]|$)",
			model: "StarText"
		},
		{
			regex: "StarNaute II(?:[);/ ]|$)",
			model: "StarNaute 2"
		},
		{
			regex: "StarNaute(?:[);/ ]|$)",
			model: "StarNaute"
		},
		{
			regex: "StarTab",
			model: "StarTab",
			device: "tablet"
		},
		{
			regex: "((?:StarShine|StarTrail|STARADDICT|StarText|StarNaute|StarXtrem)[^;/]*) Build",
			model: "$1"
		}
	]
};
var HTC = {
	regex: "HTC|Sprint (?:APA|ATP)|ADR(?!910L)[a-z0-9]+|NexusHD2|Amaze[ _]4G(?:[);/ ]|$)|(Desire|Sensation|Evo ?3D|IncredibleS|Wildfire|Butterfly)[ _]?([^;/)]+)(?: Build|\\))|(Amaze[ _]4G|(?<!BLU LIFE )One ?[XELSV\\+]+)(?:[);/ ]|$)|SPV E6[05]0|(One M8|One Mini 2|X525a|PG86100|PC36100|XV6975|PJ83100|2PYB2|2PS64|2PZC5|0PJA10|0PJA2|HTV33|0PM92|0PCV1|601HT|0PAJ5|HTL2[23]|HTV3[12]|2PQ93|X2-HT|EXODUS 1|ISW13HT)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "2PZC5(?:[);/ ]|$)",
			model: "U11"
		},
		{
			regex: "XV6975(?:[);/ ]|$)",
			model: "Imagio"
		},
		{
			regex: "PG86100(?:[);/ ]|$)",
			model: "Evo 3G"
		},
		{
			regex: "PC36100(?:[);/ ]|$)",
			model: "Evo 4G"
		},
		{
			regex: "(?:HTV33|601HT)(?:[);/ ]|$)",
			model: "U11"
		},
		{
			regex: "(?:801e|802[wdt])",
			model: "One"
		},
		{
			regex: "PJ83100(?:[);/ ]|$)",
			model: "One X"
		},
		{
			regex: "One Mini 2(?:[);/ ]|$)",
			model: "One Mini 2"
		},
		{
			regex: "X2-HT(?:[);/ ]|$)",
			model: "One X2"
		},
		{
			regex: "ISW13HT(?:[);/ ]|$)",
			model: "J"
		},
		{
			regex: "HTL22(?:[);/ ]|$)",
			model: "J One"
		},
		{
			regex: "HTL23(?:[);/ ]|$)",
			model: "J Butterfly"
		},
		{
			regex: "(?:0PJA2|0PJA10)(?:[);/ ]|$)",
			model: "One M9"
		},
		{
			regex: "X525a(?:[);/ ]|$)",
			model: "One X+"
		},
		{
			regex: "2PQ93(?:[);/ ]|$)",
			model: "One A9"
		},
		{
			regex: "ADR6300",
			model: "Droid Incredible"
		},
		{
			regex: "ADR6400L",
			model: "ThunderBolt"
		},
		{
			regex: "ADR6410LRA",
			model: "Droid Incredible 3"
		},
		{
			regex: "SPV E600",
			model: "Excalibur"
		},
		{
			regex: "SPV E650",
			model: "Vox"
		},
		{
			regex: "2PYB2",
			model: "Bolt"
		},
		{
			regex: "2PS64",
			model: "10"
		},
		{
			regex: "0PM92(?:[);/ ]|$)",
			model: "Desire 626S"
		},
		{
			regex: "0PCV1(?:[);/ ]|$)",
			model: "Desire 510"
		},
		{
			regex: "608t(?:[);/ ]|$)",
			model: "Desire 608t"
		},
		{
			regex: "EXODUS 1(?:[);/ ]|$)",
			model: "Exodus 1"
		},
		{
			regex: "NexusHD2",
			model: "HD2"
		},
		{
			regex: "HTC[ _\\-]P715a",
			device: "tablet",
			model: "P715a"
		},
		{
			regex: "HTC[ _\\-]Flyer Build",
			device: "tablet",
			model: "Flyer"
		},
		{
			regex: "HTC[ _\\-]Flyer[ _\\-]([\\w]{1,5})",
			device: "tablet",
			model: "Flyer $1"
		},
		{
			regex: "HTC[ _\\-]One[ _\\-]max(?:[);/ ]|$)",
			device: "phablet",
			model: "One max"
		},
		{
			regex: "HTC[ _]([^/;]+) [0-9]+(?:\\.[0-9]+)+ Build",
			model: "$1"
		},
		{
			regex: "HTC[ _]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "HTC[ _]([a-z0-9]+[ _\\-]?(?:[a-z0-9_+\\-])*)",
			model: "$1"
		},
		{
			regex: "USCCHTC(\\d+)",
			model: "$1"
		},
		{
			regex: "Sprint (ATP.*) Build",
			device: "tablet",
			model: "$1 (Sprint)"
		},
		{
			regex: "Sprint (APA.*) Build",
			model: "$1 (Sprint)"
		},
		{
			regex: "(?:HTC-)?HTC(?:[\\-/ ])?([a-z0-9\\-_]+)",
			model: "$1"
		},
		{
			regex: "HTC;(?: )?([a-z0-9 ]+)",
			model: "$1"
		},
		{
			regex: "(Desire|Sensation|Evo ?3D|IncredibleS|Wildfire|Butterfly)[ _]?([^;/)]+)(?: Build|\\))",
			model: "$1 $2"
		},
		{
			regex: "(Amaze[ _]4G|One ?[XELSV\\+]*) Build",
			model: "$1"
		},
		{
			regex: "(ADR[^;/]+) Build",
			model: "$1"
		},
		{
			regex: "(ADR[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(One M8)",
			model: "$1"
		},
		{
			regex: "0PAJ5(?:[);/ ]|$)",
			model: "One E8"
		},
		{
			regex: "HTV32(?:[);/ ]|$)",
			model: "10"
		},
		{
			regex: "HTV31(?:[);/ ]|$)",
			model: "J Butterfly"
		}
	]
};
var Microsoft$2 = {
	regex: "KIN\\.(One|Two)|RM-(?:1010|1031|106[57]|107[23467]|1089|109[02]|1096|1099|1109|111[348]|1127|1141|115[24]|994)|Microsoft; Lumia|Lumia (?:1530|1320|950|850|650|640|550|535|435)|Corporation/Surface",
	device: "smartphone",
	models: [
		{
			regex: "KIN\\.(One|Two)",
			device: "feature phone",
			model: "Kin $1"
		},
		{
			regex: "RM-1099|Lumia 430",
			model: "Lumia 430"
		},
		{
			regex: "RM-1114|Lumia 435",
			model: "Lumia 435"
		},
		{
			regex: "RM-1031|Lumia 532",
			model: "Lumia 532"
		},
		{
			regex: "Lumia 535 Dual SIM",
			model: "Lumia 535 Dual SIM"
		},
		{
			regex: "RM-109[02]|RM-1089|Lumia 535",
			model: "Lumia 535"
		},
		{
			regex: "RM-1141|Lumia 540",
			model: "Lumia 540"
		},
		{
			regex: "RM-1127|Lumia 550",
			model: "Lumia 550"
		},
		{
			regex: "RM-1010",
			model: "Lumia 638"
		},
		{
			regex: "Lumia 640 XL LTE",
			model: "Lumia 640 XL LTE",
			device: "phablet"
		},
		{
			regex: "RM-106[57]|RM-1096|Lumia 640 XL",
			model: "Lumia 640 XL",
			device: "phablet"
		},
		{
			regex: "Lumia 640 LTE Dual SIM",
			model: "Lumia 640 LTE Dual SIM"
		},
		{
			regex: "Lumia 640 LTE",
			model: "Lumia 640 LTE"
		},
		{
			regex: "Lumia 640 Dual SIM",
			model: "Lumia 640 Dual SIM"
		},
		{
			regex: "RM-1109|RM-1113|RM-107[23467]|Lumia 640",
			model: "Lumia 640"
		},
		{
			regex: "RM-1154|Lumia 650",
			model: "Lumia 650"
		},
		{
			regex: "RM-1152",
			model: "Lumia 650 SS"
		},
		{
			regex: "Lumia 850",
			model: "Lumia 850"
		},
		{
			regex: "Lumia 950 XL Dual SIM",
			model: "Lumia 950 XL Dual SIM",
			device: "phablet"
		},
		{
			regex: "Lumia 950 XL",
			model: "Lumia 950 XL",
			device: "phablet"
		},
		{
			regex: "Lumia 950 Dual SIM",
			model: "Lumia 950 Dual SIM"
		},
		{
			regex: "Lumia 950|RM-1118",
			model: "Lumia 950"
		},
		{
			regex: "RM-994|Lumia 1320",
			model: "Lumia 1320"
		},
		{
			regex: "Lumia 1530",
			model: "Lumia 1530"
		},
		{
			regex: "Surface Book 3",
			device: "desktop",
			model: "Surface Book 3"
		},
		{
			regex: "Surface Pro( [34])?",
			device: "desktop",
			model: "Surface Pro$1"
		},
		{
			regex: "Microsoft; Lumia ([^;/)]+)(?:[;/)]|$)",
			model: "Lumia $1"
		}
	]
};
var Nokia = {
	regex: "Nokia(?!Browser|Webview|; GT-I8750)|Lumia|Maemo RX|portalmmm/2\\.0 N7|portalmmm/2\\.0 NK|nok[0-9]+|Symbian.*\\s([a-z0-9]+)$|RX-51 N900|TA-[0-9]{4}|ARM; 909",
	device: "smartphone",
	models: [
		{
			regex: "TA-10(07|23|29|35)",
			model: "2"
		},
		{
			regex: "TA-10(20|28|32|38)",
			model: "3"
		},
		{
			regex: "TA-10(24|27|44|53)",
			model: "5"
		},
		{
			regex: "TA-10(00|03|21|25|33|39|54)",
			model: "6"
		},
		{
			regex: "TA-1041",
			model: "7"
		},
		{
			regex: "TA-10(04|12|52)",
			model: "8"
		},
		{
			regex: "Nokia 8\\.1",
			model: "8.1"
		},
		{
			regex: "Nokia 8 Sirocco",
			model: "8 Sirocco"
		},
		{
			regex: "Nokia 7\\.1",
			model: "7.1"
		},
		{
			regex: "Nokia 7 plus",
			model: "7 plus"
		},
		{
			regex: "Nokia 6\\.1 Plus",
			model: "6.1 Plus"
		},
		{
			regex: "Nokia 6\\.1",
			model: "6.1"
		},
		{
			regex: "Nokia 5\\.1 Plus",
			model: "5.1 Plus"
		},
		{
			regex: "Nokia 5\\.1",
			model: "5.1"
		},
		{
			regex: "Nokia 3\\.1 Plus",
			model: "3.1 Plus"
		},
		{
			regex: "Nokia 3\\.1",
			model: "3.1"
		},
		{
			regex: "Nokia 2\\.1",
			model: "2.1"
		},
		{
			regex: "Nokia 1 Plus",
			model: "1 Plus"
		},
		{
			regex: "Nokia 1",
			model: "1"
		},
		{
			regex: "RX-51 N900",
			model: "N900"
		},
		{
			regex: "(?: )?(Nokia500|nokiaasha500(?:dualsim)?)(?: Build|[_);/])",
			model: "Asha 500"
		},
		{
			regex: "Nokia5130c(?:-2)?",
			model: "5130 XpressMusic"
		},
		{
			regex: "Nokia5230",
			model: "Nuron"
		},
		{
			regex: "Nokia5233",
			model: "5233"
		},
		{
			regex: "Nokia5800d-1",
			model: "5800 XpressMusic"
		},
		{
			regex: "Nokia6210Navigator",
			model: "Navigator"
		},
		{
			regex: "Nokia8800e?",
			model: "Sapphire Arte"
		},
		{
			regex: "NOKIA-RH-17",
			model: "2280"
		},
		{
			regex: "NOKIA-RH-27",
			model: "6225"
		},
		{
			regex: "NOKIA-RH-34",
			model: "6585"
		},
		{
			regex: "NOKIA-RH-48",
			model: "3105"
		},
		{
			regex: "NOKIA-RM-11",
			model: "3205"
		},
		{
			regex: "Nokia808 PureView",
			model: "808 PureView"
		},
		{
			regex: "Nokia ?([0-9]{4})c(?:-)?",
			model: "$1 Classic"
		},
		{
			regex: "Nokia ?([0-9]{4})s(?:-)?",
			model: "$1 Slide"
		},
		{
			regex: "Nokia ?([0-9]{4})",
			model: "$1"
		},
		{
			regex: "(?: )?Nokia([235][0-9]{2})(?: Build|[_);/])",
			model: "Asha $1"
		},
		{
			regex: "Nokia([CEX]-?[0-9]{1,2}i?)-[0-9]{1,2}u?(?: Build|[_);/])",
			model: "$1"
		},
		{
			regex: "Nokia;? 520T",
			model: "Lumia 520T"
		},
		{
			regex: "RM-91[45]",
			model: "Lumia 520"
		},
		{
			regex: "RM-997|Nokia 526",
			model: "Lumia 526"
		},
		{
			regex: "RM-846",
			model: "Lumia 620"
		},
		{
			regex: "RM-97[68]",
			model: "Lumia 630"
		},
		{
			regex: "RM-97[45]",
			model: "Lumia 635"
		},
		{
			regex: "RM-1027",
			model: "Lumia 636"
		},
		{
			regex: "NOKIA;? 710",
			model: "Lumia 710"
		},
		{
			regex: "Nokia;? 720T",
			model: "Lumia 720T"
		},
		{
			regex: "RM-885",
			model: "Lumia 720"
		},
		{
			regex: "Lumia 730",
			model: "Lumia 730"
		},
		{
			regex: "RM-103[89]",
			model: "Lumia 735"
		},
		{
			regex: "Nokia;? 800C",
			model: "Lumia 800C"
		},
		{
			regex: "Nokia;? 800",
			model: "Lumia 800"
		},
		{
			regex: "Nokia 820",
			model: "Lumia 820"
		},
		{
			regex: "RM-984",
			model: "Lumia 830"
		},
		{
			regex: "Nokia;? 900",
			model: "Lumia 900"
		},
		{
			regex: "(RM-82[12]|Nokia;? 920)(?: Build|[_);/])",
			model: "Lumia 920"
		},
		{
			regex: "(RM-89[23]|RM-910|Nokia;? 925)(?: Build|[a_);/])",
			model: "Lumia 925"
		},
		{
			regex: "Lumia 929",
			model: "Lumia Icon"
		},
		{
			regex: "RM-1045",
			model: "Lumia 930"
		},
		{
			regex: "(ARM; 909|NOKIA;? 909|NOKIA; id300)(?: Build|[_);/])",
			model: "Lumia 1020"
		},
		{
			regex: "NOKIA;? 1520\\.1",
			model: "Lumia 1520.1"
		},
		{
			regex: "Nokia ([A-Za-z0-9\\. ]+)(?: Build|\\))",
			model: "$1"
		},
		{
			regex: "Nokia(N[0-9]+)",
			model: "$1"
		},
		{
			regex: "Nokia-([a-z0-9]+)",
			model: "N$1"
		},
		{
			regex: "NOKIA; (?!Qt;)([a-z0-9\\- ]+)",
			model: "$1"
		},
		{
			regex: "NOKIA[ _]?([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "NOKIA/([a-z0-9 ]+)",
			model: "$1"
		},
		{
			regex: "(Lumia [a-z0-9\\-]+ XL)",
			device: "phablet",
			model: "$1"
		},
		{
			regex: "(Lumia [a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "Maemo RX-51 ([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "Maemo RX-34",
			model: "N800"
		},
		{
			regex: "NokiaInternal|Nokia-WAP-Toolkit|Nokia-MIT-Browser|Nokia Mobile|Nokia Browser|Nokia/Series",
			model: ""
		},
		{
			regex: "portalmmm/2\\.0 (N7[37]|NK[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "nok([0-9]+)",
			model: "$1"
		},
		{
			regex: "Symbian.*\\s([a-z0-9]+)$",
			device: "feature phone",
			model: "$1"
		}
	]
};
var CnM = {
	regex: "CnM",
	device: "tablet",
	models: [
		{
			regex: "CnM[ \\-](?:Touchpad|TP)[ \\-]([0-9\\.]+)",
			model: "Touchpad $1"
		}
	]
};
var RIM = {
	regex: "BB10;|BlackBerry|rim[0-9]+|PlayBook|STV100-[1234]|STH100-[12]|BBA100-[12]|BBB100-[1234567]|BBD100-[126]|BB[EF]100-[123456789]|BB[CGH]100-1",
	device: "smartphone",
	models: [
		{
			regex: "BBA100-[12]",
			model: "BlackBerry DTEK60"
		},
		{
			regex: "BBB100-[1234567]",
			model: "KEYone"
		},
		{
			regex: "BBC100-1",
			model: "Aurora"
		},
		{
			regex: "BBD100-[126]",
			model: "Motion"
		},
		{
			regex: "BBE100-[123456789]",
			model: "KEY2 LE"
		},
		{
			regex: "BBF100-[1234567]",
			model: "KEY2"
		},
		{
			regex: "BBF100-8",
			model: "KEY2 Silver"
		},
		{
			regex: "BBF100-9",
			model: "KEY2 Black"
		},
		{
			regex: "BBG100-1",
			model: "Evolve"
		},
		{
			regex: "BBH100-1",
			model: "Evolve X"
		},
		{
			regex: "STV100-[1234]",
			model: "BlackBerry Priv"
		},
		{
			regex: "STH100-[12]",
			model: "BlackBerry DTEK50"
		},
		{
			regex: "BB10; ([a-z0-9\\- ]+)\\)",
			model: "BlackBerry $1"
		},
		{
			regex: "PlayBook.+RIM Tablet OS",
			model: "BlackBerry Playbook",
			device: "tablet"
		},
		{
			regex: "BlackBerry(?: )?([a-z0-9]+)",
			model: "BlackBerry $1"
		},
		{
			regex: "rim([0-9]+)",
			model: "BlackBerry $1"
		},
		{
			regex: "9000",
			model: "Bold 9000"
		},
		{
			regex: "9300",
			model: "Curve 3G 9300"
		},
		{
			regex: "(8520|8530|9220|9320|9360)",
			model: "Curve $1"
		},
		{
			regex: "9630",
			model: "Tour 9630"
		},
		{
			regex: "9720",
			model: "9720"
		},
		{
			regex: "(9800|9860)",
			model: "Torch $1"
		},
		{
			regex: "BlackBerry",
			model: "BlackBerry"
		}
	]
};
var CHIA = {
	regex: "(SVEGLIO[ _][QH]1|TREO_TAB8G|GTA7WF)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "SVEGLIO[ _]([QH]1)",
			model: "Sveglio $1"
		},
		{
			regex: "TREO_TAB8G",
			device: "tablet",
			model: "TREO TAB8G"
		},
		{
			regex: "GTA7WF",
			device: "tablet",
			model: "GTA7WF"
		}
	]
};
var Palm = {
	regex: "(?:Pre|Pixi)/(\\d+)\\.(\\d+)|Palm|Treo|Xiino",
	device: "smartphone",
	models: [
		{
			regex: "((?:Pre|Pixi))/(\\d+\\.\\d+)",
			model: "$1 $2"
		},
		{
			regex: "Palm(?:[ \\-])?((?!OS|Source|scape)[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "Treo([a-z0-9]+)",
			model: "Treo $1"
		},
		{
			regex: "Tungsten",
			model: "Tungsten"
		},
		{
			regex: "Xiino|Palmscape",
			model: ""
		}
	]
};
var HP$2 = {
	regex: "Hewlett-Packard|HP/HP|HP EliteBook 820|TouchPad/\\d+\\.\\d+|hp-tablet|HP ?iPAQ|webOS.*P160U|HP (?:Pro )?Slate|HP [78]|HP 10 Plus|Compaq [7|8]|HP; [^;/)]+",
	device: "smartphone",
	models: [
		{
			regex: "HP Slate 6 Voice Tab",
			model: "Slate 6 VoiceTab",
			device: "phablet"
		},
		{
			regex: "HP 10 Plus",
			model: "10 Plus",
			device: "tablet"
		},
		{
			regex: "HP ([78][^)/;]*)(?: Build|\\))",
			model: "Slate $1",
			device: "tablet"
		},
		{
			regex: "Compaq ([78][^/;]*) Build",
			model: "Compaq $1",
			device: "tablet"
		},
		{
			regex: "HP Pro Slate 8",
			model: "Pro Slate 8",
			device: "tablet"
		},
		{
			regex: "HP Slate ?(.+) Build",
			model: "Slate $1",
			device: "tablet"
		},
		{
			regex: "HP Slate ?([0-9]+)",
			model: "Slate $1",
			device: "tablet"
		},
		{
			regex: "TouchPad/(\\d+\\.\\d+)|hp-tablet",
			model: "TouchPad",
			device: "tablet"
		},
		{
			regex: "HP; ([^;/)]+)",
			model: "$1"
		},
		{
			regex: "HP ?iPAQ ?([a-z0-9]+)",
			model: "iPAQ $1"
		},
		{
			regex: "webOS.*(P160U)",
			model: "Veer"
		},
		{
			regex: "HP ProBook (6560b)",
			device: "desktop",
			model: "ProBook $1"
		},
		{
			regex: "HP EliteBook 820 G2",
			device: "desktop",
			model: "EliteBook 820 G2"
		},
		{
			regex: "Z240 Tower Workstation",
			device: "desktop",
			model: "Z240 Tower Workstation"
		}
	]
};
var TiPhone = {
	regex: "TiPhone ?([a-z0-9]+)",
	device: "smartphone",
	model: "$1"
};
var Apple$1 = {
	regex: "(?:iTunes-)?Apple[ _]?TV|Apple/|(?:Apple-|iTunes-)?(?<!like )(?:iPad|iPhone)|iPh[0-9],[0-9]|CFNetwork|HomePod|Watch ?OS|Watch1,[12]|MDCR_Mac|ICRU_iP(?:ad|hone)",
	models: [
		{
			regex: "HomePod",
			device: "smart speaker",
			model: "HomePod"
		},
		{
			regex: "Watch1,1",
			device: "wearable",
			model: "Watch 38mm"
		},
		{
			regex: "Watch1,2",
			device: "wearable",
			model: "Watch 42mm"
		},
		{
			regex: "Watch2,6",
			device: "wearable",
			model: "Watch Series 1 38mm"
		},
		{
			regex: "Watch2,7",
			device: "wearable",
			model: "Watch Series 1 42mm"
		},
		{
			regex: "Watch2,3",
			device: "wearable",
			model: "Watch Series 2 38mm"
		},
		{
			regex: "Watch2,4",
			device: "wearable",
			model: "Watch Series 2 42mm"
		},
		{
			regex: "Watch3,[13]",
			device: "wearable",
			model: "Watch Series 3 38mm"
		},
		{
			regex: "Watch3,[24]",
			device: "wearable",
			model: "Watch Series 3 42mm"
		},
		{
			regex: "Watch5,(?:9|11)",
			device: "wearable",
			model: "Watch SE 40mm"
		},
		{
			regex: "Watch5,1[02]",
			device: "wearable",
			model: "Watch SE 44mm"
		},
		{
			regex: "Watch([456]),[13]",
			device: "wearable",
			model: "Watch Series $1 40mm"
		},
		{
			regex: "Watch([456]),[24]",
			device: "wearable",
			model: "Watch Series $1 44mm"
		},
		{
			regex: "(?:.+_)?MacBook7(?:%2C|,)1",
			device: "desktop",
			model: "MacBook 13\" (2010)"
		},
		{
			regex: "(?:.+_)?MacPro5(?:%2C|,)1",
			device: "desktop",
			model: "Mac Pro (2010-2012)"
		},
		{
			regex: "(?:.+_)?iMac12(?:%2C|,)1",
			device: "desktop",
			model: "iMac 21.5\" (2011)"
		},
		{
			regex: "(?:.+_)?iMac17(?:%2C|,)1",
			device: "desktop",
			model: "iMac 27\" (2015)"
		},
		{
			regex: "(?:.+_)?iMac19(?:%2C|,)2",
			device: "desktop",
			model: "iMac 21.5\" (2019)"
		},
		{
			regex: "(?:.+_)?iMac19(?:%2C|,)1",
			device: "desktop",
			model: "iMac 27\" (2019)"
		},
		{
			regex: "(?:.+_)?iMac20(?:%2C|,)[12]",
			device: "desktop",
			model: "iMac 27\" (2020)"
		},
		{
			regex: "(?:.+_)?iMac14(?:%2C|,)2",
			device: "desktop",
			model: "iMac 27\" (2013)"
		},
		{
			regex: "(?:.+_)?iMac14(?:%2C|,)4",
			device: "desktop",
			model: "iMac 21.5\" (2014)"
		},
		{
			regex: "(?:.+_)?iMac14(?:%2C|,)1",
			device: "desktop",
			model: "iMac 21.5\" (2013)"
		},
		{
			regex: "(?:.+_)?MacBook6(?:%2C|,)1",
			device: "desktop",
			model: "MacBook 13\" (2009)"
		},
		{
			regex: "(?:.+_)?MacBook8(?:%2C|,)1",
			device: "desktop",
			model: "MacBook 12\" (2015)"
		},
		{
			regex: "(?:.+_)?MacBook9(?:%2C|,)1",
			device: "desktop",
			model: "MacBook 12\" (2016)"
		},
		{
			regex: "(?:.+_)?iMac10(?:%2C|,)1",
			device: "desktop",
			model: "iMac (2009)"
		},
		{
			regex: "(?:.+_)?MacBookAir2(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air (2009)"
		},
		{
			regex: "(?:.+_)?MacBookAir3(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 11\" (2010)"
		},
		{
			regex: "(?:.+_)?MacBookAir3(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Air 13\" (2010)"
		},
		{
			regex: "(?:.+_)?MacBookAir4(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 11\" (2011)"
		},
		{
			regex: "(?:.+_)?MacBookAir4(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Air 13\" (2011)"
		},
		{
			regex: "(?:.+_)?MacBookAir5(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 11\" (2012)"
		},
		{
			regex: "(?:.+_)?MacBookAir5(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Air 13\" (2012)"
		},
		{
			regex: "(?:.+_)?MacBookAir6(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 11\" (2013-2014)"
		},
		{
			regex: "(?:.+_)?MacBookAir6(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Air 13\" (2013-2014)"
		},
		{
			regex: "(?:.+_)?MacBookAir7(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 11\" (2015)"
		},
		{
			regex: "(?:.+_)?MacBookAir7(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Air 13\" (2015-2017)"
		},
		{
			regex: "(?:.+_)?MacBookAir8(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 13\" (2018)"
		},
		{
			regex: "(?:.+_)?MacBookAir8(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Air 13\" (2019)"
		},
		{
			regex: "(?:.+_)?MacBookAir9(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 13\" (2020)"
		},
		{
			regex: "(?:.+_)?MacBookAir10(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Air 13\" (2020)"
		},
		{
			regex: "(?:.+_)?MacBookPro1(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 15\" (2006)"
		},
		{
			regex: "(?:.+_)?MacBookPro1(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 17\" (2006)"
		},
		{
			regex: "(?:.+_)?MacBookPro2(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 17\" (2007)"
		},
		{
			regex: "(?:.+_)?MacBookPro2(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 15\" (2007)"
		},
		{
			regex: "(?:.+_)?MacBookPro[34](?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro (2008)"
		},
		{
			regex: "(?:.+_)?MacBookPro5(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 15\" (2008)"
		},
		{
			regex: "(?:.+_)?MacBookPro5(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 17\" (2009)"
		},
		{
			regex: "(?:.+_)?MacBookPro5(?:%2C|,)[34]",
			device: "desktop",
			model: "MacBook Pro 15\" (2009)"
		},
		{
			regex: "(?:.+_)?MacBookPro5(?:%2C|,)5",
			device: "desktop",
			model: "MacBook Pro 13\" (2009)"
		},
		{
			regex: "(?:.+_)?MacBookPro6(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 17\" (2010)"
		},
		{
			regex: "(?:.+_)?MacBookPro6(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 15\" (2010)"
		},
		{
			regex: "(?:.+_)?MacBookPro7(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 13\" (2010)"
		},
		{
			regex: "(?:.+_)?MacBookPro8(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 13\" (2011)"
		},
		{
			regex: "(?:.+_)?MacBookPro8(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 15\" (2011)"
		},
		{
			regex: "(?:.+_)?MacBookPro8(?:%2C|,)3",
			device: "desktop",
			model: "MacBook Pro 17\" (2011)"
		},
		{
			regex: "(?:.+_)?MacBookPro9(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 15\" (2012)"
		},
		{
			regex: "(?:.+_)?MacBookPro9(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 13\" (2012)"
		},
		{
			regex: "(?:.+_)?MacBookPro10(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 15\" (2012-2013)"
		},
		{
			regex: "(?:.+_)?MacBookPro10(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 13\" (2012-2013)"
		},
		{
			regex: "(?:.+_)?MacBookPro11(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 13\" (2013-2014)"
		},
		{
			regex: "(?:.+_)?MacBookPro11(?:%2C|,)[23]",
			device: "desktop",
			model: "MacBook Pro 15\" (2013-2014)"
		},
		{
			regex: "(?:.+_)?MacBookPro11(?:%2C|,)[45]",
			device: "desktop",
			model: "MacBook Pro 15\" (2015)"
		},
		{
			regex: "(?:.+_)?MacBookPro12(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 13\" (2015)"
		},
		{
			regex: "(?:.+_)?MacBookPro13(?:%2C|,)[12]",
			device: "desktop",
			model: "MacBook Pro 13\" (2016)"
		},
		{
			regex: "(?:.+_)?MacBookPro13(?:%2C|,)3",
			device: "desktop",
			model: "MacBook Pro 15\" (2016)"
		},
		{
			regex: "(?:.+_)?MacBookPro14(?:%2C|,)[12]",
			device: "desktop",
			model: "MacBook Pro 13\" (2017)"
		},
		{
			regex: "(?:.+_)?MacBookPro14(?:%2C|,)3",
			device: "desktop",
			model: "MacBook Pro 15\" (2017)"
		},
		{
			regex: "(?:.+_)?MacBookPro15(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 15\" (2018-2019)"
		},
		{
			regex: "(?:.+_)?MacBookPro15(?:%2C|,)2",
			device: "desktop",
			model: "MacBook Pro 13\" (2018-2019)"
		},
		{
			regex: "(?:.+_)?MacBookPro15(?:%2C|,)3",
			device: "desktop",
			model: "MacBook Pro 15\" (2019)"
		},
		{
			regex: "(?:.+_)?MacBookPro15(?:%2C|,)4",
			device: "desktop",
			model: "MacBook Pro 13\" (2019)"
		},
		{
			regex: "(?:.+_)?MacBookPro16(?:%2C|,)[14]",
			device: "desktop",
			model: "MacBook Pro 16\" (2019)"
		},
		{
			regex: "(?:.+_)?MacBookPro16(?:%2C|,)[23]",
			device: "desktop",
			model: "MacBook Pro 13\" (2020)"
		},
		{
			regex: "(?:.+_)?MacBookPro17(?:%2C|,)1",
			device: "desktop",
			model: "MacBook Pro 13\" (2020)"
		},
		{
			regex: "(?:.+_)?Macmini8(?:%2C|,)1",
			device: "desktop",
			model: "Mac Mini (2018)"
		},
		{
			regex: "(?:.+_)?Macmini9(?:%2C|,)1",
			device: "desktop",
			model: "Mac Mini (2020)"
		},
		{
			regex: "(?:.+_)?Macmini7(?:%2C|,)1",
			device: "desktop",
			model: "Mac Mini (2014)"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?1[C,_]1",
			model: "iPhone",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?1[C,_]2",
			model: "iPhone 3G",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?2[C,_]1| 3GS\\)$",
			model: "iPhone 3GS",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?3[C,_][123]",
			model: "iPhone 4",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?4[C,_]1|1C2%254enohPi| 4S\\)$",
			model: "iPhone 4S",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?5[C,_][12]| 5\\)$",
			model: "iPhone 5",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?5[C,_][34]",
			model: "iPhone 5C",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?6[C,_][12]| 5S\\)$",
			model: "iPhone 5S",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?7[C,_]1|1C2%257enohPi| 6PLUS\\)$",
			model: "iPhone 6 Plus",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?7[C,_]2| 6\\)$",
			model: "iPhone 6",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?8[C,_]2| 6SPLUS\\)$",
			model: "iPhone 6s Plus",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?8[C,_]1|iPhone 6s| 6S\\)$",
			model: "iPhone 6s",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?8[C,_]4| SE\\)$",
			model: "iPhone SE",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?9[C,_][13]| 7\\)$",
			model: "iPhone 7",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?9[C,_][24]| 7PLUS\\)$",
			model: "iPhone 7 Plus",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?10[C,_][14]| 8\\)$",
			model: "iPhone 8",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?10[C,_][25]| 8PLUS\\)$",
			model: "iPhone 8 Plus",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?10[C,_][36]|iPhone X| X\\)$",
			model: "iPhone X",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?11[C,_][2]| XS\\)$",
			model: "iPhone XS",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?11[C,_][46]| XSMAX\\)$",
			model: "iPhone XS Max",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?11[C,_][8]| XR\\)$",
			model: "iPhone XR",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?12[C,_][1]| 11\\)$",
			model: "iPhone 11",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?12[C,_][3]| 11PRO\\)$",
			model: "iPhone 11 Pro",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?12[C,_][5]| 11PROMAX\\)$",
			model: "iPhone 11 Pro Max",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?12[C,_][8]",
			model: "iPhone SE (2020)",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?13[C,_][1]",
			model: "iPhone 12 Mini",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?13[C,_][2]",
			model: "iPhone 12",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?13[C,_][3]",
			model: "iPhone 12 Pro",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPh(?:one)?13[C,_][4]",
			model: "iPhone 12 Pro Max",
			device: "phablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad1[C,_]1",
			model: "iPad",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad2[C,_][1234]",
			model: "iPad 2",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad2[C,_][567]",
			model: "iPad Mini",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad3[C,_][123]",
			model: "iPad 3",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad3[C,_][456]",
			model: "iPad 4",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad4[C,_][123]",
			model: "iPad Air",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad4[C,_][456]",
			model: "iPad Mini 2",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad4[C,_][789]",
			model: "iPad Mini 3",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad5[C,_][12]",
			model: "iPad Mini 4",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad5[C,_][34]",
			model: "iPad Air 2",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad6[C,_][34]",
			model: "iPad Pro 9.7",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad6[C,_][78]",
			model: "iPad Pro 12.9",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad6[C,_](?:11|12)",
			model: "iPad 5 9.7",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad7[C,_][12]",
			model: "iPad Pro 2 12.9",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad7[C,_][34]",
			model: "iPad Pro 10.5",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad7[C,_][56]",
			model: "iPad 6 9.7",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad7[C,_](?:11|12)",
			model: "iPad 7 10.2",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad8[C,_](?:9|10)",
			model: "iPad Pro 2 11\"",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad8[C,_]1[12]",
			model: "iPad Pro 4 12.9\"",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad8[C,_][1-4]",
			model: "iPad Pro 3 11.0",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad8[C,_][5-8]",
			model: "iPad Pro 3 12.9",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad11[C,_][12]",
			model: "iPad Mini 5",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad11[C,_][34]",
			model: "iPad Air 3",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad11[C,_][67]",
			model: "iPad 8 10.2\"",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad13[C,_][12]",
			model: "iPad Air 4",
			device: "tablet"
		},
		{
			regex: "Apple-?TV2[C,_]1",
			model: "Apple TV 2",
			device: "tv"
		},
		{
			regex: "Apple-?TV3[C,_][12]",
			model: "Apple TV 3",
			device: "tv"
		},
		{
			regex: "Apple-?TV5[C,_]3",
			model: "Apple TV 4",
			device: "tv"
		},
		{
			regex: "Apple-?TV6[C,_]2",
			model: "Apple TV 4K",
			device: "tv"
		},
		{
			regex: "(?:iTunes-)?Apple[ _]?TV",
			model: "Apple TV",
			device: "tv"
		},
		{
			regex: "HomePod",
			model: "HomePod",
			device: "smart speaker"
		},
		{
			regex: "iTunes-iPad/[0-9]+(?:\\.[0-9]+)* \\(([^;]+);",
			model: "iPad $1",
			device: "tablet"
		},
		{
			regex: "(?:Apple-|.+_)?iPad",
			model: "iPad",
			device: "tablet"
		},
		{
			regex: "iTunes-iPhone/[0-9]+(?:\\.[0-9]+)* \\(([^;]+);",
			model: "iPhone $1",
			device: "smartphone"
		},
		{
			regex: "(?:Apple-)?iPhone ?(3GS?|4S?|5[CS]?|6(:? Plus)?)?",
			model: "iPhone $1",
			device: "smartphone"
		}
	]
};
var MicroMax = {
	regex: "(?:MicroMax[ \\-\\_]?[a-z0-9]+|Q327)|4560MMX|P70221|(?:YU(?:5040|5530)|AQ5001(?: Canvas Power)?|N8216|N8301)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "AQ5001 Canvas Power",
			model: "Canvas Power"
		},
		{
			regex: "AQ5001",
			model: "Canvas Juice 2"
		},
		{
			regex: "4560MMX(?:[);/ ]|$)",
			model: "4560MMX"
		},
		{
			regex: "E481",
			model: "Canvas 5"
		},
		{
			regex: "P70221(?:[);/ ]|$)",
			model: "Canvas Tab",
			device: "tablet"
		},
		{
			regex: "Q327",
			model: "Bolt"
		},
		{
			regex: "Q417",
			model: "Canvas Mega"
		},
		{
			regex: "Q402\\+",
			model: "Bolt Pace"
		},
		{
			regex: "YU5040(?:[);/ ]|$)",
			model: "YU Yureka YU5040"
		},
		{
			regex: "YU5530(?:[);/ ]|$)",
			model: "YU Yureka S YU5530"
		},
		{
			regex: "Q424",
			model: "Bolt Selfie"
		},
		{
			regex: "Q426",
			model: "Canvas Mega 2"
		},
		{
			regex: "N8216",
			model: "Infinity N11"
		},
		{
			regex: "N8301",
			model: "Infinity N12"
		},
		{
			regex: "MicroMax(?:[ \\-\\_])?(X291|X246|X252|X458|X312)",
			model: "$1",
			device: "feature phone"
		},
		{
			regex: "MicroMax(?:[ \\-\\_])?(P[a-z0-9]+)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "MicroMax(?:[ \\-\\_])?([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Acteck = {
	regex: "BLECK",
	device: "tablet",
	model: "Bleck"
};
var Alba = {
	regex: "Alba ?(?:57|4|10 TABLET|(?:7|10)(?:Nou|Pie))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Alba 57",
			model: "5.7"
		},
		{
			regex: "Alba (4)",
			model: "$1"
		},
		{
			regex: "10 TABLET",
			device: "tablet",
			model: "10 Tablet"
		},
		{
			regex: "Alba((?:7|10)(?:Nou|Pie))",
			device: "tablet",
			model: "$1"
		}
	]
};
var AllCall = {
	regex: "AllCall_|Heat[34]|Rio_X(?:[);/ ]|$)|Hot ?[125][^;/]+ Build",
	device: "smartphone",
	models: [
		{
			regex: "AllCall_(Alpha|Atom|Bro|Madrid)",
			model: "$1"
		},
		{
			regex: "AllCall_S1_X",
			model: "S1 X"
		},
		{
			regex: "AllCall_S1",
			model: "S1"
		},
		{
			regex: "AllCall_RIO_S",
			model: "Rio S"
		},
		{
			regex: "AllCall_RIO_PRO",
			model: "Rio Pro"
		},
		{
			regex: "AllCall_RIO",
			model: "Rio"
		},
		{
			regex: "Heat([34])",
			model: "Heat $1"
		},
		{
			regex: "Rio_X(?:[);/ ]|$)",
			model: "Rio X"
		},
		{
			regex: "Hot ?([125][^;/]+) Build",
			model: "Hot $1"
		}
	]
};
var Bravis = {
	regex: "Bravis[ _]|A501 Bright|A552 JOY Max|A504 Trace|A505 JOY Plus|A503 Joy|NB(?:106M|10[1-8]|751|7[145]|8[57]1|76)|NP101|NB961|NP 104 3G|B501|N1-570 Space|Atlas A551|A512 Harmony Pro|A510_Jeans_4G|A509_Jeans|N1_550_Cruiser",
	device: "smartphone",
	models: [
		{
			regex: "A501 BRIGHT",
			model: "A501 Bright"
		},
		{
			regex: "Bravis[_ ]X500",
			model: "Trace Pro"
		},
		{
			regex: "Bravis[_ ]A506",
			model: "Crystal"
		},
		{
			regex: "Bravis[_ ]A553",
			model: "Discovery"
		},
		{
			regex: "BRAVIS[ _]TAU",
			model: "Tau"
		},
		{
			regex: "BRAVIS[ _]DELTA",
			model: "Delta"
		},
		{
			regex: "BRAVIS[ _]TREND",
			model: "Trend"
		},
		{
			regex: "B501",
			model: "Easy"
		},
		{
			regex: "N1-570",
			model: "Space"
		},
		{
			regex: "BRAVIS[ ]A554",
			model: "A554 Grand"
		},
		{
			regex: "BRAVIS[ ]S500",
			model: "S500 Diamond"
		},
		{
			regex: "A505 JOY Plus",
			model: "A505 Joy Plus"
		},
		{
			regex: "A552 JOY Max",
			model: "A552 Joy Max"
		},
		{
			regex: "Atlas A551",
			model: "A551 Atlas"
		},
		{
			regex: "A503 Joy",
			model: "A503 Joy"
		},
		{
			regex: "A504 Trace",
			model: "A504 Trace"
		},
		{
			regex: "A512 Harmony Pro",
			model: "A512 Harmony Pro"
		},
		{
			regex: "A510_Jeans_4G",
			model: "A510 Jeans 4G"
		},
		{
			regex: "A509_Jeans",
			model: "A509 Jeans"
		},
		{
			regex: "BRAVIS NEO",
			model: "A401 Neo"
		},
		{
			regex: "N1_550_Cruiser",
			model: "N1-550 Cruiser"
		},
		{
			regex: "BRAVIS OMEGA",
			model: "Omega"
		},
		{
			regex: "BRAVIS BIZ",
			model: "Biz"
		},
		{
			regex: "BRAVIS POWER",
			model: "Power"
		},
		{
			regex: "BRAVIS[ _]SPARK",
			model: "Spark"
		},
		{
			regex: "BRAVIS[ _]SLIM[ _]3G",
			model: "Slim 3G",
			device: "tablet"
		},
		{
			regex: "NP 104 3G",
			model: "NP104 3G",
			device: "tablet"
		},
		{
			regex: "BRAVIS NP 103",
			model: "NP103",
			device: "tablet"
		},
		{
			regex: "BRAVIS NP 844",
			model: "NP844",
			device: "tablet"
		},
		{
			regex: "Bravis[_ ]([^;\\)]+) Build",
			model: "$1"
		},
		{
			regex: "(NB(?:106M|10[1-8]|751|7[145]|8[57]1|76)|NP101|NB961)",
			model: "$1",
			device: "tablet"
		}
	]
};
var Acer$2 = {
	regex: "acer|(?<!Satellite |ZTE BLADE |ImSmart |ERGO |X-Style Tab )a(?:101|110|2[10]0|211|50[10]|51[10]|70[10])(?:[);/ ]|$)|Android.*V3[67]0(?:[);/ ]|$)|Android.*Z1[23456]0 Build|Android.*Z5\\d{2} Build|Android.*T0[234678] Build|Android.*S55(?:[);/ ]|$)|(?:A1-(713(HD)?|7[23]4|830|841|840FHD|81[01])|A3-A[1234][01]|B1-(7[1235-8][01](HD)?|7[23]3|7A0|8[1235]0|A71|860A)|TPA60W|B3-(A[125]0|A3[02]|A40FHD)|E39)(?:[);/ ]|$)|S5[12]0 Build|(DA[0-9]+HQ?L|Aspire (?:V5-121|XC-704G|V5-573G)|Chromebook 14 \\(CB3-431\\)|Predator G9-793|GT-810|B1-870|B3-A4[02]|B3-A50FHD)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "DA220HQL(?:[);/ ]|$)",
			model: "DA220HQL",
			device: "smart display"
		},
		{
			regex: "DA241HL(?:[);/ ]|$)",
			model: "DA241HL",
			device: "smart display"
		},
		{
			regex: "(DA[0-9]+HQ?L)(?:[);/ ]|$)",
			model: "$1",
			device: "smart display"
		},
		{
			regex: "A1-81[01]",
			model: "Iconia A",
			device: "tablet"
		},
		{
			regex: "TPA60W",
			model: "TPA60W",
			device: "tablet"
		},
		{
			regex: "A1-84(1|0FHD)",
			model: "Iconia Tab 8",
			device: "tablet"
		},
		{
			regex: "A1-713(HD)?",
			model: "Iconia Tab 7",
			device: "tablet"
		},
		{
			regex: "A1-830",
			model: "Iconia A1",
			device: "tablet"
		},
		{
			regex: "A1-7[23]4",
			model: "Iconia Talk S",
			device: "tablet"
		},
		{
			regex: "A3-A[12][01]",
			model: "Iconia A3",
			device: "tablet"
		},
		{
			regex: "A3-A[34]0",
			model: "Iconia Tab 10",
			device: "tablet"
		},
		{
			regex: "B1-7(?:[5678]0|30HD|A0)",
			model: "Iconia One 7",
			device: "tablet"
		},
		{
			regex: "B1-7[123][01]|B1-A71",
			model: "Iconia B1",
			device: "tablet"
		},
		{
			regex: "B1-7[23]3",
			model: "Iconia Talk 7",
			device: "tablet"
		},
		{
			regex: "B1-8[123567]0",
			model: "Iconia One 8",
			device: "tablet"
		},
		{
			regex: "B3-A([125]0|3[02]|[45]0FHD|4[02])",
			model: "Iconia One 10",
			device: "tablet"
		},
		{
			regex: "A101",
			model: "Vangogh",
			device: "tablet"
		},
		{
			regex: "A200",
			model: "Picasso E",
			device: "tablet"
		},
		{
			regex: "A50[01]",
			model: "Picasso",
			device: "tablet"
		},
		{
			regex: "Acer One 7",
			model: "One 7",
			device: "tablet"
		},
		{
			regex: "GT-810",
			model: "Predator 8",
			device: "tablet"
		},
		{
			regex: "E39(?:[);/ ]|$)",
			model: "Liquid E700"
		},
		{
			regex: "E310(?:[);/ ]|$)",
			model: "Liquid Mini"
		},
		{
			regex: "E320(?:-orange)?(?:[);/ ]|$)",
			model: "Liquid Express"
		},
		{
			regex: "E310(?:[);/ ]|$)",
			model: "beTouch E210"
		},
		{
			regex: "Android.*V360(?:[);/ ]|$)",
			model: "Liquid E1 Duo"
		},
		{
			regex: "Android.*V370(?:[);/ ]|$)",
			model: "Liquid E2 Duo"
		},
		{
			regex: "S510(?:[);/ ]|$)",
			model: "Liquid S1"
		},
		{
			regex: "S520(?:[);/ ]|$)",
			model: "Liquid S2"
		},
		{
			regex: "(?:Acer_)?P400(?:[);/ ]|$)",
			model: "neoTouch P400"
		},
		{
			regex: "(?:Acer_)?P300(?:[);/ ]|$)",
			model: "neoTouch P300"
		},
		{
			regex: "(?:Acer_)?S200(?:[);/ ]|$)",
			model: "neoTouch S200"
		},
		{
			regex: "(?:Acer_)?E100(?:[);/ ]|$)",
			model: "beTouch E100"
		},
		{
			regex: "Android.*Z1([234])0(?:[);/ ]|$)",
			model: "Liquid Z$1"
		},
		{
			regex: "Android.*Z110(?:[);/ ]|$)",
			model: "Liquid Z110"
		},
		{
			regex: "Android.*Z150(?:[);/ ]|$)",
			model: "Liquid Z5 Duo"
		},
		{
			regex: "Android.*Z160(?:[);/ ]|$)",
			model: "Liquid Z4 Duo"
		},
		{
			regex: "Android.*Z(5\\d{2})(?:[);/ ]|$)",
			model: "Liquid Z$1"
		},
		{
			regex: "Android.*S57(?:[);/ ]|$)",
			model: "Liquid Jade Z"
		},
		{
			regex: "Android.*T02(?:[);/ ]|$)",
			model: "Liquid Z530"
		},
		{
			regex: "Android.*T03(?:[);/ ]|$)",
			model: "Liquid Z630"
		},
		{
			regex: "Android.*T04(?:[);/ ]|$)",
			model: "Liquid Z630S"
		},
		{
			regex: "Android.*T06(?:[);/ ]|$)",
			model: "Liquid Zest"
		},
		{
			regex: "Android.*T07(?:[);/ ]|$)",
			model: "Liquid Zest 4G"
		},
		{
			regex: "Android.*T08(?:[);/ ]|$)",
			model: "Liquid Zest Plus"
		},
		{
			regex: "TM01(?:[);/ ]|$)",
			model: "Liquid M330"
		},
		{
			regex: "M220(?:[);/ ]|$)",
			model: "Liquid M220"
		},
		{
			regex: "AcerTD600",
			model: "TD600"
		},
		{
			regex: "Android.*S55(?:[);/ ]|$)",
			model: "Liquid Jade"
		},
		{
			regex: "(?:Acer )?(Chromebook R1[13])",
			model: "$1",
			device: "desktop"
		},
		{
			regex: "(?:Acer )?(Chromebook 14)",
			model: "$1",
			device: "desktop"
		},
		{
			regex: "(Aspire (?:V5-121|XC-704G|V5-573G|A515-51G))",
			model: "$1",
			device: "desktop"
		},
		{
			regex: "(Predator G9-793|Aspire E5-511)",
			model: "$1",
			device: "desktop"
		},
		{
			regex: "Acer; ?([^;\\(\\)/]+)",
			model: "$1"
		},
		{
			regex: "Acer(?! ?inc)[ _\\-]?([^;\\(\\)/]+)[();/ ]",
			model: "$1"
		},
		{
			regex: "acer[\\-_]([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "a(101|110|2[10]0|211|50[10]|51[10]|70[10])(?:[);/ ]|$)",
			model: "Iconia Tab A$1",
			device: "tablet"
		}
	]
};
var Advan = {
	regex: "(?:ADVAN (?:M4|S40)|i7U|S45E|S50H|I7D|i55[KD]|i4U|S7D|S4Z|i5[KE]|S5E[ _]NXT|S5J\\+|S4\\+)(?:[);/ ]|$)|[ ](?:50(?:[46]1|59)|600[24])(?: Build|\\) AppleWebKit)|(?:E1C_3G)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ADVAN M4",
			model: "M4"
		},
		{
			regex: "ADVAN S40",
			model: "S40"
		},
		{
			regex: "i7U",
			model: "I Lite i7U"
		},
		{
			regex: "S5E[ _]NXT",
			model: "S5E NXT"
		},
		{
			regex: "i(55[KD]|5[KE])",
			model: "I$1"
		},
		{
			regex: "i4U",
			model: "I4U"
		},
		{
			regex: " 6004(?: Build|\\) AppleWebKit)",
			model: "G2 Pro"
		},
		{
			regex: " 6002(?: Build|\\) AppleWebKit)",
			model: "G3 Pro"
		},
		{
			regex: "(S45E|50[46]1|5059|S50H|I7D|S7D|S4Z|S5J\\+|S4\\+)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "E1C_3G",
			device: "tablet",
			model: "E1C 3G"
		}
	]
};
var Advance = {
	regex: "Hollogram|(?:HL(?:4936|6246|[56]575|5[67]67)|IntroTr3544|Pr(?:61(?:4[56]|50)|60[27]0|5[69]50)|Tr3845)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IntroTr3544|Tr3845",
			model: "Intro",
			device: "tablet"
		},
		{
			regex: "Pr(61(?:4[56]|50)|60[27]0|5[69]50)",
			model: "Prime PR$1",
			device: "tablet"
		},
		{
			regex: "HL(4936|6246|[56]575|5[67]67)",
			model: "Hollogram HL$1"
		},
		{
			regex: "Hollogram ([^;/)]+)(?: Build|[;)])",
			model: "Hollogram $1"
		}
	]
};
var AGM = {
	regex: "AGM ([^/;)]+)(?: Build|[;)])",
	device: "smartphone",
	model: "$1"
};
var Airness = {
	regex: "AIRNESS-([\\w]+)",
	device: "feature phone",
	model: "$1"
};
var Aiwa = {
	regex: "(?:AW790|M300|AWM(?:533|50[19]|561)|AW500)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "AW790(?:[);/ ]|$)",
			model: "AW790"
		},
		{
			regex: "AW500(?:[);/ ]|$)",
			model: "AW500"
		},
		{
			regex: "AWM(533|50[19]|561)(?:[);/ ]|$)",
			model: "AWM$1"
		},
		{
			regex: "M300(?:[);/ ]|$)",
			model: "M300",
			device: "phablet"
		}
	]
};
var Akai = {
	regex: "AKAI,|Akai[ _-]|Eco[ _]E2|Glory[ _](?:G[1235]|L[123]|O[125])|TAB-[79]8[03]0Q?|X6 METAL|AKTB-703MZ",
	device: "smartphone",
	models: [
		{
			regex: "TAB-([79]8[03]0Q?)",
			device: "tablet",
			model: "TAB $1"
		},
		{
			regex: "AKTB-703MZ",
			device: "tablet",
			model: "AKTB-703MZ"
		},
		{
			regex: "X6 METAL",
			model: "iLike"
		},
		{
			regex: "Glory[ _](G[1235]|L[123]|O[125])",
			model: "Glory $1"
		},
		{
			regex: "Eco[ _]E2",
			model: "Eco E2"
		},
		{
			regex: "Akai[ _-]([^;/)]+)(?: Build|[;)])",
			model: "$1"
		},
		{
			regex: "AKAI,(AK3219NF)",
			device: "tv",
			model: "$1"
		},
		{
			regex: "Si2157LG32",
			device: "tv",
			model: "Si2157LG32"
		}
	]
};
var Alcatel = {
	regex: "Alcatel|Alc(?!or )[a-z0-9]+|One[ _]?Touch|idol3|TIMXL|(?:(?:4003[AJ]|4009[ADEFIKMSX]|4013[DEJKMX]|4014[ADEKMX]|4015[ADNTX]|4016[ADX]|4017[ADEFSX]|4018[ADEFMX]|4024[EDX]|4027[ADNX]|4028[AEJS]|4032[ADEX]|4034[ADEFGXTL]|4035[ADXY]|4045[ADEX]|4047[ADFGNX]|4049[DEGMX]|4060[SW]|A466BG|A621BL|4114E|4087U|5001[ADJTU]|5002[ADFH]|5003[ADGU]|5006D|5007[AU]|5008[ADUYT]|5009[AD]|5010[DEGSUX]|5011A|5012[DFG]|5015[ADEX]|5016[AXJ]|5017[ABDEOX]|5019D|5022[EDX]|5023[EF]|5024[ADJF]|5025[DEG]|5026[ADJ]|5027B|5028[AYD]|5029[EYD]|5030[DE]|5032W|5033[AEFXDJGMOTXYQS]|5034D|5036D|5038[ADEX]|5039[DY]|5041[CD]|5042[ADEFGWXT]|5044[ADGIKOPSTY]|5045[ADFGIJTXY]|5046[ADGIJSTUY]|5047[DIUY]|5048[AYUI]|5049[EGSWZ]|5050[ASXY]|5051[ADEJMTWX]|5052[ADY]|5053[ADKY]|5054[ADNSTWX]|5056[ADEGIJMNTUWX]|5057M|5058[AIY]|5059[ADJXYZIST]|5060[ADJ]|5061[KU]|5065[ADNWX]|5070D|5080[ADFQUX]|5085[ABCDGHIJNOQY]|5086[ADY]|5090[AIY]|5095[IKY]|5098[OS]|5099[ADYUI]|5116J|5145A|6016[ADEX]|6036[AXY]|6037[BKY]|6039[AHJKY]|6042D|6043[AD]|6044D|6045[BFIKOYX]|6050[AFY]|6055[ABDHIKPUYZ]|6058[ADX]|6060[SX]|6062W|6070K|7040[ADEFKRT]|7041[DX]|7042A|7043[AEKY]|7044[AX]|7045Y|7048[ASWX]|7053D|7055A|7070X|7071[ADX]|8030Y|8050[DEGX]|8063|8088[XQM]|9001[DIX]|9002X|9003[AX]|9024O|9005X|9026X|9007[ATX]|9008[ADIJNTUX]|9009G|9010X|9020A|9022X|9027[FTWX]|9029Z|9203A|A(?:464BG|570BL|50[13]DL|57[17]VL|574BL)|I213|I216X|(?<!\\.)80(?:82|6[78])|A576CC)(?:_(?:EEA|RU))?|P360X)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "4087U",
			model: "1SE Light"
		},
		{
			regex: "5022[EDX]|5070D",
			model: "One Touch Pop Star"
		},
		{
			regex: "6044D",
			model: "One Touch Pop Up"
		},
		{
			regex: "4015[ATX]|4016A",
			model: "One Touch Pop C1"
		},
		{
			regex: "4015[DN]|4016[DX]",
			model: "One Touch Pop C1 Dual SIM"
		},
		{
			regex: "4032[AX]",
			model: "One Touch Pop C2"
		},
		{
			regex: "4032[DE]",
			model: "One Touch Pop C2 Dual SIM"
		},
		{
			regex: "5036D",
			model: "One Touch Pop C5 Dual SIM"
		},
		{
			regex: "7040[AFK]|7041X|7042A",
			model: "One Touch Pop C7"
		},
		{
			regex: "7040[DE]|7041D",
			model: "One Touch Pop C7 Dual SIM"
		},
		{
			regex: "4018[ADEFMX]",
			model: "One Touch Pop D1"
		},
		{
			regex: "4035[ADXY]",
			model: "One Touch Pop D3"
		},
		{
			regex: "5038[ADEX]",
			model: "One Touch Pop D5"
		},
		{
			regex: "4045[AX]",
			model: "One Touch Pop 2 4\""
		},
		{
			regex: "4045[DE]",
			model: "One Touch Pop 2 4\" Dual SIM"
		},
		{
			regex: "5042[AFGWX]",
			model: "One Touch Pop 2 4.5\""
		},
		{
			regex: "5042[DE]",
			model: "One Touch Pop 2 4.5\" Dual SIM"
		},
		{
			regex: "7043[AY]|7044[AX]",
			model: "One Touch Pop 2 5\""
		},
		{
			regex: "7043[EK]",
			model: "One Touch Pop 2 5\" Dual SIM"
		},
		{
			regex: "50[16]5X",
			model: "One Touch Pop 3"
		},
		{
			regex: "5015[AE]|5016[AJ]|5065[ADWX]|5116J",
			model: "One Touch Pop 3 5\""
		},
		{
			regex: "5025[DEG]|5054[ADSTX]",
			model: "One Touch Pop 3 5.5\""
		},
		{
			regex: "5015D",
			model: "One Touch Pop 3 Dual SIM"
		},
		{
			regex: "5051[AEJMTWX]",
			model: "One Touch Pop 4"
		},
		{
			regex: "5051D",
			model: "One Touch Pop 4 Dual SIM"
		},
		{
			regex: "5095[IKY]",
			model: "One Touch Pop 4S"
		},
		{
			regex: "5056[ADEGJMTUX]",
			model: "One Touch Pop 4+"
		},
		{
			regex: "7070X",
			model: "One Touch Pop 4 6\""
		},
		{
			regex: "5057M",
			model: "One Touch Pop Mirage"
		},
		{
			regex: "5050[ASXY]",
			model: "One Touch Pop S3"
		},
		{
			regex: "7045Y",
			model: "One Touch Pop S7"
		},
		{
			regex: "6037[BKY]",
			model: "One Touch Idol 2"
		},
		{
			regex: "5042T",
			model: "One Touch Astro"
		},
		{
			regex: "5027B",
			model: "One Touch Dawn"
		},
		{
			regex: "5024[ADF]|5028Y",
			model: "1S"
		},
		{
			regex: "7071[ADX]",
			model: "A7 XL"
		},
		{
			regex: "5002[ADH]",
			model: "1B (2020)"
		},
		{
			regex: "4034T",
			model: "1E"
		},
		{
			regex: "5002F",
			model: "1A (2020)"
		},
		{
			regex: "5034D",
			model: "3L"
		},
		{
			regex: "A576CC",
			model: "Kora A576CC"
		},
		{
			regex: "7040[RT]",
			model: "One Touch Fierce 2"
		},
		{
			regex: "5056[NW]",
			model: "One Touch Fierce 4"
		},
		{
			regex: "5054N",
			model: "One Touch Fierce XL"
		},
		{
			regex: "6042D",
			model: "One Touch Flash"
		},
		{
			regex: "6016[AX]",
			model: "One Touch Idol 2 mini"
		},
		{
			regex: "6016[DE]",
			model: "One Touch Idol 2 mini Dual SIM"
		},
		{
			regex: "6036[AXY]",
			model: "One Touch Idol 2 mini S"
		},
		{
			regex: "6050[AFY]",
			model: "One Touch Idol 2S"
		},
		{
			regex: "6039[AHJKY]|idol3",
			model: "One Touch Idol 3"
		},
		{
			regex: "6045[BFIKOYX]",
			model: "One Touch Idol 3 5.5\""
		},
		{
			regex: "6055[ABDHIKPUYZ]",
			model: "One Touch Idol 4"
		},
		{
			regex: "6070K",
			model: "One Touch Idol 4S"
		},
		{
			regex: "6058[ADX]",
			model: "One Touch Idol 5"
		},
		{
			regex: "6060[SX]",
			model: "One Touch Idol 5S"
		},
		{
			regex: "6043[AD]",
			model: "One Touch Idol X+"
		},
		{
			regex: "8030Y",
			model: "One Touch Hero 2"
		},
		{
			regex: "7055A",
			model: "One Touch Hero 2C"
		},
		{
			regex: "7053D",
			model: "One Touch X1"
		},
		{
			regex: "5065N",
			model: "TRU"
		},
		{
			regex: "A574BL",
			model: "Raven"
		},
		{
			regex: "A577VL",
			model: "Zip"
		},
		{
			regex: "A466BG",
			model: "Pixi Unite"
		},
		{
			regex: "5056I",
			model: "One Touch Optus X Smart"
		},
		{
			regex: "A570BL",
			model: "One Touch Pixi Avion LTE"
		},
		{
			regex: "A571VL",
			model: "One Touch Pixi Avion 4G LTE"
		},
		{
			regex: "4024[DEX]",
			model: "One Touch Pixi First"
		},
		{
			regex: "A464BG",
			model: "One Touch Pixi Glitz"
		},
		{
			regex: "A621BL",
			model: "One Touch Pixi Glory"
		},
		{
			regex: "4014D",
			model: "One Touch Pixi 2"
		},
		{
			regex: "4009[AFIKMSX]",
			model: "One Touch Pixi 3 3.5\""
		},
		{
			regex: "4009[DE]",
			model: "One Touch Pixi 3 3.5\" Dual SIM"
		},
		{
			regex: "4003[AJ]|4013[DEJKMX]|4014[AEKMX]|4114E",
			model: "One Touch Pixi 3 4\""
		},
		{
			regex: "4027[ADNX]|4028[AEJS]|5019D",
			model: "One Touch Pixi 3 4.5\""
		},
		{
			regex: "5017[ABDEOX]",
			model: "One Touch Pixi 3 4.5\" 4G"
		},
		{
			regex: "9002X",
			model: "One Touch Pixi 3 7\"",
			device: "phablet"
		},
		{
			regex: "9007A",
			model: "One Touch Pixi 3 7\"",
			device: "tablet"
		},
		{
			regex: "9007[TX]",
			model: "One Touch Pixi 3 7\" 4G",
			device: "tablet"
		},
		{
			regex: "9009G",
			model: "1T",
			device: "tablet"
		},
		{
			regex: "(?!<\\.)8082(?:_(?:EEA|RU))?(?:[);/ ]|$)",
			model: "1T 10",
			device: "tablet"
		},
		{
			regex: "(?!<\\.)806[78](?:_(?:EEA|RU))?(?:[);/ ]|$)",
			model: "1T 7",
			device: "tablet"
		},
		{
			regex: "9022X",
			model: "One Touch Pixi 3 8\"",
			device: "phablet"
		},
		{
			regex: "9010X",
			model: "One Touch Pixi 3 10\"",
			device: "tablet"
		},
		{
			regex: "4017[ADEFSX]",
			model: "One Touch Pixi 4 3.5\""
		},
		{
			regex: "4034[ADEFGXL]",
			model: "One Touch Pixi 4 4\""
		},
		{
			regex: "4060[SW]",
			model: "One Touch Pixi 4 4.5\""
		},
		{
			regex: "5023[EF]",
			model: "One Touch Pixi 4 Plus Power"
		},
		{
			regex: "5010[DEGSUX]",
			model: "One Touch Pixi 4 5\" 3G"
		},
		{
			regex: "5041D",
			model: "One Touch Pixi 4 5.0\""
		},
		{
			regex: "5012[DFG]",
			model: "One Touch Pixi 4 5.5\" 3G"
		},
		{
			regex: "5045[ADFGIJTXY]|5145A",
			model: "One Touch Pixi 4 5\" 4G"
		},
		{
			regex: "5098O",
			model: "One Touch Pixi Theatre"
		},
		{
			regex: "A501DL",
			model: "A1"
		},
		{
			regex: "A503DL",
			model: "A1X"
		},
		{
			regex: "5046[ADIJTUY]",
			model: "A3"
		},
		{
			regex: "5011A|5049[EG]",
			model: "A3 Plus"
		},
		{
			regex: "9008[ADIJNTUX]",
			model: "A3 XL"
		},
		{
			regex: "9203A",
			model: "A3 7\" 3G",
			device: "tablet"
		},
		{
			regex: "9027[FTWX]",
			model: "3T 8.0\"",
			device: "tablet"
		},
		{
			regex: "9026X",
			model: "A3 10\"",
			device: "tablet"
		},
		{
			regex: "5085[BQ]",
			model: "A5"
		},
		{
			regex: "5085[ADHIJY]",
			model: "A5 LED"
		},
		{
			regex: "5085N",
			model: "A5 Max LED"
		},
		{
			regex: "5090[AIY]",
			model: "A7"
		},
		{
			regex: "5046[GS]",
			model: "A30"
		},
		{
			regex: "5049S",
			model: "A30 Plus"
		},
		{
			regex: "5049Z",
			model: "A30 Fierce"
		},
		{
			regex: "5085[GO]",
			model: "A50"
		},
		{
			regex: "5048[AYUI]",
			model: "3X (2019)"
		},
		{
			regex: "5049W",
			model: "Revvl"
		},
		{
			regex: "8050[GX]",
			model: "One Touch Pixi 4 6\" 3G"
		},
		{
			regex: "8050[ED]",
			model: "One Touch Pixi 4 6\" 3G Dual SIM"
		},
		{
			regex: "5098S|9001[DIX]",
			model: "One Touch Pixi 4 6\" 4G"
		},
		{
			regex: "9003[AX]",
			model: "One Touch Pixi 4 7\" 3G",
			device: "tablet"
		},
		{
			regex: "8063",
			model: "One Touch Pixi 4 7\" WiFi",
			device: "tablet"
		},
		{
			regex: "9024O",
			model: "One Touch Pixi 5",
			device: "tablet"
		},
		{
			regex: "I216X",
			model: "One Touch Pixi 7",
			device: "tablet"
		},
		{
			regex: "I213",
			model: "One Touch Pixi 7",
			device: "tablet"
		},
		{
			regex: "9005X",
			model: "One Touch Pixi 8",
			device: "tablet"
		},
		{
			regex: "P320X",
			model: "One Touch POP 8",
			device: "tablet"
		},
		{
			regex: "P310X",
			model: "One Touch POP 7",
			device: "tablet"
		},
		{
			regex: "9020A",
			model: "One Touch Trek HD",
			device: "tablet"
		},
		{
			regex: "7048[ASWX]",
			model: "One Touch Go Play"
		},
		{
			regex: "(?:Alcatel-)?OT-802",
			model: "Wave"
		},
		{
			regex: "ALCATEL_ONE_TOUCH_768T",
			model: "Island"
		},
		{
			regex: "(?:TRIBE_)?3075A",
			model: "One Touch Tribe"
		},
		{
			regex: "ALCATEL_one_touch_585",
			model: "One Touch 585"
		},
		{
			regex: "ALCATEL_ONE_TOUCH_838",
			model: "One Touch 838"
		},
		{
			regex: "ALCATEL_one_touch_813d",
			model: "One Touch 813D"
		},
		{
			regex: "ALCATEL_one_touch_813",
			model: "One Touch 813"
		},
		{
			regex: "OT871A",
			model: "One Touch 871A"
		},
		{
			regex: "P360X",
			model: "One Touch Pop 10"
		},
		{
			regex: "(?:Alcatel[ _])?One[ _]?Touch[ _]((?:T[0-9]+|TAB[^/;]+|EVO[78](?:HD)?)) Build",
			device: "tablet",
			model: "One Touch $1"
		},
		{
			regex: "(?:Alcatel[ _])?One[ _]?Touch([^/;]*) Build",
			model: "One Touch$1"
		},
		{
			regex: "(?:Alcatel[ _])?One[ _]?Touch([^/;\\)]*)\\)",
			model: "One Touch$1"
		},
		{
			regex: "5080[ADFQUX]",
			model: "Shine Lite"
		},
		{
			regex: "TIMXL",
			model: "TIM XL"
		},
		{
			regex: "5085C",
			model: "PulseMix"
		},
		{
			regex: "4049[DEGMX]",
			model: "U3"
		},
		{
			regex: "5044[ADIKOPTY]",
			model: "U5"
		},
		{
			regex: "4047[DFXN]",
			model: "U5 3G"
		},
		{
			regex: "5047[DIUY]",
			model: "U5 HD"
		},
		{
			regex: "4047G",
			model: "U5 Lite"
		},
		{
			regex: "4047A",
			model: "U5 Plus"
		},
		{
			regex: "4044[CV]",
			model: "Quick Flip"
		},
		{
			regex: "4044O",
			model: "Cingular Flip 2"
		},
		{
			regex: "(?:Alcatel)?4044[MNT]",
			model: "Go Flip"
		},
		{
			regex: "5044[GS]",
			model: "U50"
		},
		{
			regex: "5033[ADXJEFGMOTXYQS]",
			model: "1"
		},
		{
			regex: "5009[AD]",
			model: "1C"
		},
		{
			regex: "5008[ADUYT]",
			model: "1X (2019)"
		},
		{
			regex: "5007[AU]",
			model: "1V (2020)"
		},
		{
			regex: "5003[ADGU]",
			model: "1C (2019)"
		},
		{
			regex: "5006D",
			model: "3C (2019)"
		},
		{
			regex: "5024J",
			model: "1S"
		},
		{
			regex: "5028[AD]",
			model: "1S (2020)"
		},
		{
			regex: "5030[DE]",
			model: "1SE (2020)"
		},
		{
			regex: "5001[ADJTU]",
			model: "1V"
		},
		{
			regex: "5059[ADJXYZIT]",
			model: "1X"
		},
		{
			regex: "5059S",
			model: "Avalon V"
		},
		{
			regex: "5060[ADJ]",
			model: "5V",
			device: "phablet"
		},
		{
			regex: "5052[ADY]|5053[ADKY]",
			model: "3"
		},
		{
			regex: "5029E",
			model: "3 (2020)"
		},
		{
			regex: "5029[DY]",
			model: "3L (2020)"
		},
		{
			regex: "5032W|5099[ADYUI]",
			model: "3V"
		},
		{
			regex: "5026[ADJ]",
			model: "3C"
		},
		{
			regex: "5039[DY]",
			model: "3L",
			device: "phablet"
		},
		{
			regex: "5058[AIY]",
			model: "3X"
		},
		{
			regex: "5061[KU]",
			model: "3X (2020)"
		},
		{
			regex: "5086[ADY]",
			model: "5"
		},
		{
			regex: "6062W",
			model: "7"
		},
		{
			regex: "8088[XQM]",
			model: "3T 10",
			device: "tablet"
		},
		{
			regex: "9029Z",
			model: "Joy Tab",
			device: "tablet"
		},
		{
			regex: "9029Z",
			model: "Joy Tab",
			device: "tablet"
		},
		{
			regex: "Alcatel UP",
			model: ""
		},
		{
			regex: "(?:ALCATEL_)?A383G",
			model: "Big Easy Plus"
		},
		{
			regex: "5041C",
			model: "TETRA"
		},
		{
			regex: "ALCATEL([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "ALCATEL[ \\-]?([^/;\\)]+)",
			model: "$1"
		},
		{
			regex: "ALCATEL_([^/;\\)]+)",
			model: "$1"
		},
		{
			regex: "Alc([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Allview = {
	regex: "Allview|A4You|H1003_LTE_PRO|A5_(?:Easy(?:_TM)?|Ready(?:_TM)?|Quad|Quad_Plus_TM)|A[5-9]_Lite|A5Smiley|A6_Duo|A10_Lite_2019|A10_(?:Plus|Max)|AX2_Frenzy|AX4Nano|AX5NanoQ|C6_Duo|E[23]_Living|E3_(?:Jump|Sign)|E4_Lite|M9_Connect|P(?:43_Easy|[5689]_Energy|6_Energy_Lite|[68]_Energy_Mini(?:_TM)?|(41|[458])_eMagic(?:_TM)?|[589](?:_)?Life(?:_TM)?|[567]_Lite(?:_TM)?|6_plus|[45678]_Pro|7_Seon|10_Life|10_Max|10_Style|7_Xtreme|6_Qmax|4_Quad)|V(?:[134]_Viper|1_Viper_I|2_Viper_(?:E|I|S|X|X_plus|Xe))|X4_Soul_Vision|X(?:[1-46]_Soul_Xtreme|[1-5]_Soul|3_Soul_Lite|[2-6]_Soul_Mini(?:_TM)?|4_Soul_Mini_S(?:_TM)?|[2-5]_Soul_Style(?:_TM)?|2_Soul_Style_Plus|2_Twin)|Viva_(?:H801|100[13]G|(?:H100[12]|H701|H802)_LTE|C701|i701G)",
	device: "smartphone",
	models: [
		{
			regex: "A4You",
			model: "A4 You"
		},
		{
			regex: "AX2_Frenzy",
			model: "AX2 Frenzy",
			device: "tablet"
		},
		{
			regex: "AX4Nano",
			model: "AX4 Nano"
		},
		{
			regex: "AX5NanoQ",
			model: "AX5 Nano Q",
			device: "tablet"
		},
		{
			regex: "C6_Duo",
			model: "C6 Duo"
		},
		{
			regex: "E([23])_Living",
			model: "E$1 Living"
		},
		{
			regex: "E3_Jump",
			model: "E3 Jump"
		},
		{
			regex: "E3_Sign",
			model: "E3 Sign"
		},
		{
			regex: "E4_Lite",
			model: "E4 Lite"
		},
		{
			regex: "M9_Connect",
			model: "M9 Connect"
		},
		{
			regex: "P43_Easy",
			model: "P43 Easy"
		},
		{
			regex: "P(41|[458])_eMagic(?:_TM)?",
			model: "P$1 eMagic"
		},
		{
			regex: "P([567])_Lite(?:_TM)?",
			model: "P$1 Lite"
		},
		{
			regex: "P6_plus",
			model: "P6 Plus"
		},
		{
			regex: "P6_Qmax",
			model: "P6 Qmax"
		},
		{
			regex: "P([45678])_Pro",
			model: "P$1 Pro"
		},
		{
			regex: "P4_Quad",
			model: "P4 Quad"
		},
		{
			regex: "P9_Energy_Lite_2017",
			model: "P9 Energy Lite (2017)"
		},
		{
			regex: "P9_Energy_S",
			model: "P9 Energy S"
		},
		{
			regex: "P([69])_Energy_Lite",
			model: "P$1 Energy Lite"
		},
		{
			regex: "P8_Energy_PRO",
			model: "P8 Energy Pro"
		},
		{
			regex: "P([689])_Energy_mini(?:_TM)?",
			model: "P$1 Energy Mini"
		},
		{
			regex: "P([5689])_Energy",
			model: "P$1 Energy"
		},
		{
			regex: "P7_Seon",
			model: "P7 Seon"
		},
		{
			regex: "P7_Xtreme",
			model: "P7 Xtreme"
		},
		{
			regex: "P([589])(?:_)?Life(?:_TM)?",
			model: "P$1 Life"
		},
		{
			regex: "P10_Life",
			model: "P10 Life"
		},
		{
			regex: "P10_Max",
			model: "P10 Max"
		},
		{
			regex: "P10_Style",
			model: "P10 Style"
		},
		{
			regex: "V([12])_Viper_I4G(?:_TM)?",
			model: "V$1 Viper I 4G"
		},
		{
			regex: "V1_Viper_I",
			model: "V1 Viper I"
		},
		{
			regex: "V([134])_Viper",
			model: "V$1 Viper"
		},
		{
			regex: "V2_Viper_X_plus",
			model: "V2 Viper X Plus"
		},
		{
			regex: "V2_Viper_(E|I|S|X(?:e)?)",
			model: "V2 Viper $1"
		},
		{
			regex: "X4_Soul_Vision",
			model: "X4 Soul Vision"
		},
		{
			regex: "X([1246])_Soul_Xtreme",
			model: "X$1 Soul Xtreme"
		},
		{
			regex: "X4_Soul_Infinity_(L|N|S|Z)",
			model: "X4 Soul Infinity $1"
		},
		{
			regex: "X([34])_Soul_Lite",
			model: "X$1 Soul Lite"
		},
		{
			regex: "X4_Soul_Mini_S(?:_TM)?",
			model: "X4 Soul Mini S"
		},
		{
			regex: "X([23456])_Soul_Mini(?:_TM)?",
			model: "X$1 Soul Mini"
		},
		{
			regex: "X3_Soul_PLUS",
			model: "X3 Soul Plus"
		},
		{
			regex: "X([35])_Soul_Pro",
			model: "X$1 Soul Pro"
		},
		{
			regex: "X2_Soul_Style_Plus",
			model: "X2 Soul Style Plus"
		},
		{
			regex: "X([2345])_Soul_Style(?:_TM)?",
			model: "X$1 Soul Style"
		},
		{
			regex: "X([12345])_Soul",
			model: "X$1 Soul"
		},
		{
			regex: "X2_Twin",
			model: "X2 Twin"
		},
		{
			regex: "A5_Easy(?:_TM)?",
			model: "A5 Easy"
		},
		{
			regex: "A([56789])_Lite",
			model: "A$1 Lite"
		},
		{
			regex: "A5_Ready(?:_TM)?",
			model: "A5 Ready"
		},
		{
			regex: "A5Smiley",
			model: "A5 Smiley"
		},
		{
			regex: "A5_Quad_Plus_TM",
			model: "A5 Quad Plus"
		},
		{
			regex: "A5_Quad",
			model: "A5 Quad"
		},
		{
			regex: "A6_Duo",
			model: "A6 Duo"
		},
		{
			regex: "A10_Lite_2019",
			model: "A10 Lite (2019)"
		},
		{
			regex: "A10_Plus",
			model: "A10 Plus"
		},
		{
			regex: "A10_Max",
			model: "A10 Max"
		},
		{
			regex: "Impera S",
			model: "Impera S"
		},
		{
			regex: "ALLVIEW P4i",
			model: "AllDro P4"
		},
		{
			regex: "Allview_P2",
			model: "AllDro"
		},
		{
			regex: "AllviewCityPlus",
			device: "tablet",
			model: "City Plus"
		},
		{
			regex: "AllviewCity",
			device: "tablet",
			model: "City"
		},
		{
			regex: "AllviewAX2Frenzy",
			device: "tablet",
			model: "AX2 Frenzy"
		},
		{
			regex: "Allview2SpeedDuo",
			device: "tablet",
			model: "Alldro 2 Speed Duo"
		},
		{
			regex: "Allview3SpeedQuad",
			device: "tablet",
			model: "Alldro 3 Speed Quad"
		},
		{
			regex: "H1003_LTE_PRO",
			device: "tablet",
			model: "Viva H1003 LTE Pro"
		},
		{
			regex: "Viva_(H801|100[13]G|(?:H802|H100[12]|H701)_LTE|C701|i701G)",
			device: "tablet",
			model: "Viva $1"
		},
		{
			regex: "ALLVIEW ?SPEEDI",
			device: "tablet",
			model: "Speed I"
		},
		{
			regex: "ALLVIEW ?SPEED",
			device: "tablet",
			model: "Speed"
		},
		{
			regex: "ALLVIEWSPEED",
			device: "tablet",
			model: "Speed"
		},
		{
			regex: "AX4Nano",
			device: "tablet",
			model: "AX4 Nano"
		},
		{
			regex: "ALLVIEW_TX1_Quasar",
			device: "tablet",
			model: "TX1 Quasar"
		},
		{
			regex: "Allview[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Allview[ _-]([^;/]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Allwinner = {
	regex: "(?:QUAD-CORE (?:A64 p3|A33 y3|T3 K2001M)|ZY-07B|UltraOcta-T8|OCTA-CORE T8)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "QUAD-CORE A64 p3",
			model: "A64 QUAD-CORE p3"
		},
		{
			regex: "QUAD-CORE A33 y3",
			model: "A33 QUAD-CORE y3"
		},
		{
			regex: "ZY-07B",
			model: "ZY-07B"
		},
		{
			regex: "UltraOcta-T8",
			device: "car browser",
			model: "Ultra Octa T8"
		},
		{
			regex: "QUAD-CORE T3 K2001M",
			device: "car browser",
			model: "QUAD-CORE T3 K2001M"
		},
		{
			regex: "OCTA-CORE T8",
			device: "car browser",
			model: "OCTA-CORE T8"
		}
	]
};
var altron = {
	regex: "(AL-555|GI-626|OB[_-](?:421|728|627))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "AL-555",
			model: "AL-555"
		},
		{
			regex: "OB[_-](421|728|627)",
			model: "OB-$1"
		},
		{
			regex: "GI-626",
			device: "phablet",
			model: "GI-626"
		}
	]
};
var AMGOO = {
	regex: "AM(350|355|40[257]|41[025]|450|50[89]|52[037]|51[58]|53[05])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "AM350",
			model: "Jack Pro"
		},
		{
			regex: "AM(355|407)",
			model: "Tigo"
		},
		{
			regex: "AM402",
			model: "Pronto"
		},
		{
			regex: "AM410",
			model: "Unico"
		},
		{
			regex: "AM450",
			model: "Swift"
		},
		{
			regex: "AM508",
			model: "Fuego"
		},
		{
			regex: "AM509",
			model: "Uno"
		},
		{
			regex: "AM515",
			model: "D1"
		},
		{
			regex: "AM518",
			model: "C1"
		},
		{
			regex: "AM520",
			model: "Pro"
		},
		{
			regex: "AM523",
			model: "Plus"
		},
		{
			regex: "AM527",
			model: "Geo"
		},
		{
			regex: "AM530",
			model: "A1"
		},
		{
			regex: "AM535",
			model: "P1"
		},
		{
			regex: "AM([0-9]{3})",
			model: "AM$1"
		}
	]
};
var Amoi = {
	regex: "Amoi|(?:A862W|Clever[ -]?(?:Gem S52|Gleam S45|Pad P7|Wave S50|Touch S46|JOY S40|Lite S41))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Clever Pad P7",
			model: "Clever Pad P7"
		},
		{
			regex: "A862W",
			model: "A862W"
		},
		{
			regex: "CLEVER JOY S40",
			model: "Clever Joy S40"
		},
		{
			regex: "Clever[ -]?(Gleam S45|Gem S52|Wave S50|Touch S46|Lite S41)",
			model: "Clever $1"
		},
		{
			regex: "Amoi[\\- /]([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "Amoisonic-([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Ainol = {
	regex: "Numy|novo[0-9]|Novo 10 Hero|AX10PRO|NUMY3GAX9|NOVO10 Spark|Aurora-II",
	device: "tablet",
	models: [
		{
			regex: "Numy 3G AX1",
			model: "Novo 7 Numy AX1 3G"
		},
		{
			regex: "Numy[_ ]?3G[_ ]?Sword",
			model: "Numy 3G Sword"
		},
		{
			regex: "NOVO10 Spark",
			model: "Novo 10 Spark"
		},
		{
			regex: "AX10PRO",
			model: "Numy AX10 Pro"
		},
		{
			regex: "Numy_3G_AX3",
			model: "Numy AX3 Sword"
		},
		{
			regex: "Numy3GTalos",
			model: "Numy 3G Talos"
		},
		{
			regex: "Numy_3G_BW1",
			model: "Numy 3G Talos 2"
		},
		{
			regex: "NUMY3GAX9(?:[);/ ]|$)",
			model: "Numy 3G AX9"
		},
		{
			regex: "Numy3G_AX10(?:[);/ ]|$)",
			model: "Numy 3G AX10"
		},
		{
			regex: "(Novo 10 Hero QuadCore)",
			model: "$1"
		},
		{
			regex: "Aurora-II",
			model: "Novo 7 Aurora II"
		},
		{
			regex: "Novo7 Flame(?:[);/ ]|$)",
			model: "Novo 7 Flame"
		},
		{
			regex: "NOVO7(?:[);/ ]|$)",
			model: "Novo 7"
		},
		{
			regex: "Numy[ _]([^;/]+) Build",
			model: "Numy $1"
		},
		{
			regex: "Novo([0-9]+)[ \\-]([^;/]+) Build",
			model: "Novo $1 $2"
		}
	]
};
var Archos$1 = {
	regex: "(?:YL-)?Archos|(?:A50TI|AC101BHE)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Archos (Oxygen (?:63|57|68XL))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "A50TI(?:[);/ ]|$)",
			model: "50 Titanium 4G"
		},
		{
			regex: "Archos ?5(?:[);/ ]|$)",
			device: "tablet",
			model: "5"
		},
		{
			regex: "AC101BHE(?:[);/ ]|$)",
			device: "tablet",
			model: "101B Helium 4G"
		},
		{
			regex: "(?:YL-)?Archos ([^/;]*(?:PAD)[^/;]*) Build",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Archos ((?:[789]|10)[0-9]?[a-z]* ?(?:G9|G10|Helium|Titanium|Cobalt|Platinum|Xenon|Carbon|Neon|XS|IT)[^/;]*) Build",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "(?:YL-)?Archos ([a-z0-9 ]+) Build",
			model: "$1"
		},
		{
			regex: "(?:YL-)?Archos ([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Axxion = {
	regex: "Axxion ATAB-[0-9]+(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "Axxion ATAB-([0-9]+)(?:[);/ ]|$)",
			model: "ATAB-$1"
		}
	]
};
var MEU = {
	regex: "MEU ([a-z0-9]+) Build",
	device: "smartphone",
	model: "$1"
};
var Arnova = {
	regex: "arnova|ARCHM901|AN7CG2|AN7G2(DTE|I)?|AN7[BCDFH]?G3|A80KSC|AN8G2|AN8[BC]?G3|AN9G2I?|AN9G3|A101[BC]|AN10G2|AN10BG2(DT|I)?|AN10BG3(DT)?|AN10[CD]G3",
	device: "tablet",
	models: [
		{
			regex: "ARCHM901",
			model: "M901"
		},
		{
			regex: "AN7CG2",
			model: "7c G2"
		},
		{
			regex: "AN7G2I|AN7G2|AN7G2DTE",
			model: "7 G2"
		},
		{
			regex: "AN7G3",
			model: "7 G3"
		},
		{
			regex: "AN7BG3",
			model: "7b G3"
		},
		{
			regex: "AN7CG3",
			model: "7c G3"
		},
		{
			regex: "AN7DG3-CP",
			model: "Childpad"
		},
		{
			regex: "AN7DG3",
			model: "7d G3"
		},
		{
			regex: "AN7FG3",
			model: "7f G3"
		},
		{
			regex: "AN7HG3",
			model: "7h G3"
		},
		{
			regex: "A80KSC",
			model: "8"
		},
		{
			regex: "AN8G2",
			model: "8 G2"
		},
		{
			regex: "AN8G3",
			model: "8 G3"
		},
		{
			regex: "AN8BG3",
			model: "8b G3"
		},
		{
			regex: "AN8CG3",
			model: "8c G3"
		},
		{
			regex: "AN9G2I",
			model: "9i G2"
		},
		{
			regex: "AN9G2",
			model: "9 G2"
		},
		{
			regex: "AN9G3",
			model: "9 G3"
		},
		{
			regex: "A101B2|A101C|AN10G2",
			model: "10 G2"
		},
		{
			regex: "A101B",
			model: "10"
		},
		{
			regex: "AN10BG2|AN10BG2DT|AN10BG2I",
			model: "10b G2"
		},
		{
			regex: "AN10BG3|AN10BG3DT|AN10BG3-LZ",
			model: "10b G3"
		},
		{
			regex: "AN10CG3",
			model: "10c G3"
		},
		{
			regex: "AN10DG3",
			model: "10d G3"
		},
		{
			regex: "ARNOVA 90G3",
			model: "90 G3"
		},
		{
			regex: "ARNOVA 90 G4",
			model: "90 G4"
		},
		{
			regex: "ARNOVA 97G4",
			model: "97 G4"
		},
		{
			regex: "ARNOVA 101 G4",
			model: "101 G4"
		},
		{
			regex: "Arnova ([^/;]*) Build",
			model: "$1"
		}
	]
};
var ARRIS$1 = {
	regex: "ARRIS",
	device: "tv",
	models: [
		{
			regex: "ARRIS[,;] ([^),;/]+)",
			model: "$1"
		}
	]
};
var Ask = {
	regex: "ASK[ _]",
	device: "smartphone",
	models: [
		{
			regex: "ASK[ _]791SP[ _]3G",
			model: "791SP 3G",
			device: "tablet"
		},
		{
			regex: "ASK[_ ]([^/;]*) Build",
			model: "$1"
		}
	]
};
var ANS = {
	regex: "UL40 Build",
	device: "smartphone",
	model: "UL40"
};
var AOC$1 = {
	regex: "AOC,",
	device: "tv",
	models: [
		{
			regex: "(LE(?:32|43)S5970(?:s)?-20|LE55U7970-30|LE43S5977-20|U60856)",
			model: "$1"
		}
	]
};
var Assistant = {
	regex: "(AS[-_](?:50[123]|543[1-6]|44[12]1|541[12]|54[23]1|6431|[46]01L)|AP-(?:109|115G|721N|753G|7[25]7G|10[68]|107G|110N|941|719))[;/)_ ]",
	device: "smartphone",
	models: [
		{
			regex: "AS[-_]401L(?:[);/ ]|$)",
			model: "Asper"
		},
		{
			regex: "AS-5432(?:[);/ ]|$)",
			model: "Agio"
		},
		{
			regex: "AS[-_](?:5434|501)(?:[);/ ]|$)",
			model: "Club"
		},
		{
			regex: "AS_601L(?:[);/ ]|$)",
			model: "AS-601L"
		},
		{
			regex: "AS-5433 Secret(?:[);/ ]|$)",
			model: "Secret"
		},
		{
			regex: "AS-5433(?:[);/ ]|$)",
			model: "Max Secret"
		},
		{
			regex: "AS-5421(?:[);/ ]|$)",
			model: "Surf"
		},
		{
			regex: "AS-44[12]1(?:[);/ ]|$)",
			model: "Unami"
		},
		{
			regex: "AS-5431(?:[);/ ]|$)",
			model: "Prima"
		},
		{
			regex: "AS-502(?:[);/ ]|$)",
			model: "Shot"
		},
		{
			regex: "AS-503(?:[);/ ]|$)",
			model: "Target"
		},
		{
			regex: "AS-5435(?:[);/ ]|$)",
			model: "Shine"
		},
		{
			regex: "AS-5436[ _]",
			model: "Grid"
		},
		{
			regex: "AS-6431(?:[);/ ]|$)",
			model: "Rider"
		},
		{
			regex: "AS-5411[_ ]",
			model: "Max Ritm"
		},
		{
			regex: "AS-5412 Max(?:[);/ ]|$)",
			model: "AS-5412 Max"
		},
		{
			regex: "AP-721N(?:[);/ ]|$)",
			model: "AP-721N Force",
			device: "tablet"
		},
		{
			regex: "AP-941(?:[);/ ]|$)",
			model: "AP-941",
			device: "tablet"
		},
		{
			regex: "AP-108(?:[);/ ]|$)",
			model: "Cetus",
			device: "tablet"
		},
		{
			regex: "AP-106(?:[);/ ]|$)",
			model: "AP-106 Force",
			device: "tablet"
		},
		{
			regex: "(AP-(?:109|115G|7[25]7G|753G|107G|110N|719))(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Ark = {
	regex: "(ARK[_ -])?Benefit[_ -]([^/;]*)(?: Build|\\))|EDGE A5HD|Elf_S8|ICON (R40\\+|R45)|Impulse[ _](P[12])|Wizard_[12](?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:ARK[_ -])?Benefit[_ -]([^/;]*)(?: Build|\\))",
			model: "Benefit $1"
		},
		{
			regex: "Impulse[ _]P1\\+",
			model: "Impulse P1 Plus"
		},
		{
			regex: "Impulse[ _](P[12])",
			model: "Impulse $1"
		},
		{
			regex: "EDGE (A5HD)",
			model: "Edge $1"
		},
		{
			regex: "ICON (R40\\+|R45)",
			model: "Icon $1"
		},
		{
			regex: "Wizard_([12])",
			model: "Wizard $1"
		},
		{
			regex: "Elf_S8(?:[);/ ]|$)",
			model: "Elf S8"
		}
	]
};
var Asus$2 = {
	regex: "Asus|Transformer|ZenFone Max|TF300T|Slider SL101|PadFone|ME302(?:C|KL)|ME301T|ME371MG|ME17(?:1|2V|3X)|(?:K0[01][0-9a-z]|P(?:00[18ACIL]|01[MTVWYZ]|01MA|01T_1|02[13478])(?: Build|\\))|X015D|X018D|X003|X00[7ABT]D|Z00D|Z00[MTY]D|Z01[7FGHKMR]D)(?:[);/ ]|$)|G55[023]KL|ZB(631|602|633|55[135]|50[01])KL|ZC(55[134]|520|600)KL|ZA550KL|ZE(5[02]0|620|55[2345])KL|ZD55[23]KL|ZS6(?:61|7[01])KS|ZS(6[0236]0|55[10])KL|ZB(500KG|601KL)|MeMo Pad FHD 10 LTE|Z00[SV]D",
	device: "smartphone",
	models: [
		{
			regex: "ME171(?:[);/ ]|$)",
			model: "Eee Pad MeMO 171",
			device: "tablet"
		},
		{
			regex: "ASUS Z906(?:[);/ ]|$)",
			model: "Z906 10.1\"",
			device: "tablet"
		},
		{
			regex: "ME172V",
			model: "MeMO Pad",
			device: "tablet"
		},
		{
			regex: "ME302C(?:[);/ ]|$)",
			model: "MeMO Pad FHD 10",
			device: "tablet"
		},
		{
			regex: "(ME302KL|MeMo Pad FHD 10 LTE)(?:[);/ ]|$)",
			model: "MeMO Pad FHD 10 LTE",
			device: "tablet"
		},
		{
			regex: "ME301T(?:[);/ ]|$)",
			model: "MeMO Pad Smart 10",
			device: "tablet"
		},
		{
			regex: "Z101(?:[);/ ]|$)",
			model: "Z101",
			device: "tablet"
		},
		{
			regex: "X Pad 10 LTE(?:[);/ ]|$)",
			model: "X Pad 10 LTE",
			device: "tablet"
		},
		{
			regex: "(?:K01[3A]|K007|K00R)(?:[);/ ]|$)|MeMO Pad 7",
			model: "MeMO Pad 7",
			device: "tablet"
		},
		{
			regex: "K01E(?:[);/ ]|$)",
			model: "MeMO Pad 10 ME103K",
			device: "tablet"
		},
		{
			regex: "K00U|ME173X(?:[);/ ]|$)",
			model: "MeMO Pad HD 7",
			device: "tablet"
		},
		{
			regex: "(?:K011|K00L)(?:[);/ ]|$)",
			model: "MeMO Pad 8",
			device: "tablet"
		},
		{
			regex: "K014(?:[);/ ]|$)",
			model: "MeMO Pad 8.9",
			device: "tablet"
		},
		{
			regex: "K00S(?:[);/ ]|$)",
			model: "MeMO Pad HD 7 Dual SIM",
			device: "tablet"
		},
		{
			regex: "K00F(?:[);/ ]|$)",
			model: "MeMO Pad 10",
			device: "tablet"
		},
		{
			regex: "K00C(?:[);/ ]|$)",
			model: "Transformer Pad TF701T",
			device: "tablet"
		},
		{
			regex: "K010(?:[);/ ]|$)",
			model: "Transformer Pad TF103C",
			device: "tablet"
		},
		{
			regex: "K018(?:[);/ ]|$)",
			model: "Transformer Pad TF103CG",
			device: "tablet"
		},
		{
			regex: "TF300T(?:[);/ ]|$)",
			model: "Transformer Pad TF300T",
			device: "tablet"
		},
		{
			regex: "K01B(?:[);/ ]|$)",
			model: "Transformer Pad TF303K",
			device: "tablet"
		},
		{
			regex: "Slider SL101",
			model: "Eee Pad Slider SL101",
			device: "tablet"
		},
		{
			regex: "P01[YZ]",
			model: "ZenPad C 7.0",
			device: "tablet"
		},
		{
			regex: "P008 Build",
			model: "ZenPad Z8",
			device: "tablet"
		},
		{
			regex: "P001",
			model: "ZenPad Z10",
			device: "tablet"
		},
		{
			regex: "(?:ASUS_)?P00J",
			model: "ZenPad Z8s",
			device: "tablet"
		},
		{
			regex: "P01[VW]",
			model: "ZenPad 7.0",
			device: "tablet"
		},
		{
			regex: "(?:P024|P00A)(?:[);/ ]|$)",
			model: "ZenPad 8.0",
			device: "tablet"
		},
		{
			regex: "P01MA(?: Build|\\))|P01M(?: Build|\\))",
			model: "ZenPad S 8.0",
			device: "tablet"
		},
		{
			regex: "P027",
			model: "ZenPad 3S 10",
			device: "tablet"
		},
		{
			regex: "(?:ASUS_)?P00I",
			model: "ZenPad 3S 10 LTE",
			device: "tablet"
		},
		{
			regex: "(?:ASUS_)?P00C|P02[138]|P00L|P01T_1",
			model: "ZenPad 10",
			device: "tablet"
		},
		{
			regex: "ASUS Tablet P1801-T",
			model: "Transformer AiO P1801 18.4\"",
			device: "tablet"
		},
		{
			regex: "ASUS TAB A8",
			model: "TAB A8",
			device: "tablet"
		},
		{
			regex: "ME371MG(?:[);/ ]|$)",
			model: "Fonepad",
			device: "phablet"
		},
		{
			regex: "K00G(?:[);/ ]|$)",
			model: "Fonepad Note 6",
			device: "phablet"
		},
		{
			regex: "(?:K012|K00E)(?:[);/ ]|$)",
			model: "Fonepad 7",
			device: "phablet"
		},
		{
			regex: "K00Z(?:[);/ ]|$)",
			model: "Fonepad 7 Dual SIM",
			device: "phablet"
		},
		{
			regex: "K016(?:[);/ ]|$)",
			model: "Fonepad 8",
			device: "phablet"
		},
		{
			regex: "(?:ASUS_)?T00N",
			model: "PadFone S"
		},
		{
			regex: "(?:ASUS_)?T00[CE]",
			model: "PadFone Mini"
		},
		{
			regex: "(?:ASUS[-_])?T00T",
			model: "PadFone X Mini"
		},
		{
			regex: "PadFone T008",
			model: "PadFone E"
		},
		{
			regex: "PadFone T004",
			model: "PadFone Infinity"
		},
		{
			regex: "(?:ASUS_)?A002(A)?",
			model: "ZenFone AR"
		},
		{
			regex: "(?:ASUS_)?A006",
			model: "ZenFone V"
		},
		{
			regex: "(?:ASUS_)?A009",
			model: "ZenFone V Live"
		},
		{
			regex: "(?:ASUS_)?Z007",
			model: "ZenFone C"
		},
		{
			regex: "(?:ASUS_)?(X00P[SD]|ZB555KL)",
			model: "ZenFone Max M1"
		},
		{
			regex: "(?:ASUS_)?(?:ZB60[12]KL)|ZenFone Max Pro M1",
			model: "ZenFone Max Pro M1"
		},
		{
			regex: "(?:ASUS_)?(X01([AB]D)|ZB633KL)(?:[);/ ]|$)",
			model: "ZenFone Max M2"
		},
		{
			regex: "(?:ASUS_)?(?:Z00[AD]|Z008D|Z008|Z00AD[AB]?|ZE551ML)",
			model: "ZenFone 2"
		},
		{
			regex: "(?:ASUS_)?(?:ZenFone 2E)",
			model: "ZenFone 2E"
		},
		{
			regex: "(?:ASUS_)?(?:A007|Z00YD|ZA550KL|ZB553KL|ZB501KL)(?:[);/ ]|$)",
			model: "ZenFone Live"
		},
		{
			regex: "(?:ASUS_)?(?:X00RD|G552KL)",
			model: "ZenFone Live L1"
		},
		{
			regex: "G553KL",
			model: "ZenFone Lite L1"
		},
		{
			regex: "(?:ASUS_)?(?:Z00[ERLMTW]D|Z011D|ZE500KL)",
			model: "ZenFone 2 Laser"
		},
		{
			regex: "(?:ASUS_)?(?:T00[IQ1]|Z01KD)",
			model: "ZenFone 4"
		},
		{
			regex: "(?:ASUS_)?(?:T00[JF]|X00QD|X00QSA|ZE620KL)",
			model: "ZenFone 5"
		},
		{
			regex: "(?:ASUS_)?T00P",
			model: "ZenFone 5 LTE"
		},
		{
			regex: "(?:ASUS_)?(?:T00K|X017DA|X017D|ZC600KL)",
			model: "ZenFone 5 Lite"
		},
		{
			regex: "(?:ASUS_)?(?:Z01RD|ZS620KL)",
			model: "ZenFone 5Z"
		},
		{
			regex: "(?:ASUS_)?(?:T00G|Z002|ZS630KL|I01WD[X]?)",
			model: "ZenFone 6"
		},
		{
			regex: "(?:ASUS_)?ZS671KS",
			model: "ZenFone 7 Pro"
		},
		{
			regex: "(?:ASUS_)?(?:ZS670KS|I002D)(?:[);/ ]|$)",
			model: "ZenFone 7"
		},
		{
			regex: "(?:ASUS_)?Z010D",
			model: "ZenFone Max"
		},
		{
			regex: "(?:ASUS_)?X018D",
			model: "ZenFone Max Plus M1"
		},
		{
			regex: "(?:ASUS_)?X00TD?",
			model: "ZenFone Max Pro M1"
		},
		{
			regex: "(?:ASUS_)?(?:X01BDA|ZB631KL|Zenfone Max Pro M2)",
			model: "ZenFone Max Pro M2"
		},
		{
			regex: "(?:ASUS_)?X014D",
			model: "ZenFone Go Plus"
		},
		{
			regex: "(?:ASUS_)?(L001|X00[7AB]D|X009[DB][DA]|X009D|Z00[SV]D|ZB500K[LG]|ZB551KL)",
			model: "ZenFone Go"
		},
		{
			regex: "(?:ASUS_)?X013D",
			model: "ZenFone Go Life"
		},
		{
			regex: "(?:ASUS_)?G550KL",
			model: "ZenFone Go TV"
		},
		{
			regex: "(?:ASUS_)?Z00[SV]D",
			model: "ZenFone Go"
		},
		{
			regex: "(?:ASUS_)?(X00[23])",
			model: "ZenFone Pegasus"
		},
		{
			regex: "(?:ASUS_)?X005",
			model: "ZenFone Pegasus 5000"
		},
		{
			regex: "(?:ASUS_)?X550",
			model: "ZenFone Pegasus 2 Plus"
		},
		{
			regex: "(?:ASUS_)?(X00GD)",
			model: "ZenFone Pegasus 3S Max"
		},
		{
			regex: "(?:ASUS_)?(?:X00D[DS]|X008D)|ZC553KL",
			model: "ZenFone 3 Max"
		},
		{
			regex: "(?:ASUS_)?(X008)",
			model: "ZenFone 3 Pegasus"
		},
		{
			regex: "(?:ASUS_)?(ZE553KL|Z01HD)",
			model: "ZenFone 3 Zoom"
		},
		{
			regex: "(?:ASUS_)?ZS550KL",
			model: "ZenFone 3 Deluxe"
		},
		{
			regex: "(?:ASUS_)?Z00UD",
			model: "ZenFone Selfie"
		},
		{
			regex: "(?:ASUS_)?(Z016[DS]|Z01FD)",
			model: "ZenFone 3 Deluxe"
		},
		{
			regex: "(?:ASUS_)?(Z017DA|ZE520KL|ZE552KL|Z017D|Z012(D|S))",
			model: "ZenFone 3"
		},
		{
			regex: "(?:ASUS_)?Z01B[DS]|ZC551KL",
			model: "ZenFone 3 Laser"
		},
		{
			regex: "(?:ASUS_)?A001",
			model: "ZenFone 3 Ultra"
		},
		{
			regex: "(?:ASUS_)?(?:ZD552KL|Z01MDA?)(?:[);/ ]|$)",
			model: "ZenFone 4 Selfie Pro"
		},
		{
			regex: "(?:ASUS_)?(?:X00LDA|ZD553KL)",
			model: "ZenFone 4 Selfie"
		},
		{
			regex: "(?:ASUS_)?(?:X00LD|Z01KS|Z01KDA|ZE554KL)",
			model: "ZenFone 4"
		},
		{
			regex: "(?:ASUS_)?X00(?:[HIK]D|IS)|ZC554KL|ZC520KL",
			model: "ZenFone 4 Max"
		},
		{
			regex: "(?:ASUS_)?X015D",
			model: "ZenFone 4 Max Plus"
		},
		{
			regex: "(?:ASUS_)?(:?Z01G[DS]|ZS551KL)",
			model: "ZenFone 4 Pro"
		},
		{
			regex: "(?:ASUS_)?Z00XS",
			model: "ZenFone Zoom"
		},
		{
			regex: "(?:ASUS_)?(?:Z01QD|ZS600KL)",
			model: "ROG Phone"
		},
		{
			regex: "(?:ASUS_)?(?:I001D[ABCE]?|ZS660KL)",
			model: "ROG Phone 2"
		},
		{
			regex: "(?:ASUS_)?(?:I003DD?|ZS661KS)",
			model: "ROG Phone 3"
		},
		{
			regex: "(?:ASUS_)?(?:I005DA)",
			model: "ROG Phone 5"
		},
		{
			regex: "ZN220IC",
			device: "desktop",
			model: "Zen AiO ZN220IC"
		},
		{
			regex: "(?:ASUS_)?ZenWatch( 2)?",
			device: "wearable",
			model: "ZenWatch$1"
		},
		{
			regex: "Asus(?:-|;)?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(PadFone(?: [^;/]+)?) Build",
			model: "$1"
		},
		{
			regex: "(PadFone(?: [a-z0-9]+)?)",
			model: "$1"
		},
		{
			regex: "(?:Asus|Transformer) ((?:Pad |Prime )?TF[0-9a-z]+)",
			device: "tablet",
			model: "Transformer $1"
		},
		{
			regex: "Chromebook Flip (C10[01]PA|C302)",
			device: "desktop",
			model: "Chromebook Flip $1"
		}
	]
};
var Audiovox = {
	regex: "Audiovox|CDM|UTS(?:TARCOM)?\\-|audio(?!book)[a-z0-9\\-]+",
	device: "smartphone",
	models: [
		{
			regex: "Audiovox[_\\-]([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "CDM(?:-)?([a-z0-9]+)",
			model: "CDM-$1"
		},
		{
			regex: "UTS(?:TARCOM)?-([a-z0-9\\-]+)",
			model: "CDM-$1"
		},
		{
			regex: "audio([a-z0-9\\-]+)",
			model: "CDM-$1"
		}
	]
};
var AVH = {
	regex: "Excer[ _]",
	device: "tablet",
	models: [
		{
			regex: "Excer[ _]G5.3",
			model: "Excer G5.3"
		},
		{
			regex: "Excer[ _]G5",
			model: "Excer G5"
		},
		{
			regex: "Excer[ _]10[ _]PRO",
			model: "Excer 10 Pro"
		},
		{
			regex: "Excer[ _]8",
			model: "Excer 8"
		}
	]
};
var Avvio = {
	regex: "Avvio[ _]?([a-z0-9\\-]+)|(?:CHIVAS_55|Colombia_2018|Mint_M353)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "CHIVAS_55",
			model: "Chivas 55"
		},
		{
			regex: "Mint_M353",
			model: "Mint M353"
		},
		{
			regex: "Colombia_2018",
			model: "Colombia (2018)"
		},
		{
			regex: "Avvio[ _]PAD",
			model: "PAD",
			device: "tablet"
		},
		{
			regex: "Avvio[ _]?([a-z0-9\\-]+)",
			model: "$1"
		}
	]
};
var BGH = {
	regex: "(?!Positivo )BGH ([^/;\\)]+)(?: Build|\\))",
	device: "smartphone",
	models: [
		{
			regex: "Y([17]00|2[01]0|1010)",
			device: "tablet",
			model: "Y$1"
		},
		{
			regex: "BGH (\\+Simple|Mini)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Y710 KIDS",
			device: "tablet",
			model: "Y710 Kids"
		},
		{
			regex: "JOY X2",
			model: "Joy X2"
		},
		{
			regex: "BGH ([^/;\\)]+)(?: Build|\\))",
			model: "$1"
		}
	]
};
var Bitel = {
	regex: "Bitel[ _-]([^/;]+) Build|(?:B(?:840[5-9]|841[0456]|850[2346]|860[146]|9401|950[1-5])|S8402L?|S8501L?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(B(?:840[5789]|841[0456]|850[2346]|860[146]|9401|950[12345])|S8402L?|S8501L?)",
			model: "$1"
		},
		{
			regex: "Bitel[ _-]([^/;]+) Build",
			model: "$1"
		}
	]
};
var Blu = {
	regex: "BLU[ _]|(?:blu|Dash)[ _]([^/;)]+)(?: Build|[;)])|(?:Studio[ _](5.0K|5.5|View XL|Mega|C 8\\+8|[CGM][ _]HD|[CGX]|SELFIE|Selfie LTE|Touch|M5 Plus|J[1258]|X8 HD)|Advance (4.0 ?[LM]|5.[02](?: HD)?|A4|L[45])|ENERGY (DIAMOND|XL)|Energy X 2|LIFE XL|B110DL|Dash (?:X[2L]|L3)|PURE (?:X[LR]|MINI)|Life One X2|G90(?: PRO)?|Grand M3|GRAND (?:5.5 HD|XL LTE)|R1 (?:HD|PLUS)|Tank Xtreme [45].0|Tank Xtreme Pro|Touchbook M7 Pro|DASH X PLUS|C[456] 2019|BOLD N1|B130DL|Vivo 5 Mini)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Advance (4.0 ?[LM]|4.0|5.[02](?: HD)?|A4|L[54])",
			model: "Advance $1"
		},
		{
			regex: "(?:BLU[_ ])?Studio[ _](5.0 C|5.5|View XL|Mega|C 8\\+8|[CG][ _]HD|C|G|Touch|M HD|M5 Plus|J[1258]|X8 HD|X5|XL|X)(?:[);/ ]|$)",
			model: "Studio $1"
		},
		{
			regex: "(?:BLU[_ ])?Studio[ _]5.0 ?K(?:[);/ ]|$)",
			model: "Studio 5.0 K"
		},
		{
			regex: "STUDIO SELFIE LTE",
			model: "Studio Selfie LTE"
		},
		{
			regex: "STUDIO ONE",
			model: "Studio One"
		},
		{
			regex: "STUDIO SELFIE ([23]|LTE)",
			model: "Studio Selfie $1"
		},
		{
			regex: "STUDIO SELFIE",
			model: "Studio Selfie"
		},
		{
			regex: "(?:BLU[_ ])?NEO_ENERGY_MINI",
			model: "Neo Energy Mini"
		},
		{
			regex: "ENERGY DIAMOND",
			model: "Energy Diamond"
		},
		{
			regex: "ENERGY XL",
			model: "Energy XL"
		},
		{
			regex: "Energy X 2",
			model: "Energy X 2"
		},
		{
			regex: "ENERGY X PLUS 2",
			model: "Energy X Plus 2"
		},
		{
			regex: "ENERGY X PLUS",
			model: "Energy X Plus"
		},
		{
			regex: "LIFE XL",
			model: "Life XL"
		},
		{
			regex: "DASH[ _]X[ _]PLUS[ _]LTE",
			model: "Dash X Plus LTE"
		},
		{
			regex: "DASH X PLUS",
			model: "Dash X Plus"
		},
		{
			regex: "DASH 4.5",
			model: "Dash 4.5"
		},
		{
			regex: "Dash XL",
			model: "Dash XL"
		},
		{
			regex: "PURE (X[LR])",
			model: "Pure $1"
		},
		{
			regex: "PURE MINI",
			model: "Pure Mini"
		},
		{
			regex: "BOLD N1",
			model: "Bold N1"
		},
		{
			regex: "Life One X2",
			model: "Life One X2"
		},
		{
			regex: "LIFE ONE X",
			model: "Life One X"
		},
		{
			regex: "LIFE ONE",
			model: "Life One"
		},
		{
			regex: "LIFE MARK",
			model: "Life Mark"
		},
		{
			regex: "NEO X PLUS",
			model: "Neo X Plus"
		},
		{
			regex: "NEO (XL|X)",
			model: "Neo $1"
		},
		{
			regex: "G90 PRO",
			model: "G90 Pro"
		},
		{
			regex: "G90",
			model: "G90"
		},
		{
			regex: "GRAND 5.5 HD",
			model: "Grand 5.5 HD"
		},
		{
			regex: "Grand X LTE",
			model: "Grand X LTE"
		},
		{
			regex: "Grand XL LTE",
			model: "Grand XL LTE"
		},
		{
			regex: "Grand M3",
			model: "Grand M3"
		},
		{
			regex: "B110DL",
			model: "View Mega"
		},
		{
			regex: "B130DL",
			model: "View 2"
		},
		{
			regex: "R1 HD",
			model: "R1 HD"
		},
		{
			regex: "R1 PLUS",
			model: "R1 Plus"
		},
		{
			regex: "C([456]) (2019)",
			model: "C$1 ($2)"
		},
		{
			regex: "Tank Xtreme ([45]).0",
			model: "Tank Xtreme $1.0\""
		},
		{
			regex: "Tank Xtreme Pro",
			model: "Tank Xtreme Pro"
		},
		{
			regex: "VIVO AIR LTE",
			model: "Vivo Air LTE"
		},
		{
			regex: "Touchbook G7",
			model: "Touchbook G7"
		},
		{
			regex: "(?:BLU[_ ])?VIVO[ _]SELFIE",
			model: "Vivo Selfie"
		},
		{
			regex: "(?:BLU[_ ])?Vivo 5 Mini",
			model: "Vivo 5 Mini"
		},
		{
			regex: "Touchbook M7 Pro",
			model: "Touchbook M7 Pro",
			device: "tablet"
		},
		{
			regex: "STUDIO 7.0 II",
			model: "Studio 7.0\" II",
			device: "tablet"
		},
		{
			regex: "DASH (L[45] LTE|5.0|L[45]X|L3|X2|[LMX])(?:[);/ ]|$)",
			model: "Dash $1"
		},
		{
			regex: "DASH[ _]([^)/;]+)(?: Build|\\))",
			model: "Dash $1"
		},
		{
			regex: "blu[ _]([^/;]+)( Build|[);])",
			model: "$1"
		}
	]
};
var Bluegood = {
	regex: "BLUEGOOD",
	device: "smartphone",
	models: [
		{
			regex: "V6",
			model: "V6"
		}
	]
};
var Blackview = {
	regex: "Blackview|(BV([24-9]000|[46]900|(5[1589]|9[15689])00|6[138]00)(?:[ _](?:PRO))?|(P10000(?:[ _](?:PRO))?)|omega[ _]pro|Alife[ _][PS]1|Heatwave|DM550|BV9700Pro|(?<!Lenovo[_ ])A[68]0(?:Pro)?\\))|A[86]0Plus|BL6000Pro",
	device: "smartphone",
	models: [
		{
			regex: "A60Pro\\)",
			model: "A60 Pro"
		},
		{
			regex: "A60\\)",
			model: "A60"
		},
		{
			regex: "A80Pro(?:[);/ ]|$)",
			model: "A80 Pro"
		},
		{
			regex: "A([86]0)Plus(?:[);/ ]|$)",
			model: "A$1 Plus"
		},
		{
			regex: "(BV6000S)",
			model: "$1"
		},
		{
			regex: "(BV9700|BL6000)Pro",
			model: "$1 Pro"
		},
		{
			regex: "Blackview (A[78]|E7S)",
			model: "$1"
		},
		{
			regex: "BV9000Pro-F",
			model: "BV9000 Pro F"
		},
		{
			regex: "(BV([48]000|9[56]00|6[83]00))Pro",
			model: "$1 Pro"
		},
		{
			regex: "(BV6[13]00)(?:[);/ ]|$)",
			model: "$1",
			device: "phablet"
		},
		{
			regex: "(BV([24-9]000|6900|4900|(5[1589]|9[15689])00)(?:[ _](?:PRO))?)",
			model: "$1"
		},
		{
			regex: "(P10000(?:[ _](?:PRO))?)",
			model: "$1"
		},
		{
			regex: "omega[ _]pro",
			model: "Omega Pro"
		},
		{
			regex: "(Alife[ _][PS]1|DM550|Heatwave)",
			model: "$1"
		}
	]
};
var Bluboo = {
	regex: "Bluboo|Xfire|Picasso 4G|Maya Build",
	device: "smartphone",
	models: [
		{
			regex: "Maya Build",
			model: "Maya"
		},
		{
			regex: "Xfire2",
			model: "Xfire 2"
		},
		{
			regex: "Picasso 4G",
			model: "Picasso 4G"
		},
		{
			regex: "Xfire",
			model: "Xfire"
		},
		{
			regex: "Bluboo[ _-]?([^;/)]+) Build",
			model: "$1"
		},
		{
			regex: "Bluboo[ _-]?([^;/)]+)",
			model: "$1"
		}
	]
};
var bogo = {
	regex: "BO-(FRSP4|LFSPBS5|LFSP4|LFSPSL4|LFSPBS5|LFSPSL6QCI)",
	device: "smartphone",
	models: [
		{
			regex: "BO-LFSP4",
			model: "LifeStyle 4DC"
		},
		{
			regex: "BO-LFSPSL4",
			model: "LifeStyle 4SL"
		},
		{
			regex: "BO-LFSPBS5",
			model: "LifeStyle 5BS"
		},
		{
			regex: "BO-LFSPSL6QCI",
			model: "LifeStyle 6QC"
		},
		{
			regex: "BO-(FRSP4)",
			model: "$1"
		}
	]
};
var Boway = {
	regex: "(?:sprd-)?(BOWAY)",
	device: "smartphone",
	models: [
		{
			regex: "BOWAY[ _-]([^/;]+)[ _]Build",
			model: "$1"
		},
		{
			regex: "([^/;]+) Build/BOWAY",
			model: "$1"
		},
		{
			regex: ".*BOWAY[ _-]([^/;]+)/",
			model: "$1"
		}
	]
};
var Brondi = {
	regex: "Brondi[ _]|(?:CENTURION|GLADIATOR| GLORY|LUXURY|SENSUELLE|VICTORY)(?:[ _-]?[2-6])?(?:[);/ ]|$)|Surfing Tab|501 SZ",
	device: "smartphone",
	models: [
		{
			regex: "(?:Brondi[ _])?(620 SZ|730_4G_HD|501 SZ)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "CENTURION(?:[ _-]?([2-6]))?(?:[);/ ]|$)",
			model: "CENTURION $1"
		},
		{
			regex: "GLADIATOR(?:[ _-]?([2-6]))?(?:[);/ ]|$)",
			model: "GLADIATOR $1"
		},
		{
			regex: "GLORY(?:[ _-]?([2-6]))?(?:[);/ ]|$)",
			model: "GLORY $1"
		},
		{
			regex: "LUXURY(?:[ _-]?([2-6]))?(?:[);/ ]|$)",
			model: "LUXURY $1"
		},
		{
			regex: "SENSUELLE(?:[ _-]?([2-6]))?(?:[);/ ]|$)",
			model: "SENSUELLE $1"
		},
		{
			regex: "VICTORY(?:[ _-]?([2-6]))?(?:[);/ ]|$)",
			model: "VICTORY $1"
		},
		{
			regex: "Surfing Tab ([^;/]+) Build",
			model: "SURFING TAB $1",
			device: "tablet"
		},
		{
			regex: "Surfing Tab ([^;/)]+)[;/)]",
			model: "SURFING TAB $1",
			device: "tablet"
		}
	]
};
var Vivo = {
	regex: "((?:VIV-|BBG-)?(?<!FBCR/)vivo(?!(?:Browser)))|(?:V1730(D[AT]|GA)|V18(18CA|01A0|13B[AT]|18T|09[AT]|1[346][AT]|[13]8[AT]|14A|24[B]?A|2[19][AT]|3[12][AT]|36[AT])|V1731CA|V1732[AT]|V1818CT|V19[01]1[AT]|V1932[AT]|V191[3469][AT]|V192[1348]A|V193[04]A|V194[15]A|V1938CT|V1955A|V1938T|V1730EA|V19[26]2A|V196[35]A|V198[16]A|V1936A[L]?|V19[59]0A|V200[125]A|1819|V201[12]A|V202[0345]C?A|V202[235-9]|V2054A|V203[026]|V204[03]|V2049A|X50 Pro\\+|I1927)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "V1824[B]?A(?:[);/ ]|$)",
			model: "iQOO"
		},
		{
			regex: "V1955A(?:[);/ ]|$)",
			model: "iQOO 3"
		},
		{
			regex: "I1927(?:[);/ ]|$)",
			model: "iQOO 3 5G"
		},
		{
			regex: "V2049A(?:[);/ ]|$)",
			model: "iQOO 7"
		},
		{
			regex: "V1922A(?:[);/ ]|$)",
			model: "iQOO Pro"
		},
		{
			regex: "V1916A(?:[);/ ]|$)",
			model: "iQOO Pro 5G"
		},
		{
			regex: "V1914A(?:[);/ ]|$)",
			model: "iQOO Neo"
		},
		{
			regex: "V1981A(?:[);/ ]|$)",
			model: "iQOO Neo 3"
		},
		{
			regex: "V1936A[L]?(?:[);/ ]|$)",
			model: "iQOO Neo 855"
		},
		{
			regex: "V1986A(?:[);/ ]|$)",
			model: "iQOO Z1"
		},
		{
			regex: "V2012A(?:[);/ ]|$)",
			model: "iQOO Z1x"
		},
		{
			regex: "V1919A(?:[);/ ]|$)",
			model: "iQOO Z5x"
		},
		{
			regex: "V2023A(?:[);/ ]|$)",
			model: "iQOO U1"
		},
		{
			regex: "V2024A(?:[);/ ]|$)",
			model: "iQOO 5"
		},
		{
			regex: "V2025A(?:[);/ ]|$)",
			model: "iQOO 5 Pro"
		},
		{
			regex: "V2025(?:[);/ ]|$)",
			model: "V20"
		},
		{
			regex: "V2040(?:[);/ ]|$)",
			model: "V20 (2021)"
		},
		{
			regex: "vivo 1805(?:[);/ ]|$)",
			model: "Nex"
		},
		{
			regex: "V1923A(?:[);/ ]|$)",
			model: "Nex 3"
		},
		{
			regex: "V1924A(?:[);/ ]|$)",
			model: "Nex 3 5G"
		},
		{
			regex: "V1950A(?:[);/ ]|$)",
			model: "Nex 3S"
		},
		{
			regex: "V1821[AT](?:[);/ ]|$)",
			model: "Nex Dual Display"
		},
		{
			regex: "Vivo ONE(?:[);/ ]|$)",
			model: "One"
		},
		{
			regex: "V1831[AT](?:[);/ ]|$)",
			model: "S1"
		},
		{
			regex: "V1832[AT](?:[);/ ]|$)",
			model: "S1 Pro"
		},
		{
			regex: "V1932[AT](?:[);/ ]|$)",
			model: "S5"
		},
		{
			regex: "V1962A(?:[);/ ]|$)",
			model: "S6 5G"
		},
		{
			regex: "V2020C?A(?:[);/ ]|$)",
			model: "S7"
		},
		{
			regex: "V1941A(?:[);/ ]|$)",
			model: "U3"
		},
		{
			regex: "V1928A(?:[);/ ]|$)",
			model: "U3X"
		},
		{
			regex: "vivo 1804(?:[);/ ]|$)",
			model: "V11 Pro"
		},
		{
			regex: "vivo 1806(?:[);/ ]|$)",
			model: "V11i"
		},
		{
			regex: "1819(?:[);/ ]|$)",
			model: "V15"
		},
		{
			regex: "vivo 1818(?:[);/ ]|$)",
			model: "V15 Pro"
		},
		{
			regex: "vivo 1909(?:[);/ ]|$)",
			model: "V17 Pro"
		},
		{
			regex: "V2022(?:[);/ ]|$)",
			model: "V20 SE"
		},
		{
			regex: "(?:VIV-|BBG-)?vivo[ _]1601(?:[);/ ]|$)",
			model: "V5"
		},
		{
			regex: "vivo 1609(?:[);/ ]|$)",
			model: "V5 Lite"
		},
		{
			regex: "vivo 1611(?:[);/ ]|$)",
			model: "V5 Plus"
		},
		{
			regex: "vivo (1713|1612)(?:[);/ ]|$)",
			model: "V5s"
		},
		{
			regex: "vivo 1718(?:[);/ ]|$)",
			model: "V7"
		},
		{
			regex: "vivo 1716(?:[);/ ]|$)",
			model: "V7 Plus"
		},
		{
			regex: "vivo 1723(?:[);/ ]|$)",
			model: "V9"
		},
		{
			regex: "vivo 1727(?:[);/ ]|$)",
			model: "V9 Youth"
		},
		{
			regex: "vivo 1721(?:[);/ ]|$)",
			model: "X20"
		},
		{
			regex: "X20Plus(?:[);/ ]|$)",
			model: "X20 Plus"
		},
		{
			regex: "vivo 1725(?:[);/ ]|$)",
			model: "X21"
		},
		{
			regex: "V1814[AT](?:[);/ ]|$)",
			model: "X21S"
		},
		{
			regex: "V1809[AT](?:[);/ ]|$)",
			model: "X23"
		},
		{
			regex: "V1816[AT](?:[);/ ]|$)",
			model: "X23"
		},
		{
			regex: "V18(38|29)[AT](?:[);/ ]|$)",
			model: "X27"
		},
		{
			regex: "V1836[AT](?:[);/ ]|$)",
			model: "X27 Pro"
		},
		{
			regex: "V1938CT(?:[);/ ]|$)",
			model: "X30"
		},
		{
			regex: "V1938T(?:[);/ ]|$)",
			model: "X30 Pro"
		},
		{
			regex: "V2001A(?:[);/ ]|$)",
			model: "X50"
		},
		{
			regex: "V2005A(?:[);/ ]|$)",
			model: "X50 Pro"
		},
		{
			regex: "(?:V2011A|X50 Pro\\+)(?:[);/ ]|$)",
			model: "X50 Pro Plus"
		},
		{
			regex: "X9Plus(?:[);/ ]|$)",
			model: "X9 Plus"
		},
		{
			regex: "vivo 1902(?:[);/ ]|$)",
			model: "Y17"
		},
		{
			regex: "vivo 1915(?:[);/ ]|$)",
			model: "Y19"
		},
		{
			regex: "V202[79](?:[);/ ]|$)",
			model: "Y20"
		},
		{
			regex: "V2028(?:[);/ ]|$)",
			model: "Y11s"
		},
		{
			regex: "V2043(?:[);/ ]|$)",
			model: "Y20 (2021)"
		},
		{
			regex: "V2032(?:[);/ ]|$)",
			model: "Y20i"
		},
		{
			regex: "V2023(?:[);/ ]|$)",
			model: "V20 SE"
		},
		{
			regex: "V1901[AT](?:[);/ ]|$)",
			model: "Y3"
		},
		{
			regex: "V1930A(?:[);/ ]|$)",
			model: "Y3 Standard"
		},
		{
			regex: "V2036(?:[);/ ]|$)",
			model: "Y31"
		},
		{
			regex: "V1934A(?:[);/ ]|$)",
			model: "Y5s"
		},
		{
			regex: "V1965A(?:[);/ ]|$)",
			model: "Y50"
		},
		{
			regex: "V2030(?:[);/ ]|$)",
			model: "Y51"
		},
		{
			regex: "V2054A(?:[);/ ]|$)",
			model: "Y31s"
		},
		{
			regex: "vivo 1606(?:[);/ ]|$)",
			model: "Y53i"
		},
		{
			regex: "vivo 1603(?:[);/ ]|$)",
			model: "Y55l"
		},
		{
			regex: "vivo 1610(?:[);/ ]|$)",
			model: "Y55s"
		},
		{
			regex: "vivo 1719(?:[);/ ]|$)",
			model: "Y65"
		},
		{
			regex: "vivo 1714(?:[);/ ]|$)",
			model: "Y69"
		},
		{
			regex: "V2002A(?:[);/ ]|$)",
			model: "Y70s"
		},
		{
			regex: "vivo 1724(?:[);/ ]|$)",
			model: "Y71"
		},
		{
			regex: "vivo 1801(?:[);/ ]|$)",
			model: "Y71i"
		},
		{
			regex: "V1731CA(?:[);/ ]|$)",
			model: "Y73"
		},
		{
			regex: "V1913[AT](?:[);/ ]|$)",
			model: "Y7s"
		},
		{
			regex: "vivo 180([38]|8i)(?:[);/ ]|$)",
			model: "Y81"
		},
		{
			regex: "vivo 1812(?:[);/ ]|$)",
			model: "Y81i"
		},
		{
			regex: "V1732[AT](?:[);/ ]|$)",
			model: "Y81s"
		},
		{
			regex: "vivo 1726(?:[);/ ]|$)",
			model: "Y83 Pro"
		},
		{
			regex: "V1730EA(?:[);/ ]|$)",
			model: "Y89"
		},
		{
			regex: "vivo 181[17](?:[);/ ]|$)",
			model: "Y91"
		},
		{
			regex: "V1945A(?:[);/ ]|$)",
			model: "Y9s"
		},
		{
			regex: "V2026(?:[);/ ]|$)",
			model: "Y12s"
		},
		{
			regex: "vivo 18(16|20)(?:[);/ ]|$)",
			model: "Y91i"
		},
		{
			regex: "(V1818[AT]|vivo 181[45])(?:[);/ ]|$)",
			model: "Y93"
		},
		{
			regex: "V1818C[AT](?:[);/ ]|$)",
			model: "Y93s"
		},
		{
			regex: "vivo 1807(?:[);/ ]|$)",
			model: "Y95"
		},
		{
			regex: "V1813[AT](?:[);/ ]|$)",
			model: "Y97"
		},
		{
			regex: "V1801A0(?:[);/ ]|$)",
			model: "Z1"
		},
		{
			regex: "V1730D[AT](?:[);/ ]|$)",
			model: "Z1i"
		},
		{
			regex: "vivo 1917(?:[);/ ]|$)",
			model: "Z1x"
		},
		{
			regex: "V1813B[AT](?:[);/ ]|$)",
			model: "Z3"
		},
		{
			regex: "V1730GA(?:[);/ ]|$)",
			model: "Z3x"
		},
		{
			regex: "V1921A(?:[);/ ]|$)",
			model: "Z5"
		},
		{
			regex: "V1911A(?:[);/ ]|$)",
			model: "Z5x"
		},
		{
			regex: "V1990A(?:[);/ ]|$)",
			model: "Z5x (2020)"
		},
		{
			regex: "V1963A(?:[);/ ]|$)",
			model: "Z6"
		},
		{
			regex: "(?:VIV-|BBG-)?vivo[ _]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "(?:VIV-|BBG-)?vivo[ _]([^);/]+)(?:[);/]|$)",
			model: "$1"
		}
	]
};
var Vinsoc = {
	regex: "(XA Pro) Build",
	device: "smartphone",
	model: "$1"
};
var Bird = {
	regex: "BIRD[\\-. _]([^;/]+)",
	device: "feature phone",
	models: [
		{
			regex: "BIRD[\\-. _]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "BIRD[\\-. _]([^;/]+)",
			model: "$1"
		}
	]
};
var Becker = {
	regex: "Becker-([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Beeline = {
	regex: "Beeline",
	device: "smartphone",
	models: [
		{
			regex: "Beeline[_ ]Pro[_ ]([2436])",
			model: "Pro $1"
		},
		{
			regex: "Tab (Fast|Pro)",
			model: "Tab $1",
			device: "tablet"
		},
		{
			regex: "Tab ([0-9])",
			model: "Tab $1",
			device: "tablet"
		},
		{
			regex: "Tab",
			model: "Tab",
			device: "tablet"
		},
		{
			regex: "E700",
			model: "E700"
		},
		{
			regex: "Smart2",
			model: "Smart 2"
		},
		{
			regex: "Smart ([0-9])",
			model: "Smart $1"
		},
		{
			regex: "Smart Dual",
			model: "Smart Dual"
		},
		{
			regex: "(?:Beeline[_ ])?Fast[_ ]2(?:[);/ ]|$)",
			model: "Fast 2"
		},
		{
			regex: "Fast(?:[);/ ]|$)",
			model: "Fast"
		}
	]
};
var Beetel = {
	regex: "Beetel ([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var BenQ = {
	regex: "BENQ(?:[ \\-])?([a-z0-9]+)|F52_09(?:[);/ ]|$)",
	device: "feature phone",
	models: [
		{
			regex: "F52_09(?:[);/ ]|$)",
			model: "F52"
		},
		{
			regex: "BENQ(?:[ \\-])?([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Blaupunkt$1 = {
	regex: "Blaupunkt|Soundphone S2|Atlantis[_ ](?:1001A|1010A|A10\\.G40[23])|SLplus02|Discovery[_ ](?:A10_302|111C|1000C|1001A?)|Endeavour[_ ](?:785|101[GLM]|1000|1001|101[03]|1100)|Polaris[_ ]803|BP_6010",
	device: "tablet",
	models: [
		{
			regex: "Discovery[_ ]111C",
			model: "Discovery 111C"
		},
		{
			regex: "Discovery[_ ]A10_302",
			model: "Discovery A10.302"
		},
		{
			regex: "Discovery[_ ]1000C",
			model: "Discovery 1000C"
		},
		{
			regex: "Discovery[_ ]1001A",
			model: "Discovery 1001A"
		},
		{
			regex: "Discovery[_ ]1001",
			model: "Discovery 1001"
		},
		{
			regex: "Soundphone S2",
			model: "Soundphone S2"
		},
		{
			regex: "Endeavour[_ ](101[GLM]|785|100[01]|101[03]|1100)",
			model: "Endeavour $1"
		},
		{
			regex: "Polaris[_ ](803)",
			model: "Polaris $1"
		},
		{
			regex: "Atlantis[_ ](1001A|1010A|A10\\.G40[23])",
			model: "Atlantis $1"
		},
		{
			regex: "SLplus02",
			model: "SL Plus 02"
		},
		{
			regex: "(BP_6010)",
			model: "$1"
		},
		{
			regex: "Blaupunkt[_ ](SL[_ ]0[124]|SM[_ ]0[12])",
			device: "smartphone",
			model: "$1"
		},
		{
			regex: "(4K Android TV)",
			device: "tv",
			model: "$1"
		}
	]
};
var Bmobile = {
	regex: "Bmobile[_ ]|AX-?(?:[1-9][0-9]{2,3}[eEO+]?|7OO)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "AX-?([1-9][0-9]{2,3}[eEO+]?)",
			model: "AX$1"
		},
		{
			regex: "AX7OO",
			model: "AX700"
		},
		{
			regex: "Bmobile[_ ]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Bmobile[_ ]([a-z0-9]+)",
			model: "$1"
		}
	]
};
var bq = {
	regex: "Aquaris|bq [^/;]+ Build|BQS[-_]([0-9]{4})|(BQ(ru)?[_ -][0-9]{3,4})|BQ5059|BQ1008G|BQru_BQru-",
	device: "smartphone",
	models: [
		{
			regex: "BQ(?:ru)?-(?:5209L|5044)(?:[);/ ]|$)",
			model: "Strike LTE"
		},
		{
			regex: "BQ(?:ru)?-(?:6035L)(?:[);/ ]|$)",
			model: "Strike Power Max"
		},
		{
			regex: "BQ(?:ru)?-(?:5535L)(?:[);/ ]|$)",
			model: "Strike Power Plus"
		},
		{
			regex: "BQ(S|ru)?-(?:5070|6040L)(?:[);/ ]|$)",
			model: "Magic"
		},
		{
			regex: "BQ(S|ru)?-(?:6424L)(?:[);/ ]|$)",
			model: "Magic O"
		},
		{
			regex: "BQ(?:S|ru)?-(?:5730L)(?:[);/ ]|$)",
			model: "Magic C"
		},
		{
			regex: "BQ(?:S|ru)?-(?:5731L)(?:[);/ ]|$)",
			model: "Magic S"
		},
		{
			regex: "BQ(?:S|ru)?-5745L(?:[);/ ]|$)",
			model: "Clever"
		},
		{
			regex: "BQ(?:S|ru)?-5533G(?:[);/ ]|$)",
			model: "Fresh"
		},
		{
			regex: "BQ(?:S|ru)?-5031G(?:[);/ ]|$)",
			model: "Fun"
		},
		{
			regex: "BQ(?:S|ru)?-(?:5732L)(?:[);/ ]|$)",
			model: "Aurora SE"
		},
		{
			regex: "BQ(?:S|ru)?-6430L(?:[);/ ]|$)",
			model: "Aurora"
		},
		{
			regex: "BQ(?:S|ru)?-6630L(?:[);/ ]|$)",
			model: "Magic L"
		},
		{
			regex: "BQ-9011[G]?(?:[);/ ]|$)",
			model: "Vision",
			device: "tablet"
		},
		{
			regex: "BQ-8068L(?:[);/ ]|$)",
			model: "Hornet Plus Pro"
		},
		{
			regex: "BQ-8067L",
			model: "Hornet Plus",
			device: "tablet"
		},
		{
			regex: "BQ-8052G",
			model: "BQ-8052G",
			device: "tablet"
		},
		{
			regex: "BQ-8041L",
			model: "Art",
			device: "tablet"
		},
		{
			regex: "BQ-7084G",
			model: "Simple",
			device: "tablet"
		},
		{
			regex: "BQ-7061G",
			model: "Andros",
			device: "tablet"
		},
		{
			regex: "BQ(ru)?-(7082)",
			model: "Armor",
			device: "tablet"
		},
		{
			regex: "BQ-7051G",
			model: "Elba",
			device: "tablet"
		},
		{
			regex: "BQ-7036L",
			model: "Hornet",
			device: "tablet"
		},
		{
			regex: "BQ-7022(G)?",
			model: "Canion",
			device: "tablet"
		},
		{
			regex: "BQ-7021G",
			model: "Hit",
			device: "tablet"
		},
		{
			regex: "BQ-7010G",
			model: "Max",
			device: "tablet"
		},
		{
			regex: "BQ-7006G",
			model: "Union",
			device: "tablet"
		},
		{
			regex: "BQ-7003",
			model: "Jamaica",
			device: "tablet"
		},
		{
			regex: "BQ-6200L|BQ-6000L",
			model: "Aurora"
		},
		{
			regex: "BQ-6631G",
			model: "Surf"
		},
		{
			regex: "BQ-6022G",
			model: "Aura"
		},
		{
			regex: "BQ(ru)?[ -]6015L",
			model: "Universe"
		},
		{
			regex: "BQ(?:S|ru)?-(?:5525|6030G|6010G)",
			model: "Practic"
		},
		{
			regex: "BQ-6001L|BQ-6050",
			model: "Jumbo"
		},
		{
			regex: "BQ-5707G(?:[);/ ]|$)",
			model: "Next Music"
		},
		{
			regex: "BQ-5702(?:[);/ ]|$)",
			model: "Spring"
		},
		{
			regex: "BQ-5700L(?:[);/ ]|$)",
			model: "Space X"
		},
		{
			regex: "BQ-(?:5591|551[89]G)(?:[);/ ]|$)",
			model: "Jeans"
		},
		{
			regex: "BQ-5522",
			model: "Next"
		},
		{
			regex: "BQ-5520L(?:[);/ ]|$)",
			model: "Silk"
		},
		{
			regex: "BQ-5519L(?:[);/ ]|$)",
			model: "Fast Plus"
		},
		{
			regex: "BQ-5540L(?:[);/ ]|$)",
			model: "Fast Pro"
		},
		{
			regex: "BQ-5517L(?:[);/ ]|$)",
			model: "Twin Pro"
		},
		{
			regex: "BQ-5516L(?:[);/ ]|$)",
			model: "Twin"
		},
		{
			regex: "BQS-5515(?:[);/ ]|$)",
			model: "Wide"
		},
		{
			regex: "BQ-5515[L]?(?:[);/ ]|$)",
			model: "Fast"
		},
		{
			regex: "BQ-(?:5512L|5528L)(?:[);/ ]|$)",
			model: "Strike Forward"
		},
		{
			regex: "BQ-5511L(?:[);/ ]|$)",
			model: "Bliss"
		},
		{
			regex: "BQS[_ ]5505(?:[);/ ]|$)",
			model: "Amsterdam"
		},
		{
			regex: "BQ(?:ru)?-5510(?:[);/ ]|$)",
			model: "Strike Power Max 4G"
		},
		{
			regex: "BQ(?:ru)?-(?:5521|5594)(?:[);/ ]|$)",
			model: "Strike Power Max"
		},
		{
			regex: "BQ-5508L(?:[);/ ]|$)",
			model: "Next LTE"
		},
		{
			regex: "BQ-5507L(?:[);/ ]|$)",
			model: "Iron Max"
		},
		{
			regex: "BQ(?:ru)?-5504(?:[);/ ]|$)",
			model: "Strike Selfie Max"
		},
		{
			regex: "BQ(?:ru)?-5503(?:[);/ ]|$)",
			model: "Nice 2"
		},
		{
			regex: "BQ(?:ru)?-6045L(?:[);/ ]|$)",
			model: "Nice"
		},
		{
			regex: "BQ(?:ru)?-4030G(?:[);/ ]|$)",
			model: "Nice Mini"
		},
		{
			regex: "BQS-5502(?:[);/ ]|$)",
			model: "Hammer"
		},
		{
			regex: "BQS-5501(?:[);/ ]|$)",
			model: "Kawasaki"
		},
		{
			regex: "BQS-5500(?:[);/ ]|$)",
			model: "Vancouver"
		},
		{
			regex: "BQ-5500L(?:[);/ ]|$)",
			model: "Advance"
		},
		{
			regex: "BQ-5302G(?:[);/ ]|$)",
			model: "Velvet 2"
		},
		{
			regex: "BQ-5301(?:[);/ ]|$)",
			model: "Strike View"
		},
		{
			regex: "BQ-5300G(?:[);/ ]|$)",
			model: "Velvet View"
		},
		{
			regex: "BQ(ru|S)?-(?:5211|5020)(?:[);/ ]|$)",
			model: "Strike"
		},
		{
			regex: "BQ-5206L(?:[);/ ]|$)",
			model: "Balance"
		},
		{
			regex: "BQ(?:ru|S)?-(?:5204|5050)(?:[);/ ]|$)",
			model: "Strike Selfie"
		},
		{
			regex: "BQ(?:ru)?-5203(?:[);/ ]|$)",
			model: "Vision"
		},
		{
			regex: "BQ(?:ru)?-5202(?:[);/ ]|$)",
			model: "Space Lite"
		},
		{
			regex: "BQ(?:ru)?-5201(?:[);/ ]|$)",
			model: "Space"
		},
		{
			regex: "BQ-5082(?:[);/ ]|$)",
			model: "Sense 2"
		},
		{
			regex: "BQ-5045L(?:[);/ ]|$)",
			model: "Wallet"
		},
		{
			regex: "BQ-5047L(?:[);/ ]|$)",
			model: "Like"
		},
		{
			regex: "BQ-5071(?:[);/ ]|$)",
			model: "Belief"
		},
		{
			regex: "BQ[S]?-(?:5065|5340)(?:[);/ ]|$)",
			model: "Choice"
		},
		{
			regex: "BQ(?:S|ru)?-5046L(?:[);/ ]|$)",
			model: "Choice LTE"
		},
		{
			regex: "BQ(?:ru)?-?(?:5059|5514G)(?:[);/ ]|$)",
			model: "Strike Power"
		},
		{
			regex: "(?:BQru_)?BQ(?:ru)?-5058(?:[);/ ]|$)",
			model: "Strike Power Easy"
		},
		{
			regex: "BQ(?:ru)?-5057(?:[);/ ]|$)",
			model: "Strike 2"
		},
		{
			regex: "BQ[S]?-(?:5056|5030)(?:[);/ ]|$)",
			model: "Fresh"
		},
		{
			regex: "BQ-6042l(?:[);/ ]|$)",
			model: "Magic E"
		},
		{
			regex: "BQS-5055(?:[);/ ]|$)",
			model: "Turbo Plus"
		},
		{
			regex: "BQ(?:ru)?-5054(?:[);/ ]|$)",
			model: "Crystal"
		},
		{
			regex: "BQ-5052(?:[);/ ]|$)",
			model: "Sense"
		},
		{
			regex: "BQ[S]?-5045(?:[);/ ]|$)",
			model: "Fast"
		},
		{
			regex: "BQ(?:ru)?-(?:5037|5514L)(?:[);/ ]|$)",
			model: "Strike Power 4G"
		},
		{
			regex: "BQ(?:ru)?-5035(?:[);/ ]|$)",
			model: "Velvet"
		},
		{
			regex: "BQ(?:ru)?-5033(?:[);/ ]|$)",
			model: "Shark"
		},
		{
			regex: "BQ-5541L(?:[);/ ]|$)",
			model: "Shark Rush"
		},
		{
			regex: "BQ-5032(?:[);/ ]|$)",
			model: "Element"
		},
		{
			regex: "BQS-5025(?:[);/ ]|$)",
			model: "High Way"
		},
		{
			regex: "BQ(?:ru)?-5022(?:[);/ ]|$)",
			model: "Bond"
		},
		{
			regex: "BQ-5015L(?:[);/ ]|$)",
			model: "First"
		},
		{
			regex: "BQ-5016G(?:[);/ ]|$)",
			model: "Choice"
		},
		{
			regex: "BQ-5012L(?:[);/ ]|$)",
			model: "Rich"
		},
		{
			regex: "BQ-5521L(?:[);/ ]|$)",
			model: "Rich Max"
		},
		{
			regex: "BQS-5011(?:[);/ ]|$)",
			model: "Monte Carlo"
		},
		{
			regex: "BQ-5010G(?:[);/ ]|$)",
			model: "Spot"
		},
		{
			regex: "BQ-5000G(?:[);/ ]|$)",
			model: "Velvet Easy"
		},
		{
			regex: "BQS-5010(?:[);/ ]|$)",
			model: "Prague"
		},
		{
			regex: "BQ-5009L(?:[);/ ]|$)",
			model: "Trend"
		},
		{
			regex: "BQS-500[59](?:[);/ ]|$)",
			model: "Sydney"
		},
		{
			regex: "BQ-5008L(?:[);/ ]|$)",
			model: "Brave"
		},
		{
			regex: "BQ-5007L(?:[);/ ]|$)",
			model: "Iron"
		},
		{
			regex: "BQS-5006(?:[);/ ]|$)",
			model: "Los Angeles"
		},
		{
			regex: "BQ-(?:5005L|5530L)(?:[);/ ]|$)",
			model: "Intense"
		},
		{
			regex: "BQS-5004(?:[);/ ]|$)",
			model: "Paris"
		},
		{
			regex: "BQ-5003L(?:[);/ ]|$)",
			model: "Shark Pro"
		},
		{
			regex: "BQ-5002G(?:[);/ ]|$)",
			model: "Fun"
		},
		{
			regex: "BQS-5002(?:[);/ ]|$)",
			model: "Colombo"
		},
		{
			regex: "BQS-5003(?:[);/ ]|$)",
			model: "Colombo II"
		},
		{
			regex: "BQ-5001L(?:[);/ ]|$)",
			model: "Contact"
		},
		{
			regex: "BQS-5001(?:[);/ ]|$)",
			model: "Milan"
		},
		{
			regex: "BQ(?:ru|S)?-5000(?:[);/ ]|$)",
			model: "Tokyo"
		},
		{
			regex: "BQS-4800(?:[);/ ]|$)",
			model: "Blade"
		},
		{
			regex: "BQS-4707(?:[);/ ]|$)",
			model: "Montreal"
		},
		{
			regex: "BQS-4702(?:[);/ ]|$)",
			model: "Оsaka"
		},
		{
			regex: "BQS-4701(?:[);/ ]|$)",
			model: "Venice"
		},
		{
			regex: "BQ-(?:4585|5011G)(?:[);/ ]|$)",
			model: "Fox View"
		},
		{
			regex: "BQ(?:ru)?-4583(?:[);/ ]|$)",
			model: "Fox Power"
		},
		{
			regex: "BQS-4570(?:[);/ ]|$)",
			model: "Drive"
		},
		{
			regex: "BQS-4560(?:[);/ ]|$)",
			model: "Golf"
		},
		{
			regex: "BQS-4555(?:[);/ ]|$)",
			model: "Turbo"
		},
		{
			regex: "BQS-4550(?:[);/ ]|$)",
			model: "Richmond"
		},
		{
			regex: "BQ(?:ru)?-(?:4526|5004G)(?:[);/ ]|$)",
			model: "Fox"
		},
		{
			regex: "BQS-4525(?:[);/ ]|$)",
			model: "Vienna"
		},
		{
			regex: "BQS-4516(?:[);/ ]|$)",
			model: "Singapore"
		},
		{
			regex: "BQS-4515(?:[);/ ]|$)",
			model: "Moscow"
		},
		{
			regex: "BQS-4510(?:[);/ ]|$)",
			model: "Florence"
		},
		{
			regex: "BQS-4505(?:[);/ ]|$)",
			model: "Santiago"
		},
		{
			regex: "BQS-4503(?:[);/ ]|$)",
			model: "Dubai"
		},
		{
			regex: "BQS-4502(?:[);/ ]|$)",
			model: "Kingston"
		},
		{
			regex: "BQS-4501 Bristol",
			model: "Bristol"
		},
		{
			regex: "BQ-4501G(?:[);/ ]|$)",
			model: "Fox Easy"
		},
		{
			regex: "BQ(?:ru)?-4500(?:[);/ ]|$)",
			model: "Fox LTE"
		},
		{
			regex: "BQ-4077(?:[);/ ]|$)",
			model: "Shark Mini"
		},
		{
			regex: "BQ(?:ru)?-4072(?:[);/ ]|$)",
			model: "Strike Mini"
		},
		{
			regex: "BQ(?:ru)?[- ]402[68](?:[);/ ]|$)",
			model: "Up!"
		},
		{
			regex: "BQS-4010(?:[);/ ]|$)",
			model: "Aspen"
		},
		{
			regex: "BQS-4009(?:[);/ ]|$)",
			model: "Orleans"
		},
		{
			regex: "BQS-4008(?:[);/ ]|$)",
			model: "Shanghai"
		},
		{
			regex: "BQS-4007(?:[);/ ]|$)",
			model: "Valencia"
		},
		{
			regex: "BQS-4005(?:[);/ ]|$)",
			model: "Seoul"
		},
		{
			regex: "BQS-4004(?:[);/ ]|$)",
			model: "Dusseldorf"
		},
		{
			regex: "BQS-4003(?:[);/ ]|$)",
			model: "Verona"
		},
		{
			regex: "BQ-4001G(?:[);/ ]|$)",
			model: "Cool"
		},
		{
			regex: "BQS-4001(?:[);/ ]|$)",
			model: "Oxford"
		},
		{
			regex: "BQS-3510(?:[);/ ]|$)",
			model: "Aspen Mini"
		},
		{
			regex: "BQS-3503(?:[);/ ]|$)",
			model: "Bombay"
		},
		{
			regex: "BQ-1085L(?:[);/ ]|$)",
			model: "Hornet Max Pro",
			device: "tablet"
		},
		{
			regex: "BQ-1084L(?:[);/ ]|$)",
			model: "Hornet Max",
			device: "tablet"
		},
		{
			regex: "BQ-1083G(?:[);/ ]|$)",
			model: "Armor Pro Plus",
			device: "tablet"
		},
		{
			regex: "BQ-1082G(?:[);/ ]|$)",
			model: "Armor Pro",
			device: "tablet"
		},
		{
			regex: "BQ-1077L(?:[);/ ]|$)",
			model: "Armor Pro LTE",
			device: "tablet"
		},
		{
			regex: "BQ(?:ru)?-1057L(?:[);/ ]|$)",
			model: "Passion",
			device: "tablet"
		},
		{
			regex: "BQ-1051G(?:[);/ ]|$)",
			model: "Corsika",
			device: "tablet"
		},
		{
			regex: "BQ-1050G(?:[);/ ]|$)",
			model: "Hawaii",
			device: "tablet"
		},
		{
			regex: "BQ[-]?1008G(?:[);/ ]|$)",
			model: "Grace",
			device: "tablet"
		},
		{
			regex: "Aquaris M8",
			model: "Aquaris M8",
			device: "tablet"
		},
		{
			regex: "Aquaris_([AM])4.5",
			model: "Aquaris $14.5"
		},
		{
			regex: "BQ(?:ru)?[_ -](?:5590|5740G)(?:[);/ ]|$)",
			model: "Spring"
		},
		{
			regex: "BQ[S]?-(?:6016L|5520)(?:[);/ ]|$)",
			model: "Mercury"
		},
		{
			regex: "BQ(?:S|ru)?-(?:5701L|5060)(?:[);/ ]|$)",
			model: "Slim"
		},
		{
			regex: "(BQ-7850|BQ-700[12]G|BQ-8002G|BQ-905[12]G|BQ-9702G|BQ-7056G)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "BQ-8006G(?:[);/ ]|$)",
			model: "Java",
			device: "tablet"
		},
		{
			regex: "BQ-7062G(?:[);/ ]|$)",
			model: "Fiji",
			device: "tablet"
		},
		{
			regex: "BQ(?:ru)?-1081G(?:[);/ ]|$)",
			model: "Grace 3G",
			device: "tablet"
		},
		{
			regex: "BQ-7802G(?:[);/ ]|$)",
			model: "Luzon",
			device: "tablet"
		},
		{
			regex: "BQ-7008G(?:[);/ ]|$)",
			model: "Clarion",
			device: "tablet"
		},
		{
			regex: "BQ-7064G(?:[);/ ]|$)",
			model: "Fusion",
			device: "tablet"
		},
		{
			regex: "BQ-7050G(?:[);/ ]|$)",
			model: "Malta",
			device: "tablet"
		},
		{
			regex: "BQ-7000G(?:[);/ ]|$)",
			model: "Сharm",
			device: "tablet"
		},
		{
			regex: "BQ-7040G(?:[);/ ]|$)",
			model: "Сharm Plus",
			device: "tablet"
		},
		{
			regex: "BQ-7038G(?:[);/ ]|$)",
			model: "Light Plus",
			device: "tablet"
		},
		{
			regex: "BQ-7005G(?:[);/ ]|$)",
			model: "Maui",
			device: "tablet"
		},
		{
			regex: "BQ-7098G(?:[);/ ]|$)",
			model: "Armor Power",
			device: "tablet"
		},
		{
			regex: "BQ-1007(?:[);/ ]|$)",
			model: "Necker",
			device: "tablet"
		},
		{
			regex: "BQ-1045[G]?(?:[);/ ]|$)",
			model: "Orion",
			device: "tablet"
		},
		{
			regex: "BQ-(?:1054L|1020L)(?:[);/ ]|$)",
			model: "Nexion",
			device: "tablet"
		},
		{
			regex: "BQ-7083G(?:[);/ ]|$)",
			model: "Light",
			device: "tablet"
		},
		{
			regex: "BQ-8077L(?:[);/ ]|$)",
			model: "Exion Plus",
			device: "tablet"
		},
		{
			regex: "BQ(?:ru)?-7083(?:[);/ ]|$)",
			model: "7083",
			device: "tablet"
		},
		{
			regex: "BQ(?:ru)?-1056L(?:[);/ ]|$)",
			model: "1056L",
			device: "tablet"
		},
		{
			regex: "BQ(?:ru)?-1022l(?:[);/ ]|$)",
			model: "Armor Pro LTE+",
			device: "tablet"
		},
		{
			regex: "BQ(?:ru)?-1024L(?:[);/ ]|$)",
			model: "Exion Pro",
			device: "tablet"
		},
		{
			regex: "BQ(?:ru)?-7081(?:[);/ ]|$)",
			model: "Charm",
			device: "tablet"
		},
		{
			regex: "(?:bq )?(Aquaris[^/;]*) Build",
			model: "$1"
		},
		{
			regex: "Aquaris (E(4.5|[56])|M(5|10)|U2 Lite|U2|U (Lite|Plus)|V Plus|X5 Plus|X2? Pro|X[25]|[CMUVX])",
			model: "Aquaris $1"
		},
		{
			regex: "bq ([^/;]+) Build",
			model: "$1",
			device: "tablet"
		}
	]
};
var Bush$1 = {
	regex: "Bush[ _-]|Bush10Nou",
	device: "smartphone",
	models: [
		{
			regex: "Bush10Nou",
			device: "tablet",
			model: "10Nou"
		},
		{
			regex: "BUSH ([^;/)]+)Tablet(?: Build|[);])",
			model: "$1Tablet",
			device: "tablet"
		},
		{
			regex: "BUSH ([^;/)]+)(?: Build|[);])",
			model: "$1"
		}
	]
};
var CAGI = {
	regex: "CAGI-",
	device: "smartphone",
	models: [
		{
			regex: "CAGI-OMEGA",
			model: "Omega"
		},
		{
			regex: "CAGI-([a-z0-9_\\-]+)",
			model: "$1"
		}
	]
};
var Capitel = {
	regex: "Capitel-([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Captiva = {
	regex: "Captiva[ _-]([^;/)]+)(?: Build|\\))",
	device: "tablet",
	model: "Pad $1"
};
var Casio = {
	regex: "(C811|C7[57]1)(?: 4G)?(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "C751(?:[);/ ]|$)",
			model: "G'zOne Ravine"
		},
		{
			regex: "C771(?:[);/ ]|$)",
			model: "G'zOne Commando"
		},
		{
			regex: "C811 4G(?:[);/ ]|$)",
			model: "G'zOne Commando 4G LTE"
		}
	]
};
var Casper = {
	regex: "CASPER[_ ]|VIA[- _](T7D|A[34]|E3|F[123]|G4|M4|[LS]8|S7|P2|V8C|A1_Plus(?:_64)?|A1(?:_1)?|S[13]0|S|T17_M|T1[07]|T7|T7-3G|T8B|T8D-3G|S1[78])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:CASPER[_ ])?VIA_A1_Plus(?:_64)?",
			model: "VIA A1 Plus"
		},
		{
			regex: "(?:CASPER[_ ])?VIA[_ ](G1_Plus|G1|E1|[AE]2|M[123]|V[35689]|V10|G3|V6X|A[34]|E3|F[123]|G4|M4|P2|S|V8C|A1(?:_1)?)(?:[);/ ]|$)",
			model: "VIA $1"
		},
		{
			regex: "CASPER_VIA_E1c",
			model: "VIA E1C"
		},
		{
			regex: "CASPER_L10_4.5G",
			model: "L10 4.5G",
			device: "tablet"
		},
		{
			regex: "CASPER_(S[23]8)(?:[);/ ]|$)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "VIA[- _](T7|T8D)-3G",
			model: "VIA $1 3G",
			device: "tablet"
		},
		{
			regex: "VIA[- _](T7D|S[13]0|[LS]8|S7|T17_M|T1[07]|T7|T8B|S1[78])(?:[);/ ]|$)",
			model: "VIA $1",
			device: "tablet"
		}
	]
};
var Cat = {
	regex: "Cat ?(tablet|stargate|nova)|B15Q|CAT B35|CAT-B100",
	device: "tablet",
	models: [
		{
			regex: "B15Q",
			model: "B15Q",
			device: "smartphone"
		},
		{
			regex: "CAT B35",
			model: "B35",
			device: "smartphone"
		},
		{
			regex: "Cat ?(?:tablet)? ?((?:Galactica|Nova|StarGate|PHOENIX)[^/;]*) Build",
			model: "$1"
		},
		{
			regex: "Cat ?tablet",
			model: "Nova"
		},
		{
			regex: "CAT-(B100)",
			device: "feature phone",
			model: "$1"
		}
	]
};
var Carrefour = {
	regex: "CT(?:10[0123]0|7[12]0|820)(?:W|FR)?(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "CT820",
			model: "Touch Tablet Neo2"
		},
		{
			regex: "CT(10[0123]0(?:W|FR)?)",
			model: "CT$1"
		},
		{
			regex: "CT(7[12]0(?:W|FR)?)",
			model: "CT$1"
		}
	]
};
var Celkon = {
	regex: "Celkon|Millennia Hero",
	device: "smartphone",
	models: [
		{
			regex: "Celkon[ _*](C[78]20)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Millennia Hero",
			model: "Millennia Hero"
		},
		{
			regex: "Celkon[ _*](CT[^;/]+) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Celkon[ _*]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Celkon[\\. _*]([^;/\\)]+)[\\)/]",
			model: "$1"
		}
	]
};
var Changhong$1 = {
	regex: "Changhong",
	device: "smartphone",
	models: [
		{
			regex: "Changhong[ ]?(X1-K|X6|R8|Z9S?|Z1S|S18)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "ChangHong Android TV",
			device: "tv",
			model: ""
		},
		{
			regex: "(?:Opera TV.+)Changhong-([^);/]+)",
			device: "tv",
			model: "$1"
		}
	]
};
var Comio = {
	regex: "Comio|CT701G PLUS|CT701W|GT100",
	device: "smartphone",
	models: [
		{
			regex: "GT100",
			model: "GT100",
			device: "tablet"
		},
		{
			regex: "CT701W",
			model: "CT701W",
			device: "tablet"
		},
		{
			regex: "CT701G PLUS",
			model: "CT701G Plus",
			device: "tablet"
		},
		{
			regex: "Comio[ _-]?([^;/)]+)(?: Build|[);])",
			model: "$1"
		}
	]
};
var Compal = {
	regex: "Compal-[a-z0-9]+",
	device: "feature phone",
	model: "$1"
};
var Artel = {
	regex: "Artel[_ ]|\\w+_ARTEL_\\w+|GAP YOQ(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "GAP YOQ(?:[);/ ]|$)",
			model: "Gap Yo Q"
		},
		{
			regex: "Artel[_ ](Quadro(?: Pro)?|Tesla|Air|Tomchi|Premium|U3_4G|Z5|Sentinel (?:X 8G|X D5|X)|T10)",
			model: "$1"
		},
		{
			regex: "Artel[_ ]Komi3",
			model: "Komi 3"
		},
		{
			regex: "Artel[_ ](Star|Nova|Connect|Choice|Style)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(?:\\w+_)?ARTEL_([FVM]5|X[45])_\\w+",
			device: "feature phone",
			model: "$1"
		}
	]
};
var ConCorde = {
	regex: "ConCorde ([^/;]+) Build|Concorde_Raptor_Z55(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Concorde_(Raptor_Z55)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "ConCorde Tab ?([^/;]+) Build",
			model: "Tab $1",
			device: "tablet"
		},
		{
			regex: "ConCorde ReadMan ?([^/;]+) Build",
			model: "ReadMan $1",
			device: "tablet"
		},
		{
			regex: "ConCorde ([^/;]+) Build",
			model: "$1"
		}
	]
};
var Condor = {
	regex: "Allure (?:M[13]|X)|Griffe T[2356789]|TFX712G|TRA-901G|TGW[-]?(710G|709)|(?:PGN\\-?[456][012][0-9]|PHS\\-601|PHQ519|PHQ52[056]|TB105L|TB717G|PKT\\-301|Plume (?:H1|L[1-468]|P8|P6 PRO LTE))(?:[);/ ]|$)|CTAB[^/;]+ Build",
	device: "smartphone",
	models: [
		{
			regex: "CTAB([^/;]+) Build",
			device: "tablet",
			model: "CTAB $1"
		},
		{
			regex: "(TGW)-?(710G|709)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1 $2"
		},
		{
			regex: "(TFX712G|TB105L|TB717G)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "(TRA)-(901G)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1 $2"
		},
		{
			regex: "PHS\\-601",
			model: "C8"
		},
		{
			regex: "PGN\\-?403",
			model: "C4+ Noir"
		},
		{
			regex: "PGN\\-?404",
			model: "C7 Mini"
		},
		{
			regex: "PGN\\-?409",
			model: "Plume P4"
		},
		{
			regex: "PKT\\-?301",
			model: "C2"
		},
		{
			regex: "PGN\\-?504",
			model: "C5"
		},
		{
			regex: "PGN\\-?505",
			model: "C8S"
		},
		{
			regex: "PGN\\-?506",
			model: "C7"
		},
		{
			regex: "(Allure (?:M[13]|X))",
			model: "$1"
		},
		{
			regex: "PGN\\-?507",
			model: "Allure A9"
		},
		{
			regex: "PGN\\-?508",
			model: "C6+"
		},
		{
			regex: "PGN\\-?509",
			model: "C6 Pro"
		},
		{
			regex: "PGN\\-?511",
			model: "Allure A9 Plus"
		},
		{
			regex: "PGN\\-?513",
			model: "Griffe G4"
		},
		{
			regex: "PHQ519",
			model: "Griffe G4S"
		},
		{
			regex: "PHQ520",
			model: "Griffe G5"
		},
		{
			regex: "PHQ525",
			model: "Griffe G6"
		},
		{
			regex: "PHQ526",
			model: "Griffe G6 Pro"
		},
		{
			regex: "PGN\\-?514",
			model: "Plume P7"
		},
		{
			regex: "PGN\\-?515",
			model: "Plume P4 Pro"
		},
		{
			regex: "PGN\\-?516",
			model: "Plume P5"
		},
		{
			regex: "PGN\\-?51[78]",
			model: "Plume P6"
		},
		{
			regex: "PGN\\-?521",
			model: "Griffe G4 Plus"
		},
		{
			regex: "Griffe T3 ?pro",
			model: "Griffe T3 Pro"
		},
		{
			regex: "Griffe T([0-9]) Plus",
			model: "Griffe T$1 Plus"
		},
		{
			regex: "Griffe T([0-9])",
			model: "Griffe T$1"
		},
		{
			regex: "PGN\\-?522",
			model: "P6 Plus"
		},
		{
			regex: "PGN\\-?523",
			model: "P7 Plus"
		},
		{
			regex: "PGN\\-?527",
			model: "Plume P4 Plus"
		},
		{
			regex: "PGN\\-?528|PLUME P6 PRO LTE",
			model: "Plume P6 Pro LTE"
		},
		{
			regex: "PGN\\-?605",
			model: "Plume P8"
		},
		{
			regex: "PGN\\-?606",
			model: "Allure A55"
		},
		{
			regex: "PGN\\-?607",
			model: "Allure A100"
		},
		{
			regex: "PGN\\-?608",
			model: "Allure A55 Slim"
		},
		{
			regex: "PGN\\-?609",
			model: "Allure A100 Lite"
		},
		{
			regex: "PGN\\-?610",
			model: "Plume P8 Lite"
		},
		{
			regex: "PGN\\-?611",
			model: "Allure A8"
		},
		{
			regex: "PGN\\-?612",
			model: "Allure A8 Plus"
		},
		{
			regex: "PGN\\-?613",
			model: "Allure A55 Plus"
		},
		{
			regex: "Plume H1",
			model: "Plume H1"
		},
		{
			regex: "Plume L([2468]) Pro",
			model: "Plume L$1 Pro"
		},
		{
			regex: "Plume L3 Plus",
			model: "Plume L3 Plus"
		},
		{
			regex: "Plume L3 Smart",
			model: "Plume L3 Smart"
		},
		{
			regex: "Plume L([1-4])",
			model: "Plume L$1"
		},
		{
			regex: "Plume P8 Pro",
			model: "Plume P8 Pro"
		},
		{
			regex: "PGN\\-?([0-9]{3})",
			model: "PGN-$1"
		}
	]
};
var Coolpad = {
	regex: "(?:YL-)?Coolpad|(?:Cool_9S|1824-S0|8190Q|1831-A0|8676-[AM]01|CP8298_I00|CP3648A|CP8676_I0[23]|REVVLPLUS C3701A|VCR-[AI]0|C105-E0|C106-[79]| C106|MTS-T0|cp3705A[S]?|ORL-C0|DLS-E0|8298-M02|5560S)(?:[);/ ]|$)|(8295|5860S) Build",
	device: "smartphone",
	models: [
		{
			regex: "VCR-[AI]0",
			model: "Cool Play 6"
		},
		{
			regex: "1831-A0(?:[);/ ]|$)",
			model: "Cool Play C7"
		},
		{
			regex: "REVVLPLUS C3701A",
			model: "REVVL Plus",
			device: "phablet"
		},
		{
			regex: "8190Q(?:[);/ ]|$)",
			model: "8190Q"
		},
		{
			regex: "DLS-E0(?:[);/ ]|$)",
			model: "N5"
		},
		{
			regex: "1824-S0(?:[);/ ]|$)",
			model: "N5C"
		},
		{
			regex: "CP3705A[S]?(?:[);/ ]|$)",
			model: "Legacy"
		},
		{
			regex: "CP3648A(?:[);/ ]|$)",
			model: "Legacy S"
		},
		{
			regex: "MTS-T0(?:[);/ ]|$)",
			model: "N2M"
		},
		{
			regex: "C106-[79](?:[);/ ]|$)",
			model: "Cool 1"
		},
		{
			regex: "C105-E0(?:[);/ ]|$)",
			model: "Cool S1"
		},
		{
			regex: "ORL-C0(?:[);/ ]|$)",
			model: "Cool 9"
		},
		{
			regex: "Cool_9S(?:[);/ ]|$)",
			model: "Cool 9S"
		},
		{
			regex: "5560S(?:[);/ ]|$)",
			model: "Arise"
		},
		{
			regex: "(5860S|8295) Build",
			model: "$1"
		},
		{
			regex: "CP8676_I02(?:[);/ ]|$)",
			model: "Note 3"
		},
		{
			regex: "CP8676_I03(?:[);/ ]|$)",
			model: "Note 3 Plus"
		},
		{
			regex: "CP8298_I00(?:[);/ ]|$)",
			model: "Note 3 Lite"
		},
		{
			regex: "(8676-[AM]01|8298-M02)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(?:YL-)?Coolpad[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "(?:YL-)?Coolpad[ _\\-]?([a-z0-9\\-]+)",
			model: "$1"
		}
	]
};
var Clarmin = {
	regex: "Clarmin",
	device: "smartphone",
	models: [
		{
			regex: "Clarmin[_ ](B[65]|C1)",
			model: "$1"
		}
	]
};
var CORN = {
	regex: "CORN ",
	device: "smartphone",
	models: [
		{
			regex: "CORN R20",
			model: "R20"
		}
	]
};
var Cosmote = {
	regex: "Cosmote",
	device: "smartphone",
	models: [
		{
			regex: "Cosmote_My_mini_Tab",
			device: "tablet",
			model: "My Mini Tab"
		}
	]
};
var Cricket = {
	regex: "Cricket-([a-z0-9]+)|U705AC(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "U705AC",
			model: "Ovation"
		},
		{
			regex: "Cricket-([a-z0-9]+)",
			device: "feature phone",
			model: "$1"
		}
	]
};
var Crosscall = {
	regex: "Crosscall|ODYSSEY_Plus|Odyssey S1|Trekker-[MSX][1234]|Action-X3|Core-X3",
	device: "smartphone",
	models: [
		{
			regex: "Action-X3",
			model: "Action-X3"
		},
		{
			regex: "Core-X3",
			model: "Core-X3"
		},
		{
			regex: "Crosscall ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "ODYSSEY_Plus",
			model: "ODYSSEY+"
		},
		{
			regex: "Odyssey S1",
			model: "ODYSSEY S1"
		},
		{
			regex: "Trekker-([MSX][1234](?: Core)?)",
			model: "Trekker-$1"
		}
	]
};
var AllDocube = {
	regex: "(?:T1001XS?|T1006S?|iPlay_[24]0|U1006H?)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "T1001XS(?:[);/ ]|$)",
			model: "M5XS"
		},
		{
			regex: "T1006S(?:[);/ ]|$)",
			model: "M5S"
		},
		{
			regex: "T1006(?:[);/ ]|$)",
			model: "M5"
		},
		{
			regex: "T1001X(?:[);/ ]|$)",
			model: "M5X"
		},
		{
			regex: "U1006H?(?:[);/ ]|$)",
			model: "iPlay 10 Pro 10.1\""
		},
		{
			regex: "iPlay_([24]0)(?:[);/ ]|$)",
			model: "iPlay $1"
		}
	]
};
var Cube = {
	regex: "(<!myPhone ?)Cube|(U[0-9]+GT|K8GT)|(?:T8-PLUSM?S?|T8PLUSML|I1-TF[BD]?|I1-TC|i1002S|Iwork10 Flagship|iwork10 Pro)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "U27GT",
			model: "Talk 8"
		},
		{
			regex: "(?:T8-PLUSM?S?|T8PLUSML)(?:[);/ ]|$)",
			model: "T8 Ultimate"
		},
		{
			regex: "U55GT",
			model: "Talk 79"
		},
		{
			regex: "U65GT",
			model: "Talk 9X"
		},
		{
			regex: "I1-TF[BD]?(?:[);/ ]|$)",
			model: "iWork 8 Air"
		},
		{
			regex: "I1-TC(?:[);/ ]|$)",
			model: "iWork 8 Ultimate"
		},
		{
			regex: "(?:i1002S|iwork10 Pro)(?:[);/ ]|$)",
			model: "iWork 10 Pro"
		},
		{
			regex: "Iwork10 Flagship(?:[);/ ]|$)",
			model: "iWork 10 Flagship"
		},
		{
			regex: "(U[0-9]+GT[^;/]*) Build",
			model: "$1"
		},
		{
			regex: "(U[0-9]+GT(?:[0-9]|[\\-_][a-z]+)?)",
			model: "$1"
		},
		{
			regex: "(K8GT)",
			model: "$1"
		}
	]
};
var CUBOT = {
	regex: "CUBOT|RAINBOW 2|KING_KONG_3|ZORRO 001|KINGKONG[_ ]MINI2?|KING KONG CS|(?<!QUMO )QUEST(?!(?:[0-9]|\\s[0-9]))(?: LITE)?|NOTE 20 PRO",
	device: "smartphone",
	models: [
		{
			regex: "CHEETAH 2",
			model: "Cheetah 2"
		},
		{
			regex: "RAINBOW 2",
			model: "Rainbow 2"
		},
		{
			regex: "RAINBOW",
			model: "Rainbow"
		},
		{
			regex: "DINOSAUR",
			model: "Dinosaur"
		},
		{
			regex: "KINGKONG MINI2",
			model: "King Kong Mini 2"
		},
		{
			regex: "KINGKONG_MINI",
			model: "King Kong Mini"
		},
		{
			regex: "KING_KONG_3",
			model: "King Kong 3"
		},
		{
			regex: "KING KONG CS",
			model: "King Kong CS"
		},
		{
			regex: "KING KONG",
			model: "King Kong"
		},
		{
			regex: "QUEST LITE",
			model: "Quest Lite"
		},
		{
			regex: "QUEST",
			model: "Quest"
		},
		{
			regex: "ZORRO 001",
			model: "Zorro 001"
		},
		{
			regex: "CUBOT[ _]Echo",
			model: "Echo"
		},
		{
			regex: "CUBOT[ _]MANITO",
			model: "Manito"
		},
		{
			regex: "CUBOT[ _]MAGIC",
			model: "Magic"
		},
		{
			regex: "CUBOT[ _]MAX",
			model: "Max"
		},
		{
			regex: "NOTE Plus",
			model: "Note Plus"
		},
		{
			regex: "NOTE 20 PRO",
			model: "Note 20 Pro"
		},
		{
			regex: "CUBOT[_ ]NOTE[_ ]S",
			model: "Note S"
		},
		{
			regex: "CUBOT_NOVA",
			model: "Nova"
		},
		{
			regex: "CUBOT_POWER",
			model: "Power"
		},
		{
			regex: "CUBOT_X18_Plus",
			model: "X18 Plus"
		},
		{
			regex: "CUBOT[ _](A5|C6W|H3|J3|P7|P20|[RXJ]9|R11|X18)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "CUBOT ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "([^;/]+) Build/CUBOT",
			model: "$1"
		}
	]
};
var Clout = {
	regex: "Hind[ _]5\\.1|X417[ _]Amaze|X418[ _]Zest|X421[ _]Nova|X422[ ]Exotic|X425[ _]Shavit|X428[ _]Astute",
	device: "smartphone",
	models: [
		{
			regex: "Hind[ _]5\\.1",
			model: "Hind 5.1"
		},
		{
			regex: "X417[ _]Amaze",
			model: "X417 Amaze"
		},
		{
			regex: "X418[ _]Zest",
			model: "X418 Zest"
		},
		{
			regex: "X421[ _]Nova",
			model: "X421 Nova"
		},
		{
			regex: "X422[ _]Exotic",
			model: "X422 Exotic"
		},
		{
			regex: "X425[ _]Shavit",
			model: "X425 Shavit"
		},
		{
			regex: "X428[ _]Astute",
			model: "X428 Astute"
		}
	]
};
var Concord = {
	regex: "Concord[ _-]|(?:Flyfix 6|C-721|Plus-7_C777|Plus_M19_C779|Plus-9_C778)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "M10",
			model: "M10"
		},
		{
			regex: "Flyfix 6",
			model: "Flyfix 6"
		},
		{
			regex: "C-721",
			model: "Flyfix Q",
			device: "tablet"
		},
		{
			regex: "Plus[-_]([79]|M19)_(C77[789])(?:[);/ ]|$)",
			model: "Plus-$1 $2",
			device: "tablet"
		}
	]
};
var Crescent = {
	regex: "WING 5|WING9|Venus[ _][14]",
	device: "smartphone",
	models: [
		{
			regex: "WING 5",
			model: "Wing 5"
		},
		{
			regex: "WING9",
			model: "Wing 9"
		},
		{
			regex: "Venus[ _]([14])",
			model: "Venus $1"
		}
	]
};
var Cyrus = {
	regex: "Cyrus[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "Cyrus[ _-]?([^;/)]+) Build",
			model: "$1"
		},
		{
			regex: "Cyrus[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Datang = {
	regex: "DATANG",
	device: "smartphone",
	models: [
		{
			regex: "(?:DATANG[ _-])+([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "(?:DATANG[ _-])+([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Datsun = {
	regex: "DATSUN",
	device: "smartphone",
	models: [
		{
			regex: "DATSUN_D5500",
			model: "D5500"
		},
		{
			regex: "Datsun_D5001",
			model: "D5001"
		}
	]
};
var Danew = {
	regex: "Dslide ?([^;/]+) Build|Konnect_?(?:402|50[246]|60[127])|GEODROID_A5",
	device: "smartphone",
	models: [
		{
			regex: "Konnect_?(402|50[246]|60[127])",
			model: "Konnect $1"
		},
		{
			regex: "Dslide ?([^;/]+) Build",
			device: "tablet",
			model: "DSlide $1"
		},
		{
			regex: "GEODROID_A5",
			device: "tablet",
			model: "Geodroid A5"
		}
	]
};
var Denver = {
	regex: "(?:TA[CDQ]-[0-9]+)|P(?:.+)TAQ-(?:[0-9]+)|SDQ[_-](?:550[24]4L|52001G|50002G|57004L)",
	device: "tablet",
	models: [
		{
			regex: "P(?:.+)TAQ-(10213GMK2|10172MK3|10242MK2|70242MK2|[0-9]+)(?:[);/ ]|$)",
			model: "TAQ-$1"
		},
		{
			regex: "(TA[CDQ]-[0-9]+)",
			model: "$1"
		},
		{
			regex: "SDQ[_-](550[24]4L|52001G|50002G|57004L)",
			device: "smartphone",
			model: "SDQ-$1"
		}
	]
};
var Dell$2 = {
	regex: "Dell[^a-z]|Venue|XCD35",
	device: "smartphone",
	models: [
		{
			regex: "XCD35",
			model: "XCD35"
		},
		{
			regex: "Venue (8 7840|10 7040|8 3830)",
			model: "Venue $1",
			device: "tablet"
		},
		{
			regex: "(?:Dell )?Venue Build",
			model: "Venue"
		},
		{
			regex: "Dell; Venue Pro",
			model: "Venue Pro"
		},
		{
			regex: "(OptiPlex (?:3050|7010))",
			device: "desktop",
			model: "$1"
		},
		{
			regex: "(?:Dell )?(Streak|Venue) ?([^/;]*) Build",
			model: "$1 $2",
			device: "tablet"
		},
		{
			regex: "(?:Dell Inc./)?(XPS 13 9360|Latitude 7480)(?:[);/ ]|$)",
			device: "desktop",
			model: "$1"
		},
		{
			regex: "Dell; ((?:Streak|Venue)[^;/\\)]*)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Dell; ([^;/\\)]+)",
			model: "$1"
		},
		{
			regex: "Dell[ _\\-]([^/;]+) Build",
			model: "$1"
		}
	]
};
var Desay = {
	regex: "Desay",
	device: "smartphone",
	models: [
		{
			regex: "Desay[ _-]?([^;/)]+) Build",
			model: "$1"
		},
		{
			regex: "Desay[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var DEXP = {
	regex: "DEXP|(?:Ursus|Ixion)[ _]([^;/)]+)|H135[ _]Build|Larus_TV1|Ixion(?:ML4.7|ES250)|M150Storm|(?:SENIOR|F4[38]D8000K|VA[12]10|VA170|ML450|MS[56]50|BL[123]50|BS155|BS160|BS[1256]50|AL[12]40|AL[23]50|AS155|AS260|GS15[035]| (?:N280i|P380i|R110|BL160|B450|B340|A1[45]0|A340|AS160|GL[23]55|ES750))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Ixion[_ ]([^;/]+)(?: Build|\\))",
			model: "Ixion $1"
		},
		{
			regex: "(ML450|MS[56]50|ES750)(?:[);/ ]|$)",
			model: "Ixion $1"
		},
		{
			regex: "IxionES250(?:[);/ ]|$)",
			model: "Ixion ES250 Rage"
		},
		{
			regex: "IxionML4.7(?:[);/ ]|$)",
			model: "Ixion ML 4.7\""
		},
		{
			regex: "M150Storm(?:[);/ ]|$)",
			model: "Ixion M150 Storm"
		},
		{
			regex: "AL250(?:[);/ ]|$)",
			model: "4.5\" AL250"
		},
		{
			regex: "AL350(?:[);/ ]|$)",
			model: "5.0\" AL350"
		},
		{
			regex: "AS155(?:[);/ ]|$)",
			model: "5.45\" AS155"
		},
		{
			regex: "AS260(?:[);/ ]|$)",
			model: "5.85\" AS260",
			device: "phablet"
		},
		{
			regex: "Ursus ([^;/)]+)(?: Build|\\))",
			model: "Ursus $1",
			device: "tablet"
		},
		{
			regex: "(VA[21]10|VA170|R110|N280i|P380i)(?:[);/ ]|$)",
			model: "Ursus $1",
			device: "tablet"
		},
		{
			regex: " (B450|B340|BL160|A340)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "SENIOR(?:[);/ ]|$)",
			model: "Senior"
		},
		{
			regex: "Larus_TV1",
			device: "feature phone",
			model: "Larus_TV1"
		},
		{
			regex: "H135[ _]Build",
			model: "Atlas",
			device: "desktop"
		},
		{
			regex: "(BL[123]50|BS155|BS160|BS[1256]50|AL[12]40|A1[45]0|GS15[035]|AS160|GL[23]55)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "DEXP[ _]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "DEXP[ _]([^);/]+)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(F4[38]D8000K)(?:[);/ ]|$)",
			device: "tv",
			model: "$1"
		}
	]
};
var Dbtel = {
	regex: "DBTEL(?:[\\-/])?([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Dialog = {
	regex: "Dialog ?([^;/]+) Build",
	device: "smartphone",
	model: "$1"
};
var Dicam = {
	regex: "DICAM-([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Digi = {
	regex: "(?<!FBCR/)Digi[ _]([^);/]+)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Digicel = {
	regex: "DIGICEL",
	device: "smartphone",
	models: [
		{
			regex: "DL810",
			model: "DL810"
		},
		{
			regex: "DIGICEL ([^/;]+) Build",
			model: "$1"
		}
	]
};
var Digiland = {
	regex: "(?:DL1008M|DL(?:1023|9002|[78]006))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "DL1008M",
			model: "DL1008M"
		},
		{
			regex: "DL(1023|9002|[78]006)",
			model: "DL$1"
		}
	]
};
var Digma = {
	regex: "Digma[_ ]([^;/]+) Build|HIT HT707[10]MG|CITI (?:7 E401 4G|8 E400 4G|ATL 4G|Kids|Octa [178]0|1902 3G|10 E402|Z530 3G)|(CITI[_ ](?:[A-Z0-9]+)[_ ][34]G)[ _][TC][ST](606[32]ML|111[46]ML|11[459]4MG|1117PG|1207MG|1210MG|1195MG|1196ML|3001ML|4024PG|5009PL|5021ML|5026PL|500[67]PG|7052PG|706[56]MG|709[68]PL|7097MG|720[48]MG|7140ML|7141MG|7113PL|7193MG|820[69]MG|7153MG|8139ML|8143MG|8152ML|1050PL|8205PG|7203MG|106[24]ML|1115MG)|HIT 4G|HT7074ML|IDX5|(iDx10|iDx7)|MVM900H(?:WZ|C)|MVM908HCZ|(iDxD8 3G|iDxD10 3G|iDrQ10 3G|iDxD[45]|iDxQ5|iD[nx]D7(?:[_ ]3G)?)|PS604M|PT452E|LINX B510 3G LT5037MG|LINX A452 3G LT4030PG|LINX A453 3G LT4038PG|LINX A420 3G LS4019PG|LINX A450 3G LT4028PG|Linx A400 3G LT4001PG|Linx C500 3G LT5001PG|Linx PS474S|LS504[01]PL|LT40(47|54)MG|PS1043MG|LS405[01]MG|LS5053ML|LT5048MG|HT7071MG|LT5052ML|HT5035PG|HT4039PG|LT4049PG|NS6902QL|NS9797MG|TS7854M|TS1012E 3G|TT1004PG|TT702[045]MG|TT1002MG|TT7026MW|((?:Optima|Platina|Plane)[ _](?:[EM])?(?:[0-9\\.ST]+|Prime)(?:[ _][43]G)?)|(VOX[ _](?:[0-9\\.A-Z]+)[_ ][43]G)",
	device: "smartphone",
	models: [
		{
			regex: "HIT(?: 3G)? HT707[10]MG",
			model: "HIT 3G",
			device: "tablet"
		},
		{
			regex: "iDx5",
			model: "iDx5"
		},
		{
			regex: "HT5035PG",
			model: "HIT Q500 3G"
		},
		{
			regex: "HT4039PG",
			model: "HIT Q401 3G"
		},
		{
			regex: "(VOX[ _](?:[0-9\\.A-Z]+)[_ ][43]G)",
			model: "$1"
		},
		{
			regex: "PS604M",
			model: "Linx 6.0"
		},
		{
			regex: "LT4049PG",
			model: "Linx Atom 3G"
		},
		{
			regex: "LT5048MG",
			model: "Linx Joy 3G"
		},
		{
			regex: "LT5052ML",
			model: "Linx Base 4G"
		},
		{
			regex: "LT4047MG",
			model: "Linx Alfa 3G"
		},
		{
			regex: "LS4050MG",
			model: "Linx X1 3G"
		},
		{
			regex: "LS4051MG",
			model: "Linx X1 Pro 3G"
		},
		{
			regex: "LT4054MG",
			model: "Linx Argo 3G"
		},
		{
			regex: "LS5041PL",
			model: "Linx Trix 4G"
		},
		{
			regex: "LS5040PL",
			model: "Linx Rage 4G"
		},
		{
			regex: "LS5053ML",
			model: "Linx Pay 4G"
		},
		{
			regex: "Linx ([A-Z][0-9]{3}) 3G (?:LT4028PG|LS4019PG|LT4001PG|LT5001PG|LT4038PG|LT5037MG|LT4030PG)",
			model: "Linx $1 3G"
		},
		{
			regex: "(Linx PS474S)",
			model: "$1"
		},
		{
			regex: "PT452E",
			model: "Linx 4.5"
		},
		{
			regex: "CITI ATL 4G CS5029ML",
			model: "CITI ATL 4G"
		},
		{
			regex: "(CITI Z530 3G)",
			model: "$1"
		},
		{
			regex: "(CITI [A-Z0-9]+ [34]G) C[ST](?:606[32]ML|4024PG|5009PL|5021ML|5026PL)",
			model: "$1"
		},
		{
			regex: "TS7854M",
			model: "Plane 8.1\" 3G",
			device: "tablet"
		},
		{
			regex: "PS1043MG",
			model: "Plane 10.3\" 3G",
			device: "tablet"
		},
		{
			regex: "TS1012E 3G",
			model: "Plane 10.1\" 3G",
			device: "tablet"
		},
		{
			regex: "MVM900H(?:WZ|C)",
			model: "iDx8",
			device: "tablet"
		},
		{
			regex: "MVM908HCZ",
			model: "iDx9",
			device: "tablet"
		},
		{
			regex: "(iD(?:xD10|rQ10|xD7)[_ ]3G)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(iDx10|iDx7)",
			model: "$1"
		},
		{
			regex: "(iDxD[45]|iDxQ5)",
			model: "$1"
		},
		{
			regex: "HIT 4G HT7074ML",
			model: "HIT 4G",
			device: "tablet"
		},
		{
			regex: "CITI[_ ](1902 3G|Kids|8527_4G|Octa [178]0|10 E402 4G|8 E400 4G|7 E401 4G)",
			model: "CITI $1",
			device: "tablet"
		},
		{
			regex: "(CITI[ _](?:[A-Z0-9]+)[ _][34]G)[ _][TC][ST](?:106[24]ML|111[46]ML|1115MG|1117PG|1207MG|1210MG|3001ML|500[67]PG|7052PG|706[567]MG|7097MG|720[48]MG|820[69]MG|11[459]4MG|1195MG|1196ML|3001ML|8152ML|1050PL|709[68]PL|7113PL|7193MG|7216MG|8205PG|7203MG|8143MG|7153MG|7141MG|7140ML)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "iDxD8 3G",
			model: "D-Plane2 8",
			device: "tablet"
		},
		{
			regex: "(iDnD7)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "NS6902QL",
			model: "Platina 7.2 4G",
			device: "tablet"
		},
		{
			regex: "NS9797MG",
			model: "Platina 7.2 3G",
			device: "tablet"
		},
		{
			regex: "TT1004PG",
			model: "Optima 10.4\" 3G",
			device: "tablet"
		},
		{
			regex: "TT1002MG",
			model: "Optima D 10.4\" 3G",
			device: "tablet"
		},
		{
			regex: "TT7025MG",
			model: "Optima 7.5\" 3G",
			device: "tablet"
		},
		{
			regex: "TT7026MW",
			model: "Optima 7.6\" 3G",
			device: "tablet"
		},
		{
			regex: "TT7020MG",
			model: "Optima 7.3\" 3G",
			device: "tablet"
		},
		{
			regex: "TT7024MG",
			model: "Optima 7.4\" 3G",
			device: "tablet"
		},
		{
			regex: "((?:Optima|Platina|Plane)[ _](?:[EM])?(?:[0-9\\.STNM]+|Prime)(?:[ _][43]G)?)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Digma[_ ]([^;/]+) Build",
			model: "$1",
			device: "tablet"
		}
	]
};
var DoCoMo = {
	regex: "DoCoMo|\\;FOMA|KGT/1\\.0",
	device: "feature phone",
	models: [
		{
			regex: "DoCoMo/.+MST.+(SH2101V)",
			model: "$1"
		},
		{
			regex: "DoCoMo/[12]\\.0[/ ]([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "([a-z0-9]+)(?:_W)?\\;FOMA",
			model: "$1"
		},
		{
			regex: "KGT/1\\.0 ([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Doogee = {
	regex: "DOOGEE[ _-]|Valencia2_Y100_?(?:pro|plus)|Y100_Plus|X5max(?:[_ ]PRO)?|Shoot_[12]|x5_doogee|(KISSME|BIGBOY|COLLO[23]?|DAGGER|DISCOVERY2?|FIND|HOTWIND|LATTE|MAX|MINT|MOON|PIXELS|RAINBOX|TURBO|VALENCIA|VOYAGER2?|TITANS2?)[ -_](DG[0-9]+C?)(?:[);/ ]|$)|(?:BL12000|BL5500[_ ]Lite|X9 Mini|LEO_DG280|Y9Plus|Hitman_DG850|S(?:[568]8|9[056]|59|40)Pro|X95Pro|S40Lite|BL[579]000|N20Pro|(?<!Lenovo )S90C|Ibiza_F2)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Valencia2_)?Y100_Plus(?:[);/ ]|$)",
			model: "Valencia2 Y100 Plus"
		},
		{
			regex: "Valencia2_Y100pro",
			model: "Valencia2 Y100 Pro"
		},
		{
			regex: "LEO_(DG280)",
			model: "Leo $1"
		},
		{
			regex: "(BL[579]000|S90C)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "X95Pro(?:[);/ ]|$)",
			model: "X95 Pro"
		},
		{
			regex: "N20Pro(?:[);/ ]|$)",
			model: "N20 Pro"
		},
		{
			regex: "BL12000 PRO",
			model: "BL12000 Pro"
		},
		{
			regex: "BL5500[_ ]Lite",
			model: "BL5500 Lite"
		},
		{
			regex: "BL12000",
			model: "BL12000"
		},
		{
			regex: "S([568]8|9[056]|59|40)Pro",
			model: "S$1 Pro"
		},
		{
			regex: "S40Lite",
			model: "S40 Lite"
		},
		{
			regex: "KISSME-DG580",
			model: "Kissme DG580"
		},
		{
			regex: "Hitman_DG850",
			model: "Hitman DG580"
		},
		{
			regex: "X9 Mini",
			model: "X9 Mini"
		},
		{
			regex: "x5_doogee",
			model: "X5"
		},
		{
			regex: "Shoot_([12])",
			model: "Shoot $1"
		},
		{
			regex: "Ibiza_F2",
			model: "Ibiza F2"
		},
		{
			regex: "(X5max(?:[_ ]PRO)?)",
			model: "$1"
		},
		{
			regex: "(?:DOOGEE[ _-])?(BIGBOY|COLLO[23]?|DAGGER|DISCOVERY2?|FIND|HOTWIND|LATTE|MAX|MINT|MOON|PIXELS|RAINBOX|TURBO|VALENCIA|Valencia2_Y100pro|VOYAGER2?|TITANS2?)[ -_](DG[0-9]+C?)(?:[);/ ]|$)",
			model: "$1 $2"
		},
		{
			regex: "DOOGEE[ _-]([^);/]+) Build",
			model: "$1"
		},
		{
			regex: "DOOGEE[ _-]([^);/]+)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Y9Plus(?:[);/ ]|$)",
			model: "Y9 Plus"
		}
	]
};
var Doov = {
	regex: "(?:Doov-)?Doov[ _]",
	device: "smartphone",
	models: [
		{
			regex: "(?:Doov-)?Doov[ _]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "(?:Doov-)?Doov[ _]([^);/]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Dopod = {
	regex: "Dopod(?: )?([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Doro = {
	regex: "Doro",
	device: "smartphone",
	models: [
		{
			regex: "Doro[ _-]?([^;/)]+) Build",
			model: "$1"
		},
		{
			regex: "Doro[ _-]([0-9a-z]+)",
			model: "$1"
		}
	]
};
var DNS = {
	regex: "(?:DNS|AirTab)[ _\\-]([^;/)]+)|(?:S4505M|S4004M|SD01M)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:DNS[_ ])?(S4505M|S4004M|SD01M|S4502|S4003|S4003)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "AirTab[ _\\-]([^;/]+)(?: Build|[);])",
			model: "AirTab $1",
			device: "tablet"
		},
		{
			regex: "DNS[ _\\-]([^;/]+)(?: Build|[);])",
			model: "$1"
		}
	]
};
var Easypix = {
	regex: "EasyPad|EasyPhone",
	device: "smartphone",
	models: [
		{
			regex: "(EasyPhone[^/;]+) Build",
			model: "$1"
		},
		{
			regex: "EasyPad ([^/;)]+)(?: Build|[;)])",
			model: "EasyPad $1",
			device: "tablet"
		}
	]
};
var EBEST = {
	regex: "EBEST",
	device: "smartphone",
	models: [
		{
			regex: "EBEST[ _-]?([^;/)]+) Build",
			model: "$1"
		},
		{
			regex: "EBEST[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var ECS = {
	regex: "(?:TA10CA3|TM105A?|TR10[CR]S1)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "TA10CA3(?:[);/ ]|$)",
			model: "TA10CA3"
		},
		{
			regex: "(TR10[CR]S1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "TM105A(?:[);/ ]|$)",
			model: "TM105A"
		},
		{
			regex: "TM105(?:[);/ ]|$)",
			model: "TM105"
		}
	]
};
var EE = {
	regex: "Hawk_from_EE",
	device: "smartphone",
	models: [
		{
			regex: "Hawk_from_EE",
			model: "Hawk"
		}
	]
};
var EKT = {
	regex: "EK-(?:5040|5336|5540|5937|6020|8680|MII|T7020)",
	device: "tablet",
	models: [
		{
			regex: "EK-(MII|T7020)",
			model: "EK-$1"
		},
		{
			regex: "EK-(5040|5336|5540|5937|6020|8680)",
			device: "smartphone",
			model: "EK-$1"
		}
	]
};
var Elephone = {
	regex: "Elephone|P6000( ?Pro| ?Plus|\\+| ?02| 5.0 01)?",
	device: "smartphone",
	models: [
		{
			regex: "Elephone Trunk(?:[);/ ]|$)",
			model: "Trunk"
		},
		{
			regex: "P6000(\\+| ?Plus)(?:[);/ ]|$)",
			model: "P6000 Plus"
		},
		{
			regex: "P6000 02(?:[);/ ]|$)",
			model: "P6000 02"
		},
		{
			regex: "P6000 5.0 01(?:[);/ ]|$)",
			model: "P6000 01"
		},
		{
			regex: "P6000 ?Pro(?:[);/ ]|$)",
			model: "P6000 Pro"
		},
		{
			regex: "(?:Elephone[ _])?(P[768]000|S2)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Elephone[ _\\-]([^/;]+)(?: Build|[;)])",
			model: "$1"
		}
	]
};
var Element = {
	regex: "AFTRS",
	model: "Element 4K (2017)",
	device: "tv"
};
var Elenberg = {
	regex: "(TAB(?:101|728)[ _]3G|TAB7(?:[03]8|16|40|3[30]))(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Ericy = {
	regex: "Ericy-([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Essential = {
	regex: "PH-1[ )]",
	device: "smartphone",
	models: [
		{
			regex: "PH-1[ )]",
			model: "PH-1"
		}
	]
};
var Evercoss = {
	regex: "EVERCOSS[ _]|(A75A\\*|U50A_PLUS|M50 STAR|A75 MAX)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "A75A\\*(?:[);/ ]|$)",
			model: "A75A Star"
		},
		{
			regex: "A75 MAX*(?:[);/ ]|$)",
			model: "A75 Max"
		},
		{
			regex: "U50A_PLUS(?:[);/ ]|$)",
			model: "U50A Plus"
		},
		{
			regex: "M50 STAR(?:[);/ ]|$)",
			model: "M50 Star"
		},
		{
			regex: "EVERCOSS[ _](A7[BRLZ]|A65|A74A|A5Z)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Eurostar = {
	regex: "(ET7002C-H12|Onyx-[13]S)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Onyx-([13]S)(?:[);/ ]|$)",
			model: "Onyx $1"
		},
		{
			regex: "ET7002C-H12(?:[);/ ]|$)",
			model: "ePad 4S",
			device: "tablet"
		}
	]
};
var Eton = {
	regex: "Eton",
	device: "smartphone",
	models: [
		{
			regex: "Eton[ _-]?([^;/)]+) Build",
			model: "$1"
		},
		{
			regex: "Eton[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Essentielb$1 = {
	regex: "(?:Wooze[_ ]?(?:I55?|I45|X?L)|HEYOU(?:[135]|30))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "HEYOU([135]|30)(?:[);/ ]|$)",
			model: "HEYou $1"
		},
		{
			regex: "Wooze[_ ]?((?:I55?|I45|X?L))(?:[);/ ]|$)",
			model: "Wooze $1"
		}
	]
};
var Facebook = {
	regex: "PortalTV",
	device: "tv",
	model: "Portal TV"
};
var Rikomagic = {
	regex: "MK(80[28][^/;]*) Build",
	device: "tv",
	model: "MK$1"
};
var Rinno = {
	regex: "Rinno (R(?:400|505))",
	device: "smartphone",
	model: "$1"
};
var Riviera = {
	regex: "RIVIERA ",
	device: "smartphone",
	models: [
		{
			regex: "F23",
			model: "F23"
		}
	]
};
var Senseit = {
	regex: "SENSEIT[ _]?([^;/)]+)( Build|\\))",
	device: "smartphone",
	model: "$1"
};
var Sony$3 = {
	regex: "Sony(?: ?Ericsson)?|SGP|Xperia|(?:[4-9]0[12])SO|C1[569]0[45]|C2[01]0[45]|C230[45]|C530[236]|C550[23]|C6[56]0[236]|C6616|C68(?:0[26]|[34]3)|C69(?:0[236]|16|43)|D200[45]|D21(?:0[45]|14)|D22(?:0[236]|12|43)|D230[2356]|D240[36]|D25(?:02|33)|D510[236]|D530[36]|D5316|D5322|D5503|D58[03]3|D65(?:0[23]|43|63)|D66[03458]3|D66[14]6|D6708|E(?:20[0345]3|2006|210[45]|2115|2124|230[36]|2312|23[356]3|530[36]|53[3456]3|5506|55[356]3|56[46305][36]|58[02]3|65[35]3|66[0358]3|68[358]3)|I[34]312|I4332|F311[12356]|F331[13]|F321[12356]|F5[13]21|F5122|F813[12]|F833[12]|G312[135]|G311[26]|G322[136]|G3212|G331[123]|G3412|G3416|G342[136]|G823[12]|G834[123]|G8[14]4[12]|H(?:3113|3123|3133|3213|3223|3311|3321|4113|4133|4213|4233|4311|4331|4413|4433|82[167]6|83[12]4|8416|9436)|(?:WT|LT|SO|ST|SK|MK)[0-9]+[a-z]+[0-9]*(?: Build|\\))|X?L39H|XM50[ht]|W960|portalmmm/2\\.0 K|S3[69]h|SOG01|SOL2[2346]|SOV3[1-9]|SOV4[0-3]|X10[ia]v?|E1[05][ai]v?|MT[0-9]{2}[a-z]? Build|SO-0(?:[12]C|[345]D|[234]E|[1-5]F|[1-5]G|[1-4]H|[1-4]J|[1-5]K|1M|[1-3]L)|R800[aix]|J3173|J82[17]0|J9110|J92[16]0|J81[17]0|I[34]113|I3[12]23|I42[19]3|H9493|H8296|H8166|H4493|G2299|LiveWithWalkman|BRAVIA|SGP771|E3 Dual|A001SO|I4193|E6508|SOT31|SO-[45]1A|SO-52A|XQ-A[DT]51|XQ-A[TU]42|XQ-AS[67]2|XQ-A[TSU]52|SOL25|SOG02|A002SO|NW-(A100|Z1000)Series|J3273",
	device: "smartphone",
	models: [
		{
			regex: "(?:Sony(?:Ericsson)?)?E10[ai]v?",
			model: "Xperia X10 mini",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?U20",
			model: "Xperia X10 mini pro",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E15[ai]v?",
			model: "Xperia X8",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(LT15[ai]?v?|SO-01C)",
			model: "Xperia arc",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT18[ai]v?",
			model: "Xperia arc S",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?MT11",
			model: "Xperia neo V",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?MT15",
			model: "Xperia neo",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?MT27",
			model: "Xperia Sola",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?MK16[ai]",
			model: "Xperia pro",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST15[ai]",
			model: "Xperia mini",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST17[ai]",
			model: "Xperia active",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SO-02L",
			model: "Xperia Ace",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST18[ai]",
			model: "Xperia ray",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SK17[ai]?",
			model: "Xperia mini pro",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?X10[ai]v?",
			model: "Xperia X10",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)M1",
			model: "Aspen",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?R800",
			model: "Xperia PLAY",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?WT19|LiveWithWalkman",
			model: "Live with Walkman",
			brand: "Sony Ericsson"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?CK13i",
			model: "txt",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?CK15[ai]",
			model: "txt pro",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F100i",
			model: "Jalou",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?J105",
			model: "Naite",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?J108",
			model: "Cedar",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?J10",
			model: "Elm",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?J20",
			model: "Hazel",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?U10",
			model: "Aino",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?U100",
			model: "Yari",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?U1",
			model: "Satio",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?U5",
			model: "Vivaz",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?U8",
			model: "Vivaz pro",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?W20",
			model: "Zylo",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?W100",
			model: "Spiro",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?W150",
			model: "Yendo",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?W960",
			model: "W960",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?WT13",
			model: "Mix Walkman",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "SO-04F",
			model: "Xperia A2"
		},
		{
			regex: "G2299",
			model: "Xperia R1 Plus"
		},
		{
			regex: "SO-04G",
			model: "Xperia A4"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?I(?:4113|31[12]3)",
			model: "Xperia 10"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?J3173(?:[);/ ]|$)",
			model: "Xperia Ace"
		},
		{
			regex: "(?:A001SO|XQ-A[TU]52|XQ-AU42|SO-41A|SOV43)(?:[);/ ]|$)",
			model: "Xperia 10 II"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?I(?:42[19]3|3223)",
			model: "Xperia 10 Plus"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?I4193",
			model: "Xperia 10 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:J(?:9110|81[17]0)|SOV40|SO-03L|802SO)",
			model: "Xperia 1"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:SOG01|SO-51A|XQ-AT42|XQ-AT51)(?:[);/ ]|$)",
			model: "Xperia 1 II"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT22i|Xperia P",
			model: "Xperia P"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT25i|Xperia V",
			model: "Xperia V"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?J92[16]0",
			model: "Xperia 5 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:J82[17]0|SO-01M|SOV41|901SO)",
			model: "Xperia 5"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:SOG02|A002SO|XQ-AS[567]2|SO-52A)",
			model: "Xperia 5 II"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:SOV42|902SO)",
			model: "Xperia 8"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?J3273",
			model: "Xperia 8 Lite"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT26ii",
			model: "Xperia SL"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT26i|Xperia S(?:[);/ ]|$)",
			model: "Xperia S"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SO-02C",
			model: "Xperia arco"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SO-03D",
			model: "Xperia arco HD"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT26w",
			model: "Xperia arco S"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT28[aih]",
			model: "Xperia ion"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT29i|Xperia TX(?:[);/ ]|$)",
			model: "Xperia TX"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT30a",
			model: "Xperia T LTE"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?LT30p",
			model: "Xperia T"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST21[ia]2",
			model: "Xperia tipo dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST21[ia]",
			model: "Xperia tipo"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST23[ia]",
			model: "Xperia miro"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST25[ia]",
			model: "Xperia U"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SOL22",
			model: "Xperia UL"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST26[ia]",
			model: "Xperia J"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?ST27[ia]",
			model: "Xperia go"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C150[45]",
			model: "Xperia E"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C160[45]",
			model: "Xperia E Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:E210[45]|E2115|E2124)",
			model: "Xperia E4"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E20[05]3|E2006",
			model: "Xperia E4G"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C190[45]",
			model: "Xperia M"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C200[45]",
			model: "Xperia M Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C210[45]|S36h",
			model: "Xperia L"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C230[45]|S39h",
			model: "Xperia C"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C530[236]|Xperia SP(?:[);/ ]|$)",
			model: "Xperia SP"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C550[23]",
			model: "Xperia ZR"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?C650[236]|Xperia ZL(?:[);/ ]|$)",
			model: "Xperia ZL"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SOL25(?:[);/ ]|$)",
			model: "Xperia ZL2"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:C66(?:0[236]|16)|SO-02E)",
			model: "Xperia Z"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:C68(?:0[26]|[34]3)|XL39H|SOL24)|Xperia Z Ultra(?:[);/ ]|$)",
			device: "phablet",
			model: "Xperia Z Ultra"
		},
		{
			regex: "Xperia Z(?:[);/ ]|$)",
			model: "Xperia Z"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D200[45]",
			model: "Xperia E1"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D21(?:0[45]|14)",
			model: "Xperia E1 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D22(?:0[236]|43)",
			model: "Xperia E3"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D2212|E3 Dual",
			model: "Xperia E3 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E20[34]3",
			model: "Xperia E4g Dual"
		},
		{
			regex: "H33[12]1",
			model: "Xperia L2"
		},
		{
			regex: "H43[13]1",
			model: "Xperia L2 Dual"
		},
		{
			regex: "I3312",
			model: "Xperia L3"
		},
		{
			regex: "I43[13]2",
			model: "Xperia L3 Dual"
		},
		{
			regex: "XQ-AD51",
			model: "Xperia L4"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D2302",
			model: "Xperia M2 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D230[356]",
			model: "Xperia M2"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D240[36]",
			model: "Xperia M2 Aqua"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:E230[36]|E23[35]3)",
			model: "Xperia M4 Aqua"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:E2312|E2363)",
			model: "Xperia M4 Aqua Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E56[05][36]",
			model: "Xperia M5"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E56[436]3",
			model: "Xperia M5 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D2502",
			model: "Xperia C3 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D2533",
			model: "Xperia C3"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E53[05]3|E5306",
			model: "Xperia C4"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E53[0346]3",
			model: "Xperia C4 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E5506|E5553",
			model: "Xperia C5 Ultra"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E55[36]3",
			model: "Xperia C5 Ultra Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D510[236]",
			model: "Xperia T3"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:D530[36]|D5316|XM50[ht])",
			model: "Xperia T2 Ultra",
			device: "phablet"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D5322",
			model: "Xperia T2 Ultra Dual",
			device: "phablet"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?D5503|Xperia Z1 Compact",
			model: "Xperia Z1 Compact"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:C69(?:0[236]|16|43)|SOL23|L39H|SO-0[12]F)|Xperia Z1(?:[);/ ]|$)",
			model: "Xperia Z1"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:D58[03]3|SO-02G)|Xperia Z3 Compact(?:[);/ ]|$)",
			model: "Xperia Z3 Compact"
		},
		{
			regex: "Xperia Z2 Tablet Wifi",
			model: "Xperia Z2 Tablet WiFi",
			device: "tablet"
		},
		{
			regex: "SGP561",
			model: "Xperia Z2 Tablet",
			device: "tablet"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:D65(?:0[23]|43)|SO-03F)|Xperia Z2(?:[);/ ]|$)",
			model: "Xperia Z2"
		},
		{
			regex: "D6563",
			model: "Xperia Z2a"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:D66[045]3|D66[14]6|SO-01G|SOL26|401SO)|Xperia Z3(?:[);/ ]|$)",
			model: "Xperia Z3"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:D6633|D6683)",
			model: "Xperia Z3 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:E65[35]3)",
			model: "Xperia Z3+"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:D6708)",
			model: "Xperia Z3v"
		},
		{
			regex: "SOV31|402SO|SO-03G",
			model: "Xperia Z4"
		},
		{
			regex: "E6508",
			model: "Xperia Z4v"
		},
		{
			regex: "SGP771|SOT31|SO-05G",
			model: "Xperia Z4",
			device: "tablet"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:E58[02]3|SO-02H)",
			model: "Xperia Z5 Compact"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:E66[05]3|SOV32|501SO|SO-01H)",
			model: "Xperia Z5"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E66[38]3",
			model: "Xperia Z5 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:E68[58]3|SO-03H)",
			model: "Xperia Z5 Premium"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?E6833",
			model: "Xperia Z5 Premium Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F311[135]",
			model: "Xperia XA"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F311[26]",
			model: "Xperia XA Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F321[135]",
			model: "Xperia XA Ultra"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F321[26]",
			model: "Xperia XA Ultra Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F833[12]|SOV34|601SO|SO-01J",
			model: "Xperia XZ"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:701SO|SOV36|G834[123]|SO-01K)",
			model: "Xperia XZ1"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G8441|SO-02K",
			model: "Xperia XZ1 Compact"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F331[13]",
			model: "Xperia E5"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G312[135]|G311[26]",
			model: "Xperia XA1"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G341[26]|G342[13]",
			model: "Xperia XA1 Plus"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G3426",
			model: "Xperia XA1 Plus Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G322[136]|G3212",
			model: "Xperia XA1 Ultra"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?H31[123]3",
			model: "Xperia XA2"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?H41[13]3",
			model: "Xperia XA2 Dual"
		},
		{
			regex: "H44[19]3",
			model: "Xperia XA2 Plus Dual"
		},
		{
			regex: "H4433",
			model: "H4433"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?H(?:3213|3223|4213|4233)",
			model: "Xperia XA2 Ultra"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G823[12]|SOV35|602SO|SO-03J",
			model: "Xperia XZs"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G814[12]|SO-04[JK]",
			model: "Xperia XZ Premium"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:H83[12]4|H82[17]6|SOV37|SO-03K|H8296|702SO)",
			model: "Xperia XZ2"
		},
		{
			regex: "H8266",
			model: "Xperia XZ2 Dual"
		},
		{
			regex: "SO-05K",
			model: "Xperia XZ2 Compact"
		},
		{
			regex: "(?:H8166|SOV38)(?:[);/ ]|$)",
			model: "Xperia XZ2 Premium Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:H(8416|9436|9493)|SO-01L|SOV39|801SO)",
			model: "Xperia XZ3"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G331[13]",
			model: "Xperia L1"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?G3312",
			model: "Xperia L1 Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SO-04E",
			model: "Xperia A"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SO-04D",
			model: "Xperia GX"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?SO-05D",
			model: "Xperia SX"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F5121",
			model: "Xperia X"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F5122",
			model: "Xperia X Dual"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F5321|SO-02J",
			model: "Xperia X Compact"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?(?:F8131|502SO|SOV33|SO-04H)",
			model: "Xperia X Performance"
		},
		{
			regex: "(?:Sony(?:Ericsson)?)?F8132",
			model: "Xperia X Performance Dual"
		},
		{
			regex: "SGP(?:311|312|321)(?:[);/ ]|$)|SO-03E",
			model: "Xperia Tablet Z",
			device: "tablet"
		},
		{
			regex: "SGP712(?:[);/ ]|$)",
			model: "Xperia Tablet Z4",
			device: "tablet"
		},
		{
			regex: "SGP(?:511|512|521)(?:[);/ ]|$)|SO-05F",
			model: "Xperia Tablet Z2",
			device: "tablet"
		},
		{
			regex: "SGP(?:6[124]1|612)(?:[);/ ]|$)",
			model: "Xperia Tablet Z3 Compact",
			device: "tablet"
		},
		{
			regex: "SGPT(?:12|121|122|123|13|131|132|133)(?:[);/ ]|$)",
			model: "Xperia Tablet S",
			device: "tablet"
		},
		{
			regex: "(?:BRAVIA )(2K GB ATV3|4K UR2|4K GB ATV3|4K GB|4K 2015|2015)(?:[);/ ]|$)",
			model: "Bravia $1",
			device: "tv"
		},
		{
			regex: "NW-A100Series",
			model: "Walkman A100",
			device: "portable media player"
		},
		{
			regex: "NW-Z1000Series",
			model: "Walkman Z1000",
			device: "portable media player"
		},
		{
			regex: "SonyBDP|SonyDBV",
			model: "Blu-ray Player",
			device: "tv"
		},
		{
			regex: "(?:Sony-)?(KDL?-?[0-9a-z]+)",
			model: "$1",
			device: "tv"
		},
		{
			regex: "Opera TV Store.*(?:Sony-)([0-9a-z\\-_]+)",
			model: "$1",
			device: "tv"
		},
		{
			regex: "((?:WT|SO|ST|SK|MK)[0-9]+[a-z]*[0-9]*)(?: Build|\\))",
			model: "$1",
			brand: "Sony Ericsson"
		},
		{
			regex: "(MT[0-9]{2}[a-z]?)(?:[);/ ]|$)",
			model: "$1",
			brand: "Sony Ericsson"
		},
		{
			regex: "portalmmm/2.0 K([a-z0-9]+)",
			model: "K$1",
			brand: "Sony Ericsson"
		},
		{
			regex: "Sony ?Ericsson?([^/;]*) Build",
			model: "$1",
			brand: "Sony Ericsson"
		},
		{
			regex: "SonyEricsson([CGJKPTWZ][0-9]+[a-z]+)/",
			model: "$1",
			brand: "Sony Ericsson",
			device: "feature phone"
		},
		{
			regex: "Sony ?Ericsson ?([a-z0-9\\-]+)",
			model: "$1",
			brand: "Sony Ericsson"
		},
		{
			regex: "Sony (Tablet[^/;]*) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(SGP[^/;]*) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Xperia ([^/;]*Tablet[^/;]*) Build",
			model: "Xperia $1",
			device: "tablet"
		},
		{
			regex: "Xperia ([^;/]+) Build",
			model: "Xperia $1"
		},
		{
			regex: "Sony[ -]?([^/;]*) Build",
			model: "$1"
		},
		{
			regex: "Sony[ -]?([a-z0-9\\-]+)",
			model: "$1"
		}
	]
};
var Ergo = {
	regex: "ERGO|(V550[_ ]Vision|B502 Basic|B504[_ ]Unit|A502[_ ]Aurum|A503[ _]Optima|Prime B400|A551 Sky 4G|A553 Power|A555 Universe|Force F500|GoTab GBT9|GoTab Gti8|F501_Magic|V551[ _]Aura|V540_Level|V570_BIG_BEN|B506[_ ]INTRO|A503-Optima|B505_Unit_4G)",
	device: "smartphone",
	models: [
		{
			regex: "F501_Magic",
			model: "F501 Magic"
		},
		{
			regex: "B502 Basic",
			model: "B502 Basic"
		},
		{
			regex: "A503-Optima",
			model: "A503 Optima"
		},
		{
			regex: "B506[_ ]INTRO",
			model: "B506 Intro"
		},
		{
			regex: "V550[_ ]Vision",
			model: "V550 Vision"
		},
		{
			regex: "B504[_ ]Unit",
			model: "B504 Unit"
		},
		{
			regex: "B505_Unit_4G",
			model: "B505 Unit 4G"
		},
		{
			regex: "V551[ _]Aura",
			model: "V551 Aura"
		},
		{
			regex: "V540_Level",
			model: "V540 Level"
		},
		{
			regex: "V570_BIG_BEN",
			model: "V570 Big Ben"
		},
		{
			regex: "Ergo F502",
			model: "F502 Platinum"
		},
		{
			regex: "(ERGO_)?A500[ _]Best",
			model: "A500 Best"
		},
		{
			regex: "(ERGO_)?A550[ _]Maxx",
			model: "A550 Maxx"
		},
		{
			regex: "Prime B400",
			model: "Prime B400"
		},
		{
			regex: "A502[_ ]Aurum",
			model: "A502 Aurum"
		},
		{
			regex: "A503[ _]Optima",
			model: "A503 Optima"
		},
		{
			regex: "A551 Sky 4G",
			model: "A551 Sky 4G"
		},
		{
			regex: "A553 Power",
			model: "A553 Power"
		},
		{
			regex: "A555 Universe",
			model: "A555 Universe"
		},
		{
			regex: "ERGO[_ ]A556",
			model: "A556"
		},
		{
			regex: "ERGO[_ ]F500",
			model: "F500"
		},
		{
			regex: "ERGO[_ ]F501",
			model: "F501"
		},
		{
			regex: "B500 First",
			model: "B500 First"
		},
		{
			regex: "Force F500",
			model: "Force F500"
		},
		{
			regex: "GoTab GBT9",
			model: "GoTab GBT9",
			device: "tablet"
		},
		{
			regex: "GoTab Gti8",
			model: "GoTab GTi8",
			device: "tablet"
		},
		{
			regex: "ERGO[_ ]Tab[ _]Crystal[ _]Lite",
			model: "Tab Crystal Lite",
			device: "tablet"
		},
		{
			regex: "ERGO[_ ]Tab[ _]Hero[ _]II",
			model: "Tab Hero II",
			device: "tablet"
		},
		{
			regex: "ERGO[_ ](B700)",
			model: "Tab $1",
			device: "tablet"
		},
		{
			regex: "ERGO SmartBox SX",
			model: "SmartBox SX",
			device: "tv"
		}
	]
};
var Ericsson = {
	regex: "(?:Ericsson(?:/ )?[a-z0-9]+)|(?:R380 2.0 WAP1.1)",
	device: "feature phone",
	models: [
		{
			regex: "Ericsson(?:/ )?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "R380 2.0 WAP1.1",
			model: "R380"
		}
	]
};
var Energizer = {
	regex: "PowerMax|ENERGY[_ ]?(?:[45]00|400S|S[56]00|E12|E5[02]0S?)(?:[_ ](?:LTE|EU))?",
	device: "smartphone",
	models: [
		{
			regex: "PowerMax(P[0-9]+S?)",
			model: "Power Max $1"
		},
		{
			regex: "ENERGY[_ ]([45]00|E520)[_ ]LTE",
			model: "Energy $1 LTE"
		},
		{
			regex: "ENERGY[_ ]400S",
			model: "Energy 400S"
		},
		{
			regex: "ENERGY400",
			model: "Energy 400"
		},
		{
			regex: "ENERGY[_ ]S([56]00)",
			model: "Energy S$1"
		},
		{
			regex: "ENERGY[_ ]?(E500S|E500|E12)",
			model: "Energy $1"
		}
	]
};
var eTouch = {
	regex: "eTouch ?([a-z0-9]+)",
	device: "smartphone",
	model: "$1"
};
var Etuline = {
	regex: "(ETL-S(?:3520|4521|5042|5084|6022)|ETL-T(?:752G|882G|9[78]0))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(ETL-S(?:[^/); ]+))",
			model: "$1"
		},
		{
			regex: "(ETL-T(?:[^/); ]+))",
			device: "tablet",
			model: "$1"
		}
	]
};
var Storex = {
	regex: "eZee[^a-z]*Tab ?([^;/]*) Build|STOREX LinkBox",
	device: "tablet",
	models: [
		{
			regex: "eZee[^a-z]*Tab ?([^;/]*) Build",
			model: "eZee'Tab$1"
		},
		{
			regex: "STOREX LinkBox",
			model: "LinkBox",
			device: "tv"
		}
	]
};
var Evertek = {
	regex: "(Ever(?:Glory|Shine|Miracle|Mellow|Classic|Trendy|Fancy|Vivid|Slim|Glow|Magic|Smart|Star)[^/;]*) Build|E70[25]0HD|E805[01]HD|E9054HD|E8050HG|E7914HG",
	device: "smartphone",
	models: [
		{
			regex: "(E70[25]0HD|E805[01]HD|E9054HD|E8050HG|E7914HG)",
			device: "tablet",
			model: "Everpad $1"
		},
		{
			regex: "(Ever(?:Glory|Shine|Miracle|Mellow|Classic|Trendy|Fancy|Vivid|Slim|Glow|Magic|Smart|Star)[^/;]*) Build",
			model: "$1"
		}
	]
};
var Evolio = {
	regex: "Evolio|M4MAGIC",
	device: "smartphone",
	models: [
		{
			regex: "M4MAGIC",
			model: "M4 Magic"
		},
		{
			regex: "Evolio_M5Pro",
			model: "M5 Pro"
		},
		{
			regex: "Evolio[ _](M6|S4 Cobalt|S5|X10|Yuppi)",
			model: "$1"
		}
	]
};
var Evolveo = {
	regex: "EVOLVEO|StrongPhone",
	device: "smartphone",
	models: [
		{
			regex: "EVOLVEO MultiMedia Box M4",
			device: "tv",
			model: "MultiMedia Box M4"
		},
		{
			regex: "Smart TV ([^;/]*) Build",
			device: "tv",
			model: "Smart TV $1"
		},
		{
			regex: "EVOLVEO StrongPhone G([248])",
			model: "StrongPhone G$1"
		},
		{
			regex: "(?:EVOLVEO[ _])?StrongPhone[ _]?Q([679])(_LTE)?",
			model: "StrongPhone Q$1$2"
		},
		{
			regex: "EVOLVEO[ _]([^;/]*) Build",
			model: "$1"
		}
	]
};
var Explay = {
	regex: "Explay|[\\w]+-EXPLAY-FIN|ActiveD[ _]|Atlant |Informer[ _][0-9]+|CinemaTV 3G|Surfer[ _][0-9\\.]|sQuad[ _][0-9\\.]|Onliner[1-3]|RioPlay|Leader|Pulsar|Infinityll|Imperium[78]|Indigo|Lagoon",
	device: "tablet",
	models: [
		{
			regex: "ActiveD[ _]7.4[ _]3G",
			model: "ActiveD 7.4 3G"
		},
		{
			regex: "Imperium([78])(?:[);/ ]|$)",
			model: "Imperium $1 3G"
		},
		{
			regex: "ActiveD[ _]8.2[ _]3G",
			model: "ActiveD 8.2 3G"
		},
		{
			regex: "CinemaTV[ _]3G",
			model: "CinemaTV 3G"
		},
		{
			regex: "Infinityll",
			model: "Infinity II"
		},
		{
			regex: "Informer[ _]([0-9]+(?:[ _]3G)?)",
			model: "Informer $1"
		},
		{
			regex: "Surfer[ _]([0-9\\.]+(?:[ _]3G)?)",
			model: "Surfer $1"
		},
		{
			regex: "sQuad[ _]([0-9\\.]+(?:[ _]3G)?)",
			model: "sQuad $1"
		},
		{
			regex: "Onliner([1-3])",
			model: "Onliner $1"
		},
		{
			regex: "Atlant(?:[);/ ]|$)",
			device: "smartphone",
			model: "Atlant"
		},
		{
			regex: "Indigo(?:[);/ ]|$)",
			device: "smartphone",
			model: "Indigo"
		},
		{
			regex: "Pulsar(?:[);/ ]|$)",
			device: "smartphone",
			model: "Pulsar"
		},
		{
			regex: "[\\w]+-EXPLAY-FIN",
			device: "feature phone",
			model: "Fin"
		},
		{
			regex: "Lagoon(?:[);/ ]|$)",
			model: "Lagoon"
		},
		{
			regex: "Explay[ _-]([^;/]+)(?: Build|[;)])",
			model: "$1"
		},
		{
			regex: "RioPlay(?:[);/ ]|$)",
			device: "smartphone",
			model: "Rio Play"
		},
		{
			regex: "Leader",
			model: "Leader"
		}
	]
};
var EvroMedia = {
	regex: "EVROMEDIA|Playpad[ _]|PLAY_PAD_PRO_XL",
	device: "tablet",
	models: [
		{
			regex: "Playpad 3G GOO",
			model: "Play Pad 3G Goo"
		},
		{
			regex: "Play Pad 3G 2Goo",
			model: "Play Pad 3G 2Goo"
		},
		{
			regex: "Play Pad PRO",
			model: "Play Pad Pro"
		},
		{
			regex: "PLAY_PAD_PRO_XL",
			model: "Play Pad Pro XL"
		},
		{
			regex: "PlayPad 3GTab XL",
			model: "Play Pad 3G Tab XL"
		}
	]
};
var EKO = {
	regex: "EKO",
	device: "smartphone",
	models: [
		{
			regex: "EKO[ _-]?([^;/)]+) Build",
			model: "$1"
		},
		{
			regex: "EKO[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Extrem = {
	regex: "Rock X9+|ROCK_X11",
	device: "smartphone",
	models: [
		{
			regex: "Rock X9+",
			model: "Rock X9+"
		},
		{
			regex: "ROCK_X11",
			model: "Rock X11"
		}
	]
};
var Ezze = {
	regex: "EZZE-|EZ(?!Browser)[a-z0-9]+",
	device: "feature phone",
	models: [
		{
			regex: "EZZE-([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "EZ([a-z0-9]+)",
			model: "EZ$1"
		}
	]
};
var Ezio = {
	regex: "EZIO-([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Forstar = {
	regex: "Amosta ?3G5",
	device: "smartphone",
	models: [
		{
			regex: "Amosta ?3G5",
			model: "Amosta 3G5"
		}
	]
};
var Foxconn = {
	regex: "InFocus M[0-9]+[a-z]?",
	device: "smartphone",
	models: [
		{
			regex: "InFocus M([0-9]+[a-z]?)",
			model: "InFocus M$1"
		}
	]
};
var Fondi = {
	regex: "Fondi[- _]([^;/)]+)|(T702|Q008B|Q010B|Q718B|Q902|T602B|T707G|T708B|T725B|T725B1|T907B)(?:\\)| Build)",
	device: "smartphone",
	models: [
		{
			regex: "(T702|T602B)",
			model: "$1"
		},
		{
			regex: "(Q008B|Q010B|Q718B|Q902|T707G|T708B|T725B|T725B1|T907B)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Fondi[- _]([^;/)]+)",
			model: "$1"
		}
	]
};
var Fairphone = {
	regex: "(FP(?:1U?|2))(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Famoco = {
	regex: "(FX[123]00)",
	device: "smartphone",
	model: "$1"
};
var FiGO = {
	regex: "ATRIUM II F55L2|TRIO F40LT|CENTRIC S50G|EPIC F50G|Gravity X55L|Orion M50L|ULTRA M50G|M405B|VIRTUE3|F55L Build",
	device: "smartphone",
	models: [
		{
			regex: "ATRIUM II F55L2",
			model: "Atrium II"
		},
		{
			regex: "(F55L)",
			model: "$1"
		},
		{
			regex: "TRIO F40LT",
			model: "Trio F40LT"
		},
		{
			regex: "EPIC F50G",
			model: "Epic F50G"
		},
		{
			regex: "(Gravity X55L|Orion M50L)",
			model: "$1"
		},
		{
			regex: "ULTRA M50G",
			model: "Prime"
		},
		{
			regex: "M405B_8GB",
			model: "Virtue II 8GB"
		},
		{
			regex: "M405B",
			model: "Virtue II"
		},
		{
			regex: "VIRTUE3",
			model: "Virtue III"
		},
		{
			regex: "CENTRIC S50G",
			model: "Centric S50G"
		}
	]
};
var FNB = {
	regex: "ConeXis (A[12]|X[12])|SP5045V",
	device: "smartphone",
	models: [
		{
			regex: "SP5045V",
			model: "SP5045V"
		},
		{
			regex: "ConeXis A1",
			model: "ConeXis A1"
		},
		{
			regex: "ConeXis A2",
			model: "ConeXis A2"
		},
		{
			regex: "ConeXis X1",
			model: "ConeXis X1"
		},
		{
			regex: "ConeXis X2",
			model: "ConeXis X2"
		}
	]
};
var Fujitsu$1 = {
	regex: "(?:F-01[FHJKLM]|F-02[EFGHLK]|F-03[DEFGKHL]|F-04[EGFHKJ]|F-05[DEFJG]|F-06[EF]|F-07[DE]|F-08D|F-09[DE]|F-10D|F-[45]1A|F-[45]2A|F-11D|F-12C|M532|FARTM933KZ|901FJ|arrows(?:RX|M03|M0[45](?:-PREMIUM)?)|801FJ|FJL2[12])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "F-51A(?:[);/ ]|$)",
			model: "Arrows 5G F-51A"
		},
		{
			regex: "F-01F(?:[);/ ]|$)",
			model: "Arrows NX F-01F"
		},
		{
			regex: "(F-01[LM]|F-06F|F-03K|F-42A)(?:[);/ ]|$)",
			model: "Easy Phone $1"
		},
		{
			regex: "F-03L(?:[);/ ]|$)",
			model: "Arrows Phone F-03L"
		},
		{
			regex: "F-01J(?:[);/ ]|$)",
			model: "Arrows NX F-01J"
		},
		{
			regex: "F-01K(?:[);/ ]|$)",
			model: "Arrows NX F-01K"
		},
		{
			regex: "F-01H(?:[);/ ]|$)",
			model: "Arrows Fit F-01H"
		},
		{
			regex: "F-02E(?:[);/ ]|$)",
			model: "Arrows X F-02E"
		},
		{
			regex: "F-02G(?:[);/ ]|$)",
			model: "Arrows NX F-02G"
		},
		{
			regex: "FJL21(?:[);/ ]|$)",
			model: "Arrows EF FJL21"
		},
		{
			regex: "FJL22(?:[);/ ]|$)",
			model: "Arrows Z FJL22"
		},
		{
			regex: "F-02H(?:[);/ ]|$)",
			model: "Arrows NX F-02H"
		},
		{
			regex: "F-52A(?:[);/ ]|$)",
			model: "Arrows NX9 F-52A"
		},
		{
			regex: "F-03D(?:[);/ ]|$)",
			model: "Arrows Kiss F-03D"
		},
		{
			regex: "F-03E(?:[);/ ]|$)",
			model: "Arrows Kiss F-03E"
		},
		{
			regex: "F-03F(?:[);/ ]|$)",
			model: "Disney Mobile F-03F"
		},
		{
			regex: "F-03H(?:[);/ ]|$)",
			model: "Arrows SV F-03H"
		},
		{
			regex: "901FJ(?:[);/ ]|$)",
			model: "Arrows J 901FJ"
		},
		{
			regex: "F-04E(?:[);/ ]|$)",
			model: "Arrows V F-04E"
		},
		{
			regex: "F-04G(?:[);/ ]|$)",
			model: "Arrows NX F-04G"
		},
		{
			regex: "F-05D(?:[);/ ]|$)",
			model: "Arrows X LTE F-05D"
		},
		{
			regex: "F-05F(?:[);/ ]|$)",
			model: "Arrows NX F-05F"
		},
		{
			regex: "F-05J(?:[);/ ]|$)",
			model: "Arrows Be F-05J"
		},
		{
			regex: "F-05G(?:[);/ ]|$)",
			model: "Arrows K-tai"
		},
		{
			regex: "F-04K(?:[);/ ]|$)",
			model: "Arrows Be F-04K"
		},
		{
			regex: "F-02L(?:[);/ ]|$)",
			model: "Arrows Be 3 F-02L"
		},
		{
			regex: "F-41A(?:[);/ ]|$)",
			model: "Arrows Be 4 F-41A"
		},
		{
			regex: "F-06E(?:[);/ ]|$)",
			model: "Arrows NX F-06E"
		},
		{
			regex: "F-07D(?:[);/ ]|$)",
			model: "Arrows μ F-07D"
		},
		{
			regex: "801FJ(?:[);/ ]|$)",
			model: "Arrows U 801FJ"
		},
		{
			regex: "F-07E(?:[);/ ]|$)",
			model: "Disney Mobile F-07E"
		},
		{
			regex: "F-08D(?:[);/ ]|$)",
			model: "Disney Mobile F-08D"
		},
		{
			regex: "F-09D(?:[);/ ]|$)",
			model: "ANTEPRIMA F-09D"
		},
		{
			regex: "F-09E(?:[);/ ]|$)",
			model: "Raku-Raku Smartphone Premium F-09E"
		},
		{
			regex: "F-10D(?:[);/ ]|$)",
			model: "Arrows X F-10D"
		},
		{
			regex: "F-11D(?:[);/ ]|$)",
			model: "Arrows Me F-11D"
		},
		{
			regex: "F-12C(?:[);/ ]|$)",
			model: "F-12C"
		},
		{
			regex: "(F-04[JF])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "arrowsM03(?:[);/ ]|$)",
			model: "Arrows M03"
		},
		{
			regex: "arrowsRX(?:[);/ ]|$)",
			model: "Arrows RX"
		},
		{
			regex: "arrowsM04-PREMIUM(?:[);/ ]|$)",
			model: "Arrows M04 Premium"
		},
		{
			regex: "arrowsM(0[45])(?:[);/ ]|$)",
			model: "Arrows M$1"
		},
		{
			regex: "(F-0[32]F|F-03G|F-04H|F-05E|F-02K)(?:[);/ ]|$)",
			model: "Arrows Tab $1",
			device: "tablet"
		},
		{
			regex: "FARTM933KZ",
			model: "Arrows Tab M504/HA4",
			device: "tablet"
		},
		{
			regex: "M532(?:[);/ ]|$)",
			model: "Stylistic",
			device: "tablet"
		}
	]
};
var Gemini = {
	regex: "(GEM[0-9]+[a-z]*)",
	device: "tablet",
	model: "$1"
};
var Geotel = {
	regex: "GEOTEL[ _]?",
	device: "smartphone",
	models: [
		{
			regex: "G1",
			model: "G1"
		},
		{
			regex: "GEOTEL[ _]?Note",
			model: "Note"
		},
		{
			regex: "GEOTEL[ _]AMIGO",
			model: "Amigo"
		}
	]
};
var Ghia = {
	regex: "GHIA|QS702|VECTOR10\\.1",
	device: "smartphone",
	models: [
		{
			regex: "QS702",
			model: "QS702"
		},
		{
			regex: "GHIA_ZEUS_3G",
			model: "Zeus 3G"
		},
		{
			regex: "GHIA_AXIS7",
			model: "Axis 7",
			device: "tablet"
		},
		{
			regex: "VECTOR10\\.1",
			model: "Vector 10.1\"",
			device: "tablet"
		}
	]
};
var Gigabyte = {
	regex: "GSmart[ _][a-z0-9 ]+(?: Build|\\))|Gigabyte-[a-z0-9]+|Simba SX1|GSmart_Classic_Lite|(?<!Eagle )Classic[_ ](?:Joy|Pro)",
	device: "smartphone",
	models: [
		{
			regex: "(GSmart[ _][a-z0-9 ]+)(?: Build|[);])",
			model: "$1"
		},
		{
			regex: "Gigabyte-([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(Classic[ _](?:Joy|Pro)|GSmart_Classic_Lite)",
			model: "$1"
		},
		{
			regex: "Simba SX1",
			model: "GSmart Simba SX1"
		}
	]
};
var Gigaset = {
	regex: "Gigaset|(?: GS80|GS1[0189]0|GS1[89]5|GS2[89]0|GS5[357]-6|GS[23]70(?:_Plus)?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Gigaset QV(1030|830)",
			model: "Gigaset QV$1",
			device: "tablet"
		},
		{
			regex: "G(S[23]70)[_ ]Plus(?:[);/ ]|$)",
			model: "G$1 Plus"
		},
		{
			regex: "GS([23]70|1[0189]0|1[89]5|2[89]0|80)(?:[);/ ]|$)",
			model: "GS$1"
		},
		{
			regex: "GS57-6",
			model: "ME Pro"
		},
		{
			regex: "GS55-6",
			model: "ME"
		},
		{
			regex: "GS53-6",
			model: "ME Pure"
		},
		{
			regex: "Gigaset ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Gigaset ([^;/)]+)(?:[);/]|$)",
			model: "$1"
		}
	]
};
var Ginzzu = {
	regex: "GINZZU[_ ]|((?:RS(?:7[14]|81|9[67])D)|S5002|(?<!Wave Pro )S5021|S5230|S50[45]0|S5120|RS(6[12]|9[45])D|S40[23]0|RS850[12]|RS9602)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "GINZZU[_ ]?(S40[17]0|S4710|ST60[14]0|ST6120)",
			model: "$1"
		},
		{
			regex: "GINZZU[_ ]?(GT-(?:1050|7105|70[1-4]0|7115|7210|[WX]831|X[78]70|7810|8[01]10|X853))",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(RS6[12]D) ULTIMATE",
			model: "$1 Ultimate"
		},
		{
			regex: "(?:GINZZU[ _])?((?:RS(?:7[14]|81|9[4-7])D)|S50[45]0|S5002|S5021|S5230|S5120|S40[23]0|RS850[12]|RS9602|RS94D)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Gionee = {
	regex: "(?:GIO-)?GIONEE[ _-]?[a-z0-9]+|(?:Dream_D1|V188S?|GN[0-9]{3,4}[a-z]?)(?:[);/ ]|$)|F103(?: Pro)?(?: Build|\\))|P5 mini Build|P7 Max Build|(M7 Power|F106L|F100A|F103S|F103 Pro)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "GN810(?:[);/ ]|$)",
			model: "GN810",
			device: "phablet"
		},
		{
			regex: "GN([0-9]{3,4}[a-z]?)(?:[);/ ]|$)",
			model: "GN$1"
		},
		{
			regex: "(F106L|F100A|V188S|V188|F103S)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "M7 Power(?:[);/ ]|$)",
			model: "M7 Power"
		},
		{
			regex: "P5 mini Build",
			model: "P5 mini"
		},
		{
			regex: "P7 Max Build",
			model: "P7 Max"
		},
		{
			regex: "(S11) Lite(?:[);/ ]|$)",
			model: "$1 Lite"
		},
		{
			regex: "F103( Pro)?( BUILD|\\))",
			model: "F103$1"
		},
		{
			regex: "(?:(?:GIO-)?GIONEE[ _-])?Dream_D1(?:[);/ ]|$)",
			model: "Dream D1"
		},
		{
			regex: "(?:GIO-)?GIONEE[ _-]([a-z0-9_-]+).*Android",
			model: "$1"
		},
		{
			regex: "Android.*(?:GIO-)?GIONEE[ _-]([a-z0-9_-]+)",
			model: "$1"
		},
		{
			regex: "(?:GIO-)?GIONEE[ _-]?([a-z0-9]+)",
			model: "$1",
			device: "feature phone"
		}
	]
};
var Grape = {
	regex: "(?:Grape[ _])?GTM-5([^;/]+) Build",
	device: "smartphone",
	model: "GTM-5$1"
};
var Vizio = {
	regex: "Vizio|VAP430|VTAB1008",
	device: "tv",
	models: [
		{
			regex: "VAP430",
			model: "VAP430"
		},
		{
			regex: "VTAB1008",
			device: "tablet",
			model: "VTAB1008"
		}
	]
};
var GOCLEVER = {
	regex: "GOCLEVER|QUANTUM_[0-9]{3}|QUANTUM [0-9]{1}|QUANTUM 700N|Quantum2 500|QUANTUM_(1010N|1010M|900)|ARIES|INSIGNIA|ORION_|ELIPSO|LIBRA[ _]97",
	device: "smartphone",
	models: [
		{
			regex: "QUANTUM_(1010N|1010M|900)",
			model: "QUANTUM $1",
			device: "tablet"
		},
		{
			regex: "INSIGNIA_(785_PRO|1010M|800M)",
			model: "INSIGNIA $1",
			device: "tablet"
		},
		{
			regex: "(ORION|ARIES|ELIPSO)[_ ](71|101|102)",
			model: "$1 $2",
			device: "tablet"
		},
		{
			regex: "TQ700N",
			model: "QUANTUM 700N",
			device: "tablet"
		},
		{
			regex: "Quantum2 500",
			model: "Quantum 2 500"
		},
		{
			regex: "((?:QUANTUM|ARIES|INSIGNIA|ORION|ELIPSO)[ _-]?[^;/]+)(?: Build|\\))",
			model: "$1"
		},
		{
			regex: "GOCLEVER[ _-]TAB[ _-]?([^;/]+) Build",
			model: "TAB $1",
			device: "tablet"
		},
		{
			regex: "GOCLEVER[ _-]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "TAB ([^;/)]+) Build/GOCLEVER",
			model: "TAB $1",
			device: "tablet"
		},
		{
			regex: "([^;/)]+) Build/GOCLEVER",
			model: "$1"
		},
		{
			regex: "GOCLEVER[ _-]?TAB[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "TAB $1",
			device: "tablet"
		},
		{
			regex: "GOCLEVER[ _-]?([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		},
		{
			regex: "LIBRA[ _]97",
			model: "Libra 97",
			device: "tablet"
		}
	]
};
var GoMobile = {
	regex: "GO Onyx|GO[0-9]{3,4}",
	device: "smartphone",
	models: [
		{
			regex: "GO Onyx",
			model: "Go Onyx"
		},
		{
			regex: "GO([0-9]{3,4})",
			model: "Go$1"
		}
	]
};
var Goly = {
	regex: "Goly[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "Goly[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Goly[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Google = {
	regex: "Nexus|GoogleTV|Glass(?<!Browser)|CrKey[^a-z0-9]|Pixel(?: Build|\\))|Pixel (?:XL|C|[2-5]|[2-4] XL)|Google 2XL|G011A",
	device: "smartphone",
	models: [
		{
			regex: "Glass",
			model: "Glass"
		},
		{
			regex: "Galaxy Nexus",
			model: "Galaxy Nexus"
		},
		{
			regex: "(Nexus (?:S|4|5X?|One))",
			model: "$1"
		},
		{
			regex: "(Nexus (?:6P?))",
			device: "phablet",
			model: "$1"
		},
		{
			regex: "(Nexus (?:7|9|10))",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "CrKey[^a-z0-9]",
			model: "Chromecast",
			device: "tv"
		},
		{
			regex: "GoogleTV",
			device: "tv",
			model: "GoogleTV"
		},
		{
			regex: "Pixel(?: Build|\\))",
			model: "Pixel"
		},
		{
			regex: "Pixel XL",
			model: "Pixel XL"
		},
		{
			regex: "Pixel 3 XL",
			model: "Pixel 3 XL"
		},
		{
			regex: "Pixel 2 XL",
			model: "Pixel 2 XL"
		},
		{
			regex: "Pixel 3a XL",
			model: "Pixel 3a XL"
		},
		{
			regex: "Pixel 3a",
			model: "Pixel 3a"
		},
		{
			regex: "Pixel 4 XL",
			model: "Pixel 4 XL"
		},
		{
			regex: "Pixel 4a \\(5G\\)",
			model: "Pixel 4a (5G)"
		},
		{
			regex: "pixel 4a",
			model: "Pixel 4a"
		},
		{
			regex: "G011A",
			model: "Pixel 2"
		},
		{
			regex: "Google 2XL",
			model: "Pixel 2 XL"
		},
		{
			regex: "pixel ([2-5])",
			model: "Pixel $1"
		},
		{
			regex: "Pixel C",
			device: "tablet",
			model: "Pixel C"
		}
	]
};
var Gradiente = {
	regex: "GRADIENTE",
	device: "feature phone",
	models: [
		{
			regex: "GRADIENTE-([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "GRADIENTE ([a-z0-9\\-]+)",
			model: "$1"
		}
	]
};
var Grundig$1 = {
	regex: "GR?-TB[0-9]+[a-z]*|GRUNDIG|portalmmm/2\\.0 G|AFTEU(?:011|014|FF014)",
	device: "tv",
	models: [
		{
			regex: "(GR?-TB[0-9]+[a-z]*)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "GRUNDIG ([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/2\\.0 G([a-z0-9]+)",
			model: "G$1"
		},
		{
			regex: "AFTEU014",
			model: "Vision 7 4K (2019)"
		},
		{
			regex: "AFTEUFF014",
			model: "OLED 4K (2019)"
		},
		{
			regex: "AFTEU011",
			model: "Vision 6 HD (2019)"
		}
	]
};
var Hafury = {
	regex: "HAFURY",
	device: "smartphone",
	models: [
		{
			regex: "(MIX|UMAX)",
			model: "$1"
		}
	]
};
var Haier$1 = {
	regex: "Haier|I6_Infinity|Titan[ _]T[135]|(?:HW-)?W(?:71[67]|757|860|970)(?:[);/ ]|$)|S5 Silk|(?:HM-)?(N505|N700|G(?:152|303|353|552|70[01])?-FL|HM-N501-FL|G(?:303)?-W|I(?:557)?-FL)|(?:PAD[ _](?:D71|G781|d85))|A2_Lite_NFC",
	device: "smartphone",
	models: [
		{
			regex: "A2_Lite_NFC",
			model: "Alpha A2 Lite NFC"
		},
		{
			regex: "HM-N505-FL",
			model: "I8"
		},
		{
			regex: "S5 Silk",
			model: "S5 Silk"
		},
		{
			regex: "HM-N700-FL",
			model: "L7"
		},
		{
			regex: "HM-N501-FL",
			model: "L56"
		},
		{
			regex: "(?:HM-)?(G(?:152|353|552|70[01])|G(?:303)|I(?:557))",
			model: "$1"
		},
		{
			regex: "(Titan[_ ]T[135]|I6_Infinity)",
			model: "$1"
		},
		{
			regex: "(?:HW-)?W(71[67]|757|860|970)(?:[);/ ]|$)",
			model: "W$1"
		},
		{
			regex: "PAD[ -_](D71|G781|d85)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Haier[ _\\-](H[WT]-[^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Haier[ _\\-](H[WT]-[a-z0-9_\\-]+)",
			model: "$1"
		},
		{
			regex: "Haier[ _\\-](sy[0-9]+)",
			model: "$1"
		},
		{
			regex: "Haier[ _\\-]([a-z0-9\\-]+)",
			model: "$1",
			device: "feature phone"
		}
	]
};
var HannSpree = {
	regex: "(HSG[0-9]{4})|SN97T41W|SN1AT71W\\(B\\)|SN70T51A|SN70T31?|T7-QC",
	device: "tablet",
	models: [
		{
			regex: "(HSG[0-9]{4})",
			model: "$1"
		},
		{
			regex: "SN1AT71W\\(B\\)",
			model: "SN1AT71W(B)"
		},
		{
			regex: "SN70T31",
			model: "SN70T31"
		},
		{
			regex: "SN70T3",
			model: "SN70T3"
		},
		{
			regex: "SN70T51A",
			model: "SN70T51A"
		},
		{
			regex: "SN97T41W",
			model: "SN97T41W"
		},
		{
			regex: "T7-QC",
			model: "SNAT71BUE"
		}
	]
};
var Hasee = {
	regex: "Hasee",
	device: "smartphone",
	models: [
		{
			regex: "Hasee ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Hasee ([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Hisense$1 = {
	regex: "(?:HS-)?Hisense ([^;/]+) Build|Hisense [^);/]+|HISENSE; |HS-(?:G|U|EG?|I|L|T|X)[0-9]+[a-z0-9\\-]*|E270BSA|HWCD100E|HITV300C|M470BS[AE]|EG98|E2281|EG680|I46D1G|HAT4KDTV|HLTE([237]00T|200M|203T|202N|21[023567]T|22[67]T|22[13]E|230E|310[TM]|31[16]T|500T|501N|510[TM]|7[23]0T)",
	device: "smartphone",
	models: [
		{
			regex: "E270BSA",
			device: "tablet",
			model: "Sero 7"
		},
		{
			regex: "M470BS[AE]",
			device: "tablet",
			model: "Sero 7 Pro"
		},
		{
			regex: "E2281",
			device: "tablet",
			model: "Sero 8"
		},
		{
			regex: "HLTE202N",
			model: "A5"
		},
		{
			regex: "HLTE203T",
			model: "A5 Pro CC"
		},
		{
			regex: "HLTE700T",
			model: "A6"
		},
		{
			regex: "HLTE730T",
			model: "A6L"
		},
		{
			regex: "HLTE221E",
			model: "E Max"
		},
		{
			regex: "HLTE501N",
			model: "V Plus"
		},
		{
			regex: "HLTE223E",
			model: "H30"
		},
		{
			regex: "I46D1G",
			model: "Smartfren Andromax R"
		},
		{
			regex: "EG680",
			model: "Smartfren Andromax Z"
		},
		{
			regex: "EG98",
			model: "Smartfren Andromax U2"
		},
		{
			regex: "HLTE200T(?:[);/ ]|$)",
			model: "F26"
		},
		{
			regex: "HLTE210T(?:[);/ ]|$)",
			model: "F28"
		},
		{
			regex: "HLTE215T(?:[);/ ]|$)",
			model: "F29"
		},
		{
			regex: "HLTE213T(?:[);/ ]|$)",
			model: "King Kong 4"
		},
		{
			regex: "HLTE311T(?:[);/ ]|$)",
			model: "King Kong 4 Pro"
		},
		{
			regex: "HLTE216T(?:[);/ ]|$)",
			model: "King Kong 5"
		},
		{
			regex: "HLTE316T(?:[);/ ]|$)",
			model: "King Kong 5 Pro"
		},
		{
			regex: "HLTE226T(?:[);/ ]|$)",
			model: "King Kong 6"
		},
		{
			regex: "HLTE217T(?:[);/ ]|$)",
			model: "F30S"
		},
		{
			regex: "HLTE227T(?:[);/ ]|$)",
			model: "F40"
		},
		{
			regex: "HLTE310[TM](?:[);/ ]|$)",
			model: "H18"
		},
		{
			regex: "HLTE510[TM](?:[);/ ]|$)",
			model: "H20"
		},
		{
			regex: "HLTE500T(?:[);/ ]|$)",
			model: "H11"
		},
		{
			regex: "HLTE230E(?:[);/ ]|$)",
			model: "H40 Lite"
		},
		{
			regex: "HLTE720T(?:[);/ ]|$)",
			model: "U30",
			device: "phablet"
		},
		{
			regex: "HWCD100E(?:[);/ ]|$)",
			model: "U40 Lite"
		},
		{
			regex: "(HLTE300T|HLTE200M|HLTE212T)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "HITV300C(?:[);/ ]|$)",
			model: "E9"
		},
		{
			regex: "E260T\\+(?:[);/ ]|$)",
			model: "Nana"
		},
		{
			regex: "(HS-(?:G|U|EG?|I|L|T|X)[0-9]+[a-z0-9\\-]*)",
			model: "$1"
		},
		{
			regex: "(HAT4KDTV)(?:[);/ ]|$)",
			device: "tv",
			model: "$1"
		},
		{
			regex: "(?:HS-)?Hisense ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Hisense ([^);/]+)",
			model: "$1"
		}
	]
};
var Hoffmann = {
	regex: "(HOFFMANN|Neo[_ ]A[1379]00)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Neo[_ ](A[1379]00)",
			model: "Neo $1"
		},
		{
			regex: "HOFFMANN[ _]X[-_ ](Prime|Twist|Max)",
			model: "X $1"
		}
	]
};
var Homtom = {
	regex: "Homtom|(?:HT[0-9]{1,2})(?: ?Pro)?(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Homtom[_ ])?HT ?([0-9]{1,2}(?: ?Pro)?)(?:[);/ ]|$)",
			model: "HT$1"
		},
		{
			regex: "Homtom ([^;/]+) Build",
			model: "$1"
		}
	]
};
var Hosin = {
	regex: "HOSIN[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "HOSIN[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "HOSIN[ _-]([^;/]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Hoozo = {
	regex: "(?:HOOZO[_ ](MT232|MT116|MT Pad 116 LTE|X1001)|HZ0010)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "HOOZO[_ ](MT232|MT116|MT Pad 116 LTE|X1001)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(HZ0010)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Minix = {
	regex: "NEO-(?:X8-H|U9-H|X[57]-mini|X8H-PLUS|X88-?I|X7-216A|X5-116A|X[68]|U1|Z64)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "NEO-X8-H(?:[);/ ]|$)",
			model: "NEO X8H"
		},
		{
			regex: "NEO-X([57])-mini(?:[);/ ]|$)",
			model: "NEO X$1 Mini"
		},
		{
			regex: "NEO-X8H-PLUS(?:[);/ ]|$)",
			model: "NEO X8H Plus"
		},
		{
			regex: "NEO-X88-?I(?:[);/ ]|$)",
			model: "NEO X88i"
		},
		{
			regex: "NEO-X7-216A(?:[);/ ]|$)",
			model: "NEO X7"
		},
		{
			regex: "NEO-X5-116A(?:[);/ ]|$)",
			model: "NEO X5"
		},
		{
			regex: "NEO-X([68])(?:[);/ ]|$)",
			model: "NEO X$1"
		},
		{
			regex: "NEO-U1(?:[);/ ]|$)",
			model: "NEO U1"
		},
		{
			regex: "NEO-Z64(?:[);/ ]|$)",
			model: "NEO Z64"
		},
		{
			regex: "NEO-U9-H(?:[);/ ]|$)",
			model: "NEO U9H"
		}
	]
};
var Huawei = {
	regex: "(HW-)?(?:Huawei|MediaPad T1|Ideos|Honor[ _]?|(?:(?:AGS|AGS2|ALE|ALP|AMN|ANA|ANE|ARE|ARS|ASK|ATH|ATU|AUM|BAC|BAH[23]?|BG2|BGO|B[ZK]K|BKL|BL[ALN]|BND|BTV|CA[GMNZ]|CH[CM]|CHE[12]?|CLT|CMR|COL|COR|CPN|CRO|CRR|CUN|DIG|DLI|DRA|DUA|DUB|DUK|EDI|ELE|EML|EVA|EVR|FDR|FIG|FLA|FRD|FRL|GEM|GRA|HDN|HLK|HMA|Hol|HRY|HWI|H[36]0|INE|JAT|JEF|JDN|JDN2|JKM|JMM|JSN|KII|KIW|KNT|KOB|KSA|LDN|LEO|LIO|LLD|LND|LON|LRA|LUA|LY[AO]|MAR|MHA|MRD|MYA|NCE|NEM|NEO|NXT|PAR|PCT|PIC|PLE|PLK|POT|PPA|PRA|RIO|RNE|RVL|SCC|SCL|SCM|SEA|SHT|SLA|SNE|SPN|STF|STK|TAG|TIT|TNY|TRT|VCE|VEN|VIE|VKY|VNS|VOG|VRD|VTR|WAS|YAL|G(?:527|620S|621|630|735)|Y(?:221|330|550|6[23]5))-(?:[A-Z]{0,2}[0-9]{1,4}[A-Z]{0,3}?)|H1711|U(?:8230|8500|8661|8665|8667|8800|8818|8860|9200|9508))(?:[);/ ]|$))|hi6210sft|PE-(UL00|TL[12]0|TL00M)|T1-(A21[Lw]|A23L|701u|823L)|G7-(?:L01|TL00)|HW-01K|JNY-(LX[12]|AL10)|OXF-AN[01]0|TAS-(A[LN]00|L29|TL00)|WLZ-(AL10|AN00)|NIC-LX1A|MRX-(AL09|W09)|CDY-(?:[AT]N00|AN90|NX9A)|GLK-(?:[AT]L00|LX1U)|JER-[AT]N10|ELS-(?:[AT]N[10]0|NX9|N39|N04)|AKA-(AL10|L29)|MON-(W|AL)19|BMH-AN[12]0|AQM-([AT]L[01]0|LX1)|MOA-(AL[02]0|LX9N)|NTS-AL00|ART-(?:[AT]L00[xm]|L29N?|L28)|MED-(?:[AT]L00|LX9N?)|EBG-(?:AN[01]0|TN00)|ANA-(?:[AT]N00|NX9)|BZ[AK]-W00|BZT-(W09|AL[01]0)|HDL-(AL09|W09)|HWV3[123]|HW-02L|TEL-[AT]N(?:00a?|10)|KKG-AN00|MXW-AN00|JKM-AL00[ab]|TAH-(?:N29|AN00)m|C8817D|T1-821W|d-01[JK]|d-02[HK]|KRJ-W09|HWT31|Y320-U10|Y541-U02|VAT-L19|70[14]HW|60[58]HW|NOH-(?:NX9|AN00)|TNNH-AN00|LIO-(?:[TA]L00|[LN]29|AN00)|KOB2-[LW]09|AGS3-[WL]09|DNN-LX9|NEY-NX9|LON-AL00|HLK-L41|503HW|AGR-[LW]09|PPA-LX[12]|ANG-AN00|NOP-AN00",
	device: "smartphone",
	models: [
		{
			regex: "POT-[TA]L00a(?:[);/ ]|$)",
			model: "9S"
		},
		{
			regex: "U9500(?:[);/ ]|$)",
			model: "Ascend D1"
		},
		{
			regex: "Z100-UL00(?:[);/ ]|$)",
			model: "Ascend D3"
		},
		{
			regex: "Y320-(?:U10|T00|U05)(?:[);/ ]|$)",
			model: "Ascend Y320"
		},
		{
			regex: "Y330-U05(?:[);/ ]|$)",
			model: "Ascend Y330"
		},
		{
			regex: "Y541-U02(?:[);/ ]|$)",
			model: "Ascend Y5C"
		},
		{
			regex: "U8818(?:[);/ ]|$)",
			model: "Ascend G300"
		},
		{
			regex: "G527-U081(?:[);/ ]|$)",
			model: "Ascend G527"
		},
		{
			regex: "(G620S-L0[13]|C8817D)(?:[);/ ]|$)",
			model: "Ascend G620S"
		},
		{
			regex: "G630-U251(?:[);/ ]|$)",
			model: "Ascend G630"
		},
		{
			regex: "G7-(?:L01|TL00)(?:[);/ ]|$)",
			model: "Ascend G7"
		},
		{
			regex: "P7-L10(?:[);/ ]|$)",
			model: "Ascend P7"
		},
		{
			regex: "G730-C00(?:[);/ ]|$)",
			model: "Ascend G730"
		},
		{
			regex: "U9200(?:[);/ ]|$)",
			model: "Ascend P1"
		},
		{
			regex: "H1711(?:[);/ ]|$)",
			model: "Ascend XT2"
		},
		{
			regex: "Y221-U(?:[12]2|[0345]3)(?:[);/ ]|$)",
			model: "Ascend Y221"
		},
		{
			regex: "Y550-L03(?:[);/ ]|$)",
			model: "Ascend Y550"
		},
		{
			regex: "ART-[AT]L00[xm](?:[);/ ]|$)",
			model: "Enjoy 10"
		},
		{
			regex: "STK-[AT]L00(?:[);/ ]|$)",
			model: "Enjoy 10 Plus"
		},
		{
			regex: "MED-[AT]L00(?:[);/ ]|$)",
			model: "Enjoy 10E"
		},
		{
			regex: "AQM-[AT]L00(?:[);/ ]|$)",
			model: "Enjoy 10S"
		},
		{
			regex: "TAG-[ACT]L00(?:[);/ ]|$)",
			model: "Enjoy 5S"
		},
		{
			regex: "NCE-(AL[10]0|TL10)(?:[);/ ]|$)",
			model: "Enjoy 6"
		},
		{
			regex: "DIG-(?:TL10|AL00)(?:[);/ ]|$)",
			model: "Enjoy 6S"
		},
		{
			regex: "SLA-(?:AL00|TL10)(?:[);/ ]|$)",
			model: "Enjoy 7"
		},
		{
			regex: "FIG-(?:[AT]L[10]0)(?:[);/ ]|$)",
			model: "Enjoy 7S"
		},
		{
			regex: "(?:TRT-AL00[A]?|TRT-TL10A)(?:[);/ ]|$)",
			model: "Enjoy 7 Plus"
		},
		{
			regex: "LDN-(?:AL[12]0|TL[02]0)(?:[);/ ]|$)",
			model: "Enjoy 8"
		},
		{
			regex: "FLA-AL10(?:[);/ ]|$)",
			model: "Enjoy 8 Plus"
		},
		{
			regex: "ATU-[AT]L10(?:[);/ ]|$)",
			model: "Enjoy 8e"
		},
		{
			regex: "MRD-[TA]L00(?:[);/ ]|$)",
			model: "Enjoy 9e"
		},
		{
			regex: "DVC-TN20(?:[);/ ]|$)",
			model: "Enjoy 20 Pro"
		},
		{
			regex: "U8665(?:[);/ ]|$)",
			model: "Fusion 2"
		},
		{
			regex: "MED-LX9N?(?:[);/ ]|$)",
			model: "Y6p"
		},
		{
			regex: "G735-L(?:03|12|23)(?:[);/ ]|$)",
			model: "G Play"
		},
		{
			regex: "CHC-U(?:0[13]|23)(?:[);/ ]|$)",
			model: "G Play Mini"
		},
		{
			regex: "(?:Honor_|HW-)?G621-TL00M?(?:[);/ ]|$)",
			model: "G621"
		},
		{
			regex: "DIG-L2[12](?:[);/ ]|$)",
			model: "GR3 (2017)"
		},
		{
			regex: "KII-L21(?:[);/ ]|$)",
			model: "GR5"
		},
		{
			regex: "BLL-L2[12](?:[);/ ]|$)",
			model: "GR5 (2017)"
		},
		{
			regex: "RIO-L03(?:[);/ ]|$)",
			model: "GX8"
		},
		{
			regex: "U8860(?:[);/ ]|$)",
			model: "Honor"
		},
		{
			regex: "COL-(?:AL[01]0|TL[01]0|L29)(?:[);/ ]|$)",
			model: "Honor 10"
		},
		{
			regex: "HRY-(?:[AT]L00[A]?|LX[12]|LX1MEB)(?:[);/ ]|$)",
			model: "Honor 10 Lite"
		},
		{
			regex: "HRY-LX1T(?:[);/ ]|$)",
			model: "Honor 10I"
		},
		{
			regex: "U9508(?:[);/ ]|$)",
			model: "Honor 2"
		},
		{
			regex: "YAL-(?:L21|[AT]L00)(?:[);/ ]|$)",
			model: "Honor 20"
		},
		{
			regex: "LRA-AL00(?:[);/ ]|$)",
			model: "Honor 20 Lite"
		},
		{
			regex: "(HRY-AL00T[a]?)(?:[);/ ]|$)",
			model: "Honor 20I"
		},
		{
			regex: "YAL-(L41|AL10)(?:[);/ ]|$)",
			model: "Honor 20 Pro"
		},
		{
			regex: "(MAR-LX1H|YAL-AL50)(?:[);/ ]|$)",
			model: "Honor 20S"
		},
		{
			regex: "(?:BMH-AN[12]0|MXW-AN00)(?:[);/ ]|$)",
			model: "Honor 30"
		},
		{
			regex: "EBG-[AT]N00(?:[);/ ]|$)",
			model: "Honor 30 Pro"
		},
		{
			regex: "EBG-AN10(?:[);/ ]|$)",
			model: "Honor 30 Pro Plus"
		},
		{
			regex: "CDY-(?:AN90|NX9A)(?:[);/ ]|$)",
			model: "Honor 30S"
		},
		{
			regex: "LRA-LX1(?:[);/ ]|$)",
			model: "Honor 30I"
		},
		{
			regex: "(?:Honor_|HW-)?H30-(?:C00|L01M?|L02|U10|T00|T10)(?:_TD)?(?:[);/ ]|$)",
			model: "Honor 3C"
		},
		{
			regex: "Hol-U19(?:[);/ ]|$)",
			model: "Honor 3C Lite"
		},
		{
			regex: "G750-T01(?:[);/ ]|$)",
			model: "Honor 3X"
		},
		{
			regex: "(?:Honor_|HW-)?SCL-(?:AL00|CL00|TL00H?)(?:_TD)?(?:[);/ ]|$)",
			model: "Honor 4A"
		},
		{
			regex: "(?:Honor_|HW-)?CHM-U01(?:_TD)?(?:[);/ ]|$)",
			model: "Honor 4C"
		},
		{
			regex: "Honor 4c Pro(?:[);/ ]|$)",
			model: "Honor 4C Pro"
		},
		{
			regex: "AQM-AL10(?:[);/ ]|$)",
			model: "Honor 4T Pro"
		},
		{
			regex: "(CHE2?-[UT]L00[HM]?|CHE1-CL[12]0|CHE2-L(?:1[12]|23)|Che1-L04|CHE-TL00)(?:[);/ ]|$)",
			model: "Honor 4X"
		},
		{
			regex: "(?:Honor_|HW-)?CUN-[AT]L00(?:[);/ ]|$)",
			model: "Honor 5 Play"
		},
		{
			regex: "(?:Honor_|HW-)?CAM-(?:AL00|TL00H|TL00)(?:_TD)?(?:[);/ ]|$)",
			model: "Honor 5A"
		},
		{
			regex: "(?:Honor_|HW-)?NEM-(?:AL10|L51|UL10|TL00)(?:[);/ ]|$)",
			model: "Honor 5C"
		},
		{
			regex: "(?:Honor_|HW-)?NEM-(?:L22|TL00H)(?:[);/ ]|$)",
			model: "Honor 5C Dual SIM"
		},
		{
			regex: "(?:Honor_|HW-)?KIW-(?:AL10|TL00H|[TC]L00|L2[1-4]|UL00)(?:_TD)?(?:[);/ ]|$)",
			model: "Honor 5X"
		},
		{
			regex: "((?:Honor_|HW-)?H60-L(?:01|02|03|04|11|12)(?:_TD)?|HW-H60-J1)(?:[);/ ]|$)",
			model: "Honor 6"
		},
		{
			regex: "MYA-TL10(?:[);/ ]|$)",
			model: "Honor 6 Play"
		},
		{
			regex: "PE-(UL00|TL[12]0|TL00M)(?:[);/ ]|$)",
			model: "Honor 6 Plus"
		},
		{
			regex: "(?:HONOR[ _]?)?DLI-(?:AL10|L[24]2|TL20)(?:[);/ ]|$)",
			model: "Honor 6A"
		},
		{
			regex: "DIG-L21HN(?:[);/ ]|$)",
			model: "Honor 6C"
		},
		{
			regex: "JMM-L22(?:[);/ ]|$)",
			model: "Honor 6C Pro"
		},
		{
			regex: "(?:HONOR[ _]?)?BLN-(?:L2[124]|AL[1234]0|TL[01]0(?:[);/ ]|$))",
			model: "Honor 6X"
		},
		{
			regex: "(?:Honor[_]?|HW-)?PLK-(?:AL10|CL00|TL00|TL01H?|UL00|L01)(?:[);/ ]|$)",
			model: "Honor 7"
		},
		{
			regex: "(?:Honor_|HW-)?NEM-L21(?:[);/ ]|$)",
			model: "Honor 7 Lite"
		},
		{
			regex: "AUM-(?:AL[20]0|L33[A]?|TL20)(?:[);/ ]|$)",
			model: "Honor 7A"
		},
		{
			regex: "AUM-L29(?:[);/ ]|$)",
			model: "Honor 7A Pro"
		},
		{
			regex: "(?:Honor_|HW-)?(?:LND-(?:AL[34]0|L29|TL40)|AUM-L41)(?:[);/ ]|$)",
			model: "Honor 7C"
		},
		{
			regex: "ATH-(?:[CAU]L00|TL00H)(?:[);/ ]|$)",
			model: "Honor 7i"
		},
		{
			regex: "(?:Honor_|HW-)?DUA-(?:L22|LX3)(?:[);/ ]|$)",
			model: "Honor 7S"
		},
		{
			regex: "(?:HONOR[ _]?)?BND-(?:AL[01]0|TL10|L2[14]|L31)(?:[);/ ]|$)",
			model: "Honor 7X"
		},
		{
			regex: "(?:FRD-(?:AL[01]0|L0[249]|L1[49]|DL00)|VAT-L19)(?:[);/ ]|$)",
			model: "Honor 8"
		},
		{
			regex: "PRA-(?:AL00X|AL00|TL10)(?:[);/ ]|$)",
			model: "Honor 8 Lite"
		},
		{
			regex: "DUK-(?:L09|TL30)(?:[);/ ]|$)",
			model: "Honor 8 Pro"
		},
		{
			regex: "VEN-L22(?:[);/ ]|$)",
			model: "Honor 8 Smart"
		},
		{
			regex: "JAT-L(29|X[13])(?:[);/ ]|$)",
			model: "Honor 8A"
		},
		{
			regex: "JAT-L41(?:[);/ ]|$)",
			model: "Honor 8A Pro"
		},
		{
			regex: "BKK-(?:AL[10]0|L21|L22|LX2|TL00)(?:[);/ ]|$)",
			model: "Honor 8C"
		},
		{
			regex: "KSA-(LX[239]|AL00)(?:[);/ ]|$)",
			model: "Honor 8S"
		},
		{
			regex: "JSN-L(?:2[123]|42)|JSN-[TA]L00[a]?(?:[);/ ]|$)",
			model: "Honor 8X"
		},
		{
			regex: "ARE-(?:AL[10]0|L22(?:HN)?|TL00)(?:[);/ ]|$)",
			model: "Honor 8X Max"
		},
		{
			regex: "STF-(?:AL[10]0|L09S?|TL10)(?:[);/ ]|$)",
			model: "Honor 9"
		},
		{
			regex: "MOA-LX9N(?:[);/ ]|$)",
			model: "Honor 9A"
		},
		{
			regex: "AKA-L29(?:[);/ ]|$)",
			model: "Honor 9C"
		},
		{
			regex: "LLD-(?:AL[01]0|L[23]1|TL10)(?:[);/ ]|$)",
			model: "Honor 9 Lite"
		},
		{
			regex: "LLD-AL[23]0(?:[);/ ]|$)",
			model: "Honor 9i"
		},
		{
			regex: "DUA-LX9(?:[);/ ]|$)",
			model: "Honor 9S"
		},
		{
			regex: "HLK-AL00a?(?:[);/ ]|$)",
			model: "Honor 9X"
		},
		{
			regex: "HLK-(?:AL10|L4[12])(?:[);/ ]|$)",
			model: "Honor 9X Pro"
		},
		{
			regex: "CAM-UL00(?:[);/ ]|$)",
			model: "Honor Holly 3"
		},
		{
			regex: "NTS-AL00(?:[);/ ]|$)",
			model: "Honor Magic"
		},
		{
			regex: "TNY-[AT]L00(?:[);/ ]|$)",
			model: "Honor Magic 2"
		},
		{
			regex: "RVL-AL09(?:[);/ ]|$)",
			model: "Honor Note 10"
		},
		{
			regex: "EDI-AL10(?:[);/ ]|$)",
			model: "Honor Note 8"
		},
		{
			regex: "VKY-TL00(?:[);/ ]|$)",
			model: "Honor P10 Plus"
		},
		{
			regex: "VOG-AL00(?:[);/ ]|$)",
			model: "Honor P30 Pro"
		},
		{
			regex: "ANA-(?:[AT]N00|NX9)(?:[);/ ]|$)",
			model: "Honor P40"
		},
		{
			regex: "COR-(?:AL[01]0|L29|TL10)(?:[);/ ]|$)",
			model: "Honor Play"
		},
		{
			regex: "ASK-AL00x(?:[);/ ]|$)",
			model: "Honor Play 3"
		},
		{
			regex: "KSA-AL10(?:[);/ ]|$)",
			model: "Honor Play 3E"
		},
		{
			regex: "TNNH-AN00(?:[);/ ]|$)",
			model: "Honor Play 4"
		},
		{
			regex: "CHM-[CUT]L00[HM]?(?:[);/ ]|$)",
			model: "Honor Play 4C"
		},
		{
			regex: "AKA-AL10(?:[);/ ]|$)",
			model: "Honor Play 4T"
		},
		{
			regex: "DUA-[TA]L00(?:[);/ ]|$)",
			model: "Honor Play 7"
		},
		{
			regex: "JAT-[AT]L00(?:[);/ ]|$)",
			model: "Honor Play 8A"
		},
		{
			regex: "MOA-AL[02]0(?:[);/ ]|$)",
			model: "Honor Play 9A"
		},
		{
			regex: "BKL-(?:AL00|AL20|AL30|L09|TL10)(?:[);/ ]|$)",
			model: "Honor V10"
		},
		{
			regex: "PCT-[TA]L10(?:[);/ ]|$)",
			model: "Honor V20"
		},
		{
			regex: "KNT-(?:AL[12]0|[TU]L10)(?:[);/ ]|$)",
			model: "Honor V8"
		},
		{
			regex: "DUK-AL20(?:[);/ ]|$)",
			model: "Honor V9"
		},
		{
			regex: "JMM-[AT]L[01]0(?:[);/ ]|$)",
			model: "Honor V9 Play"
		},
		{
			regex: "BKL-L04(?:[);/ ]|$)",
			model: "Honor View 10"
		},
		{
			regex: "PCT-L29(?:[);/ ]|$)",
			model: "Honor View 20"
		},
		{
			regex: "OXF-AN00(?:[);/ ]|$)",
			model: "Honor View 30"
		},
		{
			regex: "OXF-AN10(?:[);/ ]|$)",
			model: "Honor View 30 Pro"
		},
		{
			regex: "(?:Honor_|HW-)?SCL-L(01|32)(?:_TD)?(?:[);/ ]|$)",
			model: "Honor Y6"
		},
		{
			regex: "(?:Honor_|HW-)?LYO-L21(?:[);/ ]|$)",
			model: "Honor Y6 II Compact"
		},
		{
			regex: "TEL-(?:AN(?:00a?|10)|TN00)(?:[);/ ]|$)",
			model: "Honor X10"
		},
		{
			regex: "KKG-AN00(?:[);/ ]|$)",
			model: "Honor X10 Max"
		},
		{
			regex: "DNN-LX9(?:[);/ ]|$)",
			model: "Honor X10 Lite"
		},
		{
			regex: "U8500(?:[);/ ]|$)",
			model: "Ideos X2"
		},
		{
			regex: "U8510(?:[);/ ]|$)",
			model: "Ideos X3"
		},
		{
			regex: "U8800(?:[);/ ]|$)",
			model: "Ideos X5"
		},
		{
			regex: "MLA-AL10(?:[);/ ]|$)",
			model: "Maimang 5"
		},
		{
			regex: "POT-AL10(?:[);/ ]|$)",
			model: "Maimang 8"
		},
		{
			regex: "TAH-(?:N29|AN00)m(?:[);/ ]|$)",
			model: "Mate XS"
		},
		{
			regex: "ALP-(?:[TA]L00|L[02]9)(?:[);/ ]|$)",
			model: "Mate 10"
		},
		{
			regex: "RNE-(?:AL00|L(?:01|03|21|23))(?:[);/ ]|$)",
			model: "Mate 10 Lite"
		},
		{
			regex: "BLA-(?:A09|L[02]9|[TA]L00)(?:[);/ ]|$)",
			model: "Mate 10 Pro"
		},
		{
			regex: "HMA-(?:[AT]L00|L[02]9)(?:[);/ ]|$)",
			model: "Mate 20"
		},
		{
			regex: "SNE-(?:AL00|LX[0-3])(?:[);/ ]|$)",
			model: "Mate 20 Lite"
		},
		{
			regex: "LYA-(?:AL[01]0|L[02]9|L0C|TL00)(?:[);/ ]|$)",
			model: "Mate 20 Pro"
		},
		{
			regex: "LYA-AL00P(?:[);/ ]|$)",
			model: "Mate 20 RS"
		},
		{
			regex: "EVR-(?:[TA]L00|L29|N29|AN00)(?:[);/ ]|$)",
			model: "Mate 20 X"
		},
		{
			regex: "TAS-([AT]L00|L29)(?:[);/ ]|$)",
			model: "Mate 30"
		},
		{
			regex: "TAS-AN00(?:[);/ ]|$)",
			model: "Mate 30 5G"
		},
		{
			regex: "SPN-AL00(?:[);/ ]|$)",
			model: "Mate 30 Lite"
		},
		{
			regex: "LIO-(?:[TA]L00|L29|AN00)(?:[);/ ]|$)",
			model: "Mate 30 Pro"
		},
		{
			regex: "LIO-N29(?:[);/ ]|$)",
			model: "Mate 30 Pro 5G"
		},
		{
			regex: "NOH-(?:NX9|AN00)(?:[);/ ]|$)",
			model: "Mate 40 Pro"
		},
		{
			regex: "NOP-AN00(?:[);/ ]|$)",
			model: "Mate 40 Pro+"
		},
		{
			regex: "NXT-(?:AL10|L29)(?:[);/ ]|$)",
			model: "Mate 8"
		},
		{
			regex: "MHA-(?:L[02]9|[AT]L00)(?:[);/ ]|$)",
			model: "Mate 9"
		},
		{
			regex: "BLL-L23(?:[);/ ]|$)",
			model: "Mate 9 Lite"
		},
		{
			regex: "LON-(?:AL00(?:-PD)?|L29)(?:[);/ ]|$)",
			model: "Mate 9 Pro"
		},
		{
			regex: "NEO-AL00(?:[);/ ]|$)",
			model: "Mate RS"
		},
		{
			regex: "NEO-L29(?:[);/ ]|$)",
			model: "Mate RS Porsche Design"
		},
		{
			regex: "CRR-(?:L09|UL00)(?:[);/ ]|$)",
			model: "Mate S"
		},
		{
			regex: "BND-L34(?:[);/ ]|$)",
			model: "Mate SE"
		},
		{
			regex: "(CAZ-(?:AL[01]0|TL[12]0)|CAN-L[01][1-3])(?:[);/ ]|$)",
			model: "Nova"
		},
		{
			regex: "608HW(?:[);/ ]|$)",
			model: "Nova Lite"
		},
		{
			regex: "(?:PIC-(?:[AT]L00|LX9)|HWV31)(?:[);/ ]|$)",
			model: "Nova 2"
		},
		{
			regex: "704HW(?:[);/ ]|$)",
			model: "Nova 2 Lite"
		},
		{
			regex: "BAC-(?:L01|TL00)(?:[);/ ]|$)",
			model: "Nova 2 Plus"
		},
		{
			regex: "BAC-(?:AL00|L2[12])(?:[);/ ]|$)",
			model: "Nova 2 Plus Dual SIM"
		},
		{
			regex: "RNE-L[02]2(?:[);/ ]|$)",
			model: "Nova 2I"
		},
		{
			regex: "HWI-[AT]L00(?:[);/ ]|$)",
			model: "Nova 2S"
		},
		{
			regex: "PAR-(?:[AT]L00|LX[19]|LX1M|TL20)(?:[);/ ]|$)",
			model: "Nova 3"
		},
		{
			regex: "ANE-AL00(?:[);/ ]|$)",
			model: "Nova 3e"
		},
		{
			regex: "INE-(?:AL00|LX[12]r|LX[12]|TL00)(?:[);/ ]|$)",
			model: "Nova 3i"
		},
		{
			regex: "VCE-(L22|[AT]L00)(?:[);/ ]|$)",
			model: "Nova 4"
		},
		{
			regex: "MAR-AL00(?:[);/ ]|$)",
			model: "Nova 4e"
		},
		{
			regex: "SEA-AL00(?:[);/ ]|$)",
			model: "Nova 5"
		},
		{
			regex: "SEA-AL10(?:[);/ ]|$)",
			model: "Nova 5 Pro"
		},
		{
			regex: "GLK-(?:[AT]L00|LX1U)(?:[);/ ]|$)",
			model: "Nova 5i"
		},
		{
			regex: "SPN-TL00(?:[);/ ]|$)",
			model: "Nova 5i Pro"
		},
		{
			regex: "WLZ-AL10(?:[);/ ]|$)",
			model: "Nova 6"
		},
		{
			regex: "WLZ-AN00(?:[);/ ]|$)",
			model: "Nova 6 5G"
		},
		{
			regex: "JNY-AL10(?:[);/ ]|$)",
			model: "Nova 6 SE"
		},
		{
			regex: "JEF-(?:[AT]N00|AN20|NX9)(?:[);/ ]|$)",
			model: "Nova 7 5G"
		},
		{
			regex: "JER-[AT]N10(?:[);/ ]|$)",
			model: "Nova 7 Pro 5G"
		},
		{
			regex: "CDY-(?:[AT]N00|NX9B)(?:[);/ ]|$)",
			model: "Nova 7 SE 5G"
		},
		{
			regex: "JNY-LX2(?:[);/ ]|$)",
			model: "Nova 7i"
		},
		{
			regex: "ANG-AN00(?:[);/ ]|$)",
			model: "Nova 8 5G"
		},
		{
			regex: "DIG-L01(?:[);/ ]|$)",
			model: "Nova Smart"
		},
		{
			regex: "WAS-AL00(?:[);/ ]|$)",
			model: "Nova Youth"
		},
		{
			regex: "FIG-L(?:A1|X[123])(?:[);/ ]|$)",
			model: "P smart"
		},
		{
			regex: "POT-(?:LX(?:[13]|1T|2J|1AF)|AL00)(?:[);/ ]|$)",
			model: "P smart (2019)"
		},
		{
			regex: "POT-LX1A(?:[);/ ]|$)",
			model: "P smart (2020)"
		},
		{
			regex: "PPA-LX[12](?:[);/ ]|$)",
			model: "P smart (2021)"
		},
		{
			regex: "STK-LX1(?:[);/ ]|$)",
			model: "P smart Z"
		},
		{
			regex: "VTR-(?:L[02]9|AL00|TL00)(?:[);/ ]|$)",
			model: "P10"
		},
		{
			regex: "WAS-(?:L(?:X1|X1A|X2|X2J|X3|03T)|TL10)(?:[);/ ]|$)",
			model: "P10 Lite"
		},
		{
			regex: "VKY-(?:AL00|L09|L29)(?:[);/ ]|$)",
			model: "P10 Plus"
		},
		{
			regex: "BAC-L[02]3(?:[);/ ]|$)",
			model: "P10 Selfie"
		},
		{
			regex: "EML-(?:[TA]L00|L[02]9)(?:[);/ ]|$)",
			model: "P20"
		},
		{
			regex: "(?:ANE-(?:LX[123]|LX2J|TL00)|HWV32)(?:[);/ ]|$)",
			model: "P20 Lite"
		},
		{
			regex: "(?:CLT-(?:AL0[01]|TL0[01]|L(?:04|[02]9))|HW-01K)(?:[);/ ]|$)",
			model: "P20 Pro"
		},
		{
			regex: "(ELE-L(?:04|09|29)|ELE-[AT]L00)(?:[);/ ]|$)",
			model: "P30"
		},
		{
			regex: "(?:MAR-(?:LX(?:1[BM]|2J?|3BM)|TL00)|NIC-LX1A|HWV33)(?:[);/ ]|$)",
			model: "P30 Lite"
		},
		{
			regex: "MAR-LX[13]Am?(?:[);/ ]|$)",
			model: "P30 Lite Dual SIM"
		},
		{
			regex: "(?:VOG-(?:L(?:04|09|29)|TL00|AL10)|HW-02L)(?:[);/ ]|$)",
			model: "P30 Pro"
		},
		{
			regex: "ANA-LX4(?:[);/ ]|$)",
			model: "P40"
		},
		{
			regex: "JNY-LX1(?:[);/ ]|$)",
			model: "P40 Lite"
		},
		{
			regex: "ART-L29(?:[);/ ]|$)",
			model: "P40 Lite E"
		},
		{
			regex: "ART-L29N(?:[);/ ]|$)",
			model: "P40 Lite E NFC"
		},
		{
			regex: "(?:ELS-(?:[AT]N00|NX9|N04)|NEY-NX9)(?:[);/ ]|$)",
			model: "P40 Pro"
		},
		{
			regex: "ELS-(?:AN10|N39)(?:[);/ ]|$)",
			model: "P40 Pro Plus"
		},
		{
			regex: "GRA-(?:L09|UL00)(?:[);/ ]|$)",
			model: "P8"
		},
		{
			regex: "(?:ALE-L(?:02|21|23)|ALE-UL00|ALE-TL00|503HW)(?:[);/ ]|$)",
			model: "P8 Lite (2015)"
		},
		{
			regex: "(?:PRA-L(?:A1|X2|X1|X3)|hi6210sft)(?:[);/ ]|$)",
			model: "P8 Lite (2017)"
		},
		{
			regex: "EVA-(?:AL[10]0|L[012]9|[TCD]L00)(?:[);/ ]|$)",
			model: "P9"
		},
		{
			regex: "VNS-L(?:[23]1|[26]2)(?:[);/ ]|$)",
			model: "P9 Lite"
		},
		{
			regex: "SLA-L(?:02|03|22|23)(?:[);/ ]|$)",
			model: "P9 Lite Mini"
		},
		{
			regex: "DIG-L(?:03|23)(?:[);/ ]|$)",
			model: "P9 Lite Smart"
		},
		{
			regex: "VIE-(?:AL10|L[02]9)(?:[);/ ]|$)",
			model: "P9 Plus"
		},
		{
			regex: "ATH-UL0[16](?:[);/ ]|$)",
			model: "ShotX"
		},
		{
			regex: "U(8230|8661|8667)(?:[);/ ]|$)",
			model: "U$1"
		},
		{
			regex: "ARS-([AT]L00|L22)(?:[);/ ]|$)",
			model: "Y Max"
		},
		{
			regex: "CRO-(?:L[02]2|U00)(?:[);/ ]|$)",
			model: "Y3 (2017)"
		},
		{
			regex: "CAG-L[02]2(?:[);/ ]|$)",
			model: "Y3 (2018)"
		},
		{
			regex: "LUA-(U22|L2[12]|U03)(?:[);/ ]|$)",
			model: "Y3II"
		},
		{
			regex: "MYA-(?:L(?:02|03|2[23])|U29)(?:[);/ ]|$)",
			model: "Y5 (2017)"
		},
		{
			regex: "DRA-L(?:01|03|21|23|X3)(?:[);/ ]|$)",
			model: "Y5 (2018)"
		},
		{
			regex: "AMN-LX[1239](?:[);/ ]|$)",
			model: "Y5 (2019)"
		},
		{
			regex: "DRA-LX5(?:[);/ ]|$)",
			model: "Y5 lite"
		},
		{
			regex: "DRA-LX9(?:[);/ ]|$)",
			model: "Y5p"
		},
		{
			regex: "CRO-L[02]3(?:[);/ ]|$)",
			model: "Y5 Lite (2017)"
		},
		{
			regex: "CAG-L[02]3(?:[);/ ]|$)",
			model: "Y5 Lite (2018)"
		},
		{
			regex: "DRA-(?:LX2|[AT]L00)(?:[);/ ]|$)",
			model: "Y5 Prime (2018)"
		},
		{
			regex: "MYA-L13(?:[);/ ]|$)",
			model: "Y5 Pro (2017)"
		},
		{
			regex: "CUN-(?:L(?:0[123]|2[123]|33)|U29)(?:[);/ ]|$)",
			model: "Y5II"
		},
		{
			regex: "(?:SCC-U21|SCL-U31)(?:[);/ ]|$)",
			model: "Y6"
		},
		{
			regex: "MYA-L11(?:[);/ ]|$)",
			model: "Y6 (2016)"
		},
		{
			regex: "MYA-(L41|AL10)(?:[);/ ]|$)",
			model: "Y6 (2017)"
		},
		{
			regex: "ATU-L(?:11|21|22|X3)(?:[);/ ]|$)",
			model: "Y6 (2018)"
		},
		{
			regex: "MRD-L(?:X1[NF]?|X3)(?:[);/ ]|$)",
			model: "Y6 (2019)"
		},
		{
			regex: "ATU-L(?:31|42)(?:[);/ ]|$)",
			model: "Y6 Prime (2018)"
		},
		{
			regex: "TIT-(?:AL00|L01|U02)(?:[);/ ]|$)",
			model: "Y6 Pro"
		},
		{
			regex: "MRD-LX2(?:[);/ ]|$)",
			model: "Y6 Pro (2019)"
		},
		{
			regex: "Y625-U03(?:[);/ ]|$)",
			model: "Y625"
		},
		{
			regex: "Y635-L0[123](?:[);/ ]|$)",
			model: "Y635"
		},
		{
			regex: "Y635-L21(?:[);/ ]|$)",
			model: "Y635 Dual SIM"
		},
		{
			regex: "CAM-L(?:03|21|23|32)(?:[);/ ]|$)",
			model: "Y6II"
		},
		{
			regex: "TRT-LX[123](?:[);/ ]|$)",
			model: "Y7 (2017)"
		},
		{
			regex: "LDN-L(?:01|X3)(?:[);/ ]|$)",
			model: "Y7 (2018)"
		},
		{
			regex: "(?:HUAWEI[ _]?)?DUB-(?:LX[13]|TL00)(?:[);/ ]|$)",
			model: "Y7 (2019)"
		},
		{
			regex: "(LDN-(?:AL00|L21)|TRT-TL10)(?:[);/ ]|$)",
			model: "Y7 Prime"
		},
		{
			regex: "(LDN-(?:LX2|TL10)|TRT-(?:L21A|L53))(?:[);/ ]|$)",
			model: "Y7 Prime (2018)"
		},
		{
			regex: "DUB-(?:LX2|AL00)(?:[);/ ]|$)",
			model: "Y7 Pro (2019)"
		},
		{
			regex: "DUB-AL00a(?:[);/ ]|$)",
			model: "Enjoy 9"
		},
		{
			regex: "DUB-AL20(?:[);/ ]|$)",
			model: "Y7 Pro (2019)"
		},
		{
			regex: "PPA-LX3(?:[);/ ]|$)",
			model: "Y7a"
		},
		{
			regex: "ART-L28(?:[);/ ]|$)",
			model: "Y7p"
		},
		{
			regex: "AQM-LX1(?:[);/ ]|$)",
			model: "Y8p"
		},
		{
			regex: "FLA-(LX[123]|AL20|TL10)(?:[);/ ]|$)",
			model: "Y9 (2018)"
		},
		{
			regex: "JKM-(?:[TA]L00[ab]?|LX[123])(?:[);/ ]|$)",
			model: "Y9 (2019)"
		},
		{
			regex: "STK-(L2[12]|LX3)(?:[);/ ]|$)",
			model: "Y9 Prime (2019)"
		},
		{
			regex: "FRL-L2[23](?:[);/ ]|$)",
			model: "Y9a"
		},
		{
			regex: "HWT31(?:[);/ ]|$)",
			model: "Qua Tab 02 10.1\"",
			device: "tablet"
		},
		{
			regex: "HDN-[LW]09(?:[);/ ]|$)",
			model: "Honor Water Play 10.1",
			device: "tablet"
		},
		{
			regex: "BAH3-(?:AL00|[LW]09)(?:[);/ ]|$)",
			model: "MatePad 10.4\"",
			device: "tablet"
		},
		{
			regex: "BAH3-W59(?:[);/ ]|$)",
			model: "MatePad 10.4\" WiFi",
			device: "tablet"
		},
		{
			regex: "AGS3-[WL]09(?:[);/ ]|$)",
			model: "MatePad T10s",
			device: "tablet"
		},
		{
			regex: "HDL-(?:W09|AL09)(?:[);/ ]|$)",
			model: "Honor Water Play 8.0",
			device: "tablet"
		},
		{
			regex: "JDN-(?:AL00|W09)(?:[);/ ]|$)",
			model: "Honor Pad 2",
			device: "tablet"
		},
		{
			regex: "KRJ-W09(?:[);/ ]|$)",
			model: "Honor Pad V6",
			device: "tablet"
		},
		{
			regex: "MON-(W|AL)19(?:[);/ ]|$)",
			device: "tablet",
			model: "MatePad C5 8"
		},
		{
			regex: "BZA-W00(?:[);/ ]|$)",
			device: "tablet",
			model: "C3 9.6"
		},
		{
			regex: "M2-801L(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M2 8.0\""
		},
		{
			regex: "MRX-(AL09|W09)(?:[);/ ]|$)",
			device: "tablet",
			model: "MatePad Pro"
		},
		{
			regex: "CMR-(?:AL[01]9|W09)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M5 10.8"
		},
		{
			regex: "CMR-W19(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M5 Pro 10.8"
		},
		{
			regex: "SCM-AL09(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M5 Pro"
		},
		{
			regex: "GEM-70[1-3]L(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad X2"
		},
		{
			regex: "(?:JDN2-(:?[WL]09|AL[50]0)|BAH2-(?:AL[01]0|L09|W[01]9))(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M5 Lite"
		},
		{
			regex: "SHT-(?:AL|W)09(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M5 8.4"
		},
		{
			regex: "VRD-(?:(AL|W)09|AL10|W10)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M6 8.4"
		},
		{
			regex: "SCM-W09(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M6 10"
		},
		{
			regex: "BTV-W09(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M3 8"
		},
		{
			regex: "(BAH-W09|CPN-(?:L|W)09|CPN-AL00|701HW)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M3 Lite"
		},
		{
			regex: "BAH-(?:L09|AL00)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad M3 Lite 10"
		},
		{
			regex: "BTV-DL09",
			device: "tablet",
			model: "MediaPad M3"
		},
		{
			regex: "(AGS2-AL00|JDN2-W09)HN(?:[);/ ]|$)",
			device: "tablet",
			model: "Honor Tab 5"
		},
		{
			regex: "AGS2-(?:[LW]09|W19|L03)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T5 10"
		},
		{
			regex: "KOB2-[LW]09(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T 8.0\""
		},
		{
			regex: "AGR-[LW]09(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T 10"
		},
		{
			regex: "AGS-(?:L0[39]|W09)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T3 10"
		},
		{
			regex: "(KOB-(?:L|W)09|BZK-[LW]00)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T3 8"
		},
		{
			regex: "BG2-(?:U0[13]|W09)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T3 7"
		},
		{
			regex: "BGO-L03(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T2 7.0"
		},
		{
			regex: "(?:BGO-DL09|PLE-70[13]L)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T2 7.0 Pro"
		},
		{
			regex: "JDN-L01(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T2 8.0 Pro"
		},
		{
			regex: "(?:FDR-(A01[LW]|A03L)|605HW)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T2 10.0\" Pro"
		},
		{
			regex: "T1-(?:A21[LW]|A23L)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T1 10"
		},
		{
			regex: "T1-701u(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T1 7"
		},
		{
			regex: "(?:T1-82(?:3L|1W)|MediaPad T1 8.0)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad T1 8"
		},
		{
			regex: "AGS2-AL00(?:[);/ ]|$)",
			device: "tablet",
			model: "Enjoy Tablet 10.1"
		},
		{
			regex: "BZT-(W09|AL[01]0)(?:[);/ ]|$)",
			device: "tablet",
			model: "MediaPad C5 10.1"
		},
		{
			regex: "(?:d-01J|d-02[HK])(?:[);/ ]|$)",
			device: "tablet",
			model: "D Tab Compact"
		},
		{
			regex: "(d-01K)(?:[);/ ]|$)",
			device: "tablet",
			model: "dtab d-01K"
		},
		{
			regex: "LEO-BX9(?:[);/ ]|$)",
			device: "wearable",
			model: "Smart Watch 2"
		},
		{
			regex: "(MediaPad[^/;]*) Build",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Ideos([^;/]*) Build",
			model: "Ideos$1"
		},
		{
			regex: "(?:HUAWEI )?MT([0-9]+)",
			device: "phablet",
			model: "Ascend Mate $1"
		},
		{
			regex: "Huawei[ _\\-]?([^/;]*) Build",
			model: "$1"
		},
		{
			regex: "(?:HW-)?Huawei(?!Browser)(?:/1\\.0/0?(?:Huawei))?[_\\- /]?([a-z0-9\\-_]+)",
			model: "$1"
		},
		{
			regex: "Huawei; ([a-z0-9 \\-]+)",
			model: "$1"
		}
	]
};
var Hyundai$1 = {
	regex: "Hyundai|Ultra (?:Active|Air|Charm|Dream|Energy|Latitude|Link|Live|Shadow|Shine|Storm|Style|Sync|Trend|Vision|Wave)|G(24027|2552[34])K|W25042L|HP554O|Seoul S8|L503F Plus|HT0701L16|HT0704K08|HT1004L16|HT1004LI16|Koral_8W2|Eternity[_ ]G25",
	device: "smartphone",
	models: [
		{
			regex: "Ultra (Active|Air|Charm|Dream|Energy Lite|Energy Plus|Energy|Latitude|Link|Live II|Live|Shadow|Shine|Storm|Style|Sync|Trend|Vision|Wave)",
			model: "Ultra $1"
		},
		{
			regex: "Seoul S8",
			model: "Seoul S8"
		},
		{
			regex: "G25523K",
			model: "Eternity G23"
		},
		{
			regex: "Eternity[_ ]G25",
			model: "Eternity G25"
		},
		{
			regex: "G25524K",
			model: "Eternity G24"
		},
		{
			regex: "G24027K",
			model: "Eternity G27"
		},
		{
			regex: "W25042L",
			model: "Eternity W42"
		},
		{
			regex: "HP554O",
			model: "HP554O"
		},
		{
			regex: "L503F Plus",
			model: "L503F Plus"
		},
		{
			regex: "L503F Plus",
			model: "L503F Plus"
		},
		{
			regex: "(?:Hyundai_)?(Eternity_G57L)",
			model: "$1"
		},
		{
			regex: "HT0701L16",
			model: "Koral 7XL",
			device: "tablet"
		},
		{
			regex: "HT1004LI16",
			model: "Koral 10XL",
			device: "tablet"
		},
		{
			regex: "Koral_8W2",
			model: "Koral 8W2",
			device: "tablet"
		},
		{
			regex: "HT1004L16",
			model: "Koral 10XL",
			device: "tablet"
		},
		{
			regex: "HT0704K08",
			model: "Koral 7M4",
			device: "tablet"
		},
		{
			regex: "Hyundai ([^;/]+) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Hyundai[ _\\-]?([a-z0-9_-]+)",
			model: "$1",
			device: "tablet"
		}
	]
};
var iBall = {
	regex: "iBall[ _]([^;/)]+)[ _]Build|iBall_Slide|(?:Snap[_ ]4G2|6351-Q400i|iT-KSA0003|iT-KSA0012|iT-KSA0066|Avid|Twinkle_i5|Gorgeo[_ ]4GL|Brisk 4G2|Blaze_V4|Wondro 10|Q27 4G|Andi (?:Wink|5G Blink) 4G)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "Andi Wink 4G",
			device: "smartphone",
			model: "Andi Wink 4G"
		},
		{
			regex: "Andi 5G Blink 4G",
			device: "smartphone",
			model: "Andi 5G Blink 4G"
		},
		{
			regex: "(Snap[_ ]4G2|Avid|Twinkle_i5|Gorgeo[_ ]4GL|Blaze_V4|Wondro 10|Q27 4G|Brisk 4G2)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "6351-Q400i(?:[);/ ]|$)",
			model: "Slide"
		},
		{
			regex: "iT-KSA0003(?:[);/ ]|$)",
			model: "iTAB BizniZ"
		},
		{
			regex: "iT-KSA0066(?:[);/ ]|$)",
			model: "iTAB BizniZ Mini"
		},
		{
			regex: "iT-KSA0012(?:[);/ ]|$)",
			model: "iTAB Moviez Pro"
		},
		{
			regex: "iBall[ _]([^;/)]+)(?:[ _]Build|\\))",
			model: "$1"
		}
	]
};
var iRola = {
	regex: "iRola ([^/;]+) Build|(DX758|DX752|DX752|DX758[ _]?Pro) Build",
	device: "tablet",
	models: [
		{
			regex: "DX758[ _]?Pro",
			model: "DX758 Pro"
		},
		{
			regex: "(DX758|DX752)",
			model: "$1"
		},
		{
			regex: "iRola ([^/;]+) Build",
			model: "$1"
		}
	]
};
var iRulu = {
	regex: "iRULU[ _-](X11|V[34]|U2|AL101)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "iRULU[ _-](X11|V[34]|AL101)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "iRULU[ _](U2)(?:[);/ ]|$)",
			device: "smartphone",
			model: "$1"
		}
	]
};
var Irbis = {
	regex: "IRBIS|TZ(1(?:0[04]|42|5[01]|84|65|7[01345-89]|8[356]|9[12578])|49|55|72|22|7(?:1[124679]|2[021567]|37|4[257]|5[23457]|6[12]|72|7[17]|8[1]|9[147])|8(?:[34]1|5[3-8]|6[45]|7[2478]|8[1-5]|9[0127])|96[0-9])|TZ85|TZ13|TZ(?:one|art|HIT|81L)|(SP(?:0[56]|2[01]|4[1-36]|40[12]|45[345]|49[34]|50|51[0147]|531|54[12]|55[0124]|571))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(TZ(?:[0-9]+)|TZ(?:one|art|HIT|81L))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(SP[0-9]+)(?:[);/ ]|$)",
			device: "smartphone",
			model: "$1"
		}
	]
};
var iBerry = {
	regex: "AUXUS ([^/;]+) Build",
	device: "smartphone",
	models: [
		{
			regex: "AUXUS (Core[^/;]+) Build",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "AUXUS ([^/;]+) Build",
			model: "$1"
		}
	]
};
var iHunt = {
	regex: "iHunt|One_ Love_|TITAN_P11000_PRO|Like_(3|4U|3_Pro)|X300 Elite|S10_Tank_2019|S60_Discovery_2019|AlienXLite2020|Alien X Lite|Alien_X|S20 Ultra ApeX 2021",
	device: "smartphone",
	models: [
		{
			regex: "iHunt_Like",
			model: "Like"
		},
		{
			regex: "S10_Tank_2019",
			model: "S10 Tank (2019)"
		},
		{
			regex: "One_ Love_",
			model: "One Love"
		},
		{
			regex: "TITAN_P11000_PRO",
			model: "Titan P11000 Pro"
		},
		{
			regex: "Like_3_Pro",
			model: "Like 3 Pro"
		},
		{
			regex: "Like_3",
			model: "Like 3"
		},
		{
			regex: "Like_4U",
			model: "Like 4U"
		},
		{
			regex: "X300 Elite",
			model: "X300 Elite"
		},
		{
			regex: "S60_Discovery_2019",
			model: "S60 Discovery (2019)"
		},
		{
			regex: "AlienXLite2020",
			model: "Alien X Lite (2020)"
		},
		{
			regex: "Alien X Lite PRO",
			model: "Alien X Lite Pro"
		},
		{
			regex: "Alien X Lite",
			model: "Alien X Lite"
		},
		{
			regex: "Alien_X_ApeX",
			model: "Alien X ApeX"
		},
		{
			regex: "Alien_X",
			model: "Alien X"
		},
		{
			regex: "S20 Ultra ApeX 2021",
			model: "S20 Ultra ApeX (2021)"
		}
	]
};
var IconBIT = {
	regex: "IconBIT|NT-(3506M|0704S|0909T|1009T|10[01]1T|1017T|3601P/3602P|3603P|3702S|3805C|3905T|3701S|0701S|0805C|0902S|370[23]M)|XDS[789]4K|Omnicast UHD|Movie Smart 4K|Movie IPTV Quad",
	device: "tablet",
	models: [
		{
			regex: "NT-3506M",
			device: "smartphone",
			model: "NetTAB Mercury Quad FHD"
		},
		{
			regex: "NT-0704S",
			model: "NetTAB Sky LE"
		},
		{
			regex: "NT-0909T",
			model: "NetTAB Thor IZ"
		},
		{
			regex: "NT-1009T",
			model: "NetTAB Thor quad II"
		},
		{
			regex: "NT-10[01]1T",
			model: "NetTAB Thor LE"
		},
		{
			regex: "NT-1017T",
			model: "NetTAB Thor 3G quad"
		},
		{
			regex: "NT-3601P/3602P",
			model: "NetTAB Pocket 3G"
		},
		{
			regex: "NT-3603P",
			model: "NetTAB Pocket 3G Slim"
		},
		{
			regex: "NT-3702S",
			model: "NetTAB Sky HD 3G"
		},
		{
			regex: "NT-3805C",
			model: "NetTAB Skat 3G quad"
		},
		{
			regex: "NT-3701S",
			model: "NetTAB Sky 3G duo"
		},
		{
			regex: "NT-3905T",
			model: "NetTAB Thor ZX 3G"
		},
		{
			regex: "NT-0701S",
			model: "NetTAB Sky net"
		},
		{
			regex: "NT-0805C",
			model: "NetTAB Skat MX"
		},
		{
			regex: "NT-0902S",
			model: "NetTAB Space quad RX"
		},
		{
			regex: "NT-3702M",
			model: "NetTAB Matrix 3G duo"
		},
		{
			regex: "NT-3703M",
			model: "NetTAB Matrix 3GT"
		},
		{
			regex: "(?:iconBIT )?(Movie Smart 4K|Movie IPTV Quad|Movie Ultra HD 4K|XDS[789]4K|Omnicast UHD)",
			model: "$1",
			device: "tv"
		}
	]
};
var LYF = {
	regex: "(LYF[ _])?LS-[456][0-9]{3}|LYF/[^/]+/",
	device: "smartphone",
	models: [
		{
			regex: "LS-4004",
			model: "Flame 2"
		},
		{
			regex: "LS-5501",
			model: "Earth 1"
		},
		{
			regex: "LS-5021",
			model: "Earth 2"
		},
		{
			regex: "LS-5505",
			model: "Water F1"
		},
		{
			regex: "LS-4503",
			model: "Flame LS-4503"
		},
		{
			regex: "LS-4001",
			model: "Flame 3"
		},
		{
			regex: "LS-4003",
			model: "Flame 4"
		},
		{
			regex: "LS-4002",
			model: "Flame 5"
		},
		{
			regex: "LS-4005",
			model: "Flame 6"
		},
		{
			regex: "(LYF[ _])?LS-4006",
			model: "Flame 7"
		},
		{
			regex: "LS-4008",
			model: "Flame 7S"
		},
		{
			regex: "LS-450[58]",
			model: "Flame 8"
		},
		{
			regex: "LS-5002",
			model: "Water 1"
		},
		{
			regex: "LS-5005",
			model: "Water 4"
		},
		{
			regex: "LS-5006",
			model: "Water 6"
		},
		{
			regex: "LS-5008",
			model: "Water 2"
		},
		{
			regex: "LS-5009",
			model: "Wind 6"
		},
		{
			regex: "LS-5013",
			model: "Wind 5"
		},
		{
			regex: "LS-5014",
			model: "Wind 4"
		},
		{
			regex: "LS-5010",
			model: "Wind 1"
		},
		{
			regex: "LS-5015",
			model: "Water 8"
		},
		{
			regex: "LS-5016",
			model: "Wind 7"
		},
		{
			regex: "LS-5504",
			model: "Water 7"
		},
		{
			regex: "LS-5507",
			model: "Water 7S"
		},
		{
			regex: "LS-5017",
			model: "Water 11"
		},
		{
			regex: "LS-5018",
			model: "Wind 4S"
		},
		{
			regex: "LS-5020",
			model: "Water 10"
		},
		{
			regex: "LS-5201",
			model: "Water F1S"
		},
		{
			regex: "LS-5502",
			model: "Wind 3"
		},
		{
			regex: "LS-5503",
			model: "Water 3"
		},
		{
			regex: "LS-5506",
			model: "Water 9"
		},
		{
			regex: "LS-6001",
			model: "Wind 2"
		},
		{
			regex: "LYF/([^/]+)/",
			model: "$1"
		}
	]
};
var Lumus = {
	regex: "LUMUS Shell|(?:NEO(SR620|SC600)|INNOSR545|Lumus[_ ]Ion)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "NEO(SR620|SC600)(?:[);/ ]|$)",
			model: "Neo $1"
		},
		{
			regex: "INNO(SR545)(?:[);/ ]|$)",
			model: "INNO $1"
		},
		{
			regex: "Lumus[_ ]Ion(?:[);/ ]|$)",
			model: "Ion"
		},
		{
			regex: "LUMUS Shell [0-9A-Z]+",
			device: "tv",
			model: ""
		}
	]
};
var M4tel = {
	regex: "M4 SS[0-9]{4}(?:-R)?|M4_B[23]",
	device: "smartphone",
	models: [
		{
			regex: "SS1050",
			model: "Joy"
		},
		{
			regex: "SS1060",
			model: "Live"
		},
		{
			regex: "SS1070",
			model: "Sense"
		},
		{
			regex: "SS1080",
			model: "Max One"
		},
		{
			regex: "SS1090",
			model: "Max Ultra"
		},
		{
			regex: "SS4020",
			model: "Play"
		},
		{
			regex: "SS4040",
			model: "In Touch"
		},
		{
			regex: "SS4045",
			model: "Style"
		},
		{
			regex: "SS4345",
			model: "Soul Mini"
		},
		{
			regex: "SS4350",
			model: "Soul"
		},
		{
			regex: "SS4445",
			model: "Style Access"
		},
		{
			regex: "SS4450",
			model: "Share"
		},
		{
			regex: "SS4451",
			model: "Believe"
		},
		{
			regex: "SS4452",
			model: "Dream"
		},
		{
			regex: "SS4453",
			model: "Inspiration"
		},
		{
			regex: "SS4455",
			model: "Excite"
		},
		{
			regex: "SS4456",
			model: "Evolution"
		},
		{
			regex: "SS4457-R",
			model: "Ever"
		},
		{
			regex: "SS4457",
			model: "Elegance"
		},
		{
			regex: "SS4458-R",
			model: "Feel Plus"
		},
		{
			regex: "SS4458",
			model: "Attitude"
		},
		{
			regex: "M4_B([23])",
			model: "B$1"
		}
	]
};
var iLA = {
	regex: "iLA[-_ ](Silk|X)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var iNew = {
	regex: "iNew|(?:V7A|V3 Plus|V3-?E|V3C|FIRE_Tab_6)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "V3C(?:[);/ ]|$)",
			model: "V3C"
		},
		{
			regex: "V3-?E(?:[);/ ]|$)",
			model: "V3-E"
		},
		{
			regex: "V3 Plus(?:[);/ ]|$)",
			model: "V3 Plus"
		},
		{
			regex: "V7A(?:[);/ ]|$)",
			model: "V7A"
		},
		{
			regex: "FIRE_Tab_6(?:[);/ ]|$)",
			device: "tablet",
			model: "Fire Tab 6"
		},
		{
			regex: "iNew[ -_]([^;/]+) Build",
			model: "$1"
		}
	]
};
var iPro = {
	regex: "(?:Kylin[ _]5.[05]S?|KYLIN40|Jade[78]s|Amber[67]S?|Amber5S_Pro|Phonenix50S|Zafiro)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Kylin_5.0S",
			model: "Kylin 5.0S"
		},
		{
			regex: "Kylin (5.[05])",
			model: "Kylin $1"
		},
		{
			regex: "KYLIN40",
			model: "Kylin 40"
		},
		{
			regex: "Jade([78])s",
			model: "Jade $1s"
		},
		{
			regex: "Amber7S",
			model: "Amber 7S"
		},
		{
			regex: "Amber5S_Pro",
			model: "Amber 5S Pro"
		},
		{
			regex: "Amber6",
			model: "Amber 6"
		},
		{
			regex: "Phonenix50S",
			model: "Phonenix 50S"
		},
		{
			regex: "Zafiro",
			model: "Zafiro"
		}
	]
};
var Infinix = {
	regex: "Infinix",
	device: "smartphone",
	models: [
		{
			regex: "Infinix[ _-]X260",
			model: "Buzz"
		},
		{
			regex: "Infinix[ _-]X502",
			model: "Alpha Marvel"
		},
		{
			regex: "Infinix[ _-]X570",
			model: "Alpha"
		},
		{
			regex: "Infinix[ _-]X350",
			model: "Surf Smart"
		},
		{
			regex: "Infinix[ _-]X351",
			model: "Surf Smart 3G"
		},
		{
			regex: "Infinix[ _-]X352",
			model: "Surf Smart 2"
		},
		{
			regex: "Infinix[ _-]X403",
			model: "Surf Spice"
		},
		{
			regex: "Infinix[ _-]X503",
			model: "Surf Bravo"
		},
		{
			regex: "Infinix[ _-]X511",
			model: "Surf Noir"
		},
		{
			regex: "Infinix[ _-]X400",
			model: "Race"
		},
		{
			regex: "Infinix[ _-]X401",
			model: "Race Lite"
		},
		{
			regex: "Infinix[ _-]X450",
			model: "Race Bolt"
		},
		{
			regex: "Infinix[ _-]X451",
			model: "Race Bolt Q"
		},
		{
			regex: "Infinix[ _-]X454",
			model: "Race Bolt 2"
		},
		{
			regex: "Infinix[ _-]X500",
			model: "Race Eagle"
		},
		{
			regex: "Infinix[ _-]X501",
			model: "Race Jet"
		},
		{
			regex: "Infinix[ _-]X506",
			model: "Zero"
		},
		{
			regex: "Infinix[ _-]X509",
			model: "Zero 2"
		},
		{
			regex: "Infinix[ _-]X552",
			model: "Zero 3"
		},
		{
			regex: "Infinix[ _-]X555",
			model: "Zero 4"
		},
		{
			regex: "Infinix[ _-]X(?:574|602)",
			model: "Zero 4 Plus"
		},
		{
			regex: "Infinix[ _-]X603",
			model: "Zero 5"
		},
		{
			regex: "Infinix[ _-]X603B",
			model: "Zero 5 Pro"
		},
		{
			regex: "Infinix[ _-]X620",
			model: "Zero 6"
		},
		{
			regex: "Infinix[ _-]X507",
			model: "Hot"
		},
		{
			regex: "Infinix[ _-]X510",
			model: "Hot 2"
		},
		{
			regex: "Infinix[ _-]X55[34]",
			model: "Hot 3"
		},
		{
			regex: "Infinix[ _-]X521",
			model: "Hot S"
		},
		{
			regex: "Infinix[ _-]X522",
			model: "Hot S2"
		},
		{
			regex: "Infinix[ _-]X557",
			model: "Hot 4"
		},
		{
			regex: "Infinix[ _-]X556",
			model: "Hot 4 Pro"
		},
		{
			regex: "Infinix[ _-]X559c",
			model: "Hot 5"
		},
		{
			regex: "Infinix[ _-]X559",
			model: "Hot 5 Lite"
		},
		{
			regex: "Infinix[ _-]X606[BC]?",
			model: "Hot 6"
		},
		{
			regex: "Infinix[ _-]X608",
			model: "Hot 6 Pro"
		},
		{
			regex: "Infinix[ _-]X624",
			model: "Hot 7"
		},
		{
			regex: "Infinix[ _-]X650",
			model: "Hot 8"
		},
		{
			regex: "Infinix[ _-]X680",
			model: "Hot 9 Play"
		},
		{
			regex: "Infinix[ _-]X573B?",
			model: "Hot S3"
		},
		{
			regex: "Infinix[ _-]X5010",
			model: "Smart"
		},
		{
			regex: "Infinix[ _-]X5515F",
			model: "Smart 2"
		},
		{
			regex: "Infinix[ _-]X5514D",
			model: "Smart 2 Pro"
		},
		{
			regex: "Infinix[ _-]X653",
			model: "Smart 4"
		},
		{
			regex: "Infinix[ _-]X626",
			model: "S4"
		},
		{
			regex: "Infinix[ _-]X652",
			model: "S5"
		},
		{
			regex: "Infinix[ _-]X660",
			model: "S5 Pro"
		},
		{
			regex: "Infinix[ _-]X551",
			model: "Hot Note",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X600",
			model: "Note 2",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X601",
			model: "Note 3",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X572",
			model: "Note 4",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X571",
			model: "Note 4 Pro",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X604",
			model: "Note 5",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X610",
			model: "Note 6",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X690",
			model: "Note 7",
			device: "phablet"
		},
		{
			regex: "Infinix[ _-]X656",
			model: "Note 7 Lite",
			device: "phablet"
		},
		{
			regex: "Infinix HOT ([a-z]?[1-6])( (?:Lite|Plus|Pro))?",
			model: "Hot $1$2"
		},
		{
			regex: "Infinix[ _-](X[78]00)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Infinix[ _-](X\\d+)",
			model: "$1"
		},
		{
			regex: "Infinix[ _-]([a-z0-9_\\-]+)",
			model: "$1"
		}
	]
};
var InFocus = {
	regex: "IF(900[1237]|902[19]|903[15])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IF9001",
			model: "Turbo 5"
		},
		{
			regex: "IF9007",
			model: "A3"
		},
		{
			regex: "IF9021",
			model: "Turbo 5 Plus"
		},
		{
			regex: "IF9035",
			model: "A2"
		},
		{
			regex: "IF9002",
			model: "M5s"
		},
		{
			regex: "IF9003",
			model: "M6s"
		},
		{
			regex: "IF9031",
			model: "Vision 3"
		},
		{
			regex: "IF9029",
			model: "Vision 3 Pro"
		}
	]
};
var InnJoo = {
	regex: "InnJoo|(?:Halo Plus|Halo X|Halo[ _]4(?:[ _]mini[ _]LTE)?|Halo2 3G|Fire2 Plus LTE)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "InnJoo[ _]X3(?:[);/ ]|$)",
			model: "X3"
		},
		{
			regex: "Halo[ _]X[ _]LTE(?:[);/ ]|$)",
			model: "Halo X LTE"
		},
		{
			regex: "InnJoo[ _]X(?:[);/ ]|$)",
			model: "X"
		},
		{
			regex: "Halo Plus(?:[);/ ]|$)",
			model: "Halo Plus"
		},
		{
			regex: "Halo[ _]4[ _]mini[ _]LTE(?:[);/ ]|$)",
			model: "Halo 4 Mini LTE"
		},
		{
			regex: "Halo 4(?:[);/ ]|$)",
			model: "Halo 4"
		},
		{
			regex: "Halo2 3G(?:[);/ ]|$)",
			model: "Halo 2 3G"
		},
		{
			regex: "InnJoo[ _]Pro2(?:[);/ ]|$)",
			model: "Pro 2"
		},
		{
			regex: "Innjoo ONE 3G(?:[);/ ]|$)",
			model: "One 3G"
		},
		{
			regex: "Innjoo[ _]2[ _]LTE(?:[);/ ]|$)",
			model: "2 LTE"
		},
		{
			regex: "InnJoo[ _]([2-4])",
			model: "$1"
		},
		{
			regex: "Fire2 Plus LTE",
			model: "Fire 2 Plus LTE"
		}
	]
};
var Inkti = {
	regex: "intki[ _]([^/;]*)[ _]Build",
	device: "smartphone",
	model: "$1"
};
var Innos = {
	regex: "Innos_?(D6000)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Innostream = {
	regex: "INNO([a-z0-9]+)",
	device: "feature phone",
	model: "INNO$1"
};
var Insignia = {
	regex: "NS-(P11A8100|P10A8100|P10A6100|P16AT08|P16AT10|P16AT785HD|P08A7100|P10A7100)(?:[);/ ]|$)|AFTEAMR311|AFTJMST12",
	device: "tablet",
	models: [
		{
			regex: "NS-P11A8100",
			model: "11.6\""
		},
		{
			regex: "NS-(P10A6100|P16AT10)",
			model: "Flex 10.1\""
		},
		{
			regex: "NS-P16AT08",
			model: "Flex 8\""
		},
		{
			regex: "NS-P08A7100",
			model: "8\""
		},
		{
			regex: "NS-(P10A8100|P10A7100)",
			model: "10.1\""
		},
		{
			regex: "NS-P16AT785HD",
			model: "Flex Elite 7.85\""
		},
		{
			regex: "AFTEAMR311",
			model: "HD (2018)",
			device: "tv"
		},
		{
			regex: "AFTJMST12",
			model: "4K (2018)",
			device: "tv"
		}
	]
};
var INQ = {
	regex: "INQ[/ ]",
	device: "feature phone",
	models: [
		{
			regex: "INQ/([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "INQ ([^;/]+) Build",
			model: "$1",
			device: "smartphone"
		}
	]
};
var Intex = {
	regex: "Intex|(Aqua|Cloud[ _][XY][0-9]{1}|Cloud (?:Fame|Glory) 4G)|IM0318ND(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IM0318ND",
			model: "Aqua Lions 3"
		},
		{
			regex: "Intex[ _]([^/;]*)[ _]Build",
			model: "$1"
		},
		{
			regex: "(Cloud (?:Fame|Glory) 4G)",
			model: "$1"
		},
		{
			regex: "(Aqua|Cloud)[ _\\.]([^/;\\)]+)(?:[ _]Build|(?<!Build)/|\\))",
			model: "$1 $2"
		},
		{
			regex: "Intex[ _]([a-z0-9_+\\-]+)",
			model: "$1"
		}
	]
};
var iKoMo = {
	regex: "iKoMo ([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var iOcean = {
	regex: "iOCEAN|M6752|W180|X7[ _]?S|X8 mini",
	device: "smartphone",
	models: [
		{
			regex: "X7S-T",
			model: "X7S-T"
		},
		{
			regex: "X8 mini pro",
			model: "X8 Mini Pro"
		},
		{
			regex: "X8 mini",
			model: "X8 Mini"
		},
		{
			regex: "X7[ _]?S",
			model: "X7S Elite"
		},
		{
			regex: "(M6752|W180) Build",
			model: "$1"
		},
		{
			regex: "iOCEAN[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "iOCEAN[ _\\-]?([^);/ ]+)",
			model: "$1"
		}
	]
};
var iView = {
	regex: "(733TPC|730TPC|769TPCII|930TPC)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Impression = {
	regex: "(?:Impression[ _\\-]?([^/;]+)|A502|I10\\-LE|ImPad[ _]?(.*)|ImSmart[ _]?(.*))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(A502)",
			model: "$1",
			device: "smartphone"
		},
		{
			regex: "ImSmart[ _]?([^/;)]+)(?: Build|\\))",
			model: "ImSmart $1",
			device: "smartphone"
		},
		{
			regex: "ImPad[ _]?([^/;)]+)(?: Build|\\))",
			model: "ImPad $1"
		},
		{
			regex: "(I10\\-LE)",
			model: "$1",
			device: "smartphone"
		},
		{
			regex: "Impression[ _\\-]?([^/;)]+)(?: Build|\\))",
			model: "$1"
		}
	]
};
var iLife = {
	regex: "(ITELL[_ ](?:K3300|K3500N?|K4700))(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var iTel = {
	regex: "itel|iNote|GP10X2019(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "W6502",
			device: "phablet",
			model: "S16"
		},
		{
			regex: "W5505",
			model: "A36"
		},
		{
			regex: "W6002E?",
			model: "S15"
		},
		{
			regex: "L5502",
			model: "A44 Air"
		},
		{
			regex: "L5505",
			model: "A47"
		},
		{
			regex: "L6006",
			model: "A48"
		},
		{
			regex: "L6003P",
			model: "A55 LTE"
		},
		{
			regex: "L6002P",
			model: "S15 Pro"
		},
		{
			regex: "L5002",
			model: "A22"
		},
		{
			regex: "L5503",
			model: "A46"
		},
		{
			regex: "L6004",
			model: "A56 LTE"
		},
		{
			regex: "W6004P",
			model: "A56 Pro"
		},
		{
			regex: "W6001",
			model: "P33 Plus"
		},
		{
			regex: "W6003",
			model: "A55"
		},
		{
			regex: "L6005",
			model: "Vision 1"
		},
		{
			regex: "L6501",
			model: "Vision 1 Plus"
		},
		{
			regex: "L6502",
			model: "Vision 1 Pro"
		},
		{
			regex: "GP10X2019",
			model: "GP10X2019"
		},
		{
			regex: "iNote ([^/;]*)Build",
			model: "iNote $1"
		},
		{
			regex: "iNote_([a-z0-9\\-_]+)",
			model: "iNote $1"
		},
		{
			regex: "itel-it(1410|1512|1520)(?:[);/ ]|$)",
			model: "it$1"
		},
		{
			regex: "itel-it1553(?:[);/ ]|$)",
			model: "Power Pro"
		},
		{
			regex: "itel[- ](A14|A16 Plus|A44 Power|A23S|A52 Lite)",
			model: "$1"
		},
		{
			regex: "itel it1701",
			device: "tablet",
			model: "iNote Prime"
		},
		{
			regex: "itel it170([23])",
			device: "tablet",
			model: "iNote Prime $1"
		},
		{
			regex: "iTel ([^/;]*)Build",
			model: "$1"
		},
		{
			regex: "iTel[_ ]([a-z0-9\\-_]*)",
			model: "$1"
		}
	]
};
var iZotron = {
	regex: "(Mi7_HERO_(?:BETA|TAB))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "Mi7[_ ]HERO[_ ]BETA(?:[);/ ]|$)",
			model: "MI7 Hero Beta"
		},
		{
			regex: "Mi7[_ ]HERO[_ ]TAB(?:[);/ ]|$)",
			model: "MI7 Hero Tab"
		}
	]
};
var Jiayu = {
	regex: "JIAYU[ _-]|(?:JY-G4[\\\\_]G5|(?:JY-[a-z0-9]+)|JY_G4C)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:JIAYU G4_G5|JY-G4[\\\\_]G5)(?:[);/ ]|$)",
			model: "G4/G5"
		},
		{
			regex: "JIAYU[ _-](G4[S]?|G2F|G3[S]?|S[23])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "JY[-_]([a-z0-9]+|G4C)(?:[);/ ]|$)",
			model: "JY-$1"
		}
	]
};
var Jolla = {
	regex: "Jolla",
	device: "smartphone",
	model: ""
};
var Just5 = {
	regex: "JUST5(-)?SPACER(s)?|COSMO[_ ](L707|L808)|BLASTER|FREEDOM[ _](C100|M303|X1)|Freedom",
	device: "smartphone",
	models: [
		{
			regex: "COSMO[_ ](L707|L808)",
			model: "Cosmo $1"
		},
		{
			regex: "FREEDOM[ _](C100|M303|X1)",
			model: "Freedom $1"
		},
		{
			regex: "Freedom",
			model: "Freedom"
		},
		{
			regex: "JUST5(-)?SPACER2s",
			model: "Spacer 2S"
		},
		{
			regex: "JUST5(-)?SPACER2",
			model: "Spacer 2"
		},
		{
			regex: "JUST5SPACER",
			model: "Spacer"
		},
		{
			regex: "BLASTER 2",
			model: "Blaster 2"
		},
		{
			regex: "BLASTER",
			model: "Blaster"
		}
	]
};
var Kalley$1 = {
	regex: "KALLEY|(?:ELEMENT (?:MAX|Q)|ELEMENT_PRO_2|K-BOOK(?:8MG|73G))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ELEMENT MAX",
			model: "Element Max"
		},
		{
			regex: "ELEMENT Q",
			model: "Element Q"
		},
		{
			regex: "ELEMENT_PRO_2",
			model: "Element Pro 2"
		},
		{
			regex: "K-BOOK(8MG|73G)",
			device: "tablet",
			model: "K-BOOK$1"
		},
		{
			regex: "KALLEY,(55D1240)",
			device: "tv",
			model: "$1"
		}
	]
};
var Kaan = {
	regex: "KAAN[ _](N[12]|A1)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Kazam = {
	regex: "Kazam|Trooper_X[0-9][0-9](?:[);/ ]|$)|Tornado 348|TROOPER 4\\.0",
	device: "smartphone",
	models: [
		{
			regex: "Tornado 348",
			model: "Tornado 348"
		},
		{
			regex: "Thunder 450W",
			model: "Thunder 450W"
		},
		{
			regex: "TROOPER 4\\.0",
			model: "Trooper X4.0"
		},
		{
			regex: "Trooper_X([0-9])([0-9])(?:[);/ ]|$)",
			model: "Trooper X$1.$2"
		},
		{
			regex: "Kazam[; _]([^;/)]+)(?: Build|\\))",
			model: "$1"
		}
	]
};
var Keneksi = {
	regex: "KENEKSI|(?:Hemera|Teta Dual|Helios)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(Hemera|Teta Dual|Helios)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "KENEKSI[ _-]liberty",
			model: "Liberty"
		},
		{
			regex: "KENEKSI[ _-]FLASH",
			model: "Flash"
		},
		{
			regex: "KENEKSI[ _-]SUN",
			model: "Sun"
		},
		{
			regex: "KENEKSI[ _-]ZETA",
			model: "Zeta"
		},
		{
			regex: "KENEKSI[ _-]SIGMA",
			model: "Sigma"
		},
		{
			regex: "KENEKSI[ _-](Moon|Libra_Dual|Glass|Amber|Chance|Amulet|Choice|Crystal|Dream|Delta[_ ]Dual|Norma 2|Norma|Sky|Fire 2|Fire|Flame|Flora|Rock|Solo|Soul|Step|Smart|Star|Storm|Wind)",
			model: "$1"
		}
	]
};
var Kiano = {
	regex: "Kiano|Elegance_[45]_[015](?:_PRO)?|Elegance 6|CORE 10.1 DUAL 3G|Intelect ?(7|8|10)|Slim ?Tab ?\\d+(?:[_ ]3GR?)?(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Slim ?Tab ?(\\d+)(?:[_ ]3GR?)?",
			model: "Slim Tab $1",
			device: "tablet"
		},
		{
			regex: "CORE 10.1 DUAL 3G",
			model: "CORE 10.1 DUAL 3G",
			device: "tablet"
		},
		{
			regex: "Elegance_(5)_([51])_Pro",
			model: "Elegance $1.$2\" Pro"
		},
		{
			regex: "Elegance_([45])_([015])",
			model: "Elegance $1.$2\""
		},
		{
			regex: "Elegance 6",
			model: "Elegance 6 5.85\""
		},
		{
			regex: "(Kiano)?(Intelect|Elegance) ?(7|8|10)?",
			model: "$2 $3",
			device: "tablet"
		},
		{
			regex: "Kiano[ _]([^;/]+) Build",
			model: "$1"
		}
	]
};
var Kingsun = {
	regex: "Kingsun[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "Kingsun[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Kingsun[ -]((?!Build)[a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Kocaso = {
	regex: "Kocaso|M(?:729|7[357][026][hw]?|76[01236][bw]?|83[016]|8[567]0|1050s|106[012368]w?|1070|X736(?:-kit)?|X780)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "M729(?:[);/ ]|$)",
			model: "M729"
		},
		{
			regex: "M(7[357][026])[hw]?(?:[);/ ]|$)",
			model: "M$1"
		},
		{
			regex: "M(76[01236])[bw]?(?:[);/ ]|$)",
			model: "M$1"
		},
		{
			regex: "MX780(?:[);/ ]|$)",
			model: "MX780"
		},
		{
			regex: "M(83[016])(?:[);/ ]|$)",
			model: "M$1"
		},
		{
			regex: "M(8[567]0)(?:[);/ ]|$)",
			model: "M$1"
		},
		{
			regex: "M851(?:[);/ ]|$)",
			model: "M851"
		},
		{
			regex: "M1050S(?:[);/ ]|$)",
			model: "M1050s"
		},
		{
			regex: "M(106[012368])W?(?:[);/ ]|$)",
			model: "M$1"
		},
		{
			regex: "M1070(?:[);/ ]|$)",
			model: "M1070"
		},
		{
			regex: "MX736(?:-kit)?(?:[);/ ]|$)",
			model: "MX736"
		},
		{
			regex: "MX780(?:[);/ ]|$)",
			model: "MX780"
		},
		{
			regex: "Kocaso[ _\\-]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Kocaso[ _\\-]?([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Kogan = {
	regex: "Kogan",
	device: "smartphone",
	models: [
		{
			regex: "Kogan[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Kogan[ _-]([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Komu = {
	regex: "Komu[ -]",
	device: "smartphone",
	models: [
		{
			regex: "Komu[ -]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Komu[ -]([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Koobee = {
	regex: "Koobee",
	device: "smartphone",
	models: [
		{
			regex: "Koobee[ _\\-]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Koobee[ _\\-]?([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Kumai = {
	regex: "(?:KM-)?Kumai",
	device: "smartphone",
	models: [
		{
			regex: "(?:KM-)?Kumai[ _\\-]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "(?:KM-)?Kumai[ _\\-]?([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var KDDI = {
	regex: "kddi-([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Kodak = {
	regex: "KODAK|(?:IM5|Ektra|Smartway_T1)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IM5",
			model: "IM5"
		},
		{
			regex: "Ektra(?:[);/ ]|$)",
			model: "Ektra"
		},
		{
			regex: "(?:KODAK[_ ])?SMARTWAY[_ ]([MTX]1)",
			model: "Smartway $1"
		},
		{
			regex: "Tablet (7|10)",
			device: "tablet",
			model: "Tablet $1"
		}
	]
};
var KOPO = {
	regex: "KOPO[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "KOPO[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "KOPO[ _\\-]?([^);/ ]+)",
			model: "$1"
		}
	]
};
var Koridy = {
	regex: "KORIDY[ _-]([^/;]+) Build",
	device: "smartphone",
	model: "$1"
};
var KRONO = {
	regex: "NET1100|NET_(?:TITAN|VOLT)",
	device: "smartphone",
	models: [
		{
			regex: "NET1100",
			model: "NET 1100"
		},
		{
			regex: "NET_(TITAN|VOLT)",
			model: "NET $1"
		}
	]
};
var Diva = {
	regex: "(QC-(?:703GN|704GA|803GN|1013G|7BHD))(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Kyocera = {
	regex: "Kyocera|KWC-|QC-[0-9]{4}|(?:QC6035|NP501KC|302KC|503KC|602KC|705KC|901KC|C51[27]0|C5155|C5215|C67[35]0|C6522N?|C6530N|C6740N?|C6743|E6[89]10|KYL2[13]|KYV3[13-9]|KYT3[123]|KYF3[123579]|KYF40|KYX31|KYG01|KYY2[1-4]|S2151|KC-S701|S[468]-KC|KYV40U?|KYV4[1-8]|KYV4[47]|KC-S301AE|X3-KC|E6560[CT]|E6782[L]?|E6790(?:TM)?|[47]04KC|A001KC|WX10K|URBANO PROGRESSO|E7110)(?:[-_]u2?)?(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "C5120(?:[);/ ]|$)",
			model: "Milano"
		},
		{
			regex: "S4-KC(?:[);/ ]|$)",
			model: "One S4"
		},
		{
			regex: "S6-KC(?:[);/ ]|$)",
			model: "One S6"
		},
		{
			regex: "S8-KC(?:[);/ ]|$)",
			model: "One S8"
		},
		{
			regex: "C5155(?:[);/ ]|$)",
			model: "Rise"
		},
		{
			regex: "602KC(?:[);/ ]|$)",
			model: "Digno G"
		},
		{
			regex: "503KC(?:[);/ ]|$)",
			model: "Digno E"
		},
		{
			regex: "404KC(?:[);/ ]|$)",
			model: "Digno C"
		},
		{
			regex: "704KC(?:[);/ ]|$)",
			model: "Digno J"
		},
		{
			regex: "302KC(?:[);/ ]|$)",
			model: "Digno T"
		},
		{
			regex: "NP501KC(?:[);/ ]|$)",
			model: "Digno"
		},
		{
			regex: "WX10K(?:[);/ ]|$)",
			model: "Digno Dual 2"
		},
		{
			regex: "KYV36(?:[);/ ]|$)",
			model: "Digno Rafre"
		},
		{
			regex: "901KC(?:[);/ ]|$)",
			model: "Digno BX"
		},
		{
			regex: "KYV39(?:[);/ ]|$)",
			model: "Miraie F"
		},
		{
			regex: "KYX31(?:[);/ ]|$)",
			model: "Infobar XV"
		},
		{
			regex: "C5170(?:[);/ ]|$)",
			model: "Hydro"
		},
		{
			regex: "C5215(?:[);/ ]|$)",
			model: "Hydro EDGE"
		},
		{
			regex: "C6522N?",
			model: "Hydro XTRM"
		},
		{
			regex: "C6730",
			model: "Hydro ICON"
		},
		{
			regex: "C6750",
			model: "Hydro ELITE"
		},
		{
			regex: "C6530N",
			model: "Hydro LIFE"
		},
		{
			regex: "C6740(N)?",
			model: "Hydro WAVE"
		},
		{
			regex: "C6743",
			model: "Hydro Reach"
		},
		{
			regex: "E6560[CT]",
			model: "DuraForce"
		},
		{
			regex: "E6810",
			model: "DuraForce Pro"
		},
		{
			regex: "E6910",
			model: "DuraForce Pro 2"
		},
		{
			regex: "E7110",
			model: "DuraForce Ultra 5G"
		},
		{
			regex: "KC-S701",
			model: "Torque"
		},
		{
			regex: "KYG01",
			model: "Torque 5G"
		},
		{
			regex: "KYL21(?:[);/ ]|$)",
			model: "Digno S"
		},
		{
			regex: "KYL23(?:[);/ ]|$)",
			model: "Miraie"
		},
		{
			regex: "KYY24(?:[);/ ]|$)",
			model: "Torque G01"
		},
		{
			regex: "KYF32(?:[);/ ]|$)",
			model: "Easy Mobile Phone"
		},
		{
			regex: "KYF35(?:[);/ ]|$)",
			model: "Marvera"
		},
		{
			regex: "KYF40(?:[);/ ]|$)",
			model: "Mamorino 5"
		},
		{
			regex: "KYF3[179](?:[);/ ]|$)",
			model: "Gratina 4G"
		},
		{
			regex: "KYV48(?:[);/ ]|$)",
			model: "Gratina KYV48"
		},
		{
			regex: "KYF33(?:[);/ ]|$)",
			model: "Torque X01"
		},
		{
			regex: "KYV35(?:[);/ ]|$)",
			model: "Torque G02"
		},
		{
			regex: "KYV41(?:[);/ ]|$)",
			model: "Torque G03"
		},
		{
			regex: "KYV46(?:[);/ ]|$)",
			model: "Torque G04"
		},
		{
			regex: "KYV47(?:-u)?(?:[);/ ]|$)",
			model: "Basio 4"
		},
		{
			regex: "KYV43(?:[);/ ]|$)",
			model: "Basio 3"
		},
		{
			regex: "705KC(?:[);/ ]|$)",
			model: "Kantan Sumaho"
		},
		{
			regex: "KYV37(?:[);/ ]|$)",
			model: "Qua Phone"
		},
		{
			regex: "KYV42(?:_u)?(?:[);/ ]|$)",
			model: "Qua Phone QX"
		},
		{
			regex: "KYV44(?:_u2?)?(?:[);/ ]|$)",
			model: "Qua Phone QZ"
		},
		{
			regex: "KYT33(?:[);/ ]|$)",
			model: "Qua Tab QZ10",
			device: "tablet"
		},
		{
			regex: "KYT32(?:[);/ ]|$)",
			model: "Qua Tab QZ8",
			device: "tablet"
		},
		{
			regex: "KYT31(?:[);/ ]|$)",
			model: "Qua Tab 01",
			device: "tablet"
		},
		{
			regex: "KYV40U?(?:[);/ ]|$)",
			model: "Rafre"
		},
		{
			regex: "KYV33(?:[);/ ]|$)",
			model: "Infobar A03"
		},
		{
			regex: "KYY21(?:[);/ ]|$)",
			model: "Urbano L01"
		},
		{
			regex: "KYY22(?:[);/ ]|$)",
			model: "Urbano L02"
		},
		{
			regex: "KYY23(?:[);/ ]|$)",
			model: "Urbano L03"
		},
		{
			regex: "KYV31(?:[);/ ]|$)",
			model: "Urbano V01"
		},
		{
			regex: "KYV34(?:[);/ ]|$)",
			model: "Urbano V02"
		},
		{
			regex: "KYV(?:45|38)(?:[);/ ]|$)",
			model: "Urbano V03"
		},
		{
			regex: "(?:Kyocera-)?E6790(?:TM)?",
			model: "DuraForce XD"
		},
		{
			regex: "X3-KC(?:[);/ ]|$)",
			model: "One X3"
		},
		{
			regex: "E6782(?:[);/ ]|$)",
			model: "Brigadier"
		},
		{
			regex: "E6782L(?:[);/ ]|$)",
			model: "DuraScout"
		},
		{
			regex: "(KC-S301AE)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "A001KC(?:[);/ ]|$)",
			model: "Katan Sumaho 2"
		},
		{
			regex: "URBANO PROGRESSO(?:[);/ ]|$)",
			model: "Urbano Progresso"
		},
		{
			regex: "S2151",
			model: "Coast",
			device: "feature phone"
		},
		{
			regex: "Kyocera-KZ-([a-z0-9]+)",
			model: "KZ $1"
		},
		{
			regex: "Kyocera(?:[\\-/])?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(KWC|QC)-?([a-z0-9]+)",
			model: "$1-$2"
		}
	]
};
var LAIQ = {
	regex: "LAIQ",
	device: "smartphone",
	models: [
		{
			regex: "(Glam|New York|Dubai)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var AIS = {
	regex: "iris708|Kingcomm C500",
	device: "smartphone",
	models: [
		{
			regex: "iris708",
			model: "LAVA PRO 4.5"
		},
		{
			regex: "Kingcomm C500",
			model: "Super Smart Plus X3"
		}
	]
};
var Lava = {
	regex: "Lava[ _]|LAVAA1|(?:DISCOVER136|KKT QUADRA)|iris[ _]?([^/;]+)(?:\\)| Build)|A(?:67|76) Build|X1 Selfie Build|X41 Plus Build|(?:Flair Z1|PixelV1|Pixel V2|Z61_2GB|A97 IPS|A97 2GB PLUS|L[EH]9920(?:[_ ]P)?|L[NEH]9910|LH9810|Ivory(?:S1|S4G)?|A76Plus)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Flair Z1(?:[);/ ]|$)",
			model: "Flair Z1"
		},
		{
			regex: "A97 IPS(?:[);/ ]|$)",
			model: "A97 IPS"
		},
		{
			regex: "A97 2GB PLUS(?:[);/ ]|$)",
			model: "A97 2GB Plus"
		},
		{
			regex: "A76Plus(?:[);/ ]|$)",
			model: "A76 Plus"
		},
		{
			regex: "Pixel ?V([12])(?:[);/ ]|$)",
			model: "Pixel V$1"
		},
		{
			regex: "X1 Selfie(?:[);/ ]|$)",
			model: "Iris X1 Selfie"
		},
		{
			regex: "X41 Plus(?:[);/ ]|$)",
			model: "X41 Plus"
		},
		{
			regex: "(?:LAVA[_ ]?)?A([13]|67|76)(?:[);/ ]|$)",
			model: "A$1"
		},
		{
			regex: "LAVA_R1",
			model: "R1"
		},
		{
			regex: "Z61_2GB(?:[);/ ]|$)",
			model: "Z61"
		},
		{
			regex: "LE9920[ _]P(?:[);/ ]|$)",
			model: "V7"
		},
		{
			regex: "LE9920(?:[);/ ]|$)",
			model: "Z53"
		},
		{
			regex: "LH9910(?:[);/ ]|$)",
			model: "Z52"
		},
		{
			regex: "LH9810(?:[);/ ]|$)",
			model: "Iris 52"
		},
		{
			regex: "LN9910(?:[);/ ]|$)",
			model: "Z41"
		},
		{
			regex: "LE9910(?:[);/ ]|$)",
			model: "V8"
		},
		{
			regex: "LH9920(?:[);/ ]|$)",
			model: "V+6"
		},
		{
			regex: "DISCOVER136",
			device: "feature phone",
			model: "Discover 136"
		},
		{
			regex: "KKT QUADRA",
			device: "feature phone",
			model: "KKT Quadra"
		},
		{
			regex: "KKT40[ ]?Power[P\\+]",
			device: "feature phone",
			model: "KKT40 Power Plus"
		},
		{
			regex: "Ivory(S1|S4G)?(?:[);/ ]|$)",
			device: "tablet",
			model: "Ivory $1"
		},
		{
			regex: "iris[ _]?([^/;]+)(?:\\)| Build)",
			model: "Iris $1"
		},
		{
			regex: "Lava[ _]?([^/;]+)(?:/| Build)",
			model: "$1"
		}
	]
};
var SKG = {
	regex: "(Modern[ _](?:S10?|S[3679]))(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Landvo = {
	regex: "XM[123]00|(?<!Blade )S6 Build",
	device: "smartphone",
	models: [
		{
			regex: "S6 Build",
			model: "S6"
		},
		{
			regex: "XM([123])00([^/;]*) Build",
			model: "XM$100$2"
		}
	]
};
var Lanix = {
	regex: "LANIX-([a-z0-9]+)|Ilium[ _]|IliumPad|X120C|Alpha 950",
	device: "smartphone",
	models: [
		{
			regex: "ILIUM[ _]?PAD[ _]?([^;/]+)(?: Build|[;)])",
			model: "Ilium Pad $1",
			device: "tablet"
		},
		{
			regex: "X120C",
			model: "Ilium X120C"
		},
		{
			regex: "Ilium[ _](Alpha [15]s|Alpha [379]|L(?:200|6[12]0|9[0125]0|1[0124]00|1050|1120)|LT5[012]0|M[13579]|S(?:106|520|6[27]0)|X(?:1[12]0|2[0126]0|5[12]0|500B|710)|M[579]s)(?:[);/ ]|$)",
			model: "Ilium $1"
		},
		{
			regex: "ILIUM[ _]([^;/]+) Build",
			model: "Ilium $1"
		},
		{
			regex: "Alpha 950",
			model: "Ilium Alpha 950"
		},
		{
			regex: "LANIX-([a-z0-9]+)",
			device: "feature phone",
			model: "$1"
		}
	]
};
var Lark = {
	regex: "(Lark|Cumulus|Evolution|FreeMe|Ultimate (?:X4|7i))[ _-]|Build/Lark|Bjorn[_ ]SP-500|FreeBird 5WiFi",
	device: "tablet",
	models: [
		{
			regex: "Cumulus[ _](5\\.5|[56])[ _]HD",
			model: "Cumulus $1 HD",
			device: "smartphone"
		},
		{
			regex: "FreeMe X2 ([79]) (?:ver|v)?\\.([23])",
			model: "FreeMe X2 $1 Version $2"
		},
		{
			regex: "FreeMe X4 7 3G HD",
			model: "FreeMe X4 7HD 3G"
		},
		{
			regex: "FreeMe[ _]X2[ _]([7-9])",
			model: "FreeMe X2 $1"
		},
		{
			regex: "FreeMe X4[ _]7[_ ]HD",
			model: "FreeMe X4 7HD"
		},
		{
			regex: "FreeMe X4[ _]9",
			model: "FreeMe X4 9"
		},
		{
			regex: "FreeBird 5WiFi",
			model: "FreeBird 5 WiFi"
		},
		{
			regex: "(?:Lark[ _-])?Evolution[ _](X2 7 3G-GPS|X4[_ ]10\\.1|10|X4[_ ]7[ _]IPS)",
			model: "Evolution $1"
		},
		{
			regex: "Ul(?:ti|it)mate (X4 10\\.1 3G IPS|X4 8s 3G|7i)",
			model: "Ultimate $1"
		},
		{
			regex: "PHABLET 7",
			model: "Phablet 7"
		},
		{
			regex: "Phablet 6\\.0",
			model: "Phablet 6.0",
			device: "smartphone"
		},
		{
			regex: "Bjorn[_ ]SP-500",
			model: "Bjorn SP-500",
			device: "smartphone"
		},
		{
			regex: "Cirrus[ _](4\\.5|[45])",
			model: "Cirrus $1",
			device: "smartphone"
		},
		{
			regex: "Lark[ _](Stratus[_ ]5)",
			model: "$1",
			device: "smartphone"
		}
	]
};
var LCT = {
	regex: "LCT_([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Leagoo = {
	regex: "(?:MY)?LEAGOO[ _-]?|(?:M5 EDGE|KIICAA (POWER|MIX)|Leapad[ _](?:X|7s)|Elite [15]|Venture 1|Z10-E)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "LEAGOO[- _]M8[_-]?Pro(?:[);/ ]|$)",
			model: "M8 Pro"
		},
		{
			regex: "LEAGOO[- _](Z[156]|M[58]|T1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "M5 EDGE",
			model: "M5 Edge"
		},
		{
			regex: "LEAGOO[_ ]Lead([57])",
			model: "Lead $1"
		},
		{
			regex: "KIICAA POWER",
			model: "KICCAA Power"
		},
		{
			regex: "KIICAA MIX",
			model: "KICCAA Mix"
		},
		{
			regex: "Elite ([15])(?:[);/ ]|$)",
			model: "Elite $1"
		},
		{
			regex: "Venture 1(?:[);/ ]|$)",
			model: "Venture 1"
		},
		{
			regex: "(?:LEAGOO[- _])?(Z10-E|M6)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(?:My)?Leagoo[- _](E4)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(?:Leapad[ _])(7s|10|X)",
			model: "LeaPad $1",
			device: "tablet"
		}
	]
};
var Ledstar = {
	regex: "(?:Ledstar[_ ])?(?:Trendy 5.0|Novus_Premium_6.0)",
	device: "smartphone",
	models: [
		{
			regex: "Trendy 5.0",
			model: "Trendy 5.0"
		},
		{
			regex: "Ledstar_Novus_Premium_6.0(?:[);/ ]|$)",
			model: "Novus Premium 6.0\""
		}
	]
};
var LeEco = {
	regex: "Letv|LeEco|Le ?X[0-9][^;/]+|Le Max|Le [12]|Le2[_ ]x527|X900 Build|(?:X[89]00\\+|X52[67])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "X800\\+",
			model: "Le 1 Pro"
		},
		{
			regex: "X900\\+",
			model: "Max X900+"
		},
		{
			regex: "X50[10]",
			model: "Le 1S"
		},
		{
			regex: "(X910)",
			model: "$1"
		},
		{
			regex: "X900 Build",
			model: "Le X900"
		},
		{
			regex: "(?:Le ?X526|Le2[_ ]x527|Le 2|X52[67])(?:[);/ ]|$)",
			model: "Le 2"
		},
		{
			regex: "Le ?X([^;/]+) Build",
			model: "Le X$1"
		},
		{
			regex: "Le ?X([^) ;/]+)",
			model: "Le X$1"
		},
		{
			regex: "Le ?([12][^;/]+) Build",
			model: "Le $1"
		},
		{
			regex: "Le Max([^;/]*) Build",
			model: "Le Max$1"
		},
		{
			regex: "Le Max([^ ;/]*)",
			model: "Le Max$1"
		},
		{
			regex: "LeEco ([^;/]+) Build",
			model: "$1"
		}
	]
};
var Leotec = {
	regex: "LESPH501[14]|LESPH5003B|SUPERNOVA (Qi16|Qi32|i3G96[X]?)",
	device: "smartphone",
	models: [
		{
			regex: "LESPH5011",
			model: "Argon e250"
		},
		{
			regex: "LESPH5003B",
			model: "Argon A250B"
		},
		{
			regex: "LESPH5014",
			model: "Krypton K150"
		},
		{
			regex: "SUPERNOVA (Qi16|Qi32|i3G96[X]?)",
			device: "tablet",
			model: "Supernova $1"
		}
	]
};
var Lephone = {
	regex: "lephone[ _]|lephoneP1",
	device: "smartphone",
	models: [
		{
			regex: "lephone[ _](K7|K10)",
			device: "feature phone",
			model: "$1"
		},
		{
			regex: "lephone(?:[ _])?(W(1[0125]|[279])|T2|P1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "lephone_W7_plus",
			model: "W7 Plus"
		}
	]
};
var Lenco = {
	regex: "Lenco ([^/;]*) Build",
	device: "tablet",
	model: "$1"
};
var Lenovo$2 = {
	regex: "(?:LNV-)?Lenovo|IdeaTab|IdeaPad|Thinkpad|Yoga Tablet|Tab2A[0-9]-[0-9]{2}[a-z]?|ZUK[ -_]|(?:TB2-X30L|TB3-710I|YT3-X50[ML]|K50a40|TB-(?:X103F|8504F|X304F|X704V|X704A)|A5500-H|A2107A-H|A3500-HV|A2109A|S6000|Z2 Plus|Vibe[ _](?:P1|S6i Plus|S[23567]i|C|[ZX]2|K5(?: Plus)?|V7)|P2A42|L38011|L18011|[5-8]01LV|[67]02LV|Z2131|K350t|K31-t3|TAB 2 A8-50LC|S90-A|P70-A|VR-1541F)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Lenovo ?G780",
			model: "G780",
			device: "desktop"
		},
		{
			regex: "Lenovo ?A3500-FL",
			model: "IdeaTab A7-40",
			device: "tablet"
		},
		{
			regex: "(?:Lenovo ?)?A3500-(?:H|HV|F)",
			model: "IdeaTab A7-50",
			device: "tablet"
		},
		{
			regex: "(?:Lenovo[ _])?A5500-[HF]",
			model: "IdeaTab A8-50",
			device: "tablet"
		},
		{
			regex: "Lenovo ?A7600-[HF]",
			model: "IdeaTab A10-70",
			device: "tablet"
		},
		{
			regex: "A2107A-H",
			model: "A2107",
			device: "tablet"
		},
		{
			regex: "A2109A",
			model: "IdeaTab A2109A",
			device: "tablet"
		},
		{
			regex: "TB2-X30[FL]",
			model: "Tab 2 A10-30",
			device: "tablet"
		},
		{
			regex: "YT3-X50[FLM]",
			model: "Yoga Tab 3",
			device: "tablet"
		},
		{
			regex: "TB3-730X",
			model: "TAB3 7",
			device: "tablet"
		},
		{
			regex: "TB3-710[IF]",
			model: "TAB3 7 Essential",
			device: "tablet"
		},
		{
			regex: "TB-7703X",
			model: "TAB3 7 Plus",
			device: "tablet"
		},
		{
			regex: "TB3-X70L",
			model: "TAB3 10 Plus",
			device: "tablet"
		},
		{
			regex: "TB-8703X",
			model: "TAB3 8 Plus",
			device: "tablet"
		},
		{
			regex: "TAB 2 A8-50LC",
			model: "TAB2 A8-50LC",
			device: "tablet"
		},
		{
			regex: "501LV(?:[);/ ]|$)",
			model: "TAB2 8.0\"",
			device: "tablet"
		},
		{
			regex: "TAB 2 A10-70L(?:[);/ ]|$)",
			model: "TAB 2 A10",
			device: "tablet"
		},
		{
			regex: "(?:TB3-850[FM]|601LV)(?:[);/ ]|$)",
			model: "TAB3 8",
			device: "tablet"
		},
		{
			regex: "602LV(?:[);/ ]|$)",
			model: "TAB3 8 Dual",
			device: "tablet"
		},
		{
			regex: "TB-X304[FL]",
			model: "TAB4 10",
			device: "tablet"
		},
		{
			regex: "TB-8504X",
			model: "TAB4 8",
			device: "tablet"
		},
		{
			regex: "TB-8704X",
			model: "TAB4 8 Plus",
			device: "tablet"
		},
		{
			regex: "(?:TB-X704[FVL]|70[12]LV)(?:[);/ ]|$)",
			model: "TAB4 10 Plus",
			device: "tablet"
		},
		{
			regex: "801LV(?:[);/ ]|$)",
			model: "TAB5 10.1\"",
			device: "tablet"
		},
		{
			regex: "TB-X103F(?:[);/ ]|$)",
			model: "TAB10 10.1\"",
			device: "tablet"
		},
		{
			regex: "TB-X704A(?:[);/ ]|$)",
			model: "Moto Tab",
			device: "tablet"
		},
		{
			regex: "TB-X605F(?:[);/ ]|$)",
			model: "Tab M10",
			device: "tablet"
		},
		{
			regex: "TB-X705F(?:[);/ ]|$)",
			model: "Tab P10",
			device: "tablet"
		},
		{
			regex: "TB-X705F(?:[);/ ]|$)",
			model: "Tab P10",
			device: "tablet"
		},
		{
			regex: "TB-7104I(?:[);/ ]|$)",
			model: "Tab E7",
			device: "tablet"
		},
		{
			regex: "TB-8304F1(?:[);/ ]|$)",
			model: "Tab E8",
			device: "tablet"
		},
		{
			regex: "TB-7304X(?:[);/ ]|$)",
			model: "Tab 7 Essential",
			device: "tablet"
		},
		{
			regex: "TB-7504X(?:[);/ ]|$)",
			model: "Tab 7",
			device: "tablet"
		},
		{
			regex: "TB-X606[FXV](?:[);/ ]|$)",
			model: "Tab M10 FHD Plus",
			device: "tablet"
		},
		{
			regex: "Lenovo ?B8000(-[FH])?",
			model: "Yoga Tablet 10",
			device: "tablet"
		},
		{
			regex: "YOGA Tablet 2 Pro-1380[FL]",
			model: "Yoga Tablet 2 Pro 13.3\"",
			device: "tablet"
		},
		{
			regex: "YOGA Tablet 2-1050[FL]",
			model: "Yoga Tablet 2 10.1\"",
			device: "tablet"
		},
		{
			regex: "YOGA Tablet 2-830(?:[FL]|LC)",
			model: "Yoga Tablet 2 8.0\"",
			device: "tablet"
		},
		{
			regex: "Lenovo ?B6000(-[FH])?",
			model: "Yoga Tablet 8",
			device: "tablet"
		},
		{
			regex: "YT3-X90(L|F|X)",
			model: "Yoga 3 Pro",
			device: "tablet"
		},
		{
			regex: "YT3-850[FL]",
			model: "Yoga Tab 3 8",
			device: "tablet"
		},
		{
			regex: "YT3-850M",
			model: "Yoga Tab 3 10",
			device: "tablet"
		},
		{
			regex: "YT-X703L",
			model: "Yoga Tab 3 Plus",
			device: "tablet"
		},
		{
			regex: "S6000(?:[);/ ]|$)",
			model: "IdeaTab S6000",
			device: "tablet"
		},
		{
			regex: "Lenovo ([ASB][0-9]{4})[A-Z]?\\-[EHF]",
			model: "IdeaTab $1",
			device: "tablet"
		},
		{
			regex: "ThinkPadTablet_(A[0-9]{3})_",
			model: "ThinkPad Tablet $1",
			device: "tablet"
		},
		{
			regex: "ThinkPad ?Tablet([^;/]*) Build",
			model: "ThinkPad Tablet$1",
			device: "tablet"
		},
		{
			regex: "Lenovo ?A3300-(?:GV|H)",
			model: "TAB 2 A7-30",
			device: "tablet"
		},
		{
			regex: "TAB 2 A7-30[HGD]C",
			model: "TAB 2 A7",
			device: "tablet"
		},
		{
			regex: "TB-8504F",
			model: "TAB 4 8",
			device: "tablet"
		},
		{
			regex: "TB-X304X",
			model: "Tab 4 10.1\"",
			device: "tablet"
		},
		{
			regex: "TB-X304X",
			model: "Tab 4 10.1\"",
			device: "tablet"
		},
		{
			regex: "TB-X304F",
			model: "TAB4 10",
			device: "tablet"
		},
		{
			regex: "TB-X505[FX]",
			model: "M10",
			device: "tablet"
		},
		{
			regex: "TB-X104[FXL]",
			model: "E10",
			device: "tablet"
		},
		{
			regex: "Tab2A([0-9]-[0-9]{2}[a-z]?)",
			model: "TAB 2 A$1",
			device: "tablet"
		},
		{
			regex: "IdeaTab[ \\-_]?([a-z0-9]+)",
			model: "IdeaTab $1",
			device: "tablet"
		},
		{
			regex: "Yoga Tablet([^;/]+) Build",
			model: "Yoga Tablet$1",
			device: "tablet"
		},
		{
			regex: "TB-8505F",
			model: "Tab M8",
			device: "tablet"
		},
		{
			regex: "TB-8705F",
			model: "Tab M8 FHD",
			device: "tablet"
		},
		{
			regex: "TB-8705F",
			model: "Tab M8 FHD",
			device: "tablet"
		},
		{
			regex: "Lenovo (TB[0-9]?\\-[a-z0-9\\-]+) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "L18011(?:[);/ ]|$)",
			model: "A5"
		},
		{
			regex: "Z2 Plus",
			model: "Z2 Plus"
		},
		{
			regex: "Z2151",
			model: "ZUK Edge"
		},
		{
			regex: "Z213[12]",
			model: "ZUK Z2"
		},
		{
			regex: "Z2121",
			model: "ZUK Z2 Pro"
		},
		{
			regex: "ZUK[ -_]([^/;]*)(?: Build|\\))",
			model: "ZUK $1"
		},
		{
			regex: "K10a40(?:[);/ ]|$)",
			model: "C2"
		},
		{
			regex: "k50a40(?:[);/ ]|$)",
			model: "K3 Note"
		},
		{
			regex: "A7010a48(?:[);/ ]|$)",
			model: "K4 Note"
		},
		{
			regex: "K350t(?:[);/ ]|$)",
			model: "K5"
		},
		{
			regex: "L38011(?:[);/ ]|$)",
			model: "K5 Play"
		},
		{
			regex: "A7020a4[08](?:[);/ ]|$)",
			model: "K5 Note"
		},
		{
			regex: "K31-t3(?:[);/ ]|$)",
			model: "K31"
		},
		{
			regex: "(?:A6020a46|Vibe K5 Plus)(?:[);/ ]|$)",
			model: "Vibe K5 Plus"
		},
		{
			regex: "(?:Lenovo-)?(?:A6020(?:a40|l36)|Vibe K5)(?:[);/ ]|$)",
			model: "Vibe K5"
		},
		{
			regex: "VIBE Z2(?:[);/ ]|$)",
			model: "Vibe Z2"
		},
		{
			regex: "VIBE C(?:[);/ ]|$)",
			model: "Vibe C"
		},
		{
			regex: "VIBE X2(?:[);/ ]|$)",
			model: "Vibe X2"
		},
		{
			regex: "VIBE V7(?:[);/ ]|$)",
			model: "Vibe V7"
		},
		{
			regex: "VIBE S6i Plus(?:[);/ ]|$)",
			model: "Vibe S6i Plus"
		},
		{
			regex: "VIBE[ _]S([23567])i(?:[);/ ]|$)",
			model: "Vibe S$1i"
		},
		{
			regex: "k33a48(?:[);/ ]|$)",
			model: "K6"
		},
		{
			regex: "P2A42(?:[);/ ]|$)",
			model: "P2"
		},
		{
			regex: "k53a48(?:[);/ ]|$)",
			model: "K6 Note"
		},
		{
			regex: "K33a42(?:[);/ ]|$)",
			model: "K6 Power"
		},
		{
			regex: "P1ma40(?:[);/ ]|$)",
			model: "Vibe P1m"
		},
		{
			regex: "Vibe P1 Turbo(?:[);/ ]|$)",
			model: "Vibe P1 Turbo"
		},
		{
			regex: "(?:P1(?:a42|c72)|Vibe P1)(?:[);/ ]|$)",
			model: "Vibe P1"
		},
		{
			regex: "A2016a40(?:[);/ ]|$)",
			model: "Vibe B"
		},
		{
			regex: "A1010a20(?:[);/ ]|$)",
			model: "A Plus"
		},
		{
			regex: "Z90a40(?:[);/ ]|$)",
			model: "Vibe Shot"
		},
		{
			regex: "S1a40(?:[);/ ]|$)",
			model: "Vibe S1"
		},
		{
			regex: "L78071(?:[);/ ]|$)",
			model: "Z5s"
		},
		{
			regex: "L58041(?:[);/ ]|$)",
			model: "S5 Pro"
		},
		{
			regex: "L18021(?:[);/ ]|$)",
			model: "A3"
		},
		{
			regex: "PB2-670M(?:[);/ ]|$)",
			model: "Phab 2"
		},
		{
			regex: "(S90-A|P70-A)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "IdeaPad ?([^;/]*) Build",
			model: "IdeaPad $1",
			device: "tablet"
		},
		{
			regex: "VR-1541F",
			device: "wearable",
			model: "Mirage Solo"
		},
		{
			regex: "LENOVO/81W8(?:[);/ ]|$)",
			device: "desktop",
			model: "IdeaPad S145-15IIL"
		},
		{
			regex: "LENOVO/81MV(?:[);/ ]|$)",
			device: "desktop",
			model: "IdeaPad S145-15IWL"
		},
		{
			regex: "LENOVO/81SS(?:[);/ ]|$)",
			device: "desktop",
			model: "Flex 14API 81SS"
		},
		{
			regex: "Lenovo TAB ?([^/;]*) Build",
			model: "TAB $1",
			device: "tablet"
		},
		{
			regex: "Lenovo ([^/;]*) Build",
			model: "$1"
		},
		{
			regex: "(?:LNV-|Lenovo-)?Lenovo[ \\-_]?([a-z0-9_+\\-]+)",
			model: "$1"
		}
	]
};
var Lexand = {
	regex: "(?:SC7 PRO HD|S5A[1-4]|S4A[1-5]|S6A1|A811|A802)(?:[);/ ]|$)|Lexand ([^;/]+) Build",
	device: "smartphone",
	models: [
		{
			regex: "A(811|802)",
			device: "tablet",
			model: "A$1"
		},
		{
			regex: "S4A1",
			model: "Vega"
		},
		{
			regex: "S4A2",
			model: "Irida"
		},
		{
			regex: "S4A3",
			model: "Pallada"
		},
		{
			regex: "S4A5",
			model: "Oxygen"
		},
		{
			regex: "S4A4 NEON",
			model: "S4A4 Neon"
		},
		{
			regex: "S5A1",
			model: "Callisto"
		},
		{
			regex: "S5A2",
			model: "Overon"
		},
		{
			regex: "S5A3",
			model: "Capella"
		},
		{
			regex: "S5A4",
			model: "Argon"
		},
		{
			regex: "S6A1",
			model: "Antares"
		},
		{
			regex: "SC7 PRO HD",
			model: "SC7 PRO HD"
		},
		{
			regex: "Lexand ([^;/]+) Build",
			model: "$1"
		}
	]
};
var Lexibook = {
	regex: "(MFC[0-9]{3}[a-z]{2,})",
	device: "tablet",
	models: [
		{
			regex: "MFC191FR",
			model: "Tablet Ultra 3 XL"
		},
		{
			regex: "MFC045FR",
			model: "TabTab"
		},
		{
			regex: "MFC163FR",
			model: "Tablet Master 3"
		},
		{
			regex: "MFC142FR",
			model: "Tablet Kids"
		},
		{
			regex: "MFC250FR",
			model: "Tablet Junior"
		},
		{
			regex: "MFC270FR",
			model: "Tablet Junior Power Touch"
		},
		{
			regex: "MFC280FR",
			model: "Tablet Junior 2"
		},
		{
			regex: "MFC156FR",
			model: "Tablet One"
		},
		{
			regex: "MFC155FR",
			model: "Tablet Master"
		},
		{
			regex: "MFC157FR",
			model: "Tablet Master 2"
		},
		{
			regex: "MFC17[05]FR",
			model: "Tablet Ultra"
		},
		{
			regex: "MFC375FR",
			model: "Tablet Ultra 2"
		},
		{
			regex: "MFC162FR",
			model: "Power Tablet"
		},
		{
			regex: "MFC180FR",
			model: "Tablet Advanced"
		},
		{
			regex: "MFC181FR",
			model: "Tablet Advanced 2"
		},
		{
			regex: "MFC500FR",
			model: "Tablet XL"
		},
		{
			regex: "MFC190BBFR",
			model: "Barbie Tablet"
		},
		{
			regex: "MFC195DCFR",
			model: "Tablet Disney Cars HD"
		},
		{
			regex: "MFC195FUFR",
			model: "Furby Tablet"
		},
		{
			regex: "MFC195DPFR",
			model: "Tablet Disney Princesse HD"
		},
		{
			regex: "MFC140FR",
			model: "LapTab"
		},
		{
			regex: "MFC141FR",
			model: "LapTab 2"
		},
		{
			regex: "(MFC[0-9]{3}[a-z]{2,})",
			model: "$1"
		}
	]
};
var LG$1 = {
	regex: "LG|Web0S; Linux/SmartTV|portalmmm/2\\.0 (?:KE|KG|KP|L3)|(?:VX[0-9]+|L-0[12]D|L-07C|P713|(LM-[A-Z][0-9]{3}[A-Z]{0,3}(?:\\(FGN?\\)|\\(G\\)|\\.FN|\\.F(?:GN?)?)?)|LM-(X625N1|G820QM[0127]))(?:[);/ ]|$)|NetCast|RS98[78]|RS500|VS(?:50[01]|835|876|880|98[0578]|99[056]|(410|415|425|500|880)PP)|VS820|VS870 4G|Nexsus 5|LML(41[34]D|211B|713D|212V)L|VK810 4G|VK815|X5-LG|L-05[DE]|L-03K|L-01[LJK]|L-52A|L-[45]1A|901LG|A001LG|80[12]LG|402LG|LGT32|L-02K|L-01F|LM-V40|DM-01K|LMX130IM",
	device: "smartphone",
	models: [
		{
			regex: "DM-01K",
			model: "Disney Mobile DM-01K"
		},
		{
			regex: "LG-D325",
			model: "L70"
		},
		{
			regex: "LG-D340F8",
			model: "L70 Tri"
		},
		{
			regex: "LM-X210APM",
			model: "Phoenix 4"
		},
		{
			regex: "LG-P505R",
			model: "Phoenix"
		},
		{
			regex: "LM-X210VPP",
			model: "Zone 4"
		},
		{
			regex: "LM-X220PM",
			model: "Tribute Empire"
		},
		{
			regex: "VS980|L-01F",
			model: "G2"
		},
		{
			regex: "LG-D6(?:18|20)",
			model: "G2 Mini"
		},
		{
			regex: "LG-D85[01258]|VS985",
			model: "G3"
		},
		{
			regex: "LG-D72[2458]",
			model: "G3 Beat"
		},
		{
			regex: "LG-H81[158]",
			model: "G4"
		},
		{
			regex: "LG-H525n?",
			model: "G4c"
		},
		{
			regex: "LG-(?:H540|H542|H630)",
			model: "G4 Stylus"
		},
		{
			regex: "LG-H736",
			model: "G4s"
		},
		{
			regex: "LG-H735",
			model: "G4 Beat"
		},
		{
			regex: "LG-H8(?:20|3[01]|5[08]|6[08])|VS987|RS988",
			model: "G5"
		},
		{
			regex: "LG-H84[05]",
			model: "G5 SE"
		},
		{
			regex: "VS988|LG-H87(?:0DS|3)",
			model: "G6"
		},
		{
			regex: "LM-Q850",
			model: "G7 Fit"
		},
		{
			regex: "LM-Q910",
			model: "G7 One"
		},
		{
			regex: "LM-G820(N|QM[0127]|UMB)?",
			model: "G8"
		},
		{
			regex: "LM-G850",
			model: "G8X ThinQ"
		},
		{
			regex: "LM-G810",
			model: "G8S ThinQ"
		},
		{
			regex: "901LG(?:[);/ ]|$)",
			model: "G8X ThinQ"
		},
		{
			regex: "VS501|LM-X120",
			model: "K20"
		},
		{
			regex: "(?:LG-)?H502",
			model: "Magna"
		},
		{
			regex: "(?:LG-)?H343",
			model: "Risio"
		},
		{
			regex: "(?:LG-)?H650",
			model: "Zero"
		},
		{
			regex: "(?:LG-)?M154",
			model: "Risio 2"
		},
		{
			regex: "(?:LG-)?P500H",
			model: "Optimus One"
		},
		{
			regex: "(L-05[DE])(?:[);/ ]|$)",
			model: "Optimus it $1"
		},
		{
			regex: "LG-L160L(?:[);/ ]|$)",
			model: "Optimus LTE 2"
		},
		{
			regex: "P713(?:[);/ ]|$)",
			model: "Optimus L7II"
		},
		{
			regex: "L-01D(?:[);/ ]|$)",
			model: "Optimus LTE L-01D"
		},
		{
			regex: "L-02D(?:[);/ ]|$)",
			model: "PRADA phone L-02D"
		},
		{
			regex: "L-07C",
			model: "Optimus Bright L-07C"
		},
		{
			regex: "(?:LG-)?F800(?:S|K|L)?",
			model: "V20"
		},
		{
			regex: "LM-Q710(?:\\(FGN\\)|[\\.]?FGN)",
			model: "Q Stylus Plus"
		},
		{
			regex: "801LG",
			model: "Q Stylus"
		},
		{
			regex: "LM-Q[67]10\\.FG(?:[);/ ]|$)",
			model: "Q7"
		},
		{
			regex: "LM-(Q725[KL]|Q610.FGN)(?:[);/ ]|$)",
			model: "Q7+"
		},
		{
			regex: "LM-Q815[SL](?:[);/ ]|$)",
			model: "Q8+"
		},
		{
			regex: "LM-Q925L(?:[);/ ]|$)",
			model: "Q9"
		},
		{
			regex: "LM-Q730N(?:[);/ ]|$)",
			model: "Q70"
		},
		{
			regex: "LGV33(?:[);/ ]|$)",
			model: "Qua Phone PX"
		},
		{
			regex: "L-03K(?:[);/ ]|$)",
			model: "Style"
		},
		{
			regex: "L-01L(?:[);/ ]|$)",
			model: "Style 2"
		},
		{
			regex: "VS835(?:[);/ ]|$)",
			model: "Stylo 2 V"
		},
		{
			regex: "L-41A(?:[);/ ]|$)",
			model: "Style 3"
		},
		{
			regex: "LM-Q710|LML713DL",
			model: "Stylo 4"
		},
		{
			regex: "(?:LM-Q720|LGL722DL)(?:[);/ ]|$)",
			model: "Stylo 5"
		},
		{
			regex: "LM-Q730(?:[);/ ]|$)",
			model: "Stylo 6"
		},
		{
			regex: "LM-G710(N|VM)?",
			model: "G7 ThinQ"
		},
		{
			regex: "LM-X210CM",
			model: "Fortune 2"
		},
		{
			regex: "LM-X410\\.F(?:[);/ ]|$)",
			model: "Premier Pro"
		},
		{
			regex: "LML41[34]DL(?:[);/ ]|$)",
			model: "Premier Pro LTE"
		},
		{
			regex: "LM-X525",
			model: "Q60"
		},
		{
			regex: "LM-X210K",
			model: "X2"
		},
		{
			regex: "LG-K580",
			model: "X Cam"
		},
		{
			regex: "LM-X510WM",
			model: "X Power 3"
		},
		{
			regex: "LM-X(?:41[05]K|410S)",
			model: "X4"
		},
		{
			regex: "LM-X(415[LS]|410L)",
			model: "X4+"
		},
		{
			regex: "LM-X410(?:\\.FN|\\(FG\\))",
			model: "K11"
		},
		{
			regex: "LM-X(?:320|410[UP]M)",
			model: "K30"
		},
		{
			regex: "LMX130IM",
			model: "W10"
		},
		{
			regex: "LM-X410",
			model: "LM-X410"
		},
		{
			regex: "LM-X420N",
			model: "X4 (2019)"
		},
		{
			regex: "LG-X230",
			model: "K4"
		},
		{
			regex: "LM-X420",
			model: "K40"
		},
		{
			regex: "LM-X430(?:[);/ ]|$)",
			model: "K40S"
		},
		{
			regex: "LG-X220",
			model: "K5"
		},
		{
			regex: "LM-X540",
			model: "K50S"
		},
		{
			regex: "(?:802LG|LM-X520)(?:[);/ ]|$)",
			model: "K50"
		},
		{
			regex: "402LG",
			model: "Spray"
		},
		{
			regex: "L-02K",
			model: "JoJo"
		},
		{
			regex: "(?:LM-X510[KLS]|X5-LG)",
			model: "X5"
		},
		{
			regex: "LM-X625N1",
			model: "X6"
		},
		{
			regex: "LM-X625N",
			model: "X6 (2019)"
		},
		{
			regex: "LGMS210",
			model: "Aristo"
		},
		{
			regex: "LM-X210[G]?",
			model: "Aristo 2"
		},
		{
			regex: "LM-X220",
			model: "Aristo 3"
		},
		{
			regex: "LM-V40(?:5|9N)?(?:[);/ ]|$)",
			model: "V40 ThinQ"
		},
		{
			regex: "LM-(?:V500N|V450)(?:[);/ ]|$)",
			model: "V50 ThinQ"
		},
		{
			regex: "LM-V510N",
			model: "V50S ThinQ"
		},
		{
			regex: "LM-Q920N",
			model: "Q92"
		},
		{
			regex: "LM-Q927L",
			model: "Q9 One"
		},
		{
			regex: "(?:LG-)?(?:RS987|H901|H96[0128]|VS990)",
			model: "V10"
		},
		{
			regex: "LG-X240",
			model: "K8 (2017)"
		},
		{
			regex: "(?:LG-)?RS500",
			model: "K8 4G"
		},
		{
			regex: "(?:LG-)?VS500",
			model: "K8 V"
		},
		{
			regex: "LM-X212\\(G\\)",
			model: "K8 (2018)"
		},
		{
			regex: "(?:LG-)?H91[058]",
			model: "V20"
		},
		{
			regex: "(?:LG-)?H990(?:DS|N|T)?",
			model: "V20"
		},
		{
			regex: "(?:LG-)?LS997",
			model: "V20"
		},
		{
			regex: "(?:LG-)?VS995",
			model: "V20"
		},
		{
			regex: "(?:LG-)?US999",
			model: "V20"
		},
		{
			regex: "(?:VS996|LG-(?:H933|H93[012]|H932PR|[LU]S998|AS998)|LGM-V300[KLS])(?:[);/ ]|$)",
			model: "V30"
		},
		{
			regex: "L-01J(?:[);/ ]|$)",
			model: "V20 Pro"
		},
		{
			regex: "(?:L-01K|LGV35)(?:[);/ ]|$)",
			model: "V30 Plus"
		},
		{
			regex: "L-51A(?:[);/ ]|$)",
			model: "V60"
		},
		{
			regex: "(?:L-52A|LM-G900N?)(?:[);/ ]|$)",
			model: "Velvet 5G"
		},
		{
			regex: "(?:LM-G910)(?:[);/ ]|$)",
			model: "Velvet 4G"
		},
		{
			regex: "(?:A001LG|LM-V600)(?:[);/ ]|$)",
			model: "V60 ThinQ 5G"
		},
		{
			regex: "(?:LG-)?VS410PP",
			model: "Optimus Zone"
		},
		{
			regex: "LM-V350[N]?",
			model: "V35"
		},
		{
			regex: "(?:LG-)?VS415PP",
			model: "Optimus Zone 2"
		},
		{
			regex: "(?:LG-)?VS425PP",
			model: "Optimus Zone 3"
		},
		{
			regex: "(?:LG-)?K100",
			model: "K3"
		},
		{
			regex: "(?:LG-?)?(?:K|MS)33[02]",
			model: "K7"
		},
		{
			regex: "(?:LG-?)?(?:K|MS)350",
			model: "K8"
		},
		{
			regex: "VS500PP",
			model: "K8 V"
		},
		{
			regex: "(?:LG-)?K420(?:N)?",
			model: "K10"
		},
		{
			regex: "(?:LG-)?K430(?:DS|DSF|DSY)?",
			model: "K10"
		},
		{
			regex: "(?:LG-)?M250N?",
			model: "K10 (2017)"
		},
		{
			regex: "(?:LG-)?F670[KLS]?",
			model: "K10"
		},
		{
			regex: "(?:LG-)?M255",
			model: "K20"
		},
		{
			regex: "(?:LG-?)?[MT]P260",
			model: "K20 Plus"
		},
		{
			regex: "LM-K200(?:[);/ ]|$)",
			model: "K22"
		},
		{
			regex: "LM-K300(?:[);/ ]|$)",
			model: "K31"
		},
		{
			regex: "LM-K420(?:[);/ ]|$)",
			model: "K42"
		},
		{
			regex: "LM-K500(?:[);/ ]|$)",
			model: "K51"
		},
		{
			regex: "LM-K520(?:[);/ ]|$)",
			model: "K52"
		},
		{
			regex: "LM-Q510N(?:[);/ ]|$)",
			model: "Q51"
		},
		{
			regex: "LM-Q630N?(?:[);/ ]|$)",
			model: "Q61"
		},
		{
			regex: "(?:LG-)?M700(?:N|A|DSK|AN)?",
			model: "Q6"
		},
		{
			regex: "LM-X440IM",
			model: "W30"
		},
		{
			regex: "(?:LG-?)?K220",
			model: "X Power"
		},
		{
			regex: "(?:LG-?)?M320",
			model: "X Power 2"
		},
		{
			regex: "(?:LG-)?K371",
			model: "Phoenix 2"
		},
		{
			regex: "(?:LG-)?M150",
			model: "Phoenix 3"
		},
		{
			regex: "(?:LG-)?F100[SL]",
			model: "Optimus Vu"
		},
		{
			regex: "(?:LG-)?P880",
			model: "Optimus 4X HD"
		},
		{
			regex: "(?:LG-)?(H340n?|H324)",
			model: "Leon"
		},
		{
			regex: "(?:LG-)?H342",
			model: "Leon 4G LTE"
		},
		{
			regex: "(?:LG-)?H422",
			model: "Spirit"
		},
		{
			regex: "(?:LG)?C660",
			model: "Optimus Pro"
		},
		{
			regex: "LML21(?:1B|2V)L",
			model: "Rebel 4"
		},
		{
			regex: "VS876",
			model: "Lucid 3"
		},
		{
			regex: "VS880(PP)?",
			model: "G Vista"
		},
		{
			regex: "VS820",
			model: "Lancet"
		},
		{
			regex: "VS870 4G",
			model: "Lucid 2"
		},
		{
			regex: "LM-F100N?(?:[);/ ]|$)",
			device: "phablet",
			model: "WING"
		},
		{
			regex: "LGUK410",
			model: "G Pad 7.0\" LTE",
			device: "tablet"
		},
		{
			regex: "LGLK430",
			model: "G Pad F 7.0\"",
			device: "tablet"
		},
		{
			regex: "LGLK430",
			model: "G Pad F 7.0\"",
			device: "tablet"
		},
		{
			regex: "LG-V490",
			model: "G Pad 8.0",
			device: "tablet"
		},
		{
			regex: "LGT01",
			model: "G Pad 8.0\" LTE",
			device: "tablet"
		},
		{
			regex: "LG-V500",
			model: "G Pad 8.3",
			device: "tablet"
		},
		{
			regex: "LG-V700",
			model: "G Pad 10.1",
			device: "tablet"
		},
		{
			regex: "LG-V935",
			model: "G Pad II 10.1",
			device: "tablet"
		},
		{
			regex: "LG-V521",
			model: "G Pad X 8.0",
			device: "tablet"
		},
		{
			regex: "VK810",
			model: "G Pad 8.3 LTE",
			device: "tablet"
		},
		{
			regex: "VK815",
			model: "G Pad X 8.3",
			device: "tablet"
		},
		{
			regex: "LGT32",
			model: "Qua Tad PZ",
			device: "tablet"
		},
		{
			regex: "LGT31",
			model: "Qua Tad PX",
			device: "tablet"
		},
		{
			regex: "webOS.TV",
			device: "tv",
			model: "WebOS TV"
		},
		{
			regex: "LGE_DLNA_SDK|NetCast",
			device: "tv",
			model: "NetCast"
		},
		{
			regex: "LG Watch Urbane",
			device: "wearable",
			model: "Watch Urbane"
		},
		{
			regex: "(LM-[A-Z]{1}[0-9]{3}([A-Z]{1,3})?)",
			model: "$1"
		},
		{
			regex: "LGE(?: |-LG| LG-AX|-)([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "FBDV/LG-([a-z0-9]+);FBSV",
			model: "$1"
		},
		{
			regex: "LGE;([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "LG[ _\\-](V90.*|Optimus[ _\\-]Pad.*) Build",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "LG(?:/|-LG| |-)?([^/;]*) Build",
			model: "$1"
		},
		{
			regex: "LG(?:/|-LG| |-)?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "LG; ([a-z0-9 ]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/2.0 ((?:KE|KG|KP|L3)[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(VX[0-9]+)",
			model: "$1"
		},
		{
			regex: "Web0S; Linux/SmartTV",
			device: "tv",
			model: ""
		}
	]
};
var Lingwin = {
	regex: "Lingwin[ _\\-]",
	device: "smartphone",
	models: [
		{
			regex: "Lingwin[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Lingwin[ _\\-]?([^);/ ]+)",
			model: "$1"
		}
	]
};
var Logicom = {
	regex: "LOGICOM[_ ]|(TAB950|TAB1062|E731|E812|E912|E1031|POWER BOT|La[ _]Tab[ _](?:7[24]|10[57]|114)|(?:B|C|M|ID|VR)[ _]?BOT[ _]?(?:TAB[ _])?([0-9]+\\+?)(?:PLUS)?|KT712A_4\\.4|L-?IXIR[0-9]*|L-ITE|L-EGANTONE(?:-R)?|L-?EMENT.+|Le[ _]?(?:Hop|Hello|Lift|Hola|Moov[2]?|Must(?: 2)?|Starter L|Fit FR|Spark|Prime|Smooth(?: FR)?))[_);/ ]",
	device: "tablet",
	models: [
		{
			regex: "La[ _]Tab[ _](7[24]|10[57]|114)(?:[);/ ]|$)",
			model: "La Tab $1"
		},
		{
			regex: "LOGICOM_LA_TAB_LINK_71",
			model: "La Tab Link 71"
		},
		{
			regex: "KT712A_4.4|L-IXIR TAB 701 3G",
			model: "L-ixir Tab 701 3G"
		},
		{
			regex: "LIXIR1041",
			model: "L-ixir Tab 1041"
		},
		{
			regex: "L-?IXIR[ _]TAB[ _]([^);/]+)( Build|[);])",
			model: "L-ixir Tab $1"
		},
		{
			regex: "L-ITE[ _](400M|452|50[46] HD|506R HD|552 HD)(?:[);/ ]|$)",
			device: "smartphone",
			model: "L-ite $1"
		},
		{
			regex: "L-ITE[ _]([^;/]+) Build",
			model: "L-ite Tab $1"
		},
		{
			regex: "L-?EMENT[ _]?(350|451|40[103]|55[013]|50[15]|500L?)(?:[);/ ]|$)",
			model: "L-ement $1",
			device: "smartphone"
		},
		{
			regex: "L-?EMENT[ _](?:TAB)[ )]?([^);/]+)(?: Build|[);])",
			model: "L-ement Tab $1"
		},
		{
			regex: "L-?EMENT[ _]?(74[01])(?:[);/ ]|$)",
			model: "L-ement Tab $1"
		},
		{
			regex: "(TAB950|TAB1062|E731|E812|E912|E1031)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "POWER BOT",
			model: "POWER BOT"
		},
		{
			regex: "((?:B|C|M|ID|VR))[ _]?BOT[ _]?((?:TAB[ _])?([0-9]+\\+?)(?:PLUS)?)",
			model: "$1 BOT $2"
		},
		{
			regex: "Le Lift",
			model: "Le Lift",
			device: "smartphone"
		},
		{
			regex: "Le Hola FR(?:[);/ ]|$)",
			model: "Le Hola FR",
			device: "smartphone"
		},
		{
			regex: "Le[ _]Hola(?:[);/ ]|$)",
			model: "Le Hola",
			device: "smartphone"
		},
		{
			regex: "LeMoov2(?:[);/ ]|$)",
			model: "Le Moov 2",
			device: "smartphone"
		},
		{
			regex: "LeMoov(?:[);/ ]|$)",
			model: "Le Moov",
			device: "smartphone"
		},
		{
			regex: "Le Fit FR(?:[);/ ]|$)",
			model: "Le Fit FR",
			device: "smartphone"
		},
		{
			regex: "Le Hop(?:[);/ ]|$)",
			model: "Le Hop",
			device: "smartphone"
		},
		{
			regex: "Le[ _]Hello(?:[);/ ]|$)",
			model: "Le Hello",
			device: "smartphone"
		},
		{
			regex: "Le Smooth FR(?:[);/ ]|$)",
			model: "Le Smooth FR",
			device: "smartphone"
		},
		{
			regex: "Le Smooth(?:[);/ ]|$)",
			model: "Le Smooth",
			device: "smartphone"
		},
		{
			regex: "Le Must 2(?:[);/ ]|$)",
			device: "smartphone",
			model: "Le Must 2"
		},
		{
			regex: "Le Must(?:[);/ ]|$)",
			model: "Le Must",
			device: "smartphone"
		},
		{
			regex: "Le Starter L(?:[);/ ]|$)",
			model: "Le Starter L",
			device: "smartphone"
		},
		{
			regex: "Le[ _]Spark(?:[);/ ]|$)",
			model: "Le Spark",
			device: "smartphone"
		},
		{
			regex: "Le[ _]Prime(?:[);/ ]|$)",
			model: "Le Prime",
			device: "smartphone"
		},
		{
			regex: "L-EGANTONE-R",
			model: "L-Egant One R",
			device: "smartphone"
		},
		{
			regex: "L-EGANTONE",
			model: "L-Egant One",
			device: "smartphone"
		}
	]
};
var Konka = {
	regex: "KONKA[_ ]([a-z0-9]+)",
	device: "smartphone",
	models: [
		{
			regex: "E5660S",
			model: "Viva 5660s"
		},
		{
			regex: "W830",
			model: "Tango 830"
		},
		{
			regex: "W(9[67]0)",
			model: "Expose $1"
		},
		{
			regex: "W990",
			model: "Tuxedo 990"
		},
		{
			regex: "KONKA[_ ]([a-z0-9]+)",
			device: "feature phone",
			model: "$1"
		}
	]
};
var Konrow = {
	regex: "(?:BIGCOOL|COOLFIVE|COOL-K|Just5|Link5|EASY(?:5|62)|CITY55|Cool55)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "BIGCOOL(?:[);/ ]|$)",
			model: "BigCool"
		},
		{
			regex: "COOL-K(?:[);/ ]|$)",
			model: "Cool-K"
		},
		{
			regex: "Cool55(?:[);/ ]|$)",
			model: "Cool 55"
		},
		{
			regex: "COOLFIVE(?:[);/ ]|$)",
			model: "Cool Five"
		},
		{
			regex: "Just5(?:[);/ ]|$)",
			model: "Just 5"
		},
		{
			regex: "Link5(?:[);/ ]|$)",
			model: "Link 5"
		},
		{
			regex: "EASY(5|62)(?:[);/ ]|$)",
			model: "Easy $1"
		},
		{
			regex: "CITY55(?:[);/ ]|$)",
			model: "City 55"
		}
	]
};
var Karbonn = {
	regex: "(?:Browser-)?Karbonn|K9 Kavach 4G|K9[_ ]Viraat[_ ]Plus|K9 Music 4G|K9 Smart|K9 VIRAAT 4G|Aura (?:Sleek Plus|Power 4G Plus|Note Play)|Titanium[ _](?:3D-Plex|Octane Plus|Vista 4G|Jumbo|S360|S1[059]|S35|S20[13]|S22|S[15]|S200 HD|Frames S7|MOGHUL|S9)|K-lite F3|Sparkle V|Alfa A114 Quad|Quattro L55 HD",
	device: "smartphone",
	models: [
		{
			regex: "K9 Kavach 4G",
			model: "K9 Kavach 4G"
		},
		{
			regex: "K9 Music 4G",
			model: "K9 Music 4G"
		},
		{
			regex: "K9 Smart 1GB",
			model: "K9 Smart"
		},
		{
			regex: "K9 Smart 4G",
			model: "K9 Smart 4G"
		},
		{
			regex: "K9 Smart Grand",
			model: "K9 Smart Grand"
		},
		{
			regex: "K9 Smart Yuva",
			model: "K9 Smart Yuva"
		},
		{
			regex: "K9 Smart",
			model: "K9 Smart"
		},
		{
			regex: "K9[_ ]Viraat[_ ]Plus",
			model: "K9 Viraat Plus"
		},
		{
			regex: "Aura Sleek Plus",
			model: "Aura Sleek Plus"
		},
		{
			regex: "Aura Power 4G Plus",
			model: "Aura Power 4G Plus"
		},
		{
			regex: "Aura Note Play",
			model: "Aura Note Play"
		},
		{
			regex: "Alfa A114 Quad",
			model: "Alfa A114 Quad"
		},
		{
			regex: "karbonnK9 Viraat 4G|K9 VIRAAT 4G",
			model: "K9 Viraat 4G"
		},
		{
			regex: "Titanium[ _]S2[ _]Plus",
			model: "Titanium S2 Plus"
		},
		{
			regex: "Titanium_S9Plus",
			model: "Titanium S9 Plus"
		},
		{
			regex: "Titanium[_ ]S(99|360|1[059]|109|35|200 HD|20[13]|22|[15])(?:[);/ ]|$)",
			model: "Titanium S$1"
		},
		{
			regex: "Titanium Vista 4G",
			model: "Titanium Vista 4G"
		},
		{
			regex: "Titanium Jumbo 2",
			model: "Titanium Jumbo 2"
		},
		{
			regex: "Titanium Jumbo",
			model: "Titanium Jumbo"
		},
		{
			regex: "Titanium[ _]MOGHUL",
			model: "Titanium Moghul"
		},
		{
			regex: "Titanium Frames S7",
			model: "Titanium Frames S7"
		},
		{
			regex: "Titanium Octane Plus",
			model: "Titanium Octane Plus"
		},
		{
			regex: "Titanium[ _]3D-Plex",
			model: "Titanium 3D Plex"
		},
		{
			regex: "K-lite F3",
			model: "K-Lite F3"
		},
		{
			regex: "Sparkle V",
			model: "Sparkle V"
		},
		{
			regex: "Quattro L55 HD",
			model: "Quattro L55 HD"
		},
		{
			regex: "Karbonn ([a-z0-9]+) WAP-Browser",
			model: "$1",
			device: "feature phone"
		},
		{
			regex: "WAP Browser-Karbonn ([a-z0-9]+)/",
			model: "$1",
			device: "feature phone"
		},
		{
			regex: "Karbonn_([^;/)]+)",
			model: "$1"
		},
		{
			regex: "Karbonn ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Karbonn ([^;/]+)/",
			model: "$1"
		}
	]
};
var Sagem = {
	regex: "SAGEM|portalmmm/2.0 (?:SG|my)",
	device: "smartphone",
	models: [
		{
			regex: "SAGEM-(my[a-z0-9\\-]+)",
			model: "$1",
			device: "feature phone"
		},
		{
			regex: "SAGEM ([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "SAGEM-([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/2.0 ((?:SG|my)[a-z0-9]+)",
			model: "$1"
		}
	]
};
var Mpman = {
	regex: "(?:MPQC|MPDC)[0-9]+|PH(?:150|340|350|360|451|500|520|544|604)|(?:MID(?:7C|74C|82C|84C|801|811|701|711|170|77C|43C|102C|103C|104C|114C)|MP100i OCTA|MP(?:843|717|718|1010|7007|7008|843|888|959|969)|MGP7)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "((?:MPQC|MPDC)[0-9]+[^/;)]+)(?: Build|\\))",
			model: "$1"
		},
		{
			regex: "MP100i OCTA(?:[);/ ]|$)",
			model: "MP100i OCTA"
		},
		{
			regex: "(MID(?:7C|74C|82C|84C|801|811|701|711|170|77C|43C|102C|103C|104C|114C)|MP(?:843|717|718|1010|7007|7008|843|888|959|969)|MGP7)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(PH(?:150|340|350|360|451|500|520|544|604))",
			model: "$1",
			device: "smartphone"
		}
	]
};
var Majestic = {
	regex: "MAJESTIC[ _-]|CRONO ?[0-9]+|TAB (?:647|411) 3G|URANO 77LTE",
	device: "smartphone",
	models: [
		{
			regex: "URANO 77LTE(?:[);/ ]|$)",
			model: "Urano 77 LTE"
		},
		{
			regex: "TAB (647|411) 3G",
			model: "Tab $1 3G",
			device: "tablet"
		},
		{
			regex: "MAJESTIC[ _]Tab([^;/]+)Build",
			model: "Tab$1",
			device: "tablet"
		},
		{
			regex: "MAJESTIC[ _]Tab([^);/]+)(?:[);/]|$)",
			model: "Tab$1",
			device: "tablet"
		},
		{
			regex: "MAJESTIC[ _]([^;/]+)Build",
			model: "$1"
		},
		{
			regex: "MAJESTIC[ _]([^);/]+)(?:(?:[);/ ]|$)|$)",
			model: "$1"
		},
		{
			regex: "CRONO ?([0-9]+) Build",
			model: "Crono $1"
		},
		{
			regex: "CRONO ?([0-9]+)(?:[);/]|$)",
			model: "Crono $1"
		}
	]
};
var Masstel = {
	regex: "Masstel",
	device: "smartphone",
	models: [
		{
			regex: "Masstel[_ ](Juno[_ ]Q3|X9|N4[56]0|N5[2458]0|N536|M05|M1[29]0|M1[125]|M250|M25)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Masstel[_ ]\\((M18)\\)",
			model: "$1"
		},
		{
			regex: "Masstel_Tab7LTE(?:[);/ ]|$)",
			model: "Tab 7 LTE",
			device: "tablet"
		},
		{
			regex: "Masstel Tab (840|700i)(?:[);/ ]|$)",
			model: "Tab $1",
			device: "tablet"
		}
	]
};
var Maxwest = {
	regex: "(?:Astro[_ ](?:5N_LTE|X4|5_GO_LTE|X55s)|Virtue Z5|Nitro[_ ](?:4S?|55R|5[XR]|[45] GO|4s LTE)|Gravity_55?_GO|Nitro_Phablet_9s)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Astro_5N_LTE",
			model: "Astro 5N LTE"
		},
		{
			regex: "Astro_5_GO_LTE",
			model: "Astro 5 Go LTE"
		},
		{
			regex: "Virtue Z5",
			model: "Virtue Z5"
		},
		{
			regex: "Astro X55s",
			model: "Astro X55s"
		},
		{
			regex: "Astro[_ ]X4",
			model: "Astro X4"
		},
		{
			regex: "Nitro ([45]) GO",
			model: "Nitro $1 GO"
		},
		{
			regex: "Nitro 4s LTE",
			model: "Nitro 4s LTE"
		},
		{
			regex: "Nitro[ _]4s",
			model: "Nitro 4s"
		},
		{
			regex: "Nitro_(4|55R|5[XR])",
			model: "Nitro $1"
		},
		{
			regex: "Gravity_(55?)_GO",
			model: "Gravity $1 GO"
		},
		{
			regex: "Nitro_Phablet_9s",
			device: "tablet",
			model: "Nitro Phablet 9s"
		}
	]
};
var Maze = {
	regex: "(?:Alpha[_ ]X|Maze Alpha)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Alpha[_ ]X(?:[);/ ]|$)",
			model: "Alpha X"
		},
		{
			regex: "Maze Alpha(?:[);/ ]|$)",
			model: "Alpha"
		}
	]
};
var Mediacom = {
	regex: "(?:SmartPad7503G|M-SP10MXA|M-PPAB500|SmartPad970s2(?:3G)?|M[_-][MPS]P[0-9a-z]+|M-IPRO[0-9a-z]+|1AEC)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "SmartPad7503G(?:[);/ ]|$)",
			model: "SmartPad 750 3G"
		},
		{
			regex: "SmartPad970s23G(?:[);/ ]|$)",
			model: "SmartPad 970 S2 3G"
		},
		{
			regex: "SmartPad970s2(?:[);/ ]|$)",
			model: "SmartPad 970 S2"
		},
		{
			regex: "M-MP84[02]M(?:[);/ ]|$)",
			model: "SmartPad 8.0\" Mobile"
		},
		{
			regex: "M-MP940M(?:[);/ ]|$)",
			model: "SmartPad 9.7\" Mobile"
		},
		{
			regex: "M-SP10MXA(?:[);/ ]|$)",
			model: "SmartPad MX 10.1\""
		},
		{
			regex: "M-SP8MXA(?:[);/ ]|$)",
			model: "SmartPad MX 8.0\""
		},
		{
			regex: "M-SP7HXAH(?:[);/ ]|$)",
			model: "SmartPad HX 7.0\""
		},
		{
			regex: "M-SP8HXAH(?:[);/ ]|$)",
			model: "SmartPad HX 8.0\" HD"
		},
		{
			regex: "M-MP(?:710|720|725|726|740)GOx?(?:[);/ ]|$)",
			model: "SmartPad 7.0\" Go"
		},
		{
			regex: "M-MP876S2(?:[);/ ]|$)",
			model: "SmartPad 8.0\" S2"
		},
		{
			regex: "M-MP8S2[AB]?3G(?:[);/ ]|$)",
			model: "SmartPad 8.0\" S2 3G"
		},
		{
			regex: "M-MP(101|102|860|875)S2[BW]?(?:[);/ ]|$)",
			model: "SmartPad $1 S2"
		},
		{
			regex: "M-MP85S23G(?:[);/ ]|$)",
			model: "SmartPad 875 S2 3G"
		},
		{
			regex: "M-SP1AGO3G",
			model: "SmartPad 10 Go 3G"
		},
		{
			regex: "M-SP7xGO3G",
			model: "SmartPad 10.1\" iPro 3G"
		},
		{
			regex: "1AEC",
			model: "SmartPad 10 Eclipse"
		},
		{
			regex: "M-MP10[45][01]S2(?:[);/ ]|$)",
			model: "SmartPad 10.1\" S2"
		},
		{
			regex: "M-MP1S2[AB]3G(?:[);/ ]|$)",
			model: "SmartPad 10.1\" S2 3G"
		},
		{
			regex: "M-MP8[24]S4(?:[);/ ]|$)",
			model: "SmartPad 8.0\" S4"
		},
		{
			regex: "M-MP8S4[AB]3G(?:[);/ ]|$)",
			model: "SmartPad 8.0\" S4 3G"
		},
		{
			regex: "M-MP9S4A3G(?:[);/ ]|$)",
			model: "SmartPad 9.7\" S4 3G"
		},
		{
			regex: "M-MP1[02]S4(?:[);/ ]|$)",
			model: "SmartPad 10.1\" S4"
		},
		{
			regex: "M-MP1040MC?(?:[);/ ]|$)",
			model: "SmartPad 10.1\" HD S4 3G"
		},
		{
			regex: "M-MP1S4[AB]3G(?:[);/ ]|$)",
			model: "SmartPad 10.1\" S4 3G"
		},
		{
			regex: "M-SP10HXxH(?:[);/ ]|$)",
			model: "SmartPad 10.1\" HX HD"
		},
		{
			regex: "M-SP10MXHA(?:[);/ ]|$)",
			model: "SmartPad 10.1\" MX"
		},
		{
			regex: "M-SP10MXHL(?:[);/ ]|$)",
			model: "SmartPad 10.1\" MX Lite"
		},
		{
			regex: "M-MP8PA3G(?:[);/ ]|$)",
			model: "SmartPad 8.0\" HD Pro 3G"
		},
		{
			regex: "M-MP10PA(?:[);/ ]|$)",
			model: "SmartPad 10.1\" HD Pro"
		},
		{
			regex: "M-MP10PA3G(?:[);/ ]|$)",
			model: "SmartPad 10.1\" HD Pro 3G"
		},
		{
			regex: "M-IPRO([18][01]0)[BW](?:[);/ ]|$)",
			model: "SmartPad 8.0\" HD iPro$1 3G"
		},
		{
			regex: "(?:M-MP75S23G|M-MP72[01]M)(?:[);/ ]|$)",
			model: "SmartPad 7.0\" Mobile",
			device: "phablet"
		},
		{
			regex: "M-MP7S2[ABDK]3G(?:[);/ ]|$)",
			model: "SmartPad 7.0\" S2 3G",
			device: "phablet"
		},
		{
			regex: "M-MP5303G(?:[);/ ]|$)",
			model: "SmartPad Mini Mobile",
			device: "phablet"
		},
		{
			regex: "M-PPxB400(?:[);/ ]|$)",
			model: "PhonePad Duo B400",
			device: "phablet"
		},
		{
			regex: "M-PPAG550(?:[);/ ]|$)",
			model: "PhonePad Duo G550",
			device: "phablet"
		},
		{
			regex: "M-PPAB500(?:[);/ ]|$)",
			model: "PhonePad Duo B500",
			device: "phablet"
		},
		{
			regex: "M-PP2G530(?:[);/ ]|$)",
			model: "PhonePad Duo G530",
			device: "phablet"
		},
		{
			regex: "M-PPG700(?:[);/ ]|$)",
			model: "PhonePad Duo G700",
			device: "phablet"
		},
		{
			regex: "M-PPxS531(?:[);/ ]|$)",
			model: "PhonePad Duo S531",
			device: "phablet"
		},
		{
			regex: "M-PP2S550(?:[);/ ]|$)",
			model: "PhonePad Duo S550",
			device: "phablet"
		},
		{
			regex: "M-PP2S650C?(?:[);/ ]|$)",
			model: "PhonePad Duo S650",
			device: "phablet"
		},
		{
			regex: "M-PPxS551U(?:[);/ ]|$)",
			model: "PhonePad Duo S551U",
			device: "phablet"
		},
		{
			regex: "M-PPAG4(?:[);/ ]|$)",
			model: "PhonePad Duo G4",
			device: "smartphone"
		},
		{
			regex: "M-PP[ABC]G500(?:[);/ ]|$)",
			model: "PhonePad Duo G500",
			device: "smartphone"
		},
		{
			regex: "M-PP2S500[BC]?(?:[);/ ]|$)",
			model: "PhonePad Duo S500",
			device: "smartphone"
		},
		{
			regex: "M[_-]PP[Ax]X(470|510|520)U(?:[);/ ]|$)",
			model: "PhonePad Duo X$1U",
			device: "smartphone"
		},
		{
			regex: "M-PPxG(400|501|[457][PM]?)(?:[);/ ]|$)",
			model: "PhonePad Duo G$1",
			device: "smartphone"
		},
		{
			regex: "M-PPxS(532[LU]|470|501|5P?|7P?)(?:[);/ ]|$)",
			model: "PhonePad Duo S$1",
			device: "smartphone"
		},
		{
			regex: "M-PPxG(450)(?:[);/ ]|$)",
			model: "PhonePad Duo G$1",
			device: "smartphone"
		},
		{
			regex: "M-MP([0-9a-z]+)",
			model: "SmartPad $1"
		}
	]
};
var Medion$2 = {
	regex: "Medion|(?:MD_)?LIFETAB|([SPX]10[0-9]{2}X|E10[45]1X|X5001|P851X|P850X|E691X|E1050X)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:MD_)?LIFETAB_([a-z0-9]+)",
			device: "tablet",
			model: "Lifetab $1"
		},
		{
			regex: "(E450[46]|E5004|S5004|X5001|E5020|P5015)(?:[);/ ]|$)",
			model: "Life $1"
		},
		{
			regex: "(B5530)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(E10[45]1X)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "([SPX]10[0-9]{2}X|P851X|P850X|E691X|E1050X)(?:[);/ ]|$)",
			model: "Lifetab $1",
			device: "tablet"
		},
		{
			regex: "Medion(?: Smartphone)? ([^/;]+) Build",
			model: "$1"
		}
	]
};
var MEEG = {
	regex: "MEEG[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "MEEG[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "MEEG[ _\\-]?([^);/ ]+)",
			model: "$1"
		}
	]
};
var Fourel = {
	regex: "(?:EASYSMARTM3|EasySmart M2)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "EASY ?SMART ?M([32])",
			model: "Easy Smart M$1"
		}
	]
};
var Meizu = {
	regex: "Meizu|MZ-[a-z]|(?<!POCO )(M04[05]|MZ-16th(?: Plus)?|MZ-16[st]|M7[12]1C|M35[1356]|M612C|M578CA|M181[36]|M1822|M681C|M6T|MX[ -]?[2345](?: Pro)?|(?:MZ-)?m[1-6] note|M621C|M1852|M57[18]C|M3[ESX]|M031|m1 metal|M1 E|M2|M2 E|M5s Build|PRO [67]|PRO 7-[HS]| 15 Lite| 16th|MZ-15 (?:Lite|Plus)|MZ-16 X)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:MZ-)?M571C",
			device: "phablet",
			model: "M2 Note"
		},
		{
			regex: "(?:MZ-|Meizu-)?m([1-6])[_ ]note(?:[);/ ]|$)",
			device: "phablet",
			model: "M$1 Note"
		},
		{
			regex: "M1 E(?:[);/ ]|$)",
			model: "M1E"
		},
		{
			regex: "M2 E(?:[);/ ]|$)",
			model: "M2E"
		},
		{
			regex: "(?:MZ-)?M578C[A]?|M2(?:[);/ ]|$)",
			model: "M2"
		},
		{
			regex: "M681C(?:[);/ ]|$)",
			model: "M3 Note",
			device: "phablet"
		},
		{
			regex: "M621C(?:[);/ ]|$)",
			model: "M5 Note",
			device: "phablet"
		},
		{
			regex: "M711C(?:[);/ ]|$)",
			model: "M6"
		},
		{
			regex: "M721C(?:[);/ ]|$)",
			model: "M6 Note",
			device: "phablet"
		},
		{
			regex: "M6T",
			model: "M6T"
		},
		{
			regex: "M3E",
			model: "M3E"
		},
		{
			regex: "M3S",
			model: "M3S"
		},
		{
			regex: "M3X",
			model: "M3X"
		},
		{
			regex: "M5S|M612C",
			model: "M5S"
		},
		{
			regex: "(M04[05]|MX[ -]?2)(?:[);/ ]|$)",
			model: "MX2"
		},
		{
			regex: "(M35[1356]|MX[ -]?3)(?:[);/ ]|$)",
			model: "MX3"
		},
		{
			regex: "MX[ -]?4 Pro(?:[);/ ]|$)",
			model: "MX4 Pro"
		},
		{
			regex: "MX[ -]?4(?:[);/ ]|$)",
			model: "MX4"
		},
		{
			regex: "(Meizu[- _])?MX[ -]?5(?:[);/ ]|$)",
			model: "MX5"
		},
		{
			regex: "m1 metal",
			model: "M1 Metal"
		},
		{
			regex: "M1813(?:[);/ ]|$)",
			model: "M8"
		},
		{
			regex: "M1816(?:[);/ ]|$)",
			model: "M8 Lite"
		},
		{
			regex: "PRO 7-[HS](?:[);/ ]|$)",
			model: "PRO 7"
		},
		{
			regex: "PRO 7 Plus(?:[);/ ]|$)",
			model: "Pro 7 Plus"
		},
		{
			regex: "PRO ([67])",
			model: "PRO $1"
		},
		{
			regex: "M031(?:[);/ ]|$)",
			model: "MX Dual Core"
		},
		{
			regex: "M1852(?:[);/ ]|$)",
			model: "X8"
		},
		{
			regex: "M1822(?:[);/ ]|$)",
			model: "Note 8"
		},
		{
			regex: "MZ-16T(?:[);/ ]|$)",
			model: "16T"
		},
		{
			regex: "(?:MZ-)?16th Plus(?:[);/ ]|$)",
			model: "16th Plus"
		},
		{
			regex: "MZ-15 Plus(?:[);/ ]|$)",
			model: "15 Plus"
		},
		{
			regex: "(?:MZ-15 Lite| 15 Lite)(?:[);/ ]|$)",
			model: "15 Lite"
		},
		{
			regex: "MZ-16th| 16th(?:[);/ ]|$)",
			model: "16th"
		},
		{
			regex: "MZ-16 X(?:[);/ ]|$)",
			model: "16X"
		},
		{
			regex: "Meizu[_ ]note([89])(?:[);/ ]|$)",
			device: "phablet",
			model: "Note $1"
		},
		{
			regex: "(?:MZ-)?Meizu[_ ]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "(?:MZ-)?Meizu[_ ]([a-z0-9_]+)",
			model: "$1"
		},
		{
			regex: "MZ-([^/;]+) Build",
			model: "$1"
		}
	]
};
var Meitu = {
	regex: "(?:(?<!MI CC 9 )Meitu[2]?|MP1503|MP1512|MP160[235]|MP170[19]|MP171[138])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "MP1503(?:[);/ ]|$)",
			model: "M6"
		},
		{
			regex: "MP1512(?:[);/ ]|$)",
			model: "M6s"
		},
		{
			regex: "MP1602(?:[);/ ]|$)",
			model: "T8"
		},
		{
			regex: "MP1605(?:[);/ ]|$)",
			model: "V6"
		},
		{
			regex: "MP17(?:01|13)(?:[);/ ]|$)",
			model: "T8s"
		},
		{
			regex: "MP1718(?:[);/ ]|$)",
			model: "T9"
		},
		{
			regex: "MP1603(?:[);/ ]|$)",
			model: "M8"
		},
		{
			regex: "MP17(?:09|11)(?:[);/ ]|$)",
			model: "M8s"
		},
		{
			regex: "Meitu2(?:[);/ ]|$)",
			model: "2"
		},
		{
			regex: "Meitu (Kiss|[MV]4)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Memup = {
	regex: "SlidePad ?([^;/]*) Build|SPNG?[0-9]{2,4}[a-z]{0,2}(?:[);/ ]|$)|SP704CE?|SP-NG708-3G",
	device: "tablet",
	models: [
		{
			regex: "SlidePad ?([^;/]*) Build",
			model: "SlidePad $1"
		},
		{
			regex: "SPNG([0-9]{2,4}[a-z]{0,2})(?:[);/ ]|$)",
			model: "SlidePad NG$1"
		},
		{
			regex: "SP-NG(708)-3G(?:[);/ ]|$)",
			model: "SlidePad NG$1 3G"
		},
		{
			regex: "SP704(CE?)",
			model: "SlidePad 704$1"
		}
	]
};
var Mecer = {
	regex: "(M785|800P3[12]C|101P51C|X1010)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "M785(?:[);/ ]|$)",
			model: "Xpress Smartlife M785"
		},
		{
			regex: "X1010(?:[);/ ]|$)",
			model: "X1010"
		},
		{
			regex: "800P31C(?:[);/ ]|$)",
			model: "Xpress Smartlife 800P31C"
		},
		{
			regex: "800P32C(?:[);/ ]|$)",
			model: "Xpress Smartlife 800P32C"
		},
		{
			regex: "101P51C(?:[);/ ]|$)",
			model: "Xpress Smartlife 101P51C"
		}
	]
};
var Mio = {
	regex: "MIO(?:/)?([a-z0-9]+)|(?:MOBIX M6|Mio TouchPad 7 Quad Core)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "MOBIX M6(?:[);/ ]|$)",
			model: "Mobix M6"
		},
		{
			regex: "MIO(?:/)?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "Mio TouchPad 7 Quad Core",
			device: "tablet",
			model: "TouchPad 7 Quad Core"
		}
	]
};
var Miray$1 = {
	regex: "MIDM[_-]|MPM[_-]",
	device: "smartphone",
	models: [
		{
			regex: "MIDM[_-]([a-z0-9]+)",
			model: "MIDM $1",
			device: "tablet"
		},
		{
			regex: "MPM[_-]([a-z0-9]+)",
			model: "MPM $1"
		}
	]
};
var Mitsubishi = {
	regex: "MITSU|portalmmm/[12]\\.0 M",
	device: "feature phone",
	models: [
		{
			regex: "MITSU/[a-z0-9.]+ \\(([a-z0-9]+)\\)",
			model: "$1"
		},
		{
			regex: "MITSU[ \\-]?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/[12]\\.0 (M[a-z0-9]+)",
			model: "$1"
		}
	]
};
var MIXC = {
	regex: "(M35|M20|G7106|G7108)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(M[0-9]{1,2})(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(G[0-9]{4})(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Mobiola = {
	regex: "(MS5[50]X6|MS55X5|MS55L1|MS50L1|MS43A3000|MS45A4000|MS50A4000|MS50A4500|MS50A5000|MS50A6000|MS50B11000|MB-2900 QUATTRO|POLYS[_ ]MS45L1|Wave5)",
	device: "smartphone",
	models: [
		{
			regex: "MS50X6",
			model: "Atmos II"
		},
		{
			regex: "POLYS[_ ]MS45L1",
			model: "Polys MS45L1"
		},
		{
			regex: "MS55X6",
			model: "Atmos Pro II"
		},
		{
			regex: "MS55X5",
			model: "Atmos Pro"
		},
		{
			regex: "MS55L1",
			model: "GAIA"
		},
		{
			regex: "MS50L1",
			model: "Inti"
		},
		{
			regex: "MB-2900 QUATTRO",
			model: "MB-2900 Quattro"
		},
		{
			regex: "MS43A3000",
			model: "MS43A3000"
		},
		{
			regex: "MS45A4000",
			model: "eOn 45"
		},
		{
			regex: "MS50A4000",
			model: "eOn 50"
		},
		{
			regex: "MS50A4500",
			model: "eOn 50 Elegance"
		},
		{
			regex: "MS50A5000",
			model: "eOn 50 Quad 8"
		},
		{
			regex: "MS50A6000",
			model: "eOn 50 Quad 16"
		},
		{
			regex: "MS50B11000",
			model: "MS50B11000"
		},
		{
			regex: "Wave5",
			model: "Wave 5"
		}
	]
};
var Mobicel = {
	regex: "Mobicel_(R1)|(?:HYPE|DANDY(?:_ZAM)?|(?<!SMADL )Matrix|TRENDY PLUS|FENDY_DS|TANGO_LITE|BLINK|BERRY[_ ]?(?:[12]|PLUS))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Matrix",
			model: "Matrix"
		},
		{
			regex: "BLINK",
			model: "Blink"
		},
		{
			regex: "BERRY1",
			model: "Berry 1"
		},
		{
			regex: "BERRY 2",
			model: "Berry 2"
		},
		{
			regex: "BERRY[_ ]PLUS",
			model: "Berry Plus"
		},
		{
			regex: "TRENDY PLUS",
			model: "Trendy Plus"
		},
		{
			regex: "HYPE",
			model: "Hype"
		},
		{
			regex: "DANDY_ZAM",
			model: "Dandy Zam"
		},
		{
			regex: "DANDY",
			model: "Dandy"
		},
		{
			regex: "TANGO_LITE",
			model: "Tango Lite"
		},
		{
			regex: "FENDY_DS",
			model: "Fendy DS"
		},
		{
			regex: "Mobicel_(R1)",
			model: "$1"
		}
	]
};
var Mobiistar = {
	regex: "Mobiistar|Zumbo[ _]S|PRIME X MAX|X1 Notch|E1 Selfie",
	device: "smartphone",
	models: [
		{
			regex: "X1 Notch(?:[);/ ]|$)",
			model: "X1 Notch"
		},
		{
			regex: "E1 Selfie(?:[);/ ]|$)",
			model: "E1 Selfie"
		},
		{
			regex: "mobiistar_LAI_Zumbo(?:[);/ ]|$)",
			model: "Zumbo"
		},
		{
			regex: "Zumbo[_ ]S[_ ]2017[_ ]Lite(?:[);/ ]|$)",
			model: "Lai Zumbo S Lite (2017)"
		},
		{
			regex: "Zumbo[_ ]S[_ ]2017(?:[);/ ]|$)",
			model: "Lai Zumbo S (2017)"
		},
		{
			regex: "mobiistar ZUMBO S2( Dual)",
			model: "Zumbo S2"
		},
		{
			regex: "Mobiistar_LAI_Zumbo_J_2017(?:[);/ ]|$)",
			model: "Lai Zumbo J (2017)"
		},
		{
			regex: "Mobiistar_LAI_Zumbo_J(?:[);/ ]|$)",
			model: "Lai Zumbo J"
		},
		{
			regex: "Mobiistar_Zumbo_J2",
			model: "Lai Zumbo J2"
		},
		{
			regex: "Mobiistar[_ ]Zumbo[_ ]S2",
			model: "Zumbo S2"
		},
		{
			regex: "mobiistar ZUMBO Power",
			model: "Zumbo Power"
		},
		{
			regex: "mobiistar[ _]LAI[ _]YUNA[ _]([1XCS])",
			model: "Lai Yuna $1"
		},
		{
			regex: "mobiistar LAI Yuki",
			model: "Lai Yuki"
		},
		{
			regex: "mobiistar[ _]LAI[ _]ZORO[ _]([23])",
			model: "Lai Zoro $1"
		},
		{
			regex: "mobiistar[ _]LAI[ _]Zena",
			model: "Lai Zena"
		},
		{
			regex: "mobiistar[ _]LAI[ _]Z([12])?",
			model: "Lai Z$1"
		},
		{
			regex: "mobiistar_ZORO_4G",
			model: "Zoro 4G"
		},
		{
			regex: "mobiistar touch LAI 512",
			model: "Touch Lai 512"
		},
		{
			regex: "mobiistar LAI 504([KC])",
			model: "Lai 504$1"
		},
		{
			regex: "mobiistar LAI Y",
			model: "Lai Y"
		},
		{
			regex: "mobiistar PRIME X 2017",
			model: "Prime X"
		},
		{
			regex: "mobiistar[ _]PRIME[ _](X1|558|X[ _]Plus|X[ _]Grand) Build",
			model: "Prime $1"
		},
		{
			regex: "PRIME X MAX 2018",
			model: "Prime X Max"
		},
		{
			regex: "mobiistar[ _]KOOL([ _]Lite)?",
			model: "Kool$1"
		},
		{
			regex: "mobiistar KAT 452 Build",
			model: "Kat 452"
		},
		{
			regex: "mobiistar_LAI_YOLLO Build",
			model: "Lai Yollo"
		},
		{
			regex: "Mobiistar[ _]([^;/)]+)(?: Build|[;)])",
			model: "$1"
		}
	]
};
var MSI$1 = {
	regex: "Primo ?(?:9[13]|81|76)|Enjoy 7 Plus",
	device: "tablet",
	models: [
		{
			regex: "Primo ?(9[13]|76|81)",
			model: "Primo $1"
		},
		{
			regex: "Enjoy 7 Plus",
			model: "Enjoy 7 Plus"
		}
	]
};
var MLLED = {
	regex: "MLLED[ _]",
	device: "smartphone",
	models: [
		{
			regex: "MLLED[ _]([^;/]+)Build",
			model: "$1"
		},
		{
			regex: "MLLED[ _]([^);/]+)(?:[);/]|$)",
			model: "$1"
		}
	]
};
var Mobistel = {
	regex: "(Cynus[ _][^/;)]+)( Build|\\))",
	device: "smartphone",
	model: "$1"
};
var Mecool = {
	regex: "(?:KM9PRO|BB2 PRO|K[I]{1,3} PRO|KI PLUS|KM9_TV_BOX|M8SPROW|M8S (?:PLUS|PRO) (?:DVB|[LW]|PLUS)|M8S (?:MAX|PRO))(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "KM9PRO(?:[);/ ]|$)",
			model: "KM9 Pro"
		},
		{
			regex: "KM9_TV_BOX(?:[);/ ]|$)",
			model: "KM9 TV Box"
		},
		{
			regex: "BB2 PRO(?:[);/ ]|$)",
			model: "BB2 Pro"
		},
		{
			regex: "(K[I]{1,3}) PRO(?:[);/ ]|$)",
			model: "$1 Pro"
		},
		{
			regex: "KI PLUS(?:[);/ ]|$)",
			model: "KI Plus"
		},
		{
			regex: "M8SPROW(?:[);/ ]|$)",
			model: "M8S Pro W"
		},
		{
			regex: "M8S PLUS DVB(?:[);/ ]|$)",
			model: "M8S Plus DVB"
		},
		{
			regex: "M8S PLUS ([LW])(?:[);/ ]|$)",
			model: "M8S Plus $1"
		},
		{
			regex: "M8S PRO ([LW])(?:[);/ ]|$)",
			model: "M8S Pro $1"
		},
		{
			regex: "M8S PRO PLUS(?:[);/ ]|$)",
			model: "M8S Pro Plus"
		},
		{
			regex: "M8S PRO(?:[);/ ]|$)",
			model: "M8S Pro"
		},
		{
			regex: "M8S MAX(?:[);/ ]|$)",
			model: "M8S Max"
		}
	]
};
var Modecom = {
	regex: "Modecom|Free(?:Way )?Tab|xino z[\\d]+ x[\\d]+",
	device: "tablet",
	models: [
		{
			regex: "xino Z([\\d]+) X([\\d]+)",
			model: "Xino Z$1 X$2",
			device: "smartphone"
		},
		{
			regex: "FreeTab[ _\\-]?([^/;]+)? Build",
			model: "FreeTab $1"
		},
		{
			regex: "FreeTab[ _\\-]?((?!Build)[^);/ ]+)?",
			model: "FreeTab $1"
		},
		{
			regex: "FreeWay Tab[ _\\-]?([^/;]+) Build",
			model: "FreeWay Tab $1"
		},
		{
			regex: "FreeWay Tab[ _\\-]?((?!Build)[^);/ ]+)",
			model: "FreeWay Tab $1"
		}
	]
};
var Mofut = {
	regex: "Mofut",
	device: "smartphone",
	models: [
		{
			regex: "Mofut[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Mofut[ _\\-]?((?!Build)[^);/ ]+)",
			model: "$1"
		}
	]
};
var BrightSign = {
	regex: "BrightSign",
	device: "tv",
	models: [
		{
			regex: "(HD1023|XD233|XD230|XD1030|XT114[34]|4K1142|LS424)",
			model: "$1"
		}
	]
};
var Motorola = {
	regex: "MOT(?!TO)|(?<!AN)DROID ?(?:Build|[a-z0-9]+)|portalmmm/2.0 (?:E378i|L6|L7|v3)|XOOM [^;/]*Build|XT1941-2|XT1924-9|XT1925-10|XT1965-6|XT1970-5|XT1799-2|XT1021|XT1710-08|XT180[3-5]|XT194[23]-1|XT1929-15|(?:XT|MZ|MB|ME)[0-9]{3,4}[a-z]?(?:\\(Defy\\)|-0[1-5])?(?:[;]? Build|\\))",
	device: "smartphone",
	models: [
		{
			regex: "MOT-V360",
			model: "V360",
			device: "feature phone"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT300",
			model: "Spice"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT30[35]",
			model: "Motosmart ME"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT31[16]",
			model: "Fire"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT32[01]",
			model: "Defy Mini"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT3(?:89|90)",
			model: "Motosmart"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT502",
			model: "Quench"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT531",
			model: "Fire XT"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT535",
			model: "Defy"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT55[567]C?",
			model: "Defy XT"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT603",
			model: "Admiral"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT610",
			model: "Droid Pro"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT615",
			model: "Motoluxe"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT621",
			model: "Primus"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT626",
			model: "IronRock"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT682",
			model: "Atrix"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT685",
			model: "Motoluxe Dual-SIM"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT687",
			model: "Atrix TV"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT720",
			model: "Milestone"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT800W",
			model: "Glam"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT860",
			model: "Milestone 3"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT881",
			model: "Electrify 2"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT882",
			model: "Moto XT882"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT88[56]",
			model: "Droid RAZR V"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT890",
			model: "Droid RAZR i"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT894",
			model: "Droid 4"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT897",
			model: "Photon Q"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT901",
			model: "Electrify M"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT90[567]",
			model: "Droid RAZR M"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT910S?",
			model: "Droid RAZR"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT91[4568]",
			model: "Droid RAZR D1"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT9(?:19|20)",
			model: "Droid RAZR D3"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT925",
			model: "Droid RAZR HD"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT102[12]",
			model: "Moto E"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1706",
			model: "Moto E3 Power"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1924-9|moto e5 plus",
			model: "Moto E5 Plus"
		},
		{
			regex: "Moto E5 Play",
			model: "Moto E5 Play"
		},
		{
			regex: "Moto E5 go(?:[);/ ]|$)",
			model: "Moto E5 Go"
		},
		{
			regex: "Moto E6(?:[);/ ]|$)",
			model: "Moto E6"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1030",
			model: "Droid Mini"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1096",
			model: "Moto X2"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1254",
			model: "Droid Turbo"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT10(?:28|3[1234]|68|69)",
			model: "Moto G"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1799-2",
			model: "Moto G5s"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT180[3-5]",
			model: "Moto G5s Plus"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT168[57]",
			model: "Moto G5 Plus"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1670",
			model: "Moto G5"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1925-10",
			model: "Moto G6"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1965-6",
			model: "Moto G7 Plus"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT10(?:49|5[23568]|60|9[23457])",
			model: "Moto X"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1562",
			model: "Moto X Play"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1572",
			model: "Moto X Style"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1080",
			model: "Droid Ultra"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1650-05",
			model: "Moto Z"
		},
		{
			regex: "moto z4(?:[);/ ]|$)",
			model: "Moto Z4"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1635(?:-0[1-3])?",
			model: "Moto Z Play"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1710-(?:-0[28])?",
			model: "Moto Z2 Play"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1789-05",
			model: "Moto Z2 Force"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1929-15",
			model: "Moto Z3"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1663",
			model: "Moto M"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1943-1",
			model: "P30"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1941-2",
			model: "P30 Play"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1942-1",
			model: "P30 Note"
		},
		{
			regex: "(?:MOT-|Motorola-)?XT1970-5",
			model: "One Vision"
		},
		{
			regex: "(?:MOT-|Motorola-)?one zoom",
			model: "One Zoom"
		},
		{
			regex: "motorola one action",
			model: "One Action"
		},
		{
			regex: "motorola one macro",
			model: "One Macro"
		},
		{
			regex: "motorola one 5G UW",
			model: "One 5G UW"
		},
		{
			regex: "moto g power",
			model: "Moto G Power"
		},
		{
			regex: "moto g\\(([0-9])\\) power lite",
			model: "Moto G$1 Power Lite"
		},
		{
			regex: "moto g\\(([0-9])\\) power",
			model: "Moto G$1 Power"
		},
		{
			regex: "moto g\\(([0-9])\\) supra",
			model: "Moto G$1 Supra"
		},
		{
			regex: "moto g\\(([0-9])\\) plus",
			model: "Moto G$1 Plus"
		},
		{
			regex: "moto g\\(([0-9]+)\\) play",
			model: "Moto G$1 Play"
		},
		{
			regex: "moto g\\(([0-9]+)\\)",
			model: "Moto G$1"
		},
		{
			regex: "Moto ([CGEXZ]) ?\\(([a-z0-9]+)\\)( Plus| Play)?",
			model: "Moto $1$2$3"
		},
		{
			regex: "Moto ?([CGEXZ])([0-9]+)( Plus| Play)?",
			model: "Moto $1$2$3"
		},
		{
			regex: "(?:Motorola-)?Moto[ _]?([CGEXZ])([ _](?:Plus|Play))?",
			model: "Moto $1$2"
		},
		{
			regex: "MotoroiX",
			model: "MotoroiX"
		},
		{
			regex: "Motorola[ _\\-]([^/;]+)(?: Build|[);])",
			model: "$1"
		},
		{
			regex: "MOTORAZR[ _\\-]([a-z0-9]+)",
			model: "RAZR $1"
		},
		{
			regex: "MOTORIZR[ _\\-]([a-z0-9]+)",
			model: "RIZR $1"
		},
		{
			regex: "MOT(?!OROLA)[O]?[_\\-]?([a-z0-9.]+)",
			model: "$1"
		},
		{
			regex: "(?<!AN)DROID ?([a-z0-9 ]*) Build",
			model: "DROID $1"
		},
		{
			regex: "(?<!AN)DROID ?([a-z0-9]+)",
			model: "DROID $1"
		},
		{
			regex: "portalmmm/2.0 ((?:E378i|L6|L7|V3)[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(XOOM [^;/]*)Build",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "(MZ[0-9]{3})(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "((?:ME|MB|XT)[0-9]{3,4}(?:\\(Defy\\))?)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Movic = {
	regex: "MOVIC",
	device: "smartphone",
	models: [
		{
			regex: "MOVIC[ -]W([2345])",
			model: "W$1"
		}
	]
};
var MTN = {
	regex: "MTN-",
	device: "smartphone",
	models: [
		{
			regex: "MTN-(L860|S620)",
			model: "Sm@rt Mini $1"
		},
		{
			regex: "MTN-8978P",
			device: "tablet",
			model: "Steppa"
		},
		{
			regex: "MTN-([a-z0-9_\\-]+)",
			model: "MTN-$1"
		}
	]
};
var MyTab = {
	regex: "MyTAB[ _-](?:8 MINI Dual Core|U55GT)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "MyTAB[ _-]8 MINI Dual Core(?:[);/ ]|$)",
			model: "8 Mini Dual Core"
		},
		{
			regex: "MyTAB-U55GT(?:[);/ ]|$)",
			model: "U55GT"
		}
	]
};
var MyPhone = {
	regex: "(?:MyPhone|MyPad|MyTab)[ _][^;/)]+( Build|\\))|Cube_LTE|myTab10II|HAMMER[ _](Blade2_PRO|IRON_3|Explorer|ENERGY|Titan 2|AXE[_ ](?:M[_ ]LTE|Pro)|Iron 2|Active[2]?(_LTE)?)|C-Smart_pix|myPhone_Fun_8|FUN_18x9|MyPhoneMY27|Prime_4_Lite|myA17|myX12|Pocket_2|Prime_18x9|Prime3Lite|myT6 DTV|myXI1 (?:Plus|Pro)|myXI3|Q_Smart_BE",
	device: "smartphone",
	models: [
		{
			regex: "MyPad[ _]([^;/]+) Build",
			model: "MyPad $1",
			device: "tablet"
		},
		{
			regex: "MyTab[ _]([^;/]+) Build",
			model: "MyTab $1",
			device: "tablet"
		},
		{
			regex: "myTab_10III",
			model: "MyTab 10 III",
			device: "tablet"
		},
		{
			regex: "myTab10II",
			model: "MyTab 10 II",
			device: "tablet"
		},
		{
			regex: "myT6 DTV",
			model: "myT6 DTV",
			device: "tablet"
		},
		{
			regex: "Cube_LTE",
			model: "Cube LTE"
		},
		{
			regex: "Prime_4_Lite",
			model: "Prime 4 Lite"
		},
		{
			regex: "HAMMER[ _]ENERGY",
			model: "Hammer Energy"
		},
		{
			regex: "HAMMER_AXE[_ ]M[_ ]LTE",
			model: "Hammer Axe M LTE"
		},
		{
			regex: "Hammer Titan 2",
			model: "Hammer Titan 2"
		},
		{
			regex: "Hammer[ _]Iron[ _](2|3)",
			model: "Hammer Iron $1"
		},
		{
			regex: "Hammer[ _]Explorer",
			model: "Hammer Explorer"
		},
		{
			regex: "Hammer Active(?:[);/ ]|$)",
			model: "Hammer Active"
		},
		{
			regex: "Hammer_Active2(?:[);/ ]|$)",
			model: "Hammer Active 2"
		},
		{
			regex: "Hammer_Active2_LTE(?:[);/ ]|$)",
			model: "Hammer Active 2 LTE"
		},
		{
			regex: "Hammer AXE Pro",
			model: "Hammer Axe Pro"
		},
		{
			regex: "Hammer_Blade2_PRO",
			model: "Hammer Blade 2 Pro"
		},
		{
			regex: "C-Smart_pix",
			model: "C-Smart Pix"
		},
		{
			regex: "Pocket_2(?:[);/ ]|$)",
			model: "Pocket 2"
		},
		{
			regex: "myA17(?:[);/ ]|$)",
			model: "myA17"
		},
		{
			regex: "(?:myPhone_)?Fun_(8|18x9)",
			model: "FUN $1"
		},
		{
			regex: "MyPhoneMY27",
			model: "my27"
		},
		{
			regex: "myX12(?:[);/ ]|$)",
			model: "myX12"
		},
		{
			regex: "myXI1 Plus(?:[);/ ]|$)",
			model: "myXI1 Plus"
		},
		{
			regex: "myXI1 Pro(?:[);/ ]|$)",
			model: "myXI1 Pro"
		},
		{
			regex: "myXI3(?:[);/ ]|$)",
			model: "myXI3"
		},
		{
			regex: "Q_Smart_BE(?:[);/ ]|$)",
			model: "Q-Smart BE"
		},
		{
			regex: "Prime_18x9(_LTE)?(?:[);/ ]|$)",
			model: "Prime 18x9$1"
		},
		{
			regex: "Prime3Lite(?:[);/ ]|$)",
			model: "Prime 3 Lite"
		},
		{
			regex: "MyPhone[ _]([^;/)]+)( Build|\\))",
			model: "$1"
		}
	]
};
var MyWigo = {
	regex: "MyWigo ",
	device: "smartphone",
	models: [
		{
			regex: "City3",
			model: "City 3"
		}
	]
};
var Myros = {
	regex: "(E70 Ultra)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Myria = {
	regex: " (Myria_[^/;]+|502M|Cozy|Easy tab 9|Grand) Build|Myria_FIVE|Myria_Grand_4G|Myria_Wide_2|Myria_Wide_4G",
	device: "smartphone",
	models: [
		{
			regex: "Myria_([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Myria_FIVE",
			model: "Five"
		},
		{
			regex: "(502M|Grand)",
			model: "$1"
		},
		{
			regex: "Myria_Grand_4G",
			model: "Grand 4G"
		},
		{
			regex: "Myria_Wide_4G",
			model: "Wide 4G"
		},
		{
			regex: "Myria_Wide_2",
			model: "Wide 2"
		},
		{
			regex: "(Cozy|Easy tab 9)",
			model: "$1",
			device: "tablet"
		}
	]
};
var Navon = {
	regex: "Navon[_ ]|(?:Vision_Tab_(?:7|10)|Superme_Max|Predator (?:10|3G)|Platinum[_ ]10[_ ]3G(?:_V2)?|Supreme[_ ](?:Fine(?:[_ ]Micro)?|Chief|Pure|Pro)(?:[_ ](?:Mini|Plus))?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "M505 LTE(?:[);/ ]|$)",
			model: "Mizu M505 LTE"
		},
		{
			regex: "(F552|D504)(?:[);/ ]|$)",
			model: "Mizu $1"
		},
		{
			regex: "Superme_Max(?:[);/ ]|$)",
			model: "Supreme Max"
		},
		{
			regex: "Supreme_Fine_Mini(?:[);/ ]|$)",
			model: "Supreme Fine Mini"
		},
		{
			regex: "Supreme_Fine_Micro(?:[);/ ]|$)",
			model: "Supreme Fine Micro"
		},
		{
			regex: "Supreme[_ ]Fine[_ ]Plus(?:[);/ ]|$)",
			model: "Supreme Fine Plus"
		},
		{
			regex: "Supreme_Fine(?:[);/ ]|$)",
			model: "Supreme Fine"
		},
		{
			regex: "Supreme[_ ]Chief(?:[);/ ]|$)",
			model: "Supreme Chief"
		},
		{
			regex: "Supreme[_ ]Pure[ _]Plus(?:[);/ ]|$)",
			model: "Supreme Pure Plus"
		},
		{
			regex: "Supreme Pure(?:[);/ ]|$)",
			model: "Supreme Pure"
		},
		{
			regex: "Supreme[_ ]Pro(?:[);/ ]|$)",
			model: "Supreme Pro"
		},
		{
			regex: "Navon[_ ]Infinity(?:[);/ ]|$)",
			model: "Infinity"
		},
		{
			regex: "(?:Navon[_ ])?Platinum[ _]10[ _]3G(_V2)?(?:[);/ ]|$)",
			device: "tablet",
			model: "Platinum 10.1\" 3G$1"
		},
		{
			regex: "(?:Navon[_ ])?Orpheus[ _]3G(?:[);/ ]|$)",
			device: "tablet",
			model: "Orpheus 3G"
		},
		{
			regex: "Predator (3G|10)(?:[);/ ]|$)",
			device: "tablet",
			model: "Predator $1"
		},
		{
			regex: "Vision_Tab_(7|10)(?:[);/ ]|$)",
			device: "tablet",
			model: "Vision Tab $1"
		}
	]
};
var NOA = {
	regex: "(?:NOA-)?NOA[ _]|Hummer(?:_2019_R|LE)|NextSE",
	device: "smartphone",
	models: [
		{
			regex: "NOA[_ ]CORE[_ ]FORTE",
			model: "Core Forte"
		},
		{
			regex: "HummerLE",
			model: "Hummer LE"
		},
		{
			regex: "Hummer_2019_R",
			model: "Hummer R (2019)"
		},
		{
			regex: "NOA[_ ]Hummer[_ ]Lite",
			model: "Hummer Lite"
		},
		{
			regex: "NOA[_ ]MOVEse",
			model: "Move SE"
		},
		{
			regex: "NextSE",
			model: "Next SE"
		},
		{
			regex: "NOA[_ ]NEXT",
			model: "Next"
		},
		{
			regex: "NOA[_ ]VISION[_ ]H3SE",
			model: "Vision H3SE"
		},
		{
			regex: "NOA[_ ]VISION[_ ]H3",
			model: "Vision H3"
		},
		{
			regex: "NOA[_ ]LOOP",
			model: "Loop"
		},
		{
			regex: "(?:NOA-)?NOA[_ ]H4se",
			model: "H4SE"
		},
		{
			regex: "NOA[_ ]Mg12",
			model: "MG12"
		},
		{
			regex: "NOA[_ ]H44SE",
			model: "H44SE"
		},
		{
			regex: "NOA[_ ]H10LE",
			model: "H10LE"
		},
		{
			regex: "NOA[_ ]([^;)/ ]+)",
			model: "$1"
		}
	]
};
var Nobby = {
	regex: "Nobby[ ](S500|X800|S300(?: Pro)?)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var NEC = {
	regex: "NEC[ _\\-]|KGT/2\\.0|PC-TE508(?:S1|[BH]AW)|PC-TE510(?:HAW|BAL|S1)|PC-TS708T1W|PC-TS507N1S|PC-TE507JAW|portalmmm/1\\.0 (?:DB|N)|(?:portalmmm|o2imode)/2.0[ ,]N|(?:N-06C|N-02E|LAVIE Tab E (?:10|8)FHD1)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "N-06C(?:[);/ ]|$)",
			model: "Medias Amadana"
		},
		{
			regex: "N-02E(?:[);/ ]|$)",
			model: "Medias U"
		},
		{
			regex: "(?:NEC[ _\\-]|KGT/2\\.0 )([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/1\\.0 ((?:DB|N)[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(?:portalmmm|o2imode)/2\\.0[ ,](N[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "PC-TE508[BH]AW(?:[);/ ]|$)",
			device: "tablet",
			model: "LAVIE Tab E TE508"
		},
		{
			regex: "PC-TE510(?:BAL|HAW|S1)(?:[);/ ]|$)",
			device: "tablet",
			model: "LAVIE Tab E TE510"
		},
		{
			regex: "PC-TS507N1S(?:[);/ ]|$)",
			device: "tablet",
			model: "LAVIE Tab S TS507"
		},
		{
			regex: "PC-TS708T1W(?:[);/ ]|$)",
			device: "tablet",
			model: "LAVIE Tab S TS708"
		},
		{
			regex: "PC-TE507JAW(?:[);/ ]|$)",
			device: "tablet",
			model: "LAVIE Tab E TS507"
		},
		{
			regex: "PC-TE508S1(?:[);/ ]|$)",
			device: "tablet",
			model: "LAVIE Tab E TE508"
		},
		{
			regex: "(LAVIE Tab E (?:10|8)FHD1)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Neffos = {
	regex: "Neffos|(TP601A)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "TP601A(?:[);/ ]|$)",
			model: "C5L"
		},
		{
			regex: "Neffos[_ ]Y50",
			model: "Y50"
		},
		{
			regex: "Neffos X20 Pro",
			model: "X20 Pro"
		},
		{
			regex: "Neffos[_ ]((?:[YNCXA])[0-9][A-Z]?(?: Max| Lite)?)",
			model: "$1"
		}
	]
};
var Nextbit = {
	regex: "Nextbit|(?:Robin)(?: Build|\\))",
	device: "smartphone",
	models: [
		{
			regex: "(Robin)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Newgen = {
	regex: "NEWGEN\\-([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Netgear = {
	regex: "GTV100",
	device: "tv",
	models: [
		{
			regex: "GTV100",
			model: "NeoTV Prime"
		}
	]
};
var NeuImage = {
	regex: "NIM-",
	device: "smartphone",
	models: [
		{
			regex: "NIM-(450D|550O|600Q)",
			model: "$1"
		}
	]
};
var NextBook = {
	regex: "Next[0-9]|NX(?:785QC8G|M900MC|008HD8G|010HI8G|M908HC|M726|16A8116K|A8QC116|16A10132S|16A11264)",
	device: "tablet",
	models: [
		{
			regex: "NX008HD8G",
			model: "Premium 8 HD"
		},
		{
			regex: "NXA8QC116",
			model: "Ares 8"
		},
		{
			regex: "NX16A8116K",
			model: "Ares A8"
		},
		{
			regex: "NX16A10132S",
			model: "Ares A10"
		},
		{
			regex: "NX16A11264",
			model: "Ares A11"
		},
		{
			regex: "NXM908HC",
			model: "Premium 9"
		},
		{
			regex: "NX010HI8G",
			model: "Premium 10 Hi"
		},
		{
			regex: "NX785QC8G",
			model: "8"
		},
		{
			regex: "NXM900MC",
			model: "8 HD"
		},
		{
			regex: "NXM726",
			model: "Premium 7"
		},
		{
			regex: "Next([0-9]+[^;/]+) Build",
			model: "Next $1"
		}
	]
};
var NGM = {
	regex: "NGM[_ ][a-z0-9]+|(Forward|Dynamic)[ _]?[^/;]+(?:Build|/)",
	device: "smartphone",
	models: [
		{
			regex: "(Forward|Dynamic)[ _]?([^/;]+) Build",
			model: "$1 $2"
		},
		{
			regex: "(Forward|Dynamic)[ _]?([^/;]+)/",
			model: "$1 $2"
		},
		{
			regex: "NGM ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "NGM_([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Nexian = {
	regex: "S?Nexian",
	device: "smartphone",
	models: [
		{
			regex: "S?Nexian[ ]?([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "S?Nexian-([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Noain = {
	regex: "NOAIN",
	device: "smartphone",
	models: [
		{
			regex: "NOAIN[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "NOAIN[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Noblex = {
	regex: "Noblex|NBX-",
	device: "smartphone",
	models: [
		{
			regex: "(?:Noblex|NBX)[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "(?:Noblex|NBX)[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Nomu = {
	regex: "Nomu[ _-](?:T18|S30mini|S10)(?:[);/ ]|$)|V1600S(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Nomu[ _-]T18(?:[);/ ]|$)",
			model: "T18"
		},
		{
			regex: "Nomu[ _-]s10(?:[);/ ]|$)",
			model: "S10"
		},
		{
			regex: "Nomu[ _-]S30mini(?:[);/ ]|$)",
			model: "S30 Mini"
		},
		{
			regex: "(V1600S)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Nomi = {
	regex: "Nomi[ _-]|(C101010 Ultra2|i501[234]|i5032|i50[57]0|i5510|i5532|C0(700(?:[02358]|2HD)|7850)|C1010[0-3])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "i501[23](?:[);/ ]|$)",
			model: "Evo M2"
		},
		{
			regex: "I5070(?:[);/ ]|$)",
			model: "Iron-X"
		},
		{
			regex: "i5014(?:[);/ ]|$)",
			model: "Evo M4"
		},
		{
			regex: "i5032(?:[);/ ]|$)",
			model: "Evo X2"
		},
		{
			regex: "i5050(?:[);/ ]|$)",
			model: "Evo Z"
		},
		{
			regex: "Nomi_i4510(?:[);/ ]|$)",
			model: "Beat M"
		},
		{
			regex: "i5532(?:[);/ ]|$)",
			model: "Space X2"
		},
		{
			regex: "i5510(?:[);/ ]|$)",
			model: "Space M"
		},
		{
			regex: "C101010 Ultra2",
			model: "Ultra 2",
			device: "tablet"
		},
		{
			regex: "(C0(?:700(?:[02358]|2HD)|7850)|C1010[0-3])(?:[);/ ]|$)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Nomi[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Nomi[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Nous = {
	regex: "(?:NS(?:[356]|500[2-68]|5511|5502)|NS 5511)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "NS 5511(?:[);/ ]|$)",
			model: "NS5511"
		},
		{
			regex: "(NS[0-9]{1,4})(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Nvidia = {
	regex: "NVIDIA|SHIELD Tablet K1|SHIELD Android TV|Tegra(Note-P1640| Note 7)",
	device: "tablet",
	models: [
		{
			regex: "TegraNote-P1640",
			model: "Tegra Note P1640"
		},
		{
			regex: "(SHIELD Tablet K1|Tegra Note 7)(?: Build|[;)])",
			model: "$1"
		},
		{
			regex: "SHIELD Android TV",
			model: "SHIELD Android TV",
			device: "tv"
		},
		{
			regex: "NVIDIA_SHIELD_PRO_2019",
			model: "SHIELD TV Pro",
			device: "tv"
		},
		{
			regex: "NVIDIA Shield",
			model: "SHIELD TV",
			device: "tv"
		}
	]
};
var O2 = {
	regex: "Xda|(?<!FBCR/)O2[ \\-]|COCOON",
	device: "smartphone",
	models: [
		{
			regex: "(Xda[ _][a-z0-9_]+)",
			model: "$1"
		},
		{
			regex: "(COCOON)",
			model: "$1"
		},
		{
			regex: "O2 ([a-z0-9 ]+)",
			model: "$1"
		},
		{
			regex: "O2-([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Odys = {
	regex: "ODYS[ _-]|IEOS[_ ]([^/;]+)|NOON(?:_PRO)? Build|SPACE10_(?:PLUS|PRO)_3G|THOR_?10|TAO_X10|RAPID_?(?:10|7)_?LTE|MAVEN_?10_|CONNECT[78]|ELEMENT10_PLUS_3G|XELIO[_0-9P]|ADM816HC|ADM8000KP|NEO6_LTE|EOS10|AEON|FALCON_10_PLUS_3G|FUSION|THANOS_10|MAVEN_X10_HD(?:_LTE)?|JUNIOR_8_PRO|JuniorT8Pro|(?:NOVA|PYRO)_X?7_PLUS_3G|UNO_X8|SLADE_X55|XELIO_PRO_10_LTE|NOTOSplus3G",
	device: "tablet",
	models: [
		{
			regex: "XELIO[_ ]A10",
			model: "Xelio A10"
		},
		{
			regex: "XELIOPHONETAB3",
			model: "Xelio Phonetab 3"
		},
		{
			regex: "THANOS_10",
			model: "Thanos 10"
		},
		{
			regex: "XELIO_NEXT_10_PLUS_3G",
			model: "Xelio Next 10 Plus 3G"
		},
		{
			regex: "XELIO_PHONE_TAB7_3G",
			model: "Xelio Phonetab 7 3G"
		},
		{
			regex: "XELIO10EXTREME",
			model: "Xelio 10 Xtreme"
		},
		{
			regex: "XELIO10_PLUS_3G",
			model: "Xelio 10 Plus 3G"
		},
		{
			regex: "XELIO10_HD_PLUS_3G",
			model: "Xelio 10 HD Plus 3G"
		},
		{
			regex: "XELIO_10_HD",
			model: "Xelio 10 HD"
		},
		{
			regex: "XELIO_PRO_10_LTE",
			model: "Xelio Pro 10 LTE"
		},
		{
			regex: "ELEMENT10_PLUS_3G",
			model: "Element 10 Plus 3G"
		},
		{
			regex: "CONNECT8PLUS",
			model: "Connect 8 Plus"
		},
		{
			regex: "CONNECT7PRO",
			model: "Connect 7 Pro"
		},
		{
			regex: "MAVEN_X10_HD_LTE",
			model: "Maven X10 HD LTE"
		},
		{
			regex: "MAVEN_X10_HD",
			model: "Maven X10 HD"
		},
		{
			regex: "MAVEN_?10_PRO_PLUS_3G",
			model: "Maven 10 Pro Plus 3G"
		},
		{
			regex: "MAVEN_?10_?PLUS",
			model: "Maven 10 Plus"
		},
		{
			regex: "MAVEN_?10_?PRO",
			model: "Maven 10 Pro"
		},
		{
			regex: "MAVEN_?10_?HD",
			model: "Maven 10 HD"
		},
		{
			regex: "RAPID_?7_?LTE",
			model: "Rapid 7 LTE"
		},
		{
			regex: "RAPID_?10_?LTE",
			model: "Rapid 10 LTE"
		},
		{
			regex: "TAO_X10",
			model: "Tao X10"
		},
		{
			regex: "SPACE10_PLUS_3G",
			model: "Space 10 Plus 3G"
		},
		{
			regex: "SPACE10_PRO_3G",
			model: "Space 10 Pro 3G"
		},
		{
			regex: "THOR_?10 Build",
			model: "Thor 10"
		},
		{
			regex: "JuniorT8Pro",
			model: "Junior T8 Pro"
		},
		{
			regex: "JUNIOR_8_PRO",
			model: "Junior 8 Pro"
		},
		{
			regex: "ADM816HC",
			model: "Neo X"
		},
		{
			regex: "EOS10",
			model: "EOS 10"
		},
		{
			regex: "AEON",
			model: "Aeon"
		},
		{
			regex: "FALCON_10_PLUS_3G",
			model: "Falcon 10 Plus 3G"
		},
		{
			regex: "FUSION",
			model: "Fusion 7"
		},
		{
			regex: "UNO_X8",
			model: "Uno X8"
		},
		{
			regex: "ADM8000KP",
			model: "Titan"
		},
		{
			regex: "PYRO_7_PLUS_3G",
			model: "Pyro 7 Plus 3G"
		},
		{
			regex: "NOVA_X7_PLUS_3G",
			model: "Nova X7 Plus 3G"
		},
		{
			regex: "ODYS_NOVA_X7",
			model: "Nova X7"
		},
		{
			regex: "THOR_?10_PLUS_3G",
			model: "Thor 10 Plus 3G"
		},
		{
			regex: "NOTOSplus3G",
			model: "Notos Plus 3G"
		},
		{
			regex: "NEO6[_ ]LTE",
			model: "Neo 6 LTE",
			device: "smartphone"
		},
		{
			regex: "SLADE_X55",
			model: "Slade X55",
			device: "smartphone"
		},
		{
			regex: "IEOS[ _]([^/;]+) Build",
			model: "Ieos $1"
		},
		{
			regex: "(?:ODYS[ _-])?NOON Build",
			model: "Noon"
		},
		{
			regex: "(?:ODYS[ _-])?NOON_PRO Build",
			model: "Noon Pro"
		},
		{
			regex: "Odys[ _-]([^/;]+) Build",
			model: "$1"
		}
	]
};
var Obi = {
	regex: "Obi[ _-]|(SJ1\\.5|SJ2\\.6|S400|S452\\+|S451|S453|S501|S502|S503\\+?|S507|S520|S550|S551|falcon)[ _]",
	device: "smartphone",
	models: [
		{
			regex: "SJ2\\.6",
			model: "SJ2.6"
		},
		{
			regex: "SJ1\\.5",
			model: "SJ1.5"
		},
		{
			regex: "(?:Obi_)?S400",
			model: "Skipper"
		},
		{
			regex: "(?:Obi_)?S451|falcon",
			model: "Flacon"
		},
		{
			regex: "(?:Obi_)?S452\\+",
			model: "Python"
		},
		{
			regex: "(?:Obi_)?S453",
			model: "Fox"
		},
		{
			regex: "(?:Obi_)?S501",
			model: "Wolverine"
		},
		{
			regex: "(?:Obi_)?S502",
			model: "Leopard"
		},
		{
			regex: "(?:Obi_)?S503\\+",
			model: "Boa Plus"
		},
		{
			regex: "(?:Obi_)?S503",
			model: "Boa"
		},
		{
			regex: "(?:Obi_)?S507",
			model: "Pelican"
		},
		{
			regex: "(?:Obi_)?S520",
			model: "Octopus"
		},
		{
			regex: "(?:Obi_)?S550",
			model: "Crane"
		},
		{
			regex: "(?:Obi_)?S551",
			model: "Hornbill"
		},
		{
			regex: "(?:Obi_)?S454",
			model: "Alligator"
		},
		{
			regex: "Obi[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Obi[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var Okapia = {
	regex: "Signature (?:L|Pro|Touch)",
	device: "smartphone",
	models: [
		{
			regex: "Signature (L|Pro|Touch)",
			model: "Signature $1"
		}
	]
};
var Onda = {
	regex: "Onda|(?:(?:V820w|V891[w]?|V919(?: 3G)? Air)[ _-]DualOS|(?:V919 4G Air|V989 Air|V972) Core[48]|T2101L2B1C| V10 4G|OBOOK (?:20 SE|20 PLUS DUALOS)|OBOOK10 SE|V919 Air CH DualOS)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ONDA[ _]MID",
			model: "MID",
			device: "tablet"
		},
		{
			regex: "V820w[ _-]DualOS",
			model: "V820W Dual OS",
			device: "tablet"
		},
		{
			regex: "V891W[ _-]DualOS",
			model: "V891W Dual OS",
			device: "tablet"
		},
		{
			regex: "V891[ _-]DualOS",
			model: "V891 Dual OS",
			device: "tablet"
		},
		{
			regex: "V919 3G Air[ _-]DualOS",
			model: "V919 3G Air Dual OS",
			device: "tablet"
		},
		{
			regex: "V919 Air[ _-]DualOS",
			model: "V919 Air Dual OS",
			device: "tablet"
		},
		{
			regex: "V919 Air CH DualOS",
			model: "V919 Air CH Dual OS",
			device: "tablet"
		},
		{
			regex: "V919 4G Air Core8",
			model: "V919 4G Air Core 8",
			device: "tablet"
		},
		{
			regex: "V972 Core4",
			model: "V919 Core 4",
			device: "tablet"
		},
		{
			regex: "V989 Air Core8",
			model: "V989 Air Core 8",
			device: "tablet"
		},
		{
			regex: "T2101L2B1C|OBOOK 20 PLUS DUALOS",
			model: "oBook 20 Plus Dual OS",
			device: "tablet"
		},
		{
			regex: " V10 4G(?:[);/ ]|$)",
			model: "V10 10.1\" 4G",
			device: "tablet"
		},
		{
			regex: "OBOOK 20 SE(?:[);/ ]|$)",
			model: "oBook 20 SE",
			device: "tablet"
		},
		{
			regex: "OBOOK10 SE(?:[);/ ]|$)",
			model: "oBook 10 SE",
			device: "tablet"
		},
		{
			regex: "([a-z0-9]+)[ _]Onda",
			model: "$1"
		},
		{
			regex: "Onda ([a-z0-9]+)",
			model: "$1"
		}
	]
};
var OnePlus = {
	regex: "(?:du_)?ONEPLUS|(?:A0001|A200[135]|AC200[13]|A300[03]|A3010|A5000|A600[03]|A601[03]|BE201[1235]|BE2025|BE202[89]|E100[135]|GM191[03517]|GM190[0135]|GM192[05]|HD191[013]|HD190[01357]|HD1925|IN201[013579]|IN202[0135]|KB200[01357]|LE2117|LE212[03])(?: Build|\\))",
	device: "smartphone",
	models: [
		{
			regex: "AC200[13](?:[);/ ]|$)",
			model: "Nord 5G"
		},
		{
			regex: "BE2012(?:[);/ ]|$)",
			model: "Clover"
		},
		{
			regex: "BE201[135](?:[);/ ]|$)",
			model: "Nord N100"
		},
		{
			regex: "BE2025(?:[);/ ]|$)",
			model: "Nord N10"
		},
		{
			regex: "BE2029(?:[);/ ]|$)",
			model: "Nord N10 5G"
		},
		{
			regex: "BE2028(?:[);/ ]|$)",
			model: "Nord N10 Lite"
		},
		{
			regex: "IN202[0135](?:[);/ ]|$)",
			model: "8 Pro"
		},
		{
			regex: "KB2000(?:[);/ ]|$)",
			model: "8T"
		},
		{
			regex: "IN201[01357](?:[);/ ]|$)",
			model: "8"
		},
		{
			regex: "IN2019(?:[);/ ]|$)",
			model: "8 5G UW"
		},
		{
			regex: "LE2117(?:[);/ ]|$)",
			model: "9"
		},
		{
			regex: "LE212[03](?:[);/ ]|$)",
			model: "9 Pro"
		},
		{
			regex: "(?:GM191[01357]|OnePlus 7 Pro)(?:[);/ ]|$)",
			model: "7 Pro"
		},
		{
			regex: "GM190[0135](?:[);/ ]|$)",
			model: "7"
		},
		{
			regex: "HD190[01357](?:[);/ ]|$)",
			model: "7T"
		},
		{
			regex: "(?:HD191[013]|OnePlus 7T Pro)(?:[);/ ]|$)",
			model: "7T Pro"
		},
		{
			regex: "(?:HD1925|GM192[05])(?:[);/ ]|$)",
			model: "7T Pro 5G"
		},
		{
			regex: "KB200[1357](?:[);/ ]|$)",
			model: "8T"
		},
		{
			regex: "A0001(?:[);/ ]|$)",
			model: "One"
		},
		{
			regex: "A200[135]|OnePlus2",
			model: "2"
		},
		{
			regex: "E100[135](?:[);/ ]|$)",
			model: "X"
		},
		{
			regex: "A3010|OnePlus3T",
			model: "3T"
		},
		{
			regex: "A300[03]|OnePlus3",
			model: "3"
		},
		{
			regex: "A5010|OnePlus[ ]?5T",
			model: "5T"
		},
		{
			regex: "A5000|OnePlus5",
			model: "5"
		},
		{
			regex: "A600[03]|OnePlus6",
			model: "6"
		},
		{
			regex: "A601[03](?:[);/ ]|$)",
			model: "6T"
		},
		{
			regex: "(?:du_)?ONEPLUS ?([^;/]+) Build",
			model: "$1"
		}
	]
};
var Realme = {
	regex: "Realme[ _]|(?:RMX(?:19(03|4[1235]|19|9[23]|2[157]|[01379]1|73)|20(?:[025-7]1|[037]2|2[57]|63|7[56]|8[156]|[2-5]0)|21(?:0[13]|17|[12]1|4[24]|5[15]|6[13]|7[60]|8[059]|9[35])|2200|18(0[1579]|11|3[13]|2[157]|[45]1|45)|3201|30[38]1|3063)|(?:OPPO[ _]?)?CPH1861)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:OPPO[ _]?)?CPH1861(?:[);/ ]|$)",
			model: "1"
		},
		{
			regex: "RMX180[59]",
			model: "2"
		},
		{
			regex: "RMX180[17]",
			model: "2 Pro"
		},
		{
			regex: "RMX(1833|182[15])",
			model: "3"
		},
		{
			regex: "RMX1827",
			model: "3i"
		},
		{
			regex: "RMX1851",
			model: "3 Pro"
		},
		{
			regex: "RMX190[13]|Realme X(?:[);/ ]|$)",
			model: "X"
		},
		{
			regex: "RMX199[12]",
			model: "X2"
		},
		{
			regex: "RMX1993",
			model: "X2 Dual"
		},
		{
			regex: "RMX1931|Realme X2 Pro(?:[);/ ]|$)",
			model: "X2 Pro"
		},
		{
			regex: "RMX2117",
			model: "Q2 5G"
		},
		{
			regex: "RMX2176(?:[);/ ]|$)",
			model: "X7 5G"
		},
		{
			regex: "RMX2121(?:[);/ ]|$)",
			model: "X7 Pro 5G"
		},
		{
			regex: "RMX1921|Realme XT(?:[);/ ]|$)",
			model: "XT"
		},
		{
			regex: "RMX19(1[19]|27)",
			model: "5"
		},
		{
			regex: "RMX197[13]",
			model: "5 Pro"
		},
		{
			regex: "RMX203[02]",
			model: "5i"
		},
		{
			regex: "RMX2001",
			model: "6"
		},
		{
			regex: "RMX2040",
			model: "6I"
		},
		{
			regex: "RMX2002",
			model: "6S"
		},
		{
			regex: "RMX206[13](?:[);/ ]|$)",
			model: "6 Pro"
		},
		{
			regex: "RMX215[15]",
			model: "7"
		},
		{
			regex: "RMX2103",
			model: "7I"
		},
		{
			regex: "RMX2170",
			model: "7 Pro"
		},
		{
			regex: "RMX3081",
			model: "8 Pro"
		},
		{
			regex: "RMX1925(?:[);/ ]|$)",
			model: "5S"
		},
		{
			regex: "RMX1811(?:[);/ ]|$)",
			model: "C1"
		},
		{
			regex: "RMX194[1235](?:[);/ ]|$)",
			model: "C2"
		},
		{
			regex: "RMX202[107](?:[);/ ]|$)",
			model: "C3"
		},
		{
			regex: "RMX2185(?:[);/ ]|$)",
			model: "C11"
		},
		{
			regex: "RMX2189(?:[);/ ]|$)",
			model: "C12"
		},
		{
			regex: "RMX2180(?:[);/ ]|$)",
			model: "C15"
		},
		{
			regex: "RMX2195(?:[);/ ]|$)",
			model: "C15 Qualcomm Edition"
		},
		{
			regex: "RMX2101(?:[);/ ]|$)",
			model: "C17"
		},
		{
			regex: "RMX3063(?:[);/ ]|$)",
			model: "C20"
		},
		{
			regex: "RMX3031(?:[);/ ]|$)",
			model: "GT Neo"
		},
		{
			regex: "RMX216[13](?:[);/ ]|$)",
			model: "Narzo 20 Pro"
		},
		{
			regex: "RMX2193(?:[);/ ]|$)",
			model: "Narzo 20"
		},
		{
			regex: "RMX2050(?:[);/ ]|$)",
			model: "Narzo 20A"
		},
		{
			regex: "RMX1831(?:[);/ ]|$)",
			model: "U1"
		},
		{
			regex: "RMX(?:20(?:51|[2]5)|2144)(?:[);/ ]|$)",
			model: "X50 5G"
		},
		{
			regex: "RMX2071(?:[);/ ]|$)",
			model: "X50 Pro"
		},
		{
			regex: "RMX207[56](?:[);/ ]|$)",
			model: "X50 Pro 5G"
		},
		{
			regex: "RMX2072(?:[);/ ]|$)",
			model: "X50 Pro Player"
		},
		{
			regex: "RMX(2142|2081)(?:[);/ ]|$)",
			model: "X3"
		},
		{
			regex: "RMX208[56](?:[);/ ]|$)",
			model: "X3 Super Zoom"
		},
		{
			regex: "RMX2111",
			model: "V5 5G"
		},
		{
			regex: "RMX2200",
			model: "V3 5G"
		},
		{
			regex: "RMX3201",
			model: "C21"
		},
		{
			regex: "Realme[ _]([1-9])[ _]Pro(?:[);/ ]|$)",
			model: "$1 Pro"
		}
	]
};
var OPPO = {
	regex: "(?:OB-)?OPPO[ _]?([a-z0-9]+)|N1T|R8001|OPG01|A00[12]OP|(?:X90[07][0679]|U70[57]T?|X909T?|R(?:10[01]1|2001|201[07]|6007|7005|7007|80[13579]|81[13579]|82[01379]|83[013]|800[067]|8015|810[679]|811[13]|820[057])[KLSTW]?|N520[79]|N5117|A33f|A33fw|A37fw?|PAAM00|PAAT00|PAC[TM]00)(?:[);/ ]|$)|R7kf|R7plusf|R7Plusm|A1601|CPH[0-9]{4}|CPH19(69|79|23|1[179])|PB(A[TM]00|CT10|BT30|CM[13]0|[FD]M00)|P(DAM10|ADM00|AF[TM]00|ADT00|AHM00|BBM[03]0|BBT00|BDT00|BFT00|[CB]E[MT]00|CA[MT]00|C[CDG]M00|CA[MT]10|[CD]PM00|CRM00|CDT00|CD[TM]10|CHM[013]0|CKM[08]0|CLM[15]0|DEM[13]0|DHM00|DK[TM]00|DPT00|DB[TM]00|DCM00|[CD]NM00|DVM00|DY[TM]20|DNT00|EA[TM]00)|PDSM00",
	device: "smartphone",
	models: [
		{
			regex: "PCHM10(?:[);/ ]|$)",
			model: "A11"
		},
		{
			regex: "(?:CPH2083|CPH2077)(?:[);/ ]|$)",
			model: "A12"
		},
		{
			regex: "PCHM00(?:[);/ ]|$)",
			model: "A11x"
		},
		{
			regex: "CPH1923(?:[);/ ]|$)",
			model: "A1K"
		},
		{
			regex: "(?:OPPO[ _]?)?(CPH1837|PAD[TM]00)(?:[);/ ]|$)",
			model: "A3"
		},
		{
			regex: "(?:OPPO[ _]?)?A37f(w)(?:[);/ ]|$)",
			model: "A37f$1"
		},
		{
			regex: "A37f(?:[);/ ]|$)",
			model: "A37f"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1605(?:[);/ ]|$)",
			model: "A39"
		},
		{
			regex: "CPH20(?:81|73|31|15)(?:[);/ ]|$)",
			model: "A31"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH18(?:0[35]|53)|PBBM30)(?:[);/ ]|$)",
			model: "A3s"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1809|PBA[TM]00|PBBT30)(?:[);/ ]|$)",
			model: "A5"
		},
		{
			regex: "CPH19(?:3[13]|43)(?:[);/ ]|$)",
			model: "A5 (2020)"
		},
		{
			regex: "PDVM00(?:[);/ ]|$)",
			model: "A32"
		},
		{
			regex: "(?:PDAM10|CPH2069|CPH2061)(?:[);/ ]|$)",
			model: "A52"
		},
		{
			regex: "CPH2127(?:[);/ ]|$)",
			model: "A53"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH170[15](?:[);/ ]|$)",
			model: "A57"
		},
		{
			regex: "CPH19(?:09|1[02])(?:[);/ ]|$)",
			model: "A5S"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH190[15]|PBF[TM]00)(?:[);/ ]|$)",
			model: "A7"
		},
		{
			regex: "(?:OPPO[ _]?)?(CPH1801|CPH1717)(?:[);/ ]|$)",
			model: "A71"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:PDY[TM]20|CPH2067)(?:[);/ ]|$)",
			model: "A72"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1715(?:[);/ ]|$)",
			model: "A77"
		},
		{
			regex: "PCD[TM]00(?:[);/ ]|$)",
			model: "A7n"
		},
		{
			regex: "(PBBT00|PBBM00)(?:[);/ ]|$)",
			model: "A7x"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:PDBM00)(?:[);/ ]|$)",
			model: "A8"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1729(?:[);/ ]|$)",
			model: "A83"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1827(?:[);/ ]|$)",
			model: "A83 (2018)"
		},
		{
			regex: "PCA[TM]10(?:[);/ ]|$)",
			model: "A9"
		},
		{
			regex: "(CPH1937|CPH1941|PCHM30)(?:[);/ ]|$)",
			model: "A9 (2020)"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1938(?:[);/ ]|$)",
			model: "A9 (EN)"
		},
		{
			regex: "(?:PCPM00|CPH20[02]1)(?:[);/ ]|$)",
			model: "A91"
		},
		{
			regex: "CPH2059(?:[);/ ]|$)",
			model: "A92"
		},
		{
			regex: "PDKT00(?:[);/ ]|$)",
			model: "A92s"
		},
		{
			regex: "PDKM00(?:[);/ ]|$)",
			model: "A93s"
		},
		{
			regex: "PCE[TM]00(?:[);/ ]|$)",
			model: "A9x"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1851(?:[);/ ]|$)",
			model: "AX5"
		},
		{
			regex: "CPH1920(?:[);/ ]|$)",
			model: "AX5s"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1903(?:[);/ ]|$)",
			model: "AX7"
		},
		{
			regex: "(?:OPPO[ _]?)?X9009(?:[);/ ]|$)",
			model: "F1 Plus"
		},
		{
			regex: "CPH191[135](?:[);/ ]|$)",
			model: "F11"
		},
		{
			regex: "CPH19(?:69|87)(?:[);/ ]|$)",
			model: "F11 Pro"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH2119)(?:[);/ ]|$)",
			model: "F17 Pro"
		},
		{
			regex: "(?:OPPO[ _]?)?A1601(?:[);/ ]|$)",
			model: "F1s"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1609(?:[);/ ]|$)",
			model: "F3"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1613(?:[);/ ]|$)",
			model: "F3 Plus"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH172[37](?:[);/ ]|$)",
			model: "F5"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1725(?:[);/ ]|$)",
			model: "F5 Youth"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH(1859|18(?:19|21))(?:[);/ ]|$)",
			model: "F7"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1825|CPH1881)(?:[);/ ]|$)",
			model: "F9"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1823(?:[);/ ]|$)",
			model: "F9 Pro"
		},
		{
			regex: "(?:OPPO[ _]?)?X909T?(?:[);/ ]|$)",
			model: "Find 5"
		},
		{
			regex: "(?:OPPO[ _]?)?R827T?(?:[);/ ]|$)",
			model: "Find 5 Mini"
		},
		{
			regex: "(?:OPPO[ _]?)?X907[067](?:[);/ ]|$)",
			model: "Find 7"
		},
		{
			regex: "(?:OPPO[ _]?)?X900[067](?:[);/ ]|$)",
			model: "Find 7a"
		},
		{
			regex: "(?:OPPO[ _]?)?R815[TW]?(?:[);/ ]|$)",
			model: "Find Clover"
		},
		{
			regex: "(?:OPPO[ _]?)?R8015(?:[);/ ]|$)",
			model: "Find Guitar"
		},
		{
			regex: "(?:OPPO[ _]?)?R8111(?:[);/ ]|$)",
			model: "Find Melody"
		},
		{
			regex: "(?:OPPO[ _]?)?R821T?(?:[);/ ]|$)",
			model: "Find Muse"
		},
		{
			regex: "(?:OPPO[ _]?)?U707T?(?:[);/ ]|$)",
			model: "Find Way S"
		},
		{
			regex: "(?:OPPO[ _]?)?U705T(?:[);/ ]|$)",
			model: "Ulike 2"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH187[15]|PAF[MT]00)(?:[);/ ]|$)",
			model: "Find X"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:PAHM00)(?:[);/ ]|$)",
			model: "Find X Lamborghini"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:PDEM10|CPH2023)(?:[);/ ]|$)",
			model: "Find X2"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH2005(?:[);/ ]|$)",
			model: "Find X2 Lite"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:PDEM30|OPG01|CPH2025)(?:[);/ ]|$)",
			model: "Find X2 Pro"
		},
		{
			regex: "(?:OPPO[ _]?)?R1011 Build",
			model: "Joy Plus"
		},
		{
			regex: "(?:OPPO[ _]?)?(PBC(?:M30|T10))(?:[);/ ]|$)",
			model: "K1"
		},
		{
			regex: "CPH1955(?:[);/ ]|$)",
			model: "K3"
		},
		{
			regex: "(?:OPPO[ _]?)?(PCNM00)(?:[);/ ]|$)",
			model: "K5"
		},
		{
			regex: "(?:OPPO[ _]?)?(PCLM50)(?:[);/ ]|$)",
			model: "K7"
		},
		{
			regex: "(?:OPPO[ _]?)?N5117(?:[);/ ]|$)",
			model: "N1 Mini"
		},
		{
			regex: "(?:OPPO[ _]?)?N520[79](?:[);/ ]|$)",
			model: "N3"
		},
		{
			regex: "(?:OPPO[ _]?)?R831T?(?:[);/ ]|$)",
			model: "Neo"
		},
		{
			regex: "(?:OPPO[ _]?)?R831K(?:[);/ ]|$)",
			model: "Neo 3"
		},
		{
			regex: "(?:OPPO[ _]?)?R831[SL](?:[);/ ]|$)",
			model: "Neo 5"
		},
		{
			regex: "(?:OPPO[ _]?)?A33f(?:[);/ ]|$)",
			model: "Neo 7"
		},
		{
			regex: "(?:OPPO[ _]?)?A33fw(?:[);/ ]|$)",
			model: "Neo 7s"
		},
		{
			regex: "(?:OPPO[ _]?)?R8113(?:[);/ ]|$)",
			model: "Piano"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1707(?:[);/ ]|$)",
			model: "R11"
		},
		{
			regex: "R8001(?:[);/ ]|$)",
			model: "R1K"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1719(?:[);/ ]|$)",
			model: "R11s"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1721(?:[);/ ]|$)",
			model: "R11s Plus"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1835|PAC[TM]00|PAAM00)(?:[);/ ]|$)",
			model: "R15"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH183[13]|PAAT00)(?:[);/ ]|$)",
			model: "R15 Pro"
		},
		{
			regex: "PBCM10(?:[);/ ]|$)",
			model: "R15x"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1879|PBE[MT]00)(?:[);/ ]|$)",
			model: "R17"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1893)(?:[);/ ]|$)",
			model: "R17 Neo"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1877|PBD[MT]00)(?:[);/ ]|$)",
			model: "R17 Pro"
		},
		{
			regex: "(?:OPPO[ _]?)?R8006(?:[);/ ]|$)",
			model: "R1L"
		},
		{
			regex: "(?:OPPO[ _]?)?R800[07](?:[);/ ]|$)",
			model: "R1S"
		},
		{
			regex: "(?:OPPO[ _]?)?R810[679](?:[);/ ]|$)",
			model: "R5"
		},
		{
			regex: "(?:OPPO[ _]?)?R7kf(?:[);/ ]|$)",
			model: "R7 Lite"
		},
		{
			regex: "(?:OPPO[ _]?)?R7Plusm(?:[);/ ]|$)",
			model: "R7 Plus"
		},
		{
			regex: "(?:OPPO[ _]?)?R7Plusf(?:[);/ ]|$)",
			model: "R7 Plus F"
		},
		{
			regex: "(?:OPPO[ _]?)?X9079(?:[);/ ]|$)",
			model: "R9 Plus"
		},
		{
			regex: "(?:OPPO[ _]?)?CPH1607(?:[);/ ]|$)",
			model: "R9s"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1611|R9s Plus)(?:[);/ ]|$)",
			model: "R9s Plus"
		},
		{
			regex: "(?:CPH1917|PCA[MT]00)(?:[);/ ]|$)",
			model: "Reno"
		},
		{
			regex: "CPH1983(?:[);/ ]|$)",
			model: "Reno A"
		},
		{
			regex: "PCCM00(?:[);/ ]|$)",
			model: "Reno 10X"
		},
		{
			regex: "CPH1919(?:[);/ ]|$)",
			model: "Reno 10X Zoom"
		},
		{
			regex: "(?:PCKM00|CPH1907)(?:[);/ ]|$)",
			model: "Reno 2"
		},
		{
			regex: "CPH1989(?:[);/ ]|$)",
			model: "Reno 2F"
		},
		{
			regex: "(?:PCKM80|CPH1945|CPH1951)(?:[);/ ]|$)",
			model: "Reno 2Z"
		},
		{
			regex: "CPH2043(?:[);/ ]|$)",
			model: "Reno 3"
		},
		{
			regex: "(?:CPH2013|A002OP)(?:[);/ ]|$)",
			model: "Reno 3A"
		},
		{
			regex: "(?:PDCM00|A001OP)(?:[);/ ]|$)",
			model: "Reno 3 5G"
		},
		{
			regex: "(?:PCRM00|CPH203[57]|CPH2009)",
			model: "Reno 3 Pro"
		},
		{
			regex: "CPH2113(?:[);/ ]|$)",
			model: "Reno 4 4G"
		},
		{
			regex: "CPH2125(?:[);/ ]|$)",
			model: "Reno 4 Lite"
		},
		{
			regex: "CPH2109(?:[);/ ]|$)",
			model: "Reno 4 Pro 4G"
		},
		{
			regex: "PDP[TM]00(?:[);/ ]|$)",
			model: "Reno 4 5G"
		},
		{
			regex: "PEA[TM]00(?:[);/ ]|$)",
			model: "Reno 4 SE 5G "
		},
		{
			regex: "PDN[TM]00(?:[);/ ]|$)",
			model: "Reno 4 Pro 5G"
		},
		{
			regex: "PDSM00(?:[);/ ]|$)",
			model: "Reno 5 Pro 5G"
		},
		{
			regex: "CPH192[15]",
			model: "Reno 5G"
		},
		{
			regex: "PCLM10(?:[);/ ]|$)",
			model: "Reno Ace"
		},
		{
			regex: "PDHM00(?:[);/ ]|$)",
			model: "Reno Ace 2"
		},
		{
			regex: "PCGM00(?:[);/ ]|$)",
			model: "Reno K3"
		},
		{
			regex: "(?:OPPO[ _]?)?(?:CPH1979|PCD[TM]10)(?:[);/ ]|$)",
			model: "Reno Z"
		},
		{
			regex: "N1T?(?:[);/ ]|$)",
			model: "N1T",
			device: "phablet"
		},
		{
			regex: "R([0-9]{3,4}[KSTW]?)(?:[);/ ]|$)",
			model: "R$1"
		},
		{
			regex: "(CPH[0-9]{4})",
			model: "$1"
		},
		{
			regex: "(?:OB-)?OPPO[ _]?((?!Browser)[a-z0-9]+)",
			model: "$1"
		}
	]
};
var Opsson = {
	regex: "Opsson|IUSAI",
	device: "smartphone",
	models: [
		{
			regex: "IUSAI[ _]([^/;]+) Build",
			model: "Iusai $1"
		},
		{
			regex: "IUSAI[ _]([^/;\\)]+)[/;\\)]",
			model: "Iusai $1"
		},
		{
			regex: "Opsson[ _]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "(?:Opsson-)?Opsson[ -_]([^/;]+)/",
			model: "$1"
		}
	]
};
var Orange = {
	regex: "SPV[ \\-]?([a-z0-9]+)|(?<!FBCR/)Orange[ _-](?!Tahiti-LS\\))([^/;]+)( Build|\\))(?<!Tahiti-LS\\))|SC/IHD92|Nura 2|FunTab ([^/;]+) Build|Orange Mahpee",
	device: "smartphone",
	models: [
		{
			regex: "SC/IHD92",
			model: "Livebox Play",
			device: "tv"
		},
		{
			regex: "Nura 2",
			model: "Nura 2"
		},
		{
			regex: "Sego",
			model: "Sego",
			device: "tablet"
		},
		{
			regex: "FunTab ([^/;]+) Build",
			model: "FunTab $1",
			device: "tablet"
		},
		{
			regex: "Orange[ _-](Rise)(3[12]|5[12])(?:[);/ ]|$)",
			model: "$1 $2"
		},
		{
			regex: "Orange[ _-](Dive)72(?:[);/ ]|$)",
			model: "$1 72"
		},
		{
			regex: "Orange[ _-](Daytona|Dive (30|7[13])|Dublin|Fova|Gova|Hi 4G|Hiro|Kivo|Monte Carlo|Neva 80|Neva play|Nura|Reyo|Rise[_ ](3[034]|40|5[345])|Rono|Roya|San Francisco|Tactile internet 2|Tado|Yomi|Yumo|Zali|Mahpee)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "SPV[ \\-]?([a-z0-9]+)",
			model: "SPV $1"
		}
	]
};
var Oukitel = {
	regex: "OUKITEL|(?:(?:C15|C16|K10000|K[46]000)(?:[ _]Pro)|K4000Pro|U16 Max|U7 Max|U7 Plus|U11[_ ]Plus|U20_Plus|OK6000 Plus|WP5000|WP[58] Pro|K[46]000[ _](?:Plus|Lite)|Y4800|K10000|K[4-8]000| WP[5-7])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(C15|C16|K10000|K[46]000|WP[258]|U15)[ _]?Pro(?:[);/ ]|$)",
			model: "$1 Pro"
		},
		{
			regex: "OUKITEL K([37])(?:[);/ ]|$)",
			model: "K$1"
		},
		{
			regex: "(K10000|U16|U7)[ _]Max(?:[);/ ]|$)",
			model: "$1 Max"
		},
		{
			regex: "(U20|K[46]000|U7|U11|OK6000)[_ ]?Plus(?:[);/ ]|$)",
			model: "$1 Plus"
		},
		{
			regex: "(K4000)[_ ]Lite(?:[);/ ]|$)",
			model: "$1 Lite"
		},
		{
			regex: "(Y4800|K10000|K[4-8]000|WP2|WP5000|[CU]2|U10)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: " (WP[5-7])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "OUKITEL; ([^;]+);",
			model: "$1"
		}
	]
};
var OKWU = {
	regex: "OKWU SIGMA(?:[);/ ]|$)",
	device: "smartphone",
	model: "Sigma"
};
var Ouki = {
	regex: "OUKI|OK[AU][0-9]+[a-z]* Build",
	device: "smartphone",
	models: [
		{
			regex: "OUKI[ _-]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "([^;/)]+) Build/OUKI",
			model: "$1"
		},
		{
			regex: "OUKI[ _-]?([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		},
		{
			regex: "(OK[AU][0-9]+[a-z]*) Build",
			model: "$1"
		}
	]
};
var Overmax = {
	regex: "OV-[a-z]+(?:[^;(/]*)[();/ ]|Qualcore 10(?:10|27)|Vertis 5021 Aim|OV1027[34]G",
	device: "tablet",
	models: [
		{
			regex: "OV-V10",
			model: "Vertis Yard",
			device: "smartphone"
		},
		{
			regex: "Vertis 5021 Aim",
			model: "Vertis 5021 Aim",
			device: "smartphone"
		},
		{
			regex: "OV-Vertis[ _-]([^;/]+) Build",
			model: "Vertis $1",
			device: "smartphone"
		},
		{
			regex: "Qualcore 1010",
			model: "Qualcore 1010",
			device: "tablet"
		},
		{
			regex: "Qualcore 1027 4G",
			model: "Qualcore 1027 4G",
			device: "tablet"
		},
		{
			regex: "OV1027([34])G",
			model: "Qualcore 1027 $1G",
			device: "tablet"
		},
		{
			regex: "(OV-[a-z]+(?:[^;(/]*))(?<!Build)[();/ ]",
			model: "$1"
		}
	]
};
var Oysters = {
	regex: "Oysters|T84ERI[ _]3G|T72HM(s_)?3G|T102MS_3G|T102ER3G|(T74HMi|T84Bi)[_ ]4G|T74MR4G|T84Ni[_ ][34]G|Pacific[ ]?800i|T104B_[34]G|IndianV|T72HA_3G|T74D_3G|T74N_3G|T74SC_3G|T74Mai_3G|T104MBi_3G|T104SCi_3G|T104ER4G|Atlantic4G|AntarcticE|T7V 3G",
	device: "tablet",
	models: [
		{
			regex: "Pacific[ ]?800i",
			device: "smartphone",
			model: "Pacific 800i"
		},
		{
			regex: "Atlantic4G",
			device: "smartphone",
			model: "Atlantic 4G"
		},
		{
			regex: "AntarcticE",
			device: "smartphone",
			model: "Antarctic E"
		},
		{
			regex: "IndianV",
			device: "smartphone",
			model: "Indian V"
		},
		{
			regex: "Oysters[_ ]PacificV",
			device: "smartphone",
			model: "Pacific V"
		},
		{
			regex: "Oysters ((?:Arctic|Indian|Atlantic|Pacific)[^/;]+) Build",
			device: "smartphone",
			model: "$1"
		},
		{
			regex: "(T84ERI[ _]3G|T72HM(s_)?3G|(?:(T74HMi|T84Bi)[_ ]4G)|T84Ni[_ ][34]G)",
			model: "$1"
		},
		{
			regex: "(T74MR|T102MS|T104B|T74SC|T74[DN]|T72HA|T102ER|T104SCi|T104MBi|T104ER|T7V)[ _]?([34]G)",
			model: "$1 $2"
		},
		{
			regex: "T74Mai_3G",
			model: "T74MAi 3G"
		},
		{
			regex: "Oysters ([^/;]+)( Build|\\))",
			model: "$1"
		}
	]
};
var Panacom = {
	regex: "T-i708D",
	device: "smartphone",
	models: [
		{
			regex: "T-i708D",
			device: "tablet",
			model: "T-i708D"
		}
	]
};
var Panasonic$2 = {
	regex: "Panasonic|PANATV[0-9]+|Viera/|(?:P902i|P-0[28]D|FZ-B2D|FZ-[NX]1|DMC-CM1|P-01J|P-03E)(?:[);/ ]|$)|Eluga[ _]|P55 Novo 4G",
	device: "smartphone",
	models: [
		{
			regex: "P-01J(?:[);/ ]|$)",
			model: "P-smart Keitai"
		},
		{
			regex: "P-03E(?:[);/ ]|$)",
			model: "Eluga P"
		},
		{
			regex: "Eluga[ _-]([^;/]+) Build",
			model: "Eluga $1"
		},
		{
			regex: "Eluga[ _-]([^);/]+)[;/)]",
			model: "Eluga $1"
		},
		{
			regex: "(DMC-CM1)",
			model: "Lumix $1",
			device: "camera"
		},
		{
			regex: "P-02D(?:[);/ ]|$)",
			model: "Lumix Phone P-02D"
		},
		{
			regex: "(FZ-[XN]1)(?:[);/ ]|$)",
			model: "Toughpad $1"
		},
		{
			regex: "FZ-B2D(?:[);/ ]|$)",
			model: "Toughpad FZ-B2D",
			device: "tablet"
		},
		{
			regex: "P55 Novo 4G",
			model: "P55 Novo 4G"
		},
		{
			regex: "P902i(?:[);/ ]|$)",
			device: "feature phone",
			model: "P902i"
		},
		{
			regex: "Panasonic MIL DLNA",
			device: "tv",
			model: "Viera Cast"
		},
		{
			regex: "PANATV[0-9]+|Viera/",
			device: "tv",
			model: "Smart TV"
		},
		{
			regex: "(43D1200|(?:32|43)D1270|32D1280)",
			device: "tv",
			model: "$1"
		},
		{
			regex: "Panasonic[ _\\-]?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/2.0 (P[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "P-08D(?:[);/ ]|$)",
			model: "Eluga Live 10.1\"",
			device: "tablet"
		}
	]
};
var PCBOX = {
	regex: "Art-PCB-V116|Bee-PCB-V216|Clap-PCB-I316|PCB-T(103|715)",
	device: "smartphone",
	models: [
		{
			regex: "Art-PCB-V116",
			model: "Art"
		},
		{
			regex: "Bee-PCB-V216",
			model: "Bee"
		},
		{
			regex: "Clap-PCB-I316",
			model: "Clap"
		},
		{
			regex: "PCB-T103",
			device: "tablet",
			model: "Curi Lite"
		},
		{
			regex: "PCB-T715",
			device: "tablet",
			model: "T715"
		}
	]
};
var PCD = {
	regex: "PH4001",
	device: "smartphone",
	models: [
		{
			regex: "PH4001",
			model: "PH4001"
		}
	]
};
var ArmPhone = {
	regex: "(TSD Octa A0520P|TSD Quadra A050[59]P)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Pentagram = {
	regex: "Pentagram|Quadra|Monster X5",
	device: "tablet",
	models: [
		{
			regex: "(?:PENTAGRAM[_ ])?EON[_ ]PRIX",
			model: "Eon Prix"
		},
		{
			regex: "Quadra 7(?: UltraSlim)?",
			model: "Quadra 7 UltraSlim"
		},
		{
			regex: "Monster X5?",
			model: "Monster X5",
			device: "smartphone"
		},
		{
			regex: "Quadra ?([^);/]*) Build",
			model: "Quadra $1"
		},
		{
			regex: "Pentagram ?TAB ?([^);/]*) Build",
			model: "Tab $1"
		},
		{
			regex: "Pentagram ?([^);/]*) Build",
			model: "$1",
			device: "smartphone"
		}
	]
};
var TCL$1 = {
	regex: "TCL,|TCL[_ -][a-z0-9]+|(?:TCL[_ -][^;/]+ Build)|(?:TCLGalaG60(?:\\(9108A\\))?|A502DL|T78[02]H|5199I|7040N|5133A|5159[AJ]|5152D|T770H|T671H|T790Y|T766H_EEA|T766A|T799[BH]|Percee TV)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "TCLGalaG60(?:\\(9108A\\))?(?:[);/ ]|$)",
			model: "Gala G60"
		},
		{
			regex: "5199I(?:[);/ ]|$)",
			model: "C9"
		},
		{
			regex: "5152D(?:[);/ ]|$)",
			model: "C5"
		},
		{
			regex: "5133A(?:[);/ ]|$)",
			model: "L5"
		},
		{
			regex: "T780H(?:[);/ ]|$)",
			model: "Plex"
		},
		{
			regex: "T782H(?:[);/ ]|$)",
			model: "10 Plus"
		},
		{
			regex: "T790Y(?:[);/ ]|$)",
			model: "10 5G"
		},
		{
			regex: "TCL[_ -]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "TCL[_ -]([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(7040N)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "A502DL(?:[);/ ]|$)",
			model: "LX"
		},
		{
			regex: "5159[AJ](?:[);/ ]|$)",
			model: "L9"
		},
		{
			regex: "T770H(?:[);/ ]|$)",
			model: "10L"
		},
		{
			regex: "T766[HA](?:_EEA)?(?:[);/ ]|$)",
			model: "10 SE"
		},
		{
			regex: "T671H(?:_EEA)?(?:[);/ ]|$)",
			model: "20 SE"
		},
		{
			regex: "T799[BH](?:[);/ ]|$)",
			model: "10 Pro"
		},
		{
			regex: "(Percee TV)(?:[);/ ]|$)",
			device: "tv",
			model: "$1"
		},
		{
			regex: "((?:43|55)S62FS|(?:43|50)P65US|U(?:43|60)P60|65P4USM|(?:40|49)S62|L32S6|55P610|50P8S|55S62|(?:43|50)P6US|55DP60)",
			device: "tv",
			model: "$1"
		}
	]
};
var JVC$1 = {
	regex: "JVC[;,]|JVC Shell",
	device: "tv",
	models: [
		{
			regex: "JVC Shell [0-9A-Z]+",
			model: ""
		},
		{
			regex: "JVC[;,](32D1290)",
			model: "$1"
		}
	]
};
var phoneOne = {
	regex: "phoneOne[ \\-]?([a-z0-9]+)",
	device: "smartphone",
	model: "$1"
};
var Primepad = {
	regex: "PD\\-(3127NC|3127) Build",
	device: "tablet",
	models: [
		{
			regex: "PD\\-3127NC Build",
			model: "PD-3127NC"
		},
		{
			regex: "PD\\-3127 Build",
			model: "PD-3127"
		}
	]
};
var Pioneer = {
	regex: "Pioneer|.*; R1 Build|dvr700pi|XDP-300R",
	device: "smartphone",
	models: [
		{
			regex: ".*; R1 Build",
			model: "R1",
			device: "tablet"
		},
		{
			regex: "Pioneer[ _-]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Pioneer[ _-]?([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		},
		{
			regex: "dvr700pi",
			model: "DVR700PI 7.0\"",
			device: "tablet"
		},
		{
			regex: "(XDP-300R)",
			device: "portable media player",
			model: "$1"
		}
	]
};
var Pixus = {
	regex: "Pixus|(hiPower|Ride[_ ][34]G|Play[ _]Three[ _]v(?:[24].0|3.1))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "Ride[_ ]([34])G",
			model: "Ride $1G"
		},
		{
			regex: "Play[ _]Three[ _]v([24].0|3.1)",
			model: "Play Three v$1"
		},
		{
			regex: "Play Two",
			model: "Play Two"
		},
		{
			regex: "Play Five",
			model: "Play Five"
		},
		{
			regex: "hiPower",
			model: "hiPower"
		},
		{
			regex: "Pixus[ _]Sprint",
			model: "Sprint"
		},
		{
			regex: "Touch 7 3G",
			model: "Touch 7 3G"
		},
		{
			regex: "Pixus[ _]hiMax",
			model: "HiMax 9.6\""
		},
		{
			regex: "Pixus[ _]Blast",
			model: "Blast 10.1\""
		},
		{
			regex: "Pixus[ _]Joker",
			model: "Joker 10.1\""
		},
		{
			regex: "Pixus Blaze 10.1 3G",
			model: "Blaze 10.1\" 3G"
		},
		{
			regex: "Raze",
			model: "Raze",
			device: "smartphone"
		},
		{
			regex: "Pixus_Jet",
			model: "Jet",
			device: "smartphone"
		},
		{
			regex: "pixus hit 2",
			model: "Hit 2",
			device: "smartphone"
		}
	]
};
var PULID = {
	regex: "PULID[ _]|F1[01357]\\+? Build",
	device: "smartphone",
	models: [
		{
			regex: "F(1[01357]\\+?) Build",
			model: "F$1"
		},
		{
			regex: "PULID[ _]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "PULID[ _]([a-z0-9_]+)\\)",
			model: "$1"
		}
	]
};
var Pomp = {
	regex: "POMP[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "POMP[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "POMP[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var PPTV = {
	regex: "(KING 7S?)",
	device: "smartphone",
	model: "$1"
};
var ProScan = {
	regex: "PLT([^;/]+) Build|PLT(?:777[45]|9774|1074)G(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "PLT([^;/]+) Build",
			model: "PLT$1"
		},
		{
			regex: "PLT(777[45]|9774|1074)G",
			model: "PLT$1G"
		}
	]
};
var Readboy = {
	regex: "Readboy[ _-]",
	device: "tablet",
	models: [
		{
			regex: "Readboy[ _-]([^;/)]+)(?: Build|[;)])",
			model: "$1"
		}
	]
};
var Roku = {
	regex: "Roku/DVP",
	device: "tv",
	model: "Digital Video Player"
};
var Rokit = {
	regex: "IO Pro",
	device: "smartphone",
	models: [
		{
			regex: "IO Pro",
			model: "IO Pro"
		}
	]
};
var Rombica = {
	regex: "(Rombica|SSQ-A0500|Smart Box v[0-9]+)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "SSQ-A0500(?:[);/ ]|$)",
			model: "Smart Stick 4K"
		},
		{
			regex: "(Infinity K8|Smart Box (?:v00[345789]|Quad|Ultra HD v002|4K V001))(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Rover = {
	regex: "Rover ([0-9]+)",
	device: "feature phone",
	model: "$1"
};
var RoverPad = {
	regex: "(?:Rover[ ]?Pad|RoverPhone|Sky 7.85 3G)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "RoverPhone(?:[);/ ]|$)",
			model: "",
			device: "smartphone"
		},
		{
			regex: "(?:Rover[ ]?Pad)?sky 7.85(?: 3G)?(?:[);/ ]|$)",
			model: "Sky 7.85\" 3G"
		},
		{
			regex: "RoverPad (10.4|Air S70|9.7 3G|Sky 9.7|3W A73|3W7|3WT70|3W9.4)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Roadrover = {
	regex: "Roadrover ChangAn S",
	device: "tablet",
	model: "ChangAn S"
};
var Safaricom = {
	regex: "NEON_RAY",
	device: "smartphone",
	models: [
		{
			regex: "NEON_RAY",
			model: "Neon Ray"
		}
	]
};
var Santin = {
	regex: "(?:SANTIN|BiTBiZ_V58|ACTOMA ACE|DREAMPLUS03A|Candy U7 Pro)[);/_ ]",
	device: "smartphone",
	models: [
		{
			regex: "BiTBiZ_V58(?:[);/ ]|$)",
			model: "BiTBiZ V58"
		},
		{
			regex: "Candy U7 Pro(?:[);/ ]|$)",
			model: "Candy U7 Pro"
		},
		{
			regex: "DREAMPLUS03A(?:[);/ ]|$)",
			model: "Dream Plus 03A"
		},
		{
			regex: "GreenOrange(?:[);/ ]|$)",
			model: "Green Orange"
		},
		{
			regex: "halove(?:[);/ ]|$)",
			model: "Halove"
		},
		{
			regex: "ACTOMA ACE(?:[);/ ]|$)",
			model: "Actoma Ace"
		},
		{
			regex: "monica(?:[);/ ]|$)",
			model: "Monica"
		},
		{
			regex: "POWER(?:[);/ ]|$)",
			model: "Power"
		},
		{
			regex: "GALAZ(?:[);/ ]|$)",
			model: "Galaz"
		},
		{
			regex: "NEWDUN(?:[);/ ]|$)",
			model: "Newdun"
		},
		{
			regex: "SANTIN[ _][#]?(Dante|Candy U7|Armor|YSL-Y7|ANT.W|N[13]|JS|S6|V9|Life Shine)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Siemens = {
	regex: "SIEMENS|SIE-|portalmmm/2\\.0 SI|(?:S55|SL45i)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:SIE-)?(S[56]5|S40|C45|ME45|SLIK)(?:[);/ ]|$)",
			device: "feature phone",
			model: "$1"
		},
		{
			regex: "SIEMENS[ \\-]([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "SIE(?:MENS )?[\\-]?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(?:SIE-)?(SL45i)",
			model: "$1"
		},
		{
			regex: "portalmmm/2.0 (SI[a-z0-9]+)",
			model: "$1"
		}
	]
};
var Soundmax = {
	regex: "((?:SM-LED32M(?:11|04)S)(?:_-Ver01)?|SM-LED40M04S)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Samsung$3 = {
	regex: "SAMSUNG(?! ?Browser)|Maple (?!III)|SC-(?:01[FGHKLM]|02[CGHJKLM]|03[JKL]|04[EJL]|05[GL]|(?:4[12]|5[1234])A)|N[57]100|N5110|N9100|S(?:CH|GH|PH|EC|AM|HV|HW|M)-|SMART-TV|GT-|(?<!GOG|GOG )Galaxy|(?:portalmmm|o2imode)/2\\.0 [SZ]|sam[rua]|vollo Vi86(?:[);/ ]|$)|(?:OTV-)?SMT-E5015|ISW11SC|SCV4[0-9]|SCV3[1-9]|40[34]SC|SCL2[234]|SCG0[1-7]|SCT21",
	device: "smartphone",
	models: [
		{
			regex: "GT-B9150",
			device: "tv",
			model: "Home Sync"
		},
		{
			regex: "(?:OTV-)?SMT-E5015",
			device: "tv",
			model: "SMT-E5015"
		},
		{
			regex: "Maple ",
			device: "tv",
			model: ""
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-)?N5100",
			device: "tablet",
			model: "Galaxy Note 8.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T677(?:[ATV]|N[KL])?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy View 18.4\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T670(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy View 18.4\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-)?N5110",
			device: "tablet",
			model: "Galaxy Note 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?GT-N5120",
			device: "tablet",
			model: "Galaxy Note 8.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT|SM)-N8000",
			device: "tablet",
			model: "Galaxy Note 10.1\""
		},
		{
			regex: "(?:SAMSUNG-)?GT-N8010",
			device: "tablet",
			model: "Galaxy Note 10.1\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?GT-N8020",
			device: "tablet",
			model: "Galaxy Note 10.1\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P1000M?|SCH-I800",
			device: "tablet",
			model: "Galaxy Tab"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P3100B?",
			device: "tablet",
			model: "Galaxy Tab 2 7\""
		},
		{
			regex: "(?:SAMSUNG-)?GT-P311[03]",
			device: "tablet",
			model: "Galaxy Tab 2 7\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P5100|SCH-I915",
			device: "tablet",
			model: "Galaxy Tab 2 10.1\""
		},
		{
			regex: "(?:SAMSUNG-)?GT-P511[03]",
			device: "tablet",
			model: "Galaxy Tab 2 10.1\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T217T",
			device: "tablet",
			model: "Galaxy Tab 3 7.0\" 4G"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P5200",
			device: "tablet",
			model: "Galaxy Tab 3 10.1\""
		},
		{
			regex: "(?:SAMSUNG-)?GT-P5210",
			device: "tablet",
			model: "Galaxy Tab 3 10.1\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P5220",
			device: "tablet",
			model: "Galaxy Tab 3 10.1\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P6200",
			device: "tablet",
			model: "Galaxy Tab 7\" Plus"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P6201",
			device: "tablet",
			model: "Galaxy Tab 7\" Plus N"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P6810",
			device: "tablet",
			model: "Galaxy Tab 7.7\""
		},
		{
			regex: "(?:SAMSUNG-)?GT-P7100",
			device: "tablet",
			model: "Galaxy Tab 10.1v"
		},
		{
			regex: "(?:SAMSUNG-)?GT-P75[01]0",
			device: "tablet",
			model: "Galaxy Tab 10.1\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-P600",
			device: "tablet",
			model: "Galaxy Note 10.1\" 2014 Edition WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-P60[12]",
			device: "tablet",
			model: "Galaxy Note 10.1\" 2014 Edition"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:P605|P607T)",
			device: "tablet",
			model: "Galaxy Note 10.1\" 2014 Edition LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-P900",
			device: "tablet",
			model: "Galaxy NotePRO 12.2\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-P901",
			device: "tablet",
			model: "Galaxy NotePRO 12.2\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-P905",
			device: "tablet",
			model: "Galaxy NotePRO 12.2\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:P587|P588C)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab A 10.1\" with S Pen (2016) LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-P583(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab A 10.1\" with S Pen (2016) WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-P205(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab A 8.0\" with S Pen (2019) LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-P200(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab A 8.0\" with S Pen (2019) WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T307U(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab A 8.4\" (2020) LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T505[CN]?|T507)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab A7 10.4\" (2020) LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T500(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab A7 10.4\" (2020) WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T11[03]",
			device: "tablet",
			model: "Galaxy Tab 3 Lite 7.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T830[X]?|T837R4)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S4 10.5\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T837P(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S4 10.5\" with S Pen"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T835[CN]?|T837[VTA]?)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S4 10.5\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T725[CN]?|T720X|T727(?:R4|[AUV])?)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S5e 10.5\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T720(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S5e 10.5\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T865N?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S6 10.5\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T867(?:R4|[VU])?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S6 10.5\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:P615[CN]?|P617)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S6 Lite 10.4\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-P610X?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S6 Lite 10.4\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T860(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S6 10.5\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T866N(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S6 10.5\" 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T111[M]?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab 3 Lite 7.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T116(?:BU|NU|NY)?",
			device: "tablet",
			model: "Galaxy Tab 3 V"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T2105|T212)",
			device: "tablet",
			model: "Galaxy Tab 3 7.0\" Kids"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T210R?",
			device: "tablet",
			model: "Galaxy Tab 3 7.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T21(?:[15]|7[AS])",
			device: "tablet",
			model: "Galaxy Tab 3 7.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T230(?:NU)?",
			device: "tablet",
			model: "Galaxy Tab 4 7.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T23[15]|403SC",
			device: "tablet",
			model: "Galaxy Tab 4 7.0\" 3G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T239|T237[PV])",
			device: "tablet",
			model: "Galaxy Tab 4 7.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T232(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab 4 7.0\" WiFi + 3G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T310",
			device: "tablet",
			model: "Galaxy Tab 3 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T311",
			device: "tablet",
			model: "Galaxy Tab 3 8.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T315",
			device: "tablet",
			model: "Galaxy Tab 3 8.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T330",
			device: "tablet",
			model: "Galaxy Tab 4 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T33[215]|T337[AVT])",
			device: "tablet",
			model: "Galaxy Tab 4 8.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T520",
			device: "tablet",
			model: "Galaxy TabPRO 10.1\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T53[15]|T537[AV])",
			device: "tablet",
			model: "Galaxy Tab 4 10.1\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T536(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab 4 10.1\" Advanced"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T532(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab 4 10.1\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T320",
			device: "tablet",
			model: "Galaxy TabPRO 8.4\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T325",
			device: "tablet",
			model: "Galaxy TabPRO 8.4\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T525",
			device: "tablet",
			model: "Galaxy TabPRO 10.1\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T530(?:NU)?|T533)",
			device: "tablet",
			model: "Galaxy Tab 4 10.1\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T700",
			device: "tablet",
			model: "Galaxy Tab S 8.4\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T705|T707[AV])",
			device: "tablet",
			model: "Galaxy Tab S 8.4\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T800",
			device: "tablet",
			model: "Galaxy Tab S 10.5\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-(?:T805|T807[PV]?)|SCT21)",
			device: "tablet",
			model: "Galaxy Tab S 10.5\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T813|T810)",
			device: "tablet",
			model: "Galaxy Tab S2 9.7\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T719[CY]?|T715(?:N0|[CY])?)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S2 8.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T71[03]|T710X)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S2 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T815|T817[ATW]?|T818[ATVW]?|T819[Y]?)",
			device: "tablet",
			model: "Galaxy Tab S2 9.7\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T820",
			device: "tablet",
			model: "Galaxy Tab S3 9.7\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T82[57]",
			device: "tablet",
			model: "Galaxy Tab S3 9.7\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T975N?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S7+ 12.4\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T970(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S7+ 12.4\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T976[BN]|T978U)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S7+ 12.4\" 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T870(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S7 11.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T875N?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S7 11.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T878U(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab S7 11.0\" 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T900",
			device: "tablet",
			model: "Galaxy TabPRO 12.2\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T280",
			device: "tablet",
			model: "Galaxy Tab A 7.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T285",
			device: "tablet",
			model: "Galaxy Tab A 7.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T3[58]0",
			device: "tablet",
			model: "Galaxy Tab A 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:P350|T3[58]5|T357[TW])",
			device: "tablet",
			model: "Galaxy Tab A 8.0\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T387(?:AA|R4|VK|[TVW])",
			device: "tablet",
			model: "Galaxy Tab A 8.0\" LTE (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T295",
			device: "tablet",
			model: "Galaxy Tab A 8.0\" LTE (2019)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T290",
			device: "tablet",
			model: "Galaxy Tab A 8.0\" WiFi (2019)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:P355([MY])?|T550)",
			device: "tablet",
			model: "Galaxy Tab A 9.7\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:P550|P555(M)?|T555)",
			device: "tablet",
			model: "Galaxy Tab A 9.7\" LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T58[05]|P58[05])",
			device: "tablet",
			model: "Galaxy Tab A 10.1\" WiFi (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T587[P]?",
			device: "tablet",
			model: "Galaxy Tab A 10.1\" LTE (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T59[057]",
			device: "tablet",
			model: "Galaxy Tab A 10.5\" LTE (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T51(?:7P|[057])",
			device: "tablet",
			model: "Galaxy Tab A 10.1\" (2019)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T37[57]|T378[KLSV])",
			device: "tablet",
			model: "Galaxy Tab E 8.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T56[02]",
			device: "tablet",
			model: "Galaxy Tab E 9.6\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T561",
			device: "tablet",
			model: "Galaxy Tab E 9.6\" 3G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T567V",
			device: "tablet",
			model: "Galaxy Tab E 9.6\" 4G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-T365(?:F0|[MY])?(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active 8.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T360(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T395[CN]?|T397U)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active 2 8.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T390(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active 2 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T575N?|T577U?)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active 3 8.0\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T570(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active 3 8.0\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:T545|T547U?)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active Pro 10.1\""
		},
		{
			regex: "(?:SAMSUNG-)?SM-T540(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Tab Active Pro 10.1\" WiFi"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:P902|P907A)(?:[);/ ]|$)",
			device: "tablet",
			model: "Galaxy Note Pro 12.2\""
		},
		{
			regex: "(?:SAMSUNG[- ])?SM-T2519",
			model: "Galaxy Tab Q",
			device: "tablet"
		},
		{
			regex: "(?:SAMSUNG )?SM-R820",
			device: "wearable",
			model: "Galaxy Watch Active 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G850(?:8S|[AFKLMSWXY])",
			model: "Galaxy Alpha"
		},
		{
			regex: "(?:SAMSUNG-)?GT-B5330",
			model: "Galaxy Chat"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A605K",
			model: "Galaxy Jean"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A202K",
			model: "Galaxy Jean 2"
		},
		{
			regex: "(?:SAMSUNG-)?GT-B5510",
			model: "Galaxy Y Pro"
		},
		{
			regex: "(?:SAMSUNG-)?GT-B5512",
			model: "Galaxy Y Pro Duos"
		},
		{
			regex: "(?:SAMSUNG-)?GT-B7510",
			model: "Galaxy Pro"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I5700",
			model: "Galaxy Spica"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I5801",
			model: "Galaxy Apollo"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I5800",
			model: "Galaxy 3"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I8000",
			model: "Omnia II"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-I8150|SM-T255S)",
			model: "Galaxy W"
		},
		{
			regex: "SC-01H(?:[);/ ]|$)",
			model: "Galaxy Active Neo"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5830",
			model: "Galaxy Ace"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G357(?:FZ|M)|G310HN)",
			model: "Galaxy Ace Style"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I8160",
			model: "Galaxy Ace 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G313(?:HY|M[LUY]|[FM])",
			model: "Galaxy Ace 4"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G316M",
			model: "Galaxy Ace 4 Duos"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G313[HU]",
			model: "Galaxy Ace 4 Lite"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G316U|G318(?:H|ML))(?:[);/ ]|$)",
			model: "Galaxy Ace 4 Neo"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G9100(?:[);/ ]|$)",
			model: "Galaxy S II"
		},
		{
			regex: "(?:SAMSUNG-)?SHV-E120S(?:[);/ ]|$)",
			model: "Galaxy S II HD LTE"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I8190",
			model: "Galaxy S III mini"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I8200",
			model: "Galaxy S III mini Value Edition"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I826[02]",
			model: "Galaxy Core"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G386W",
			model: "Galaxy Core LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G3589W",
			model: "Galaxy Core Lite LTE"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I8320",
			model: "H1"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I85[23]0",
			model: "Galaxy Beam"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G3858",
			model: "Galaxy Beam 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G600S",
			model: "Galaxy Wide"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I855[028]",
			model: "Galaxy Win"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G381[28]",
			model: "Galaxy Win Pro"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I8580",
			model: "Galaxy Core Advance"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I8730",
			model: "Galaxy Express"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:E500(?:HQ|YZ|[0FHM])|S978L)",
			model: "Galaxy E5"
		},
		{
			regex: "(?:SAMSUNG-)?SM-E700[09FHM]",
			model: "Galaxy E7"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I90(?:00|08|18|88)",
			model: "Galaxy S"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9001",
			model: "Galaxy S Plus"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9003",
			model: "Galaxy SL"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9010",
			model: "Galaxy S Giorgio Armani"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9070",
			model: "Galaxy S Advance"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I910[08]",
			model: "Galaxy S II"
		},
		{
			regex: "(?:SAMSUNG-)?ISW11SC",
			model: "Galaxy S II WiMAX"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9103",
			model: "Galaxy R"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9105",
			model: "Galaxy S II Plus"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G730(?:W8|[AV])",
			model: "Galaxy S3 mini"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-I919[025]|SCH-I435)",
			model: "Galaxy S4 mini"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9515",
			model: "Galaxy S4 Value Edition"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9295",
			model: "Galaxy S4 ACTIVE"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-I9300|SCH-(?:I535|I939|L710))",
			model: "Galaxy S III"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-I9305|SCH-R530)",
			model: "Galaxy S III LTE"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-S975L|GT-I950[025]|SC-04E|SCH-(?:I545|I959|R970)|SGH-M919N?|Galaxy-S4)",
			model: "Galaxy S4"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9506",
			model: "Galaxy S4 with LTE+"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5280",
			model: "Galaxy STAR"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5301",
			model: "Galaxy POCKET Plus"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5310",
			model: "Galaxy POCKET Neo"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G110[BHM]",
			model: "Galaxy POCKET 2"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5360",
			model: "Galaxy Y Hello Kitty"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S6310",
			model: "Galaxy Young"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S6312",
			model: "Galaxy Young DUOS"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G130(?:BT|HN|[EHMU])",
			model: "Galaxy Young 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G130BU",
			model: "Galaxy Young 2 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S6790",
			model: "Galaxy FAME Lite with NFC"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S6810",
			model: "Galaxy FAME"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S6812",
			model: "Galaxy FAME Duos"
		},
		{
			regex: "SC-04J(?:[);/ ]|$)",
			model: "Galaxy Feel"
		},
		{
			regex: "SC-02L(?:[);/ ]|$)",
			model: "Galaxy Feel 2"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7275",
			model: "Galaxy ACE 3"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7500",
			model: "Galaxy ACE Plus"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-S7560|SCH-I699)",
			model: "Galaxy Trend"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7390",
			model: "Galaxy Trend Lite"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7580",
			model: "Galaxy Trend Plus"
		},
		{
			regex: "(?:SAMSUNG-)?SCH-I739",
			model: "Galaxy Trend 2"
		},
		{
			regex: "(?:SAMSUNG-)?(?:GT-S7562|SCH-I919)",
			model: "Galaxy S DUOS"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7582",
			model: "Galaxy S DUOS 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G31[36]HU|G313HZ)",
			model: "Galaxy S DUOS 3"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7710",
			model: "Galaxy Xcover 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G388F",
			model: "Galaxy Xcover 3"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G389F",
			model: "Galaxy Xcover 3 VE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G390[FWY]",
			model: "Galaxy Xcover 4"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G398FN",
			model: "Galaxy Xcover 4s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G715(?:FN|U1|[AUW])",
			model: "Galaxy Xcover Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G889(?:YB|[AFG])",
			model: "Galaxy Xcover FieldPro"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S8500",
			model: "Wave"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S8530",
			model: "Wave II"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S8600",
			model: "Wave 3"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5380",
			model: "Wave Y"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7250",
			model: "Wave M"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5250",
			model: "Wave 525"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5330",
			model: "Wave 533"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S5780",
			model: "Wave 578"
		},
		{
			regex: "(?:SAMSUNG-)?GT-S7230",
			model: "Wave 723"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:C101|C105([AL])?)",
			model: "Galaxy S4 zoom"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:C111(M)?|C115)",
			model: "Galaxy K zoom"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G318[HM]Z",
			model: "Galaxy V Plus"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G355(?:6D|[89HM])",
			model: "Galaxy Core 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G350",
			model: "Galaxy Core Plus"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G360[FH]?|S820L)",
			model: "Galaxy Core Prime"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G361[FH]?",
			model: "Galaxy Core Prime Value Edition"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G386F|G3518(?:_TD)?|G3586V)",
			model: "Galaxy Core LTE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G3568V",
			model: "Galaxy Core Mini 4G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G5108Q?",
			model: "Galaxy Core Max"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G3815",
			model: "Galaxy EXPRESS II"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G800",
			model: "Galaxy S5 mini"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G9009D",
			model: "Galaxy S5 Dual-SIM"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G900|G906[KLS]|S902L|S903VL)|Galaxy-S5|SCL23",
			model: "Galaxy S5"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G901F",
			model: "Galaxy S5 LTE+"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G870[AFW]|SC-02G",
			model: "Galaxy S5 Active"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G903[FMW]",
			model: "Galaxy S5 Neo"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G860P",
			model: "Galaxy S5 K Sport"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-G920(?:F[DQ]|W8|[089AFIKLPRSTVX])?|SM-S906L|SM-S907VL)|SC-05G",
			model: "Galaxy S6"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G890A",
			model: "Galaxy S5 Active"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G925[0ADFIKLPRSTVWX]|SCV31|404SC",
			model: "Galaxy S6 Edge"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G928(?:7C|N0|R4|W8|[07ACFGIKLPSTVX])",
			model: "Galaxy S6 Edge+"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G930(?:AZ|FD|R[467]|T1|V[CL]|W8|[0AFKLPRSTUVX8])?(?:[);/ ]|$)",
			model: "Galaxy S7"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G935(?:R4|W8|[0AFKLPSTUVX])|SC-02H|SCV33",
			model: "Galaxy S7 Edge"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G891A",
			model: "Galaxy S7 Active"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G950[08FNUW]?|SCV36|SC-02J",
			model: "Galaxy S8"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G8750",
			model: "Galaxy S8 Lite"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G892[AU]",
			model: "Galaxy S8 Active"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G955[0AFKLNPRTUVWX]?|SCV35|SC-03J",
			model: "Galaxy S8+"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G960[0FNUWX]?|SCV38|SC-02K",
			model: "Galaxy S9"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G965[0FNUWX]|SCV39|SC-03K",
			model: "Galaxy S9+"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-(?:G973|G977[BNPTU])|SCV41|SC-03L)",
			model: "Galaxy S10"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:S10 Lite|G770(?:U1|F))",
			model: "Galaxy S10 Lite"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-G975[08FUNWX]|SCV42|SC-04L)",
			model: "Galaxy S10+"
		},
		{
			regex: "SC-05L",
			model: "Galaxy S10+ Olympic Games Edition"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G970(?:U1|[08FUNWX])(?:[);/ ]|$)",
			model: "Galaxy S10e"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G980F",
			model: "Galaxy S20"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G981(?:U1|[0BNUVW])|SCG01|SC-51A",
			model: "Galaxy S20 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G780F",
			model: "Galaxy S20 FE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G781(?:U1|[0BNUVW])",
			model: "Galaxy S20 FE 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G988(?:U1|[0BNQUW])|SCG03",
			model: "Galaxy S20 Ultra 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G985F|SCG02",
			model: "Galaxy S20+"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G986(?:U1|[0BNUW])|SC-52A",
			model: "Galaxy S20+ 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G991(?:U1|[0BNW])",
			model: "Galaxy S21 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G998(?:U1|[0BNUW])",
			model: "Galaxy S21 Ultra 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G996(?:U1|[0BNWU])",
			model: "Galaxy S21+ 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-F700(?:U1|[0FNUW])|SCV47",
			model: "Galaxy Z Flip"
		},
		{
			regex: "(?:SAMSUNG-)?SM-F707(?:U1|[0BNUW])|SCG04",
			model: "Galaxy Z Flip 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SCH-I200",
			model: "Galaxy Stellar"
		},
		{
			regex: "(?:SAMSUNG-)?SCH-I829",
			model: "Galaxy Style Duos"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SCH-R740|SGH-S730)",
			model: "Galaxy Discover"
		},
		{
			regex: "(?:SAMSUNG-)?SCH-S738",
			model: "Galaxy Centura"
		},
		{
			regex: "vollo Vi86(?:[);/ ]|$)",
			model: "Vollo Vi86"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G386(?:T1|T)",
			model: "Galaxy Avant"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A716S",
			model: "Galaxy A Quantum"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:A015(?:DL|[TU]1|[AFGMUV])|S111DL)",
			model: "Galaxy A01"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A013[FGM]",
			model: "Galaxy A01 Core"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A025[FGM]",
			model: "Galaxy A02s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A022G",
			model: "Galaxy A02"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A260[FG]",
			model: "Galaxy A2 Core"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A300(?:FU|YZ|XU|XZ|[09FGHMXY])",
			model: "Galaxy A3 (2015)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A310(?:N0|[FMXY])",
			model: "Galaxy A3 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A320(?:FL|[FXY])",
			model: "Galaxy A3 (2017)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A430F",
			model: "Galaxy A4"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A500(?:YZ|[9LSWY])?(?:[);/ ]|$)",
			model: "Galaxy A5"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A500[0FGHKM]",
			model: "Galaxy A5 Duos"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A500(?:FU|X)",
			model: "Galaxy A5 (2015)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A510[08FKLMSXY]",
			model: "Galaxy A5 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A520[FKLSWX]",
			model: "Galaxy A5 (2017)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A525F",
			model: "Galaxy A52"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A600(?:AZ|FN|GN|T1|[AFGNPTUX])",
			model: "Galaxy A6"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A605(?:[FG]N|[08FGX])",
			model: "Galaxy A6+"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G6200",
			model: "Galaxy A6s (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A606[0Y]",
			model: "Galaxy A60"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A700(?:YD|[09FHKLSX])",
			model: "Galaxy A7"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A710[08FKLMSXY]",
			model: "Galaxy A7 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A720[FMSX]",
			model: "Galaxy A7 (2017)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A750(?:GN|[CFGNX])",
			model: "Galaxy A7 (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A71(?:5[FW])?(?:[);/ ]|$)",
			model: "Galaxy A71"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A725F(?:[);/ ]|$)",
			model: "Galaxy A72"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A716(?:U1|[0BUV])(?:[);/ ]|$)",
			model: "Galaxy A71 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A(?:530F|800[0FISXY])|SCV32",
			model: "Galaxy A8"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G885[FSY]",
			model: "Galaxy A8 Star"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A810(?:YZ|[FS])",
			model: "Galaxy A8 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:A8s|G887[0F])",
			model: "Galaxy A8s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A530[MNWX]",
			model: "Galaxy A8 (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A730[FX]",
			model: "Galaxy A8+ (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A900[0F]",
			model: "Galaxy A9"
		},
		{
			regex: "SM-A9\\[7\\]",
			model: "Galaxy A9 7"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A920[0FXN]",
			model: "Galaxy A9 (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G885[08]",
			model: "Galaxy A9 Star"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:A9 Pro|A910[0F]|G887N)",
			model: "Galaxy A9 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A105[FGMN]",
			model: "Galaxy A10"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A107[FM]",
			model: "Galaxy A10s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:S102DL|A102[NUW])",
			model: "Galaxy A10e"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A115(?:A[PZ]|U1|[AFMUW])",
			model: "Galaxy A11"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A125[FM]",
			model: "Galaxy A12"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:A205(?:U1|YN|[FGSWU])|S205DL)|SC-02M|SCV46",
			model: "Galaxy A20"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-A215(?:DL|U1|[UW])|SC-42A|SCV49)(?:[);/ ]|$)",
			model: "Galaxy A21"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A217[FMN](?:[);/ ]|$)",
			model: "Galaxy A21s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A202[FG]",
			model: "Galaxy A20e"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A207[0FM]",
			model: "Galaxy A20s"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-A305(?:[FGY]N|GT|[FGN])|SCV43)",
			model: "Galaxy A30"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A307(?:FN|GN|GT|[FG])",
			model: "Galaxy A30s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A315[FGN](?:[);/ ]|$)",
			model: "Galaxy A31"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A325F(?:[);/ ]|$)",
			model: "Galaxy A32"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A326(?:BR|B)",
			model: "Galaxy A32 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A405(?:F[NM]|S)",
			model: "Galaxy A40"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A305[018](?:[);/ ]|$)",
			model: "Galaxy A40s"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-A415F|SC-41A|SCV48)(?:[);/ ]|$)",
			model: "Galaxy A41"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A426[0BN](?:[);/ ]|$)",
			model: "Galaxy A42 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:A505(?:F[GN]|U1|YN|[FGNUWX])|S506DL|505FN)",
			model: "Galaxy A50"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A5070(?:[);/ ]|$)",
			model: "Galaxy A50s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A507FN",
			model: "Galaxy A50s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:A515[FUW]|S515DL)",
			model: "Galaxy A51"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-A516(?:U1|[0BNUV])|SC-54A|SCG07)",
			model: "Galaxy A51 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A705(?:GM|[MYF]N|[0FUWX])",
			model: "Galaxy A70"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A707[0F]",
			model: "Galaxy A70s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A805[0FNX]",
			model: "Galaxy A80"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A908[BN]",
			model: "Galaxy A90"
		},
		{
			regex: "(?:SAMSUNG-)?SM-A9080",
			model: "Galaxy A90 5G"
		},
		{
			regex: "(?:SAMSUNG-)?SM-F127G(?:[);/ ]|$)",
			model: "Galaxy F12"
		},
		{
			regex: "(?:SAMSUNG-)?SM-F415F(?:[);/ ]|$)",
			model: "Galaxy F41"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9301I",
			model: "Galaxy S III Neo"
		},
		{
			regex: "(?:SAMSUNG-)?SM-S120VL(?:[);/ ]|$)",
			model: "Galaxy Luna"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J100(?:FN|VPP|MU|[FGHMY])|S777C)",
			model: "Galaxy J1"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J105[BFHYM]",
			model: "Galaxy J1 Mini"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J106[BFHM]",
			model: "Galaxy J1 mini Prime"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J120(?:ZN|[AFGHMPTW])|J05H)",
			model: "Galaxy J1 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J110[FGHLM]|J111[FM])",
			model: "Galaxy J1 Ace"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J200[FGHMY]",
			model: "Galaxy J2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J200BT",
			model: "Galaxy J2 Duos"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J260AZ",
			model: "Galaxy J2 Pure"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J260([AFGMY]|T1)|S260DL)",
			model: "Galaxy J2 Core"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J(?:210F|250[FGMNY])",
			model: "Galaxy J2 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:S367VL|S357BL)",
			model: "Galaxy J3 Orbit"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J311(?:[09]|9S)",
			model: "Galaxy J3 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-S320VL(?:[);/ ]|$)",
			model: "Galaxy J3 Sky"
		},
		{
			regex: "(?:SAMSUNG-)?SM-S327VL(?:[);/ ]|$)",
			model: "Galaxy J3 Luna Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J327(?:T1|[ATW])(?:[);/ ]|$)",
			model: "Galaxy J3 Prime"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J327(?:[FP]|R4)",
			model: "Galaxy J3 Emerge"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J337R4(?:[);/ ]|$)",
			model: "Galaxy J3 Aura"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J337T(?:[);/ ]|$)",
			model: "Galaxy J3 Star"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J327V",
			model: "Galaxy J3 Eclipse"
		},
		{
			regex: "(?:SAMSUNG-)?SM-S337TL",
			model: "Galaxy J3 Luna Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J3109",
			model: "Galaxy J3 (2015)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J300H|J320(?:[ZF]N|R4|W8|YZ|[AFGHMNPVY]))",
			model: "Galaxy J3 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J330(?:FN|[08FGLN])|J327(?:R7|U))(?:[);/ ]|$)",
			model: "Galaxy J3 (2017)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J337(?:VPP|[AWPUV])(?:[);/ ]|$)",
			model: "Galaxy J3 (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G400[FG]|J400[FGM])",
			model: "Galaxy J4"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J500(?:FN|N0|[78FGHMY])(?:[);/ ]|$)",
			model: "Galaxy J5 (2015)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J510(?:[FGMU]N|FQ|[8FGHKLSY])|5108|G510H)(?:[);/ ]|$)",
			model: "Galaxy J5 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J530",
			model: "Galaxy J5 (2017)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G570[0FMY]",
			model: "Galaxy J5 Prime"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J600[FGLN]",
			model: "Galaxy J6"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J610[FG]",
			model: "Galaxy J6+"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J410[FG]",
			model: "Galaxy J4 Core"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J415(?:[FG]N|[FGN])",
			model: "Galaxy J4+"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J7[01]0(?:FN|MN|[8FHKM])",
			model: "Galaxy J7"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J700P",
			model: "Galaxy J7 (2015)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J700(?:T1|T)|J710GN|J7109)",
			model: "Galaxy J7 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J730[K]|J727(?:R4|[AFSU]))(?:[);/ ]|$)",
			model: "Galaxy J7 (2017)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J737(?:R4|T1|VPP|[APSTUV])(?:[);/ ]|$)",
			model: "Galaxy J7 (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-C710F",
			model: "Galaxy J7+ (C7)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G610[FMY]",
			model: "Galaxy J7 Prime"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G611(?:FF|MT|M)",
			model: "Galaxy J7 Prime 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G615F",
			model: "Galaxy J7 Max"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:S727VL|S737TL)",
			model: "Galaxy J7 Sky Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:J7 Pro|J730(?:GM|[FG]))",
			model: "Galaxy J7 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J701[FM]",
			model: "Galaxy J7 Core"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J720[FM]",
			model: "Galaxy J7 Duo"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:S767VL|S757BL)",
			model: "Galaxy J7 Crown"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J727[PTV]",
			model: "Galaxy J7 V"
		},
		{
			regex: "SM-J7\\[7\\]",
			model: "Galaxy J7 7"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J810",
			model: "Galaxy J8"
		},
		{
			regex: "SM-J8 Plus",
			model: "Galaxy J8 Plus"
		},
		{
			regex: "SM-J8 Pro",
			model: "Galaxy J8 Pro"
		},
		{
			regex: "SM-J9\\[7\\] Prime",
			model: "Galaxy J9 7 Prime"
		},
		{
			regex: "SM-J9\\[8\\] Pro",
			model: "Galaxy J9 8 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M015[FG]",
			model: "Galaxy M01"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M013F",
			model: "Galaxy M01 Core"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M017F",
			model: "Galaxy M01s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M025F",
			model: "Galaxy M02s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M105[FGMY]",
			model: "Galaxy M10"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M107F",
			model: "Galaxy M10s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M115[FM]",
			model: "Galaxy M11"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M127[FG]",
			model: "Galaxy M12"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:M205(?:[FGMN]|FN)|M20)(?:[);/ ]|$)",
			model: "Galaxy M20"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M215F",
			model: "Galaxy M21"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:M307(?:FN|[0F])|M30s)",
			model: "Galaxy M30s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M305?",
			model: "Galaxy M30"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M315F",
			model: "Galaxy M31"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M317F",
			model: "Galaxy M31s"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M405",
			model: "Galaxy M40"
		},
		{
			regex: "(?:SAMSUNG-)?SM-M515F",
			model: "Galaxy M51"
		},
		{
			regex: "(?:SAMSUNG-)?SM-W201([689])",
			model: "Galaxy W201$1"
		},
		{
			regex: "(?:SAMSUNG-)?SM-W2015",
			model: "Galaxy Golden 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G910S",
			model: "Galaxy Round"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G550(?:FY|T[12]?)|S550TL|G55[01]0|G5520)",
			model: "Galaxy On5"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G5528",
			model: "Galaxy On5 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G600(?:FY|[0F])",
			model: "Galaxy On7"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G610[0KLS]",
			model: "Galaxy On7 (2016)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G611[FKLS]",
			model: "Galaxy On7 Prime"
		},
		{
			regex: "(?:SAMSUNG-)?SM-C500[0X]",
			model: "Galaxy C5"
		},
		{
			regex: "(?:SAMSUNG-)?SM-C501[08]",
			model: "Galaxy C5 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-C700[0X]",
			model: "Galaxy C7"
		},
		{
			regex: "(?:SAMSUNG-)?SM-C701[08FX]",
			model: "Galaxy C7 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-C710[08]",
			model: "Galaxy C8"
		},
		{
			regex: "(?:SAMSUNG-)?SM-C900[08FY]",
			model: "Galaxy C9 Pro"
		},
		{
			regex: "(?:SAMSUNG-)?SM-Z130H",
			model: "Galaxy Z1"
		},
		{
			regex: "(?:SAMSUNG-)?SM-Z200[FMY]",
			model: "Galaxy Z2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-Z300H",
			model: "Galaxy Z3"
		},
		{
			regex: "(?:SAMSUNG-)?SM-Z400[FY]",
			model: "Galaxy Z4"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G150(?:N[0KLS])?|G155S)(?:[);/ ]|$)",
			model: "Galaxy Folder"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-G16(?:0N|[05]0?|5N))(?:[);/ ]|$)",
			model: "Galaxy Folder 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J321AZ(?:[);/ ]|$)",
			model: "Galaxy Sol"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J326AZ(?:[);/ ]|$)",
			model: "Galaxy Sol 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J336AZ(?:[);/ ]|$)",
			model: "Galaxy Sol 3"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J727AZ(?:[);/ ]|$)",
			model: "Galaxy Halo"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J327AZ",
			model: "Galaxy Amp Prime 2"
		},
		{
			regex: "(?:SAMSUNG-)?SM-J337AZ",
			model: "Galaxy Amp Prime 3 (2018)"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:F900[0FUW]|F907[BN])|SCV44",
			model: "Galaxy Fold",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-F916(?:U1|[0BNQUW])|SCG05",
			model: "Galaxy Z Fold 2 5G",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9060(?:[);/ ]|$)",
			model: "Galaxy Grand Neo",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9063",
			model: "Galaxy Grand Neo Duos",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9(?:080|128)",
			model: "Galaxy Grand",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9168",
			model: "Galaxy Grand Neo+",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I9082",
			model: "Galaxy Grand Duos",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-N7000",
			model: "Galaxy Note",
			device: "phablet"
		},
		{
			regex: "(?:SC-01G|SCL24)(?:[);/ ]|$)",
			model: "Galaxy Note Edge",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N935[FSLK](?:[);/ ]|$)",
			model: "Galaxy Note Fan Edition",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?(?:(?:GT-)?N7100|SCH-(?:I605|N719|R950)|SPH-L900)(?:[);/ ]|$)",
			model: "Galaxy Note II",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-N7105",
			model: "Galaxy Note II LTE",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G710(?:2T|5[HL]|[25689KLS])?(?:[);/ ]|$)",
			model: "Galaxy Grand 2",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G720(?:AX|N0|[02])(?:[);/ ]|$)",
			model: "Galaxy Grand Max"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:G530(?:[689]W|[AF]Z|BT|MU|R[47]|[AFHMPTWY])|G531[FH]|S920L)(?:[);/ ]|$)",
			model: "Galaxy Grand Prime",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G531(?:BT|[MY])(?:[);/ ]|$)",
			model: "Galaxy Grand Prime VE Duos",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G532F(?:[);/ ]|$)",
			model: "Galaxy Grand Prime Plus",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G532MT(?:[);/ ]|$)",
			model: "Galaxy J2 Prime (TV)",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G532[MG](?:[);/ ]|$)",
			model: "Galaxy J2 Prime",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N7502(?:[);/ ]|$)",
			model: "Galaxy Note 3 Neo Duos",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N750[05LQ]?",
			model: "Galaxy Note 3 Neo",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N9002(?:[);/ ]|$)",
			model: "Galaxy Note 3 Duos",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-9005(?:[);/ ]|$)",
			model: "Galaxy Note 3 LTE",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-N900(?:W8|[05689][VQ]?|[AKLPSTV])?|SCL22|SC-01F(?:[);/ ]|$))",
			model: "Galaxy Note 3",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-(?:N910|910U)|N9100(?:[);/ ]|$)",
			model: "Galaxy Note 4",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N916[KLS]",
			model: "Galaxy Note 4 LTE",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N915",
			model: "Galaxy Note 4 Edge",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N920(?:R[467]|W8|[0ACFGIKLPSTVX])",
			model: "Galaxy Note 5",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-N9208",
			model: "Galaxy Note 5 Duos",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G750(?:8Q|[9AFH])",
			model: "Galaxy Mega 2",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I915[028]",
			model: "Galaxy Mega 5.8",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?GT-I920[05]",
			model: "Galaxy Mega 6.3",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?(?:SM-N930(?:R[467]|W8|[0AFKLPSTUVX])|SCV34)",
			model: "Galaxy Note 7",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?SM-N950|SCV37|SC-01K",
			model: "Galaxy Note 8",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?(?:SM-N960|SCV40|SC-01L)",
			model: "Galaxy Note 9",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?SM-(?:N970(?:U1|W8|[089DFJKLSUWX])|N971N)",
			model: "Galaxy Note 10",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?SM-N770[FX]",
			model: "Galaxy Note 10 Lite",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?(?:SM-N975(?:U1|XU|[0CFUWX])|SM-N976[0BVNQU]|SC-01M|SCV45)",
			model: "Galaxy Note 10+",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?(?:SM-N980(?:F/DS|F))",
			model: "Galaxy Note 20",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?(?:SM-N981(?:B/DS|U1|[0BNUW]))",
			model: "Galaxy Note 20 5G",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?(?:SM-N985(?:F/DS|F))",
			model: "Galaxy Note 20 Ultra",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG[- ])?(?:SM-N986(?:B/DS|U1|[0BNUW])|SC-53A|SCG06)",
			model: "Galaxy Note 20 Ultra 5G",
			device: "phablet"
		},
		{
			regex: "(?:SAMSUNG-)?SM-W750V",
			model: "Ativ SE"
		},
		{
			regex: "(?:SAMSUNG-)?SM-G310R5",
			model: "GreatCall Touch 3"
		},
		{
			regex: "(?:SAMSUNG-)?GT-E2152",
			model: "E2152",
			device: "feature phone"
		},
		{
			regex: "(?:SAMSUNG-)?(GT-(P|N8|N5)[0-9]+[a-z]?)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "SC-02C",
			model: "Galaxy S II"
		},
		{
			regex: "(?:SAMSUNG-)?((?:SM-[TNP]|GT-P)[a-z0-9_\\-]+)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "((?:SCH|SGH|SPH|SHV|SHW|GT|SM)-[a-z0-9_\\-]+)",
			model: "$1"
		},
		{
			regex: "SMART-TV",
			device: "tv",
			model: "Smart TV"
		},
		{
			regex: "Galaxy ([^/;]+) Build",
			model: "Galaxy $1"
		},
		{
			regex: "Galaxy ([a-z0-9]+)",
			model: "Galaxy $1"
		},
		{
			regex: "SAMSUNG[\\-][ ]?([a-z0-9]+[\\-_][a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "SAMSUNG;[ ]?([a-z0-9]+[\\-_][a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "SAMSUNG[ _/\\-]?([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "SAMSUNG;[ ]?([a-z0-9 ]+)",
			model: "$1"
		},
		{
			regex: "SEC-([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "SAM-([a-z0-9]+)",
			model: "SCH-$1"
		},
		{
			regex: "(?:portalmmm|o2imode)/2\\.0 ([SZ][a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "sam([rua][0-9]+)",
			model: "SCH-$1"
		}
	]
};
var Sanei = {
	regex: "(?:8312D|G(60[25]|70[3568]G?|785|803)|N83(?:-2cpu)?|N91) Build",
	device: "smartphone",
	models: [
		{
			regex: "N83",
			model: "N83"
		},
		{
			regex: "N91",
			model: "N91"
		},
		{
			regex: "8312D",
			model: "G101"
		},
		{
			regex: "G(60[25]|70[3568]G?|785|803)",
			model: "G$1"
		}
	]
};
var Selfix = {
	regex: "SELFIX",
	device: "smartphone",
	models: [
		{
			regex: "SELFIX_SLASH6",
			model: "Slash 6"
		},
		{
			regex: "VOYAGER-V45",
			model: "Voyager V45"
		}
	]
};
var Sencor = {
	regex: "Sencor|ELEMENT[ _]?(?:7|8|9\\.7|10[ _]1)(?:[ _]?V[23])?(?:[);/ ]|$)|ELEMENT[ _]?(?:P[0-9]+|10.1 Q001)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(?:SENCOR[ _])?Element (10\\.1) (Q001)",
			model: "Element $1\" $2"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]?7[ _]?V3",
			model: "Element 7 V3"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]?7[ _]?V2[ _]BASIC",
			model: "Element 7 V2 Basic"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]?7[ _]?V2",
			model: "Element 7 V2"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]8[ _]?V3",
			model: "Element 8 V3"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]8[ _]?V2",
			model: "Element 8 V2"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT8",
			model: "Element 8"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]9\\.7[ _]?V3",
			model: "Element 9.7 V3"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]9\\.7[ _]?V2",
			model: "Element 9.7 V2"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]9\\.7",
			model: "Element 9.7"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT10[ _]1",
			model: "Element 10.1"
		},
		{
			regex: "(?:SENCOR[ _])?(7Q105)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(?:SENCOR[ _])?ELEMENT[ _]?P([0-9]+)",
			model: "Element P$1",
			device: "smartphone"
		},
		{
			regex: "Sencor[ _]([^;/]+) Build",
			model: "$1"
		}
	]
};
var Senwa = {
	regex: "Senwa|(?:S\\-?(?:471|7[12]5|6[01]5|915|905TL|1000|5018)|V705B|LS50F| LS50?|LS5518H|LS5718)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "S-?471(?:[);/ ]|$)",
			model: "Jazz"
		},
		{
			regex: "S-?605(?:[);/ ]|$)",
			model: "City"
		},
		{
			regex: "S-?905TL(?:[);/ ]|$)",
			model: "Odin"
		},
		{
			regex: "S-?1000(?:[);/ ]|$)",
			model: "Odin"
		},
		{
			regex: "S-?5018(?:[);/ ]|$)",
			model: "Inizio"
		},
		{
			regex: "S-?(615|7[12]5|915)(?:[);/ ]|$)",
			model: "S$1"
		},
		{
			regex: "V705B(?:[);/ ]|$)",
			model: "V705B"
		},
		{
			regex: "LS50F(?:[);/ ]|$)",
			model: "Evolution"
		},
		{
			regex: " LS50(?:[);/ ]|$)",
			model: "Pegasus"
		},
		{
			regex: " LS5(?:[);/ ]|$)",
			model: "Thor"
		},
		{
			regex: "LS5518H(?:[);/ ]|$)",
			model: "Sparkly"
		},
		{
			regex: "LS5718(?:[);/ ]|$)",
			model: "Diamond"
		},
		{
			regex: "Senwa[ _-]*([^;/]+)(?: Build|[;)])",
			model: "$1"
		}
	]
};
var Sky = {
	regex: "(?:SKY|Elite|Fuego)[_ ][3-7]\\.[05](?:[A-Z]{1,2})?|Elite[ _](?:5_0T|M45|[45]T|45T|GO|M5Plus|T55|T[46]|[AB]5|5_5_Octa)|Platinum[_ ](?:5.0M|5\\.5C|5\\.0+|M5|[ABCM]4|[ACG]55|[ABDEFG]5|A57|P9|X|UNO|VIEW2|O|4\\.0|4_0Plus)|PLATINUMVIEW|SKY[ _](?:55M|Pro_III)",
	device: "smartphone",
	models: [
		{
			regex: "Platinum[_ ](?:5\\.0M|M5)",
			model: "Platinum 5.0M"
		},
		{
			regex: "Platinum[_ ]5\\.5C",
			model: "Platinum 5.5C"
		},
		{
			regex: "Platinum[_ ]5\\.0\\+",
			model: "Platinum 5.0 Plus"
		},
		{
			regex: "Platinum_4_0Plus",
			model: "Platinum 4.0 Plus"
		},
		{
			regex: "Platinum[ _]4\\.0",
			model: "Platinum 4.0"
		},
		{
			regex: "Platinum[_ ](P9) Pro(?:[);/ ]|$)",
			model: "Platinum $1 Pro"
		},
		{
			regex: "Platinum[_ ]([ABCM]4|[ACG]55|[ABDEFG]5|A57|P9|X|UNO|O)(?:[);/ ]|$)",
			model: "Platinum $1"
		},
		{
			regex: "Platinum[_ ]?VIEW(2)?(?:[);/ ]|$)",
			device: "tablet",
			model: "Platinum View$1"
		},
		{
			regex: "Elite_5_5_Octa",
			model: "Elite 5.5 Octa"
		},
		{
			regex: "Elite M5Plus",
			model: "Elite M5 Plus"
		},
		{
			regex: "Elite[ _](M45|Go|[45]T|T[46]|T55|[AB]5|A55|45T)(?:[);/ ]|$)",
			model: "Elite $1"
		},
		{
			regex: "Elite[_ ]([3-7])[\\._]([05](?:[A-Z]{1,2})?\\+?)",
			model: "Elite $1.$2"
		},
		{
			regex: "Fuego[_ ]([3-7]\\.[05](?:[A-Z]{1,2})?\\+?)",
			model: "Fuego $1"
		},
		{
			regex: "SKY_Pro_III",
			model: "Pro III"
		},
		{
			regex: "SKY 55M",
			model: "55M"
		},
		{
			regex: "SKY[_ ]([3-7]\\.[05](?:[A-Z]{1,2})?)",
			model: "$1"
		}
	]
};
var Skyworth$1 = {
	regex: "Sky_?worth",
	device: "tv",
	models: [
		{
			regex: "Sky_?worth ([^;/]+) Build",
			model: "$1"
		}
	]
};
var Smartfren = {
	regex: "Smartfren|Androtab|Andromax|PD6D1J|AD682J|AD68[89]G|AD6B1H|AD9A1H|AD682H|AD683G",
	device: "smartphone",
	models: [
		{
			regex: "S7 Build",
			model: "Andromax Tab 7.0",
			device: "tablet"
		},
		{
			regex: "PD6D1J",
			model: "Andromax V3s"
		},
		{
			regex: "AD682J",
			model: "Andromax T"
		},
		{
			regex: "AD688G",
			model: "Andromax C2"
		},
		{
			regex: "AD689G",
			model: "Andromax i3"
		},
		{
			regex: "AD682H",
			model: "Andromax i3s"
		},
		{
			regex: "AD6B1H",
			model: "Andromax G2 Hot"
		},
		{
			regex: "AD9A1H",
			model: "Andromax G2"
		},
		{
			regex: "AD683G",
			model: "Andromax I"
		},
		{
			regex: "New Andromax-i",
			model: "New Andromax I"
		},
		{
			regex: "Andromax[ _\\-]([^/;]+) Build",
			model: "Andromax $1"
		},
		{
			regex: "Andromax[ _\\-]([a-z0-9]+)",
			model: "Andromax $1"
		},
		{
			regex: "Smartfren[ _\\-]([^/;\\)]+)(?: Build|[/;\\)])",
			model: "$1"
		},
		{
			regex: "(Androtab[^/;]+) Build",
			model: "$1",
			device: "tablet"
		}
	]
};
var Smartisan = {
	regex: "(SM(?:70[15]|[89]01|919)|OD10[35]|YQ60[1357]|DE106|DT1901A|O[CE]106|OS103|O[CS]105)[ /;\\)]",
	device: "smartphone",
	models: [
		{
			regex: "SM70[15]",
			model: "T1"
		},
		{
			regex: "SM801",
			model: "T2"
		},
		{
			regex: "SM901",
			model: "M1"
		},
		{
			regex: "SM919",
			model: "M1L"
		},
		{
			regex: "YQ60[1357]",
			model: "U1"
		},
		{
			regex: "OD10[35]",
			model: "Pro"
		},
		{
			regex: "OS105[ /;\\)]",
			model: "Pro 2"
		},
		{
			regex: "DE106[ /;\\)]",
			model: "R1"
		},
		{
			regex: "OE106[ /;\\)]",
			model: "Nut Pro 2s"
		},
		{
			regex: "OC10[56][ /;\\)]",
			model: "Nut 3"
		},
		{
			regex: "DT1901A[ /;\\)]",
			model: "Nut Pro 3"
		},
		{
			regex: "OS103[ /;\\)]",
			model: "JianGuo Pro 2"
		}
	]
};
var STK = {
	regex: "STK[_ ]",
	device: "smartphone",
	models: [
		{
			regex: "STK[_ ]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "STK[_ ]([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Stonex = {
	regex: "STX[ -]([^;/]+)|STONE EVO",
	device: "smartphone",
	models: [
		{
			regex: "STX[ -]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "STX[ -]([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var SuperSonic = {
	regex: "(SC-[0-9]+[a-z]+)",
	device: "tablet",
	model: "$1"
};
var Supra = {
	regex: "SUPRA|NVTAB 7.0 3G",
	device: "smartphone",
	models: [
		{
			regex: "SUPRA[ _]([^;/)]+)(?: Build|[;)])",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "(NVTAB 7.0 3G)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Sumvision = {
	regex: "(Cyclone [^/;]+) Build",
	device: "tablet",
	model: "$1"
};
var SunVan = {
	regex: "SUNVAN[ _\\-]",
	device: "smartphone",
	models: [
		{
			regex: "SUNVAN[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "SUNVAN[ _\\-]?([^);/ ]+)",
			model: "$1"
		}
	]
};
var SWISSMOBILITY = {
	regex: "(?:SCHR9GR|PRA(?:U8|100)|ZUR(?:722M|70016W?|700[RW]|805A))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "SCHR9GR",
			model: "SCHON R9"
		},
		{
			regex: "PRA(U8|100)",
			model: "PRA$1"
		},
		{
			regex: "ZUR722M",
			device: "phablet",
			model: "Z72 go"
		},
		{
			regex: "ZUR(70016W?|700[RW]|805A)(?:[);/ ]|$)",
			device: "tablet",
			model: "ZUR$1"
		}
	]
};
var Thomson$2 = {
	regex: "(?:Primo(7|8)|QM73[45]-8G|QM734-2|QM736-8G\\(HD\\)|(?<!\\.)8950|MID1002|5014G|TEO7RK|Friendly_TH101|Delight TH201)(?:[);/ ]|$)|(?:Tlink|Every)[0-9]+|THOMSON,",
	device: "tablet",
	models: [
		{
			regex: "Primo(7|8)",
			model: "Primo $1"
		},
		{
			regex: "QM734-2",
			model: "QM734-2"
		},
		{
			regex: "QM734-8G",
			model: "QM734-8G"
		},
		{
			regex: "QM735-8G",
			model: "QM735-8G"
		},
		{
			regex: "QM736-8G\\(HD\\)",
			model: "QM736-8G (HD)"
		},
		{
			regex: "(?<!\\.)8950(?:[);/ ]|$)",
			model: "3G 8950"
		},
		{
			regex: "TEO7RK(?:[);/ ]|$)",
			model: "TEO7RK"
		},
		{
			regex: "5014G(?:[);/ ]|$)",
			device: "smartphone",
			model: "5014G"
		},
		{
			regex: "Tlink([0-9]+)",
			device: "smartphone",
			model: "Tlink$1"
		},
		{
			regex: "Every([0-9]+)",
			device: "smartphone",
			model: "Every$1"
		},
		{
			regex: "Delight TH201",
			device: "smartphone",
			model: "Delight TH201"
		},
		{
			regex: "Friendly_TH101",
			device: "smartphone",
			model: "Friendly TH101"
		},
		{
			regex: "((?:49|55)UC6306|55UC63|32HD55|40FD54|55UD63)",
			device: "tv",
			model: "$1"
		}
	]
};
var Tanix = {
	regex: "TX5 MAX(?:[);/ ]|$)",
	device: "tv",
	model: "TX5 Max"
};
var Pantech = {
	regex: "Pantech|P[GN]-|PT-[a-z0-9]{3,}|(?<!Winmax )TX[T]?[0-9]+|IM-[a-z0-9]+(?:[);/ ]|$)|ADR910L",
	device: "smartphone",
	models: [
		{
			regex: "ADR910L",
			model: "Star Q"
		},
		{
			regex: "IM-A870K",
			model: "Vega Iron"
		},
		{
			regex: "Pantech[ \\-]?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "Pantech_([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "(P[GTN]-[a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(TX[T]?[0-9]+)",
			model: "$1"
		},
		{
			regex: "(IM-[a-z0-9]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Ployer = {
	regex: "MOMO([0-9]|[ ]?mini[ ]?(?:S|3GS)?)",
	device: "tablet",
	models: [
		{
			regex: "MOMOminiS",
			model: "MOMO mini S"
		},
		{
			regex: "momo mini 3GS",
			model: "MOMO Mini 3GS"
		},
		{
			regex: "MOMO([0-9][^);/]*) Build",
			model: "MOMO $1"
		},
		{
			regex: "MOMO([0-9][^);/]*)(?:[);/]|$)",
			model: "MOMO $1"
		}
	]
};
var Plum = {
	regex: "PLUM[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Z405",
			model: "Gator 3"
		},
		{
			regex: "Z407",
			model: "Axe 4"
		},
		{
			regex: "Z516",
			model: "Compass"
		},
		{
			regex: "Z811",
			device: "tablet",
			model: "Optimax 11"
		},
		{
			regex: "Z709",
			device: "tablet",
			model: "Optimax 7"
		},
		{
			regex: "Z712",
			device: "tablet",
			model: "Optimax 12"
		}
	]
};
var Polaroid$1 = {
	regex: "Polaroid|(?:PMID|MIDC)[0-9a-z]+(?:[);/ ]|$)|MID(?:1014|0714)|PRO[VG]?(?:[0-9]{3,}[a-z]*|[0-9]{2}[a-z])|(?:P(?:400[56]|4526|500[56]|502[56]|504[67]|552[56])A|P902/A900|PSPC(?:505|550|[MZL]20A0|K2[01]NA)|SIGMA 5|MIDS145PXE|MIDS747PX|MID4004JBL|MIDS185PR|PSPTD21NA)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "P4005A",
			model: "Turbo C4"
		},
		{
			regex: "P5005A",
			model: "Turbo C5"
		},
		{
			regex: "P4006A",
			model: "Turbo D4"
		},
		{
			regex: "PSPTD21NA",
			model: "Turbo D2 Plus"
		},
		{
			regex: "P4526A",
			model: "Turbo E"
		},
		{
			regex: "PSPC(505|550)",
			model: "Cosmo $1"
		},
		{
			regex: "P5006A",
			model: "Cosmo K"
		},
		{
			regex: "P5526A",
			model: "Cosmo K Plus"
		},
		{
			regex: "PSPCK20NA",
			model: "Cosmo K2"
		},
		{
			regex: "PSPCK21NA",
			model: "Cosmo K2 Plus"
		},
		{
			regex: "P5026A",
			model: "Cosmo L"
		},
		{
			regex: "PSPCL20A0",
			model: "Cosmo L2"
		},
		{
			regex: "PSPCM20A0",
			model: "Cosmo M2"
		},
		{
			regex: "P5046A",
			model: "Cosmo P5s"
		},
		{
			regex: "P5525A",
			model: "Cosmo Q5s"
		},
		{
			regex: "P5047A",
			model: "Cosmo Z"
		},
		{
			regex: "PSPCZ20A0",
			model: "Cosmo Z2"
		},
		{
			regex: "P5025A",
			model: "L5s"
		},
		{
			regex: "PRO4611(?:PR201)?",
			model: "Pro4611"
		},
		{
			regex: "PROV400",
			model: "Agate"
		},
		{
			regex: "PROV350",
			model: "ProV350"
		},
		{
			regex: "SIGMA 5(?:[);/ ]|$)",
			model: "Sigma 5"
		},
		{
			regex: "PRO([VG]?(?:[0-9]{3,}[a-z]*|[0-9]{2}[a-z]))",
			model: "Pro$1"
		},
		{
			regex: "PSPT350",
			model: "Turbo 350 Gris"
		},
		{
			regex: "MIDS185PR",
			model: "Pure 10.1\""
		},
		{
			regex: "(MID(?:1014|0714|S145PXE|S747PX|4004JBL))",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "((?:PMID|MIDC)[0-9a-z]+)(?:[);/ ]|$)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(P902/A900)(?:[);/ ]|$)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Polaroid",
			model: "",
			device: "tablet"
		}
	]
};
var PolyPad = {
	regex: "POLY ?PAD",
	device: "tablet",
	models: [
		{
			regex: "POLY ?PAD[_ \\.]([a-z0-9]+)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "POLY ?PAD[_\\.]([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Polytron = {
	regex: "POLYTRON|W8480|W7430|PW1100S|W7550|W7531|W8570|R2401",
	device: "smartphone",
	models: [
		{
			regex: "R2508",
			model: "Rocket"
		},
		{
			regex: "POLYTRON[ _]R1500",
			model: "Rocket Q-Five"
		},
		{
			regex: "R2401",
			model: "Rocket 2X"
		},
		{
			regex: "POLYTRON[ _-]R2402",
			model: "Rocket R2402"
		},
		{
			regex: "POLYTRON[ _-]R2403",
			model: "Rocket R1"
		},
		{
			regex: "POLYTRON[ _-]R2406",
			model: "Rocket R2"
		},
		{
			regex: "POLYTRON[ _-]R2407",
			model: "Rocket R3"
		},
		{
			regex: "POLYTRON[ _-]R2452",
			model: "Rocket S1"
		},
		{
			regex: "POLYTRON[ _-]R2457",
			model: "Rocket S2"
		},
		{
			regex: "POLYTRON[ _-]R2501",
			model: "Rocket T1"
		},
		{
			regex: "POLYTRON[ _-]R2507",
			model: "Rocket T3"
		},
		{
			regex: "POLYTRON[ _-]R2509SE",
			model: "Rocket T6 SE"
		},
		{
			regex: "POLYTRON[ _-]R2509",
			model: "Rocket T6"
		},
		{
			regex: "POLYTRON[ _-]R250A",
			model: "Rocket T7"
		},
		{
			regex: "POLYTRON[ _-]R2506",
			model: "Rocket T4"
		},
		{
			regex: "POLYTRON[ _-](?:R3450|W1400)",
			model: "Rocket Jetz"
		},
		{
			regex: "POLYTRON[ _-]R3500",
			model: "Rocket Jetz 5.0"
		},
		{
			regex: "4G450",
			model: "Zap 5"
		},
		{
			regex: "W6500",
			model: "Quadra Rocket"
		},
		{
			regex: "W7452",
			model: "Quadra S2"
		},
		{
			regex: "W7550",
			model: "Quadra V5"
		},
		{
			regex: "W8570",
			model: "Quadra V7"
		},
		{
			regex: "POLYTRON[ _]L501",
			model: "Rocket L501"
		},
		{
			regex: "POLYTRON[ _]P520",
			model: "Prime 7S"
		},
		{
			regex: "POLYTRON[ _]P552",
			model: "Prime 7 Pro"
		},
		{
			regex: "4G500",
			model: "Zap 6 Cleo"
		},
		{
			regex: "W8480",
			model: "Crystal 4 W8480"
		},
		{
			regex: "W7531",
			model: "Wizard V"
		},
		{
			regex: "W7430",
			model: "Quadra Mini W7430"
		},
		{
			regex: "POLYTRON[ _]4G501",
			model: "Zap 6 Posh"
		},
		{
			regex: "POLYTRON[ _]4G502",
			model: "Zap 6 Power"
		},
		{
			regex: "POLYTRON[ _]4G503",
			model: "Zap 6 Flaz"
		},
		{
			regex: "POLYTRON[_ ]?[ _]4G550",
			model: "Zap 6 Note"
		},
		{
			regex: "POLYTRON[ _]4G551",
			model: "Zap 6 Posh Note"
		},
		{
			regex: "PW1100S",
			model: "PW1100S"
		},
		{
			regex: "Q2352",
			model: "Q2352"
		},
		{
			regex: "POLYTRON[ _]T7800",
			model: "Cosmica T7800",
			device: "tablet"
		},
		{
			regex: "POLYTRON[ _]T7700",
			model: "Rocket Pad",
			device: "tablet"
		}
	]
};
var Positivo = {
	regex: "YPY_S450",
	device: "smartphone",
	models: [
		{
			regex: "YPY_S450",
			model: "YPY S450"
		}
	]
};
var Prestigio = {
	regex: "Prestigio 5500 DUO|(?:PMP|PAP|PMT|PSP|PGPS)[0-9]+[a-z0-9_]+(?:[);/ ]|$)|Muze C3",
	device: "tablet",
	models: [
		{
			regex: "PMT3277_3G",
			model: "MultiPad Ranger 7.0 3G"
		},
		{
			regex: "PGPS7799CIS08GBPG(?:[);/ ]|$)",
			model: "Geo Vision Tour 3"
		},
		{
			regex: "PGPS7797(?:[);/ ]|$)",
			model: "Geo Vision Tour 2"
		},
		{
			regex: "PMT3201_4G",
			model: "Grace 4G"
		},
		{
			regex: "PSP5551DUO",
			model: "Grace S5"
		},
		{
			regex: "PMT3287_3G",
			model: "MultiPad Ranger 8.0 3G"
		},
		{
			regex: "Prestigio 5500 DUO",
			model: "MultiPhone 5500 Duo",
			device: "smartphone"
		},
		{
			regex: "PMT3208[_ ]3G",
			model: "MultiPad Wize 8.0 3G"
		},
		{
			regex: "PSP7546DUO([ _][A-Z]{2})?",
			model: "X Pro"
		},
		{
			regex: "PSP7610DUO([ _][A-Z]{2})?",
			model: "S Max"
		},
		{
			regex: "(PM[PT][0-9]+[a-z0-9_]+)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "((?:PAP|PSP)[0-9]+[a-z0-9_]+(?: DUO)?)(?:[);/ ]|$)",
			model: "$1",
			device: "smartphone"
		},
		{
			regex: "Muze C3(?:[);/ ]|$)",
			model: "Muze C3",
			device: "smartphone"
		}
	]
};
var Sanyo = {
	regex: "Sanyo|MobilePhone[ ;]",
	device: "feature phone",
	models: [
		{
			regex: "SCP-?6750",
			model: "Katana Eclipse X"
		},
		{
			regex: "SCP-?6760",
			model: "Incognito"
		},
		{
			regex: "SCP-?6780",
			model: "Innuendo"
		},
		{
			regex: "SANYO[ /_-]([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "MobilePhone ([a-z0-9\\-]+)",
			model: "$1"
		}
	]
};
var Qilive$1 = {
	regex: "Qilive [0-9][^;/]*|Q(7S5[5]?IN4G|7T10INP|8T10IN|8S55IN4G2|8S[56]IN4G|9T9IN|9T(?:7|10)IN4G|9S55IN4G|10S5[37]IN4G|10S[56]IN4G|10S[56]IN4GR|9S5IN4G|6T7IN)",
	device: "smartphone",
	models: [
		{
			regex: "Q7S5IN4G",
			model: "Q7 5.0\" 4G"
		},
		{
			regex: "Q7S55IN4G",
			model: "Q7 5.5\" 4G"
		},
		{
			regex: "Q8S55IN4G2",
			model: "Q8 5.5\" 4G"
		},
		{
			regex: "Q8S6IN4G",
			model: "Q8 6.0\" 4G"
		},
		{
			regex: "Q8S5IN4GP",
			model: "Q8 5.1\" 4G"
		},
		{
			regex: "Q9S5IN4G",
			model: "Q9 5.0\" 4G"
		},
		{
			regex: "Q9S55IN4G",
			model: "Q9 5.5\" 4G"
		},
		{
			regex: "Q10S53IN4G",
			model: "Q10 5.3\" 4G"
		},
		{
			regex: "Q10S57IN4G",
			model: "Q10 5.7\" 4G"
		},
		{
			regex: "Q10S5IN4G[R]?",
			model: "Q10 5.0\" 4G"
		},
		{
			regex: "Q10S6IN4G",
			model: "Q10 6.0\" 4G"
		},
		{
			regex: "Q6T7IN",
			model: "Q6",
			device: "tablet"
		},
		{
			regex: "Q7T10INP",
			model: "Q7 10.1\"",
			device: "tablet"
		},
		{
			regex: "Q8T10IN",
			model: "Q8 10.1\"",
			device: "tablet"
		},
		{
			regex: "Q9T7IN4G",
			model: "Q9 7.0\" 4G",
			device: "tablet"
		},
		{
			regex: "Q9T9IN",
			model: "Q9 9.0\"",
			device: "tablet"
		},
		{
			regex: "Q9T10IN4G",
			model: "Q9 10.1\" 4G",
			device: "tablet"
		},
		{
			regex: "Qilive ([0-5][^;/]*) Build",
			model: "$1"
		},
		{
			regex: "Qilive ([0-5][^;/]*)/",
			model: "$1"
		},
		{
			regex: "Qilive ([6-9][^;/]*) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Qilive ([6-9][^;/]*)/",
			model: "$1",
			device: "tablet"
		}
	]
};
var QMobile = {
	regex: "QMobile|QTab(?!10EW)|Q-Smart|(?:E2 Noir|Noir X1S|LUNA PRO|NICE S|JazzX JS(?:[27]|10)(?: PRO)?|LT[57]00 PRO|LT950|Q Infinity|Hot Pro 2)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "JazzX JS7 PRO",
			model: "Jazz X JS7 Pro"
		},
		{
			regex: "JazzX JS(2|10)",
			model: "Jazz X JS$1"
		},
		{
			regex: "Noir X1S",
			model: "Noir X1S"
		},
		{
			regex: "E2 Noir",
			model: "E2 Noir"
		},
		{
			regex: "Hot Pro 2",
			model: "Hot Pro 2"
		},
		{
			regex: "LT([57]00) PRO",
			model: "Noir LT$1 Pro"
		},
		{
			regex: "LUNA PRO",
			model: "Luna Pro"
		},
		{
			regex: "NICE S",
			model: "Nice S"
		},
		{
			regex: "Q Infinity PRO",
			model: "Q Infinity Pro"
		},
		{
			regex: "Q Infinity E Lite",
			model: "Q Infinity E Lite"
		},
		{
			regex: "Q Infinity ([FCB])",
			model: "Q Infinity $1"
		},
		{
			regex: "(LT950)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "QTab[ _-]([^;/]+) Build",
			model: "$1 Tab",
			device: "tablet"
		},
		{
			regex: "QTab[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1 Tab",
			device: "tablet"
		},
		{
			regex: "(?:QMobile|Q-Smart)[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "(?:QMobile|Q-Smart)[ _-]([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		},
		{
			regex: "Q Infinity",
			model: "Q Infinity"
		}
	]
};
var Maximus = {
	regex: "Maximus[ _]|(Noir X)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Maximus[ _])?(Noir X|D1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Maximus_(T2)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Quantum = {
	regex: "Quantum (?:Fit|MUV (?:PRO|UP)|Go|Mini|V|You [2E])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Quantum (Fit|Go|Mini|V|You [2E])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Quantum MUV PRO(?:[);/ ]|$)",
			model: "MUV Pro"
		},
		{
			regex: "Quantum MUV UP(?:[);/ ]|$)",
			model: "MUV Up"
		}
	]
};
var Quechua = {
	regex: "Quechua Phone 5",
	device: "smartphone",
	model: "Quechua Phone 5"
};
var Ramos = {
	regex: "Ramos ?([^/;]+) Build|MOS1(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(MOS1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Ramos ?([^/;]+) Build",
			model: "$1"
		}
	]
};
var Razer = {
	regex: "Phone 2",
	device: "smartphone",
	model: "Phone 2"
};
var Sendo = {
	regex: "Sendo([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Turbo = {
	regex: "Turbo[_ ]?(?:X5[_ ]?(?:Max|Black|Space|Hero)|X8|X6[ _]Z|X[ _]Ray)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "TurboX5Space(?:[);/ ]|$)",
			model: "X5 Space"
		},
		{
			regex: "TurboX5Hero(?:[);/ ]|$)",
			model: "X5 Hero"
		},
		{
			regex: "TurboX[ _]Ray(?:[);/ ]|$)",
			model: "X Ray"
		},
		{
			regex: "Turbo[ _]?X5[ _]?Black(?:[);/ ]|$)",
			model: "X5 Black"
		},
		{
			regex: "Turbo[ _]X5[ _]Max(?:[);/ ]|$)",
			model: "X5 Max"
		},
		{
			regex: "Turbo[ _]X6[ _]Z(?:[);/ ]|$)",
			model: "X6 Z"
		},
		{
			regex: "Turbo[ _]X8(?:[);/ ]|$)",
			model: "X8"
		}
	]
};
var Sigma = {
	regex: "Sigma(?!Designs)|(X[_-]Style[ _]?Tab[_ ]A([0-9]{2,3})|X[-_ ]?treme[-_ ]?PQ[0-9]{2}|X-Style_S5501)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Sigma[ _])?X[-_ ]?treme[-_ ]?PQ([0-9]{2})(?:[);/ ]|$)",
			model: "X-Treme PQ$1"
		},
		{
			regex: "X[_-]Style[ _]?Tab[_ ]A([0-9]{2,3})(?:[);/ ]|$)",
			model: "X-Style Tab A$1",
			device: "tablet"
		},
		{
			regex: "(?:Sigma[ _])?X[-_ ]?Style[-_ ]S([0-9]+)(?:[);/ ]|$)",
			model: "X-Style S$1"
		}
	]
};
var Spice = {
	regex: "(?<![\\d];)Spice",
	device: "smartphone",
	models: [
		{
			regex: "Spice[ _\\-]?([^/;]+)(?:[\\)]| Build)",
			model: "$1"
		},
		{
			regex: "Spice[ _\\-]?([^/;]+)(?:/|$)",
			model: "$1"
		}
	]
};
var Sharp$1 = {
	regex: "SHARP|SBM|SH-?[0-9]+[a-z]?(?:[);/ ]|$)|AQUOS|(?:SH-M0[14-9]|SH-M1[1-6](?:-y)?|S[357]-SH|SH-[MZ](10|01)|SH-[CL]02|SH-RM(?:1[125]|02)|[34]04SH|401SH|[45]02SH|306SH|[36]05SH|70[1246]SH|80[138]SH|90[1678]SH|50[3679]SH|SHL2[25]|SHV4[0-8]|SHV3[1-9](?:[-_]u)?|FS80(?:1[08]|32|28|0[29])|TG-L900S|NP601SH|403SH|603SH|SHF3[134]|SHV4[035][-_]u|SW001SH|SHG0[123]|X4-SH|A002SH|SH-A01|DM-01J|SH-D01|A001SH|606SH|FS801[56]|d-41A|NP80[567]SH|NP501SH)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "506SH(?:[);/ ]|$)",
			model: "Aquos Xx3"
		},
		{
			regex: "603SH(?:[);/ ]|$)",
			model: "Aquos Xx3 Mini"
		},
		{
			regex: "50[23]SH(?:[);/ ]|$)",
			model: "Aquos Xx2"
		},
		{
			regex: "[34]04SH(?:[);/ ]|$)",
			model: "Aquos Xx"
		},
		{
			regex: "606SH(?:[);/ ]|$)",
			model: "Aquos ea"
		},
		{
			regex: "507SH(?:[);/ ]|$)",
			model: "Android One"
		},
		{
			regex: "S3-SH(?:[);/ ]|$)",
			model: "Android One S3"
		},
		{
			regex: "S5-SH(?:[);/ ]|$)",
			model: "Android One S5"
		},
		{
			regex: "S7-SH(?:[);/ ]|$)",
			model: "Android One S7"
		},
		{
			regex: "X4-SH(?:[);/ ]|$)",
			model: "Android One X4"
		},
		{
			regex: "SH-M04(?:[);/ ]|$)",
			model: "Aquos SH-M04"
		},
		{
			regex: "SH-M05(?:[);/ ]|$)",
			model: "Aquos Sense Lite"
		},
		{
			regex: "SH-M07(?:[);/ ]|$)",
			model: "Aquos Sense Plus"
		},
		{
			regex: "SHG03(?:[);/ ]|$)",
			model: "Aquos Sense 5G"
		},
		{
			regex: "SH-D01(?:[);/ ]|$)",
			model: "Aquos D10"
		},
		{
			regex: "SH-M12(?:-y)?(?:[);/ ]|$)",
			model: "Aquos S3 Dual SIM"
		},
		{
			regex: "(?:SH-[MZ]10|801SH)(?:[);/ ]|$)",
			model: "Aquos Zero"
		},
		{
			regex: "(?:SH-M13|906SH)(?:[);/ ]|$)",
			model: "Aquos Zero 2"
		},
		{
			regex: "(?:SHG02|A002SH)(?:[);/ ]|$)",
			model: "Aquos Zero 5G Basic"
		},
		{
			regex: "SH-Z01(?:[);/ ]|$)",
			model: "Aquos S2 (C10)"
		},
		{
			regex: "(?:SH-02E|SH-01[GH]|SH-04H)(?:[);/ ]|$)",
			model: "Aquos Phone Zeta"
		},
		{
			regex: "SH-?06D(?:[);/ ]|$)",
			model: "Aquos Phone SH-06D"
		},
		{
			regex: "(SHL2[25]|SH-M01)(?:[);/ ]|$)",
			model: "Aquos Phone $1"
		},
		{
			regex: "SH-L02(?:[);/ ]|$)",
			model: "Aquos L2"
		},
		{
			regex: "(?:605SH|SH-03J|SHV39)(?:[);/ ]|$)",
			model: "Aquos R"
		},
		{
			regex: "(?:605SH|SH-03J|SHV39)(?:[);/ ]|$)",
			model: "Aquos R"
		},
		{
			regex: "(?:701SH|SHV41|SH-M06)(?:[);/ ]|$)",
			model: "Aquos R Compact"
		},
		{
			regex: "(?:SH-M09|SHV42|706SH|SH-03K)(?:[);/ ]|$)",
			model: "Aquos R2"
		},
		{
			regex: "803SH(?:[);/ ]|$)",
			model: "Aquos R2 Compact"
		},
		{
			regex: "(?:908SH|SHG01|SH-M14)(?:[);/ ]|$)",
			model: "Aquos R5G"
		},
		{
			regex: "SH-M16(?:[);/ ]|$)",
			model: "Aquos S4 Plus"
		},
		{
			regex: "SH-M15(?:[);/ ]|$)",
			model: "Aquos S4 SIM"
		},
		{
			regex: "SH-C02(?:[);/ ]|$)",
			model: "Aquos V"
		},
		{
			regex: "(SHF3[134])(?:[);/ ]|$)",
			model: "Aquos K $1"
		},
		{
			regex: "704SH(?:[);/ ]|$)",
			model: "Simple Smartphone 4"
		},
		{
			regex: "(?:SH-02J|SH-04G)(?:[);/ ]|$)",
			model: "Aquos Ever"
		},
		{
			regex: "SH-02H(?:[);/ ]|$)",
			model: "Aquos Compact"
		},
		{
			regex: "30[56]SH(?:[);/ ]|$)",
			model: "Aquos Crystal"
		},
		{
			regex: "402SH(?:[);/ ]|$)",
			model: "Aquos Crystal X"
		},
		{
			regex: "403SH(?:[);/ ]|$)",
			model: "Aquos Crystal 2"
		},
		{
			regex: "509SH(?:[);/ ]|$)",
			model: "Aquos 3"
		},
		{
			regex: "NP601SH(?:[);/ ]|$)",
			model: "Aquos 2"
		},
		{
			regex: "(?:SHV40|SHV3[24])(?:_u)?(?:[);/ ]|$)",
			model: "Aquos S"
		},
		{
			regex: "702SH(?:[);/ ]|$)",
			model: "Aquos S Basic"
		},
		{
			regex: "SHV3[183](?:[);/ ]|$)",
			model: "Aquos S Mini"
		},
		{
			regex: "(?:FS8010|SH-M08|SHV43(?:-u)?|SH-01[KL])(?:[);/ ]|$)",
			model: "Aquos S2"
		},
		{
			regex: "FS8016(?:[);/ ]|$)",
			model: "Aquos S2 Plus"
		},
		{
			regex: "(?:SHV46|SH-R?M11|901SH)(?:[);/ ]|$)",
			model: "Aquos S3 Plus"
		},
		{
			regex: "(?:SHV44|808SH|SH-04L|SH-03G)(?:[);/ ]|$)",
			model: "Aquos R3"
		},
		{
			regex: "(?:FS8032|FS8015|SH-02M|SHV45(?:-U)?)(?:[);/ ]|$)",
			model: "Aquos S3"
		},
		{
			regex: "FS8018(?:[);/ ]|$)",
			model: "Aquos S3 Mini"
		},
		{
			regex: "(?:SHV48|907SH)(?:[);/ ]|$)",
			model: "Aquos S3 Basic"
		},
		{
			regex: "SH-RM12(?:[);/ ]|$)",
			model: "Aquos S3 Lite"
		},
		{
			regex: "SH-RM15(?:[);/ ]|$)",
			model: "Aquos S4 Lite"
		},
		{
			regex: "SH-51A(?:[);/ ]|$)",
			model: "Aquos R5G"
		},
		{
			regex: "SHV3[57](?:_u)?(?:[);/ ]|$)",
			model: "Aquos U"
		},
		{
			regex: "TG-L900S(?:[);/ ]|$)",
			model: "Luna S"
		},
		{
			regex: "SH-A01(?:[);/ ]|$)",
			model: "B10"
		},
		{
			regex: "(?:FS8002|SHV47)(?:[);/ ]|$)",
			model: "Z2"
		},
		{
			regex: "FS8009(?:[);/ ]|$)",
			model: "Z3"
		},
		{
			regex: "FS8028(?:[);/ ]|$)",
			model: "R1S"
		},
		{
			regex: "SHV36(?:[);/ ]|$)",
			model: "Basio 2"
		},
		{
			regex: "SW001SH(?:[);/ ]|$)",
			model: "Star Wars"
		},
		{
			regex: "SH-RM02",
			model: "Aquos SH-RM02"
		},
		{
			regex: "401SH",
			model: "Aquos 401SH"
		},
		{
			regex: "DM-01J",
			model: "Disney Mobile DM-01J"
		},
		{
			regex: "A001SH",
			model: "Simple Sumaho 5"
		},
		{
			regex: "NP80[56]SH",
			model: "Aquos Keitai 3"
		},
		{
			regex: "NP807SH",
			model: "Aquos Keitai 10"
		},
		{
			regex: "NP501SH",
			model: "Aquos Keitai"
		},
		{
			regex: "SH-08E(?:[);/ ]|$)",
			device: "tablet",
			model: "Sharp Aquos Pad"
		},
		{
			regex: "d-41A(?:[);/ ]|$)",
			device: "tablet",
			model: "dtab d-41A"
		},
		{
			regex: "(LC-(?:[0-9]{2})[a-z0-9]+)(?:[);/ ]|$)",
			device: "tv",
			model: "$1"
		},
		{
			regex: "SHARP-AQUOS|AQUOSBrowser",
			device: "tv",
			model: "Aquos Net Plus"
		},
		{
			regex: "SHARP[ \\-]([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "(?:SHARP|SBM)([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "(SH-?[0-9]+[a-z]?)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Simply = {
	regex: "(NP602SI)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Softbank = {
	regex: "Softbank|J-PHONE",
	device: "smartphone",
	models: [
		{
			regex: "Softbank/[12]\\.0/([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "([a-z0-9]+);Softbank;",
			model: "$1"
		},
		{
			regex: "J-PHONE/[0-9]\\.[0-9]/([a-z0-9\\-]+)",
			model: "$1"
		}
	]
};
var Sonim = {
	regex: "Sonim[ -]|XP(?:[67]7|88)00(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Sonim-XP3400",
			model: "XP3400",
			device: "feature phone"
		},
		{
			regex: "XP6700(?:[);/ ]|$)",
			model: "XP6700"
		},
		{
			regex: "XP7700(?:[);/ ]|$)",
			model: "XP7700"
		},
		{
			regex: "XP8800(?:[);/ ]|$)",
			model: "XP8"
		}
	]
};
var Star = {
	regex: "N(9[5678]00|8800|9000|9977)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "N9000",
			model: "Note 3"
		},
		{
			regex: "N(9[5678]00|8800|9977)(?:[);/ ]|$)",
			model: "N$1"
		}
	]
};
var Starmobile = {
	regex: "(?:Starmobile (?:Play (?:Neo|Spark|GO|Click))|UP[_ ](?:Sense|Rave|Groove|Prime|Selfie|Xtreme|XL))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Starmobile PLAY GO(?:[);/ ]|$)",
			model: "Play Go"
		},
		{
			regex: "Starmobile Play (Neo|Spark|Click)(?:[);/ ]|$)",
			model: "Play $1"
		},
		{
			regex: "UP[_ ](Sense|Rave|Groove|Prime|Selfie|Xtreme|XL)(?:[);/ ]|$)",
			model: "UP $1"
		}
	]
};
var Amazon = {
	regex: "KF(?:OT|ONWI|TT|JWI|JWA|[DFS]OWI|A[PRSU]WI|T[BH]WI|SAW[IA]|GIWI|KAWI|MAWI|MEWI|MUWI|SUWI)(?:[);/ ]|$)|Kindle|Silk/\\d+\\.\\d+|AlexaMediaPlayer|Amazon (?:Tate|Jem)|AFT[ABMNRST]|SD4930UR|AEO(BC|KN)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "AFTA",
			model: "Fire TV Cube (Gen 1)",
			device: "tv"
		},
		{
			regex: "AFTR",
			model: "Fire TV Cube (Gen 2)",
			device: "tv"
		},
		{
			regex: "AFTN",
			model: "Fire TV (Gen 3)",
			device: "tv"
		},
		{
			regex: "AFTB",
			model: "Fire TV",
			device: "tv"
		},
		{
			regex: "AFT[MST]",
			model: "Fire TV stick",
			device: "tv"
		},
		{
			regex: "KFFOWI(?:[);/ ]|$)",
			model: "Fire 7\""
		},
		{
			regex: "KFMUWI(?:[);/ ]|$)",
			model: "Fire 7\" (2019)"
		},
		{
			regex: "KFTT(?:[);/ ]|$)",
			model: "Kindle Fire HD"
		},
		{
			regex: "KFJWI(?:[);/ ]|$)|Amazon Jem",
			model: "Kindle Fire HD 8.9\" WiFi"
		},
		{
			regex: "KFJWA(?:[);/ ]|$)",
			model: "Kindle Fire HD 8.9\" 4G"
		},
		{
			regex: "KFSOWI(?:[);/ ]|$)|Amazon Tate",
			model: "Kindle Fire HD 7\" WiFi"
		},
		{
			regex: "KFTHWI(?:[);/ ]|$)",
			model: "Kindle Fire HDX 7\" WiFi"
		},
		{
			regex: "KFTHWA(?:[);/ ]|$)",
			model: "Kindle Fire HDX 7\" 4G"
		},
		{
			regex: "KFAPWI(?:[);/ ]|$)",
			model: "Kindle Fire HDX 8.9\" WiFi"
		},
		{
			regex: "KFAPWA(?:[);/ ]|$)",
			model: "Kindle Fire HDX 8.9\" 4G"
		},
		{
			regex: "KFARWI(?:[);/ ]|$)",
			model: "Fire HD 6"
		},
		{
			regex: "KFASWI(?:[);/ ]|$)",
			model: "Fire HD 7"
		},
		{
			regex: "KFAUWI(?:[);/ ]|$)",
			model: "Fire HD 7 (2017)"
		},
		{
			regex: "KFMEWI(?:[);/ ]|$)",
			model: "Fire HD 8 (2015)"
		},
		{
			regex: "KFGIWI(?:[);/ ]|$)",
			model: "Fire HD 8 (2016)"
		},
		{
			regex: "KFDOWI(?:[);/ ]|$)",
			model: "Fire HD 8 (2017)"
		},
		{
			regex: "KFKAWI(?:[);/ ]|$)",
			model: "Fire HD 8 (2018)"
		},
		{
			regex: "KFONWI(?:[);/ ]|$)",
			model: "Fire HD 8 (2020)"
		},
		{
			regex: "KFSAWI(?:[);/ ]|$)",
			model: "Fire HDX 8.9"
		},
		{
			regex: "KFSAWA(?:[);/ ]|$)",
			model: "Fire HDX 8.9 4G"
		},
		{
			regex: "KFTBWI(?:[);/ ]|$)",
			model: "Fire HD 10"
		},
		{
			regex: "KFSUWI(?:[);/ ]|$)",
			model: "Fire HD 10 (2017)"
		},
		{
			regex: "KFMAWI(?:[);/ ]|$)",
			model: "Fire HD 10 (2019)"
		},
		{
			regex: "SD4930UR",
			model: "Fire Phone",
			device: "smartphone"
		},
		{
			regex: "KFOT|Kindle Fire|Silk/\\d+\\.\\d+",
			model: "Kindle Fire"
		},
		{
			regex: "Kindle",
			model: "Kindle"
		},
		{
			regex: "AEO(BC|KN)(?:[);/ ]|$)",
			model: "Echo",
			device: "smart speaker"
		},
		{
			regex: "AlexaMediaPlayer",
			model: "Alexa",
			device: "smart speaker"
		}
	]
};
var Symphony = {
	regex: "SYMPHONY[ \\_]([a-z0-9]+)|(?:roar[ _](?:V20|V78|E80|V150))|roarV95|ZVIII(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ZVIII",
			model: "ZVIII"
		},
		{
			regex: "roar[ _]?(V20|E80|V78|V95|V150)(?:[);/ ]|$)",
			model: "Roar $1"
		},
		{
			regex: "SYMPHONY[ \\_]([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Helio = {
	regex: "Helio (S60|S5)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Syrox = {
	regex: "(SYX-(?:T70[04]|T10[12]))(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Qtek = {
	regex: "Qtek[ _]?([a-z0-9]+)",
	device: "smartphone",
	model: "$1"
};
var Teclast = {
	regex: "Teclast|TLA002|TLA016|X98 Air III|M20_4G|X98 Air II\\(HG5N\\)|Tbook|X80 Power\\(B2N4\\)|(?:T30|P80X|P20HD|P10_HD|M40)_(?:ROW|EEA)|T10\\(E3C6\\)|P10S\\(N4H5\\)|98\\(M1E[45789]\\)|98\\(M3E3\\)",
	device: "tablet",
	models: [
		{
			regex: "Tbook[_ -]([^;/]+) Build",
			model: "Tbook $1"
		},
		{
			regex: "T10\\(E3C6\\)",
			model: "T10"
		},
		{
			regex: "T30_(ROW|EEA)",
			model: "T30 $1"
		},
		{
			regex: "P80X_(ROW|EEA)",
			model: "P80X $1"
		},
		{
			regex: "P10S\\(N4H5\\)",
			model: "P10S"
		},
		{
			regex: "P20HD_(?:ROW|EEA)",
			model: "P20HD"
		},
		{
			regex: "M40_(?:ROW|EEA)",
			model: "M40"
		},
		{
			regex: "P10_HD_(?:ROW|EEA)",
			model: "P10HD"
		},
		{
			regex: "M20_4G",
			model: "M20 4G"
		},
		{
			regex: "TLA002",
			model: "M30 4G"
		},
		{
			regex: "TLA016",
			model: "M16"
		},
		{
			regex: "98\\(M1E[45789]\\)|98\\(M3E3\\)",
			model: "TPad 98 10.1\" 4G"
		},
		{
			regex: "X80 Power\\(B2N4\\)(?:[);/ ]|$)",
			model: "X98 Power"
		},
		{
			regex: "X98 Air III(?:[);/ ]|$)",
			model: "X98 Air III"
		},
		{
			regex: "X98 Air II\\(HG5N\\)(?:[);/ ]|$)",
			model: "X98 Air II"
		},
		{
			regex: "Teclast[_ -]([^;/]+) Build",
			model: "$1"
		}
	]
};
var TechPad = {
	regex: "Tech ?pad|XTAB[ _-]|Dual C1081HD|S813G",
	device: "tablet",
	models: [
		{
			regex: "S813G",
			model: "S813G"
		},
		{
			regex: "TechPad10QC",
			model: "10QC"
		},
		{
			regex: "TechPad_10xx",
			model: "10XX"
		},
		{
			regex: "TechPad703",
			model: "703"
		},
		{
			regex: "TechPad[_ ](10Y|9x|i700)",
			model: "$1"
		},
		{
			regex: "TechPad[_ ]3Gx",
			model: "3Gx"
		},
		{
			regex: "Dual C1081HD",
			model: "XTAB C1081HD"
		},
		{
			regex: "XTAB[ _-]([^/;]+) Build",
			model: "XTAB $1"
		},
		{
			regex: "Tech ?pad[ _-]([^/;)]+)(?: Build|[;)])",
			model: "$1",
			device: "smartphone"
		}
	]
};
var Tesco = {
	regex: "Hudl (?:[^/;]+)(?: Build|[;)])|W032i-C3(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "Hudl ([^/;]+)(?: Build|[;)])",
			model: "Hudl $1"
		},
		{
			regex: "W032i-C3(?:[);/ ]|$)",
			model: "Op3n Dott"
		}
	]
};
var teXet = {
	regex: "Texet|(NaviPad [^/;]*) Build|TM-(?:1046|1058|1057|1067|3000|3200R|3500|4003|4071|450[34]|451[30]|4377|4082R|508[34]|550[358]|5010|5017|507[4-7]|5[23]77|6003|6906|702[13]|7055HD|709[69]|9747BT|9758|9751HD|9767|5513|520[410]|507[13]|558[134]|570[23]|7859|8044|9748[ _]3G|9720|7047HD[ _]3G|9757|9740|4982|4515|4083|500[3567]|5571|3204R|5016|8043|7047HD[ _]3G|8041HD|8066|705[23]|7041|8041HD|8051|8048|974[96]|973[78]W|974[170]|9743W|9750HD|7043XD|7049|7887|7037W|702[46])|TB-(771A|711A)|X-Force[\\(-]?TM-5009\\)?|X-Plus[\\(-]?TM-5577\\)?|TM_5011|X-pad (?:AIR 8|iX 7|NAVI 7.[35]|NAVI 10|SKY 8.1|STYLE 8|STYLE 10.1|HIT|LITE 7.[12]|QUAD (?:7.2|10|7)|SHINE 8.1)(?: 3G)?",
	device: "tablet",
	models: [
		{
			regex: "TM-9749",
			model: "X-pad Plus 7.1 3G"
		},
		{
			regex: "TM-9746",
			model: "X-pad Plus 7 3G"
		},
		{
			regex: "TM-8051",
			model: "X-pad Force 8i 3G"
		},
		{
			regex: "TM-1058",
			model: "X-Force 10 3G"
		},
		{
			regex: "TM-8048",
			model: "X-pad Force 8 3G"
		},
		{
			regex: "(NaviPad [^/;]*) Build",
			model: "$1"
		},
		{
			regex: "TM-7055HD",
			model: "NaviPad 3G"
		},
		{
			regex: "TM-9758",
			model: "X-pad Style 10.0\""
		},
		{
			regex: "X-pad SHINE 8.1 3G",
			model: "X-pad Shine 8.1\" 3G"
		},
		{
			regex: "X-pad QUAD 10 3G",
			model: "X-pad Quad 10.0\" 3G"
		},
		{
			regex: "X-pad QUAD 7 3G",
			model: "X-pad Quad 7.0\" 3G"
		},
		{
			regex: "X-pad QUAD 7.2 3G",
			model: "X-pad Quad 7.2\" 3G"
		},
		{
			regex: "X-pad STYLE 8 3G",
			model: "X-pad Style 8.0\" 3G"
		},
		{
			regex: "X-pad HIT 3G",
			model: "X-pad Hit 3G"
		},
		{
			regex: "X-pad LITE (7.[12])",
			model: "X-pad Lite $1\""
		},
		{
			regex: "TM-9767",
			model: "X-pad Style 10.0\" 3G"
		},
		{
			regex: "X-pad STYLE 10.1 3G",
			model: "X-pad Style 10.1\" 3G"
		},
		{
			regex: "(X-pad (?:AIR 8|iX 7) 3G)",
			model: "$1"
		},
		{
			regex: "TM-7096|X-pad NAVI 7.3 3G",
			model: "X-pad NAVI 7.3\" 3G"
		},
		{
			regex: "TM-7099",
			model: "X-pad NAVI 7.4\" 3G"
		},
		{
			regex: "X-pad NAVI 7.5 3G",
			model: "X-pad NAVI 7.5\" 3G"
		},
		{
			regex: "X-pad SKY 8.1 3G",
			model: "X-pad Sky 8.1\" 3G"
		},
		{
			regex: "TM-1046|X-pad NAVI 10 3G",
			model: "X-pad NAVI 10.0\" 3G"
		},
		{
			regex: "TM-7859",
			model: "X-pad NAVI 8.2\" 3G"
		},
		{
			regex: "TM-7049",
			model: "NaviPad TM-7049 3G"
		},
		{
			regex: "TM-7887",
			model: "NaviPad TM-7887 3G"
		},
		{
			regex: "TM-8066",
			model: "X-pad Rapid 8.2\" 4G"
		},
		{
			regex: "(TM-(?:1057|1067|6906|8043|9748[_ ]3G|9740|9757(?:[_ ]3G)?|7047HD[ _]3G|9747BT|9751HD|702[13]|705[23]|7041|9720|7047HD[_ ]3G|8044|8041HD|973[78]W|9743W|974[710]|9750HD|7043XD|7037W|702[46])|TB-(?:771A|711A|8041HD))",
			model: "$1"
		},
		{
			regex: "TM-4503",
			device: "smartphone",
			model: "X-Quad"
		},
		{
			regex: "(TM-(?:3000|3200R|4003|4083|4377|4504|451[30]|500[35]|5[23]77|5571|3204R|520[04]|5581|5505|5017|507[13-7]|5081|6003|5513))",
			device: "smartphone",
			model: "$1"
		},
		{
			regex: "TM-5006",
			device: "smartphone",
			model: "X-Line"
		},
		{
			regex: "TM-5007",
			device: "smartphone",
			model: "X-Shine"
		},
		{
			regex: "TM_5011",
			device: "smartphone",
			model: "X-Omega"
		},
		{
			regex: "TM-508(3|4)",
			device: "smartphone",
			model: "Pay $1G"
		},
		{
			regex: "TM-558(3|4)",
			device: "smartphone",
			model: "Pay 5.5\" $1G"
		},
		{
			regex: "TM-5702",
			device: "smartphone",
			model: "Pay 5.7\" 3G"
		},
		{
			regex: "TM-5703",
			device: "smartphone",
			model: "Pay 5.7\" Pro"
		},
		{
			regex: "TM-5201",
			device: "smartphone",
			model: "Rock"
		},
		{
			regex: "TM-4515",
			device: "smartphone",
			model: "X-Style"
		},
		{
			regex: "TM-(5016|3500)",
			device: "smartphone",
			model: "X-Maxi 2"
		},
		{
			regex: "TM-4071",
			device: "smartphone",
			model: "X-Smart"
		},
		{
			regex: "TM-4982",
			device: "smartphone",
			model: "iX-Maxi"
		},
		{
			regex: "TEXET[_ ]IX-MINI",
			device: "smartphone",
			model: "iX-Mini"
		},
		{
			regex: "TM-5010",
			device: "smartphone",
			model: "X-Selfie"
		},
		{
			regex: "TM-4082R",
			device: "smartphone",
			model: "X-Driver Quad"
		},
		{
			regex: "TM-5503",
			device: "smartphone",
			model: "X-Mage"
		},
		{
			regex: "TM-5508",
			device: "smartphone",
			model: "X-Cosmo"
		},
		{
			regex: "X-Force[\\(-]?TM-5009\\)?",
			device: "smartphone",
			model: "X-Force"
		},
		{
			regex: "X-Plus[\\(-]?TM-5577\\)?",
			device: "smartphone",
			model: "X-Plus"
		},
		{
			regex: "teXet[_ ]X-medium[_ ]plus",
			device: "smartphone",
			model: "X-Medium Plus"
		}
	]
};
var Telefunken$1 = {
	regex: "TELEFUNKEN|Foxtrot|TEL-1013GIQA|TF-SP(?:500[12]|4002)|(TF-MID(?:[78]02G|70[78]G|80[46]G|9705RG|9707G|7805G|100[57]G|1010G))|(TF-LED(?:65S75T2SU|32S39T2S|32S5[289]T2S|32S70T2S|40S63T2S))",
	device: "tablet",
	models: [
		{
			regex: "TEL-1013GIQA",
			model: "Giqa 10.1 3G"
		},
		{
			regex: "Foxtrot2",
			model: "Foxtrot 2",
			device: "smartphone"
		},
		{
			regex: "(?:TELEFUNKEN)?(TF-SP(?:500[12]|4002)|Outdoor LTE|Foxtrot)",
			model: "$1",
			device: "smartphone"
		},
		{
			regex: "(TF-MID(?:[78]02G|70[78]G|80[46]G|9705RG|9707G|7805G|100[57]G|1010G))",
			model: "$1"
		},
		{
			regex: "(TF-LED(?:65S75T2SU|32S39T2S|32S5[289]T2S|32S70T2S|40S63T2S))",
			model: "$1",
			device: "tv"
		}
	]
};
var Telego = {
	regex: "TELEGO",
	device: "smartphone",
	models: [
		{
			regex: "TELEGO-W503",
			model: "W503"
		},
		{
			regex: "Telego_JOY2",
			model: "Joy 2"
		},
		{
			regex: "Telego[ _]Mate",
			model: "Mate"
		}
	]
};
var Telenor = {
	regex: "(?<!FBCR/)Telenor|Infinity E5",
	device: "smartphone",
	models: [
		{
			regex: "Telenor[ _]([^;/]+)(?: Build|[;)])",
			model: "$1"
		},
		{
			regex: "Infinity E5",
			model: "Infinity E5"
		}
	]
};
var Telit = {
	regex: "Telit",
	device: "feature phone",
	models: [
		{
			regex: "Telit_Mobile_Terminals-([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "Telit[\\-_]?([a-z0-9]+)",
			model: "$1"
		}
	]
};
var ThL = {
	regex: "ThL[ _-]|Knight 2",
	device: "smartphone",
	models: [
		{
			regex: "Knight 2",
			model: "Knight 2"
		},
		{
			regex: "ThL[ _-]*([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "ThL[ _-]*([^ ;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var TIANYU = {
	regex: "TIANYU",
	device: "feature phone",
	models: [
		{
			regex: "TIANYU ([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "TIANYU-KTOUCH/([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Timovi = {
	regex: "Tmovi[ _]|(?:Infinit_Lite_2|Vision_PRO|VISION ULTRA|Epix)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Tmovi[ _]Prime",
			model: "Prime"
		},
		{
			regex: "TMOVI_YEAH_BEAT",
			model: "Yeah Beat"
		},
		{
			regex: "YeahLIVE",
			model: "Yeah LIVE"
		},
		{
			regex: "Infinit Lite",
			model: "Infinit Lite"
		},
		{
			regex: "Infinit_Lite_2",
			model: "Infinit Lite 2"
		},
		{
			regex: "Vision_PRO",
			model: "Vision Pro"
		},
		{
			regex: "VISION ULTRA",
			model: "Vision Ultra"
		},
		{
			regex: "Epix",
			model: "Epix"
		}
	]
};
var Tooky = {
	regex: "TOOKY",
	device: "smartphone",
	models: [
		{
			regex: "TOOKY (A19|W1|T8[368]|T1982)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "TOOKY A9PLUS(?:[);/ ]|$)",
			model: "A9 Plus"
		}
	]
};
var Tolino = {
	regex: "Tolino Tab ([^/;]+) Build",
	device: "tablet",
	model: "Tolino Tab $1"
};
var Toplux = {
	regex: "Toplux ([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Touchmate = {
	regex: "TOUCHMATE|(TM-(?:MID1050WKD|MID1020A|MID794C|MID795|MID710|MID798|MID792|MID788D|SM500N|SM410|MID1010))",
	device: "smartphone",
	models: [
		{
			regex: "(TM-(?:MID1020A|MID794C|MID795|MID710|MID798|MID792|MID788D|MID1010))",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "TM-MID1050WKD",
			device: "tablet",
			model: "Mega Matrix 10.1\" 3G"
		},
		{
			regex: "(TM-(?:SM500N|SM410))",
			model: "$1"
		},
		{
			regex: "Touchmate ([^/;]+) Build",
			model: "$1"
		}
	]
};
var TrekStor = {
	regex: "(?:TrekStor|Surftab) ([^/;]+)(?: Build|\\))|Surftab[^;\\)]*(?:[;\\)]|$)|ST10216-2A|ST13416-1|VT10416-[12]|TFMTKAW01232",
	device: "tablet",
	models: [
		{
			regex: "ST10216-2A|VT10416-[12]",
			model: "SurfTab 10.1"
		},
		{
			regex: "ST13416-1",
			model: "SurfTab Theatre 13.4\""
		},
		{
			regex: "PrimeTab P10",
			model: "PrimeTab P10"
		},
		{
			regex: "TrekStor ([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Surftab ([^/;]+) Build",
			model: "SurfTab $1"
		},
		{
			regex: "Surftab[ _]([^;\\)]*)(?:[;\\)]|$)",
			model: "SurfTab $1"
		},
		{
			regex: "TFMTKAW01232",
			model: "SurfTab L15"
		}
	]
};
var Trevi = {
	regex: "Trevi[ _]|TAB[ _]10[ _]3G[ _]V16|TAB[ _](7|8)[ _]3G[ _]V8|TAB9 3G|MINITAB 3GV|Phablet[ _](?:4|4\\.5|5|5\\,3|6)[ _]?[CSQ]|REVERSE[ _]5\\.5[ _]?Q",
	device: "tablet",
	models: [
		{
			regex: "TAB[ _]?(7|8)[ _]3G[ _]V8",
			model: "TAB $1 3G V8"
		},
		{
			regex: "TAB[ _]?9[ _]3G[ _]V8",
			model: "TAB 9 3G V8"
		},
		{
			regex: "TAB[ _]?9[ _]3G",
			model: "TAB 9 3G"
		},
		{
			regex: "TAB[ _]10[ _]3G[ _]V16",
			model: "TAB 10 3G V16"
		},
		{
			regex: "MINITAB 3GV",
			model: "MINITAB 3G V"
		},
		{
			regex: "(?:Trevi_)?Phablet[ _]4[ _]?C",
			model: "Phablet 4 C",
			device: "smartphone"
		},
		{
			regex: "(?:Trevi_)?Phablet[ _]4[ _]?S",
			model: "Phablet 4 S",
			device: "smartphone"
		},
		{
			regex: "(?:Trevi_)?Phablet[ _]4.5[ _]?Q",
			model: "Phablet 4.5Q",
			device: "smartphone"
		},
		{
			regex: "(?:Trevi_)?PHABLET[ _]5[ _]?S",
			model: "Phablet 5 S",
			device: "smartphone"
		},
		{
			regex: "(?:Trevi_)?PHABLET[ _]5,3[ _]?Q",
			model: "Phablet 5.3 Q",
			device: "phablet"
		},
		{
			regex: "(?:Trevi_)?REVERSE[ _]5.5[ _]?Q",
			model: "Phablet 5.5 Q REVERSE",
			device: "phablet"
		},
		{
			regex: "(?:Trevi_)?PHABLET[ _]6[ _]?S",
			model: "Phablet 6 S",
			device: "phablet"
		},
		{
			regex: "Trevi[_]([^;/]+) Build",
			model: "$1"
		}
	]
};
var TVC = {
	regex: "(NuclearSX-SP5)",
	device: "smartphone",
	model: "Nuclear SX-SP5"
};
var Uhappy = {
	regex: "Uhappy|UP?580|UP350|UP[35679]20",
	device: "smartphone",
	models: [
		{
			regex: "UP([35679]20)",
			model: "UP$1"
		},
		{
			regex: "UP350",
			model: "UP350"
		},
		{
			regex: "UP580",
			model: "UP580"
		},
		{
			regex: "U580",
			model: "U580"
		},
		{
			regex: "Uhappy[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Uhappy[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Unimax = {
	regex: "U((?:67[013]|680)C|(?:452|504)TL|683CL|693CL)(?:[);/ ]|$)",
	device: "smartphone",
	model: "U$1"
};
var Unowhy = {
	regex: "QOOQ ",
	device: "tablet",
	model: "QOOQ"
};
var UTStarcom = {
	regex: "utstar[ _-]?([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Ulefone = {
	regex: "Ulefone|Gemini Pro|Power_[356]|S10_Pro|(?:Note [89]P|Armor(?:[ _](?:[2367]|2S|X[236]|6[SE]|3WT|3W|X))?|U00[78][ _]Pro|Be[ _]X|Be[ _]Touch(?:[ _][23])?|Be[ _](?:One|Pure)(?:[ _]Lite)?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "S10_Pro",
			model: "S10 Pro"
		},
		{
			regex: "Be[ _]Touch([ _][23])?",
			model: "Be Touch$1"
		},
		{
			regex: "Be[ _]Pure[ _]Lite",
			model: "Be Pure Lite"
		},
		{
			regex: "Be[ _]Pure",
			model: "Be Pure"
		},
		{
			regex: "Be[ _]One[ _]Lite",
			model: "Be One Lite"
		},
		{
			regex: "Be[ _]One",
			model: "Be One"
		},
		{
			regex: "Be[ _]X",
			model: "Be X"
		},
		{
			regex: "U007 Pro",
			model: "U007 Pro"
		},
		{
			regex: "U008 Pro",
			model: "U008 Pro"
		},
		{
			regex: "Armor[ _]X([236])(?:[);/ ]|$)",
			model: "Armor X$1"
		},
		{
			regex: "Armor[ _]6S(?:[);/ ]|$)",
			model: "Armor 6S"
		},
		{
			regex: "Armor[ _]([679])E(?:[);/ ]|$)",
			model: "Armor $1E"
		},
		{
			regex: "Armor[ _]X([57]) Pro(?:[);/ ]|$)",
			model: "Armor X$1 Pro"
		},
		{
			regex: "Armor[ _]X([578])(?:[);/ ]|$)",
			model: "Armor X$1"
		},
		{
			regex: "Armor[ _]([25])S(?:[);/ ]|$)",
			model: "Armor $1S"
		},
		{
			regex: "Armor[ _]X(?:[);/ ]|$)",
			model: "Armor X"
		},
		{
			regex: "Armor[ _]3W(?:[);/ ]|$)",
			model: "Armor 3W"
		},
		{
			regex: "Armor[ _]3WT(?:[);/ ]|$)",
			model: "Armor 3WT"
		},
		{
			regex: "Armor[ _]([236789])(?:[);/ ]|$)",
			model: "Armor $1"
		},
		{
			regex: "Armor(?:[);/ ]|$)",
			model: "Armor"
		},
		{
			regex: "Gemini Pro(?:[);/ ]|$)",
			model: "Gemini Pro"
		},
		{
			regex: "Power[_ ]([356])",
			model: "Power $1"
		},
		{
			regex: "Note 8P(?:[);/ ]|$)",
			model: "Note 8P"
		},
		{
			regex: "Note 9P(?:[);/ ]|$)",
			device: "phablet",
			model: "Note 9P"
		},
		{
			regex: "Ulefone[_ ](X|S1[ _]Pro|S[17])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Ulefone[ _-]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Ulefone[ _-]?([^;/)]+)(?:[;/)]|$)",
			model: "$1"
		}
	]
};
var UMIDIGI = {
	regex: "UMI(?:DIGI)?[ _]|(?:A5_Pro|ROME[_ ]X|BISON|hammer_S)(?:[;/) ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "A5_Pro",
			model: "A5 Pro"
		},
		{
			regex: "UMI TOUCH X",
			model: "Touch X"
		},
		{
			regex: "UMI TOUCH",
			model: "Touch"
		},
		{
			regex: "ROME[_ ]X",
			model: "Rome X"
		},
		{
			regex: "BISON",
			model: "Bison"
		},
		{
			regex: "hammer_S",
			model: "Hammer S"
		},
		{
			regex: "UMI_(London|Diamond(?:_X)?)",
			model: "$1"
		},
		{
			regex: "UMI(?:DIGI)?[ _]([^/;)]+)(?: Build|[;)])",
			model: "$1"
		}
	]
};
var Uniscope = {
	regex: "Uniscope",
	device: "smartphone",
	models: [
		{
			regex: "Uniscope[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Uniscope[ _\\-]?([^);/ ]+)",
			model: "$1"
		}
	]
};
var Unnecto = {
	regex: "Unnecto|(?:U513|U5151|U61[1356]|U7[12]0|U-830|U90[35])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "U513",
			model: "Drone XT"
		},
		{
			regex: "U5151",
			model: "Bolt"
		},
		{
			regex: "U611",
			model: "Quattro X"
		},
		{
			regex: "U613",
			model: "Quattro S"
		},
		{
			regex: "U615",
			model: "Quattro M"
		},
		{
			regex: "U616",
			model: "U616"
		},
		{
			regex: "U710",
			model: "Quattro U710"
		},
		{
			regex: "U720",
			model: "Quattro Z"
		},
		{
			regex: "U-830",
			model: "Rush"
		},
		{
			regex: "U903",
			model: "Air"
		},
		{
			regex: "U905",
			model: "Air 5.5"
		}
	]
};
var Unonu = {
	regex: "Unonu[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "Unonu[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Unonu[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var UTOK = {
	regex: "UTOK (45[01]D)",
	device: "smartphone",
	model: "$1"
};
var Vastking = {
	regex: "(M910A|M783K|M783K-16G|M1072R-3G)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var ViewSonic = {
	regex: "ViewSonic|VSD[0-9]+(?:[);/ ]|$)|ViewPad|ViewPhone",
	device: "smart display",
	models: [
		{
			regex: "(?:ViewSonic-)?V500(?:[);/ ]|$)",
			model: "V500",
			device: "smartphone"
		},
		{
			regex: "ViewSonic A8\\+(?:[);/ ]|$)",
			model: "A8 Plus",
			device: "smartphone"
		},
		{
			regex: "(?:ViewSonic-)?ViewPhone ?([^;/]+) Build",
			model: "ViewPhone $1",
			device: "smartphone"
		},
		{
			regex: "(?:ViewSonic-)?ViewPad ?([^;/]+) Build",
			model: "ViewPad $1",
			device: "tablet"
		},
		{
			regex: "(VSD[0-9]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Vitelcom = {
	regex: "Vitelcom|portalmmm/[12].0 TSM",
	device: "feature phone",
	models: [
		{
			regex: "TSM-([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "TSM([a-z0-9\\-]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/[12].0 (TSM[a-z0-9 ]+)",
			model: "$1"
		}
	]
};
var Fengxiang = {
	regex: "(vKB011B|vKB004L)",
	device: "tablet",
	model: "$1"
};
var Vernee = {
	regex: "Vernee|Mars Pro|Apollo[ _](?:Lite|X)|Thor (?:E|Plus)|X2_euro",
	device: "smartphone",
	models: [
		{
			regex: "Apollo[ _]Lite",
			model: "Apollo Lite"
		},
		{
			regex: "Apollo[ _]X",
			model: "Apollo X"
		},
		{
			regex: "Mars Pro",
			model: "Mars Pro"
		},
		{
			regex: "Thor E",
			model: "Thor E"
		},
		{
			regex: "Thor Plus",
			model: "Thor Plus"
		},
		{
			regex: "Vernee_M5",
			model: "M5"
		},
		{
			regex: "X2_euro",
			model: "X2"
		},
		{
			regex: "Vernee[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Vernee[ _-]([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Vertu = {
	regex: "Vertu[ ]?([a-z0-9]+)|(?:ASTER P|CONSTELLATION X)(?:[);/ ]|$)",
	device: "feature phone",
	models: [
		{
			regex: "ASTER P(?:[);/ ]|$)",
			device: "smartphone",
			model: "Aster P"
		},
		{
			regex: "CONSTELLATION X(?:[);/ ]|$)",
			device: "smartphone",
			model: "Constellation X"
		},
		{
			regex: "Vertu[ ]?([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Venso = {
	regex: "(?:CX-508|CX-551|Reiv 500|Creon F5|Isprit U50|Isprit-U50-LTE)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Isprit U50|Isprit-U50-LTE",
			model: "Isprit U50"
		},
		{
			regex: "(CX-508|CX-551|Reiv 500|Creon F5)",
			model: "$1"
		}
	]
};
var Verizon = {
	regex: "QTA(SUN[12]|XIA1|QZ3|QZ3KID|IR7)|QMV7B",
	device: "tablet",
	models: [
		{
			regex: "QTAXIA1|QTAIR7",
			model: "Ellipsis 10"
		},
		{
			regex: "QTASUN1",
			model: "Ellipsis 8 HD"
		},
		{
			regex: "QTASUN2",
			model: "Ellipsis 8 HD 4G LTE"
		},
		{
			regex: "QTAQZ3KID",
			model: "Ellipsis Kids LTE"
		},
		{
			regex: "QTAQZ3",
			model: "Ellipsis 8"
		},
		{
			regex: "QMV7B",
			model: "Ellipsis 7"
		}
	]
};
var Verykool = {
	regex: "verykool",
	device: "smartphone",
	models: [
		{
			regex: "verykoolS5004",
			model: "Lotus JR."
		},
		{
			regex: "verykoolS5005",
			model: "Lotus II"
		},
		{
			regex: "verykool[ _]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "verykool[ _]?([^/;]+);",
			model: "$1"
		}
	]
};
var Vestel$1 = {
	regex: "Vestel[ _]|Venus[ _](GO|E[2-5]|V[1-9]|Z[1-9]0)|(?<!Winnovo )V_?TAB|VP74|VT97PRO|VSP145M|VSP250[GS]|VSP355[GS]|V3_5580_Dual",
	device: "smartphone",
	models: [
		{
			regex: "VT97PRO",
			model: "VTab 9.7 Pro",
			device: "tablet"
		},
		{
			regex: "VP74",
			model: "VTab Lite II",
			device: "tablet"
		},
		{
			regex: "VTAB10",
			model: "VTab 10",
			device: "tablet"
		},
		{
			regex: "V_TAB_7_ECO_III ",
			model: "VTab 7 Eco 3",
			device: "tablet"
		},
		{
			regex: "V_TAB_([0-9]{4}[A-Z]?)",
			model: "VTab $1",
			device: "tablet"
		},
		{
			regex: "V3_5580_Dual",
			model: "Venus V3 5580 Dual"
		},
		{
			regex: "VSP145M",
			model: "Venus 4.5"
		},
		{
			regex: "VSP250G",
			model: "Venus 5.0V"
		},
		{
			regex: "VSP250S",
			model: "Venus 5.0X"
		},
		{
			regex: "VSP355G",
			model: "Venus 5.5V"
		},
		{
			regex: "VSP355S",
			model: "Venus 5.5X"
		},
		{
			regex: "Venus[ _]V([1-9])",
			model: "Venus V$1"
		},
		{
			regex: "Venus[ _]Z([1-9]0)",
			model: "Venus Z$1"
		},
		{
			regex: "Venus[ _]GO",
			model: "Venus Go"
		},
		{
			regex: "Venus E2 Plus Dual",
			model: "Venus E2 Plus Dual"
		},
		{
			regex: "Venus[ _]E2 Plus",
			model: "Venus E2 Plus"
		},
		{
			regex: "Venus[ _]E([345])",
			model: "Venus E$1"
		},
		{
			regex: "Vestel_5000_Dual",
			model: "5000 Dual"
		},
		{
			regex: "Vestel_5000_2gb",
			model: "5000 2GB"
		},
		{
			regex: "Vestel[ _](5000|5530)",
			model: "$1"
		}
	]
};
var Videocon = {
	regex: "Videocon[_ \\-]|(?:VT75C|V406018|V512930|V50(?:2430|3630|5024|5430|4630|5[98]20)|Z45_(?:Dazzle|Amaze)|Z45Q Star|Z50 Nova)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Videocon_V1585",
			device: "feature phone",
			model: "V1585"
		},
		{
			regex: "Videocon[_ \\-]([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "VT75C(?:[);/ ]|$)",
			model: "VT75C",
			device: "tablet"
		},
		{
			regex: "V502430(?:[);/ ]|$)",
			model: "Kryton 3"
		},
		{
			regex: "V505024(?:[);/ ]|$)",
			model: "Kryton 22 Plus"
		},
		{
			regex: "V503630(?:[);/ ]|$)",
			model: "Delite 11"
		},
		{
			regex: "V505920(?:[);/ ]|$)",
			model: "Metal Pro 2"
		},
		{
			regex: "V505820(?:[);/ ]|$)",
			model: "Metal Pro 1"
		},
		{
			regex: "V406018(?:[);/ ]|$)",
			model: "Starr 100"
		},
		{
			regex: "V512930(?:[);/ ]|$)",
			model: "Ultra 50"
		},
		{
			regex: "(V505430|V504630)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Z45_(Dazzle|Amaze)(?:[);/ ]|$)",
			model: "Infinium Z45 $1"
		},
		{
			regex: "Z45Q Star(?:[);/ ]|$)",
			model: "Infinium Z45Q Star"
		},
		{
			regex: "Z50 Nova(?:[);/ ]|$)",
			model: "Infinium Z50 Nova"
		}
	]
};
var Vodafone = {
	regex: "(?<!FBCR/)Vodafone[ _-]|Smart ?Tab ?(?:III? ?)?(?:|4G|7|10)[);/ -]|VodafoneSmartChat|VFD[ _][0-9]+(?:[);/ ]|$)|VFD320|VF6[89]5|VF-(696|1397|795|895N|1497)",
	device: "smartphone",
	models: [
		{
			regex: "VFD 100",
			model: "Smart Mini"
		},
		{
			regex: "VF685",
			model: "Smart Kicka"
		},
		{
			regex: "VF695",
			model: "Smart First 6"
		},
		{
			regex: "VFD 200",
			model: "Smart First 7"
		},
		{
			regex: "VFD 300",
			model: "Smart Mini 7"
		},
		{
			regex: "VFD 50[02]",
			model: "Smart Turbo 7"
		},
		{
			regex: "VFD 51[013]",
			model: "Smart E8"
		},
		{
			regex: "VFD 600",
			model: "Smart Prime 7"
		},
		{
			regex: "VFD320",
			model: "Smart C9"
		},
		{
			regex: "VFD 820",
			model: "Smart X9"
		},
		{
			regex: "VFD 610",
			model: "Smart N8"
		},
		{
			regex: "Smart ultra 6",
			model: "Smart Ultra 6"
		},
		{
			regex: "VFD 700",
			model: "Smart Ultra 7"
		},
		{
			regex: "VFD 720",
			model: "Smart N9"
		},
		{
			regex: "VFD 900",
			model: "Smart Platinum 7"
		},
		{
			regex: "Vodafone[ _]875(?:[);/ ]|$)",
			model: "Smart Mini"
		},
		{
			regex: "Vodafone[ _]975N?(?:[);/ ]|$)",
			model: "Smart 3"
		},
		{
			regex: "Vodafone[ _]785(?:[);/ ]|$)",
			model: "Smart 4 Mini"
		},
		{
			regex: "Vodafone[ _]890N(?:[);/ ]|$)",
			model: "Smart 4 Turbo"
		},
		{
			regex: "Vodafone[ _]985N(?:[);/ ]|$)",
			model: "Smart 4 Power"
		},
		{
			regex: "VodafoneSmartChat",
			model: "Smart Chat"
		},
		{
			regex: "VF-696",
			model: "Smart Grand 6"
		},
		{
			regex: "VF-795",
			model: "Smart Speed 6"
		},
		{
			regex: "VF-895N",
			model: "Smart Prime 6"
		},
		{
			regex: "VF-1397",
			model: "Tab Speed 6",
			device: "tablet"
		},
		{
			regex: "VF-1497",
			model: "Tab Prime 6",
			device: "tablet"
		},
		{
			regex: "VFD 1100",
			device: "tablet",
			model: "Tab Mini 7"
		},
		{
			regex: "VFD 1300",
			device: "tablet",
			model: "Smart Tab N8"
		},
		{
			regex: "VFD 1400",
			device: "tablet",
			model: "Tab Prime 7"
		},
		{
			regex: "Smart ?Tab ?3G",
			device: "tablet",
			model: "Smart Tab 3G"
		},
		{
			regex: "Smart ?Tab ?4G",
			device: "tablet",
			model: "Smart Tab 4G"
		},
		{
			regex: "Smart ?Tab ?4",
			model: "Smart Tab 4",
			device: "tablet"
		},
		{
			regex: "SmartTab7[);/ -]",
			model: "Smart Tab 7",
			device: "tablet"
		},
		{
			regex: "SmartTab10[);/ -]",
			model: "Smart Tab 10",
			device: "tablet"
		},
		{
			regex: "Smart ?Tab ?II ?7",
			model: "Smart Tab II 7",
			device: "tablet"
		},
		{
			regex: "Smart ?Tab ?II ?10",
			model: "Smart Tab II 10",
			device: "tablet"
		},
		{
			regex: "Smart ?Tab ?III ?7",
			model: "Smart Tab III 7",
			device: "tablet"
		},
		{
			regex: "Smart ?Tab ?III ?10",
			model: "Smart Tab III 10",
			device: "tablet"
		},
		{
			regex: "VFD[ _]([0-9]+)(?:[);/ ]|$)",
			model: "VFD $1"
		},
		{
			regex: "Vodafone[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Vodafone[ _-]([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Vonino = {
	regex: "Vonino|Epic (?:E8|P7)|Gyga[ _](?:X|S|QS|XS)|Jax[ _](?:QS|[SXQN]|Mini)|Magnet[ _]M[19]|Navo_QS|Onyx_(QS|Z)|Orin_QS|Pluri[ _](?:[BCMQ]7|[CQM]8)|Sirius_QS|Volt[ _][XS]|Xavy_(T7|L8)|Xylo[ _][XSPQT]|Zun[ _]X[OS]?|JAX_N",
	device: "smartphone",
	models: [
		{
			regex: "Zun[ _]XO",
			model: "Zun XO"
		},
		{
			regex: "Zun[ _]XS",
			model: "Zun XS"
		},
		{
			regex: "Zun[ _]X",
			model: "Zun X"
		},
		{
			regex: "Xylo[ _]([PSXQT])",
			model: "Xylo $1"
		},
		{
			regex: "Volt[ _]S_A7",
			model: "Volt S A7"
		},
		{
			regex: "Volt[ _]S",
			model: "Volt S"
		},
		{
			regex: "Volt[ _]X",
			model: "Volt X"
		},
		{
			regex: "Gyga[ _]QS",
			model: "Gyga QS"
		},
		{
			regex: "Gyga[ _]XS",
			model: "Gyga XS"
		},
		{
			regex: "Gyga[ _](S|X)",
			model: "Gyga $1"
		},
		{
			regex: "Jax[ _]QS",
			model: "Jax QS"
		},
		{
			regex: "Jax[ _]S_A7",
			model: "Jax S A7"
		},
		{
			regex: "Jax[ _]([SQXN])",
			model: "Jax $1"
		},
		{
			regex: "Jax[ _]Mini",
			model: "Jax Mini"
		},
		{
			regex: "Epic (E8|P7)",
			model: "Epic $1",
			device: "tablet"
		},
		{
			regex: "Pluri[ _](B|C|M|Q)7",
			model: "Pluri $17",
			device: "tablet"
		},
		{
			regex: "Pluri[ _]([CQM])8",
			model: "Pluri $18",
			device: "tablet"
		},
		{
			regex: "Magnet[ _]M([19])",
			model: "Magnet M$1",
			device: "tablet"
		},
		{
			regex: "Navo_QS",
			model: "Navo QS",
			device: "tablet"
		},
		{
			regex: "Onyx_(QS|Z)",
			model: "Onyx $1",
			device: "tablet"
		},
		{
			regex: "Orin_QS",
			model: "Orin QS",
			device: "tablet"
		},
		{
			regex: "Sirius_QS",
			model: "Sirius QS",
			device: "tablet"
		},
		{
			regex: "Xavy_T7",
			model: "Xavy T7",
			device: "tablet"
		},
		{
			regex: "Xavy_L8",
			model: "Xavy L8",
			device: "tablet"
		}
	]
};
var Vorago = {
	regex: "VORAGO",
	device: "smartphone",
	models: [
		{
			regex: "CELL-500",
			model: "CELL-500"
		}
	]
};
var Voto = {
	regex: "VOTO[ _\\-]|VT8[89]8(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "VOTO[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "VOTO[ _\\-]?([^);/ ]+)",
			model: "$1"
		},
		{
			regex: "(VT8[89]8)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Voxtel = {
	regex: "Voxtel_([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Vulcan = {
	regex: "(?:VP5004A|HT0704W08|VS5513|VS4011|VR6031)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(VP5004A|VR6031)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "VS5513(?:[);/ ]|$)",
			model: "Tempo S13"
		},
		{
			regex: "VS4011(?:[);/ ]|$)",
			model: "Tempo S11"
		},
		{
			regex: "HT0704W08",
			model: "Koral 7W4",
			device: "tablet"
		}
	]
};
var Walton = {
	regex: "Walton|Walpad|Primo[ _](C[1234]?|D[1-689]|E[1-589]|F8s|S7|EF[23]?|EM|F[1-79]i?|G[1-9]|GF[234]?|GH[23]?|GM|H[2-689M]|H7s|N[F1]?|NX2?|R[1-46]|R[HM]2?|RX[23]?|S[1-6]|V1|X[1-4]|Z|ZX)",
	device: "smartphone",
	models: [
		{
			regex: "Walpad ([^;/]+) Build",
			device: "tablet",
			model: "Primo Walpad $1"
		},
		{
			regex: "Primo S6 infinity",
			model: "Primo S6 Infinity"
		},
		{
			regex: "Primo H8 Pro(?:[);/ ]|$)",
			model: "Primo H8 Pro"
		},
		{
			regex: "Primo H8(?:[);/ ]|$)",
			model: "Primo H8 Turbo"
		},
		{
			regex: "Primo[ _]([^;/)]+)(?: Build|[;)])",
			model: "Primo $1"
		},
		{
			regex: "Walton[ _]([^;/)]+)(?: Build|[;)])",
			model: "$1"
		}
	]
};
var WellcoM = {
	regex: "WELLCOM[ _\\-/]([a-z0-9]+)",
	device: "smartphone",
	model: "$1"
};
var Wexler = {
	regex: "Wexler|(?:ULTIMA 7 TWIST PLUS|TAB10iQ3G|TAB[ _]10Q)(?:[);/ ]|$)|ZEN[ _](?:4\\.[57]|5)",
	device: "tablet",
	models: [
		{
			regex: "(?:Wexler[ _\\-\\.])?ZEN[ _]4\\.5(?:[);/ ]|$)",
			model: "ZEN 4.5",
			device: "smartphone"
		},
		{
			regex: "(?:Wexler[ _\\-\\.])?ZEN[ _]4\\.7(?:[);/ ]|$)",
			model: "ZEN 4.7",
			device: "smartphone"
		},
		{
			regex: "(?:Wexler[ _\\-\\.])?ZEN[ _]5(?:[);/ ]|$)",
			model: "ZEN 5",
			device: "smartphone"
		},
		{
			regex: "(?:Wexler[ _\\-\\.])?TAB[ _]10Q(?:[);/ ]|$)",
			model: "TAB 10Q"
		},
		{
			regex: "TAB10iQ3G(?:[);/ ]|$)",
			model: "TAB 10iQ 3G"
		},
		{
			regex: "Wexler[ _\\-\\.]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Wexler[ _\\-\\.]([^);/]+)(?:[);/]|$)",
			model: "$1"
		},
		{
			regex: "(ULTIMA 7 TWIST PLUS)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Inco = {
	regex: "(?:Inco[ _](Aurora II|Sphere|Plain[_ ]2S?|Plain2 S|Flex 2S|S4|Bloom 2)|(Horizon_S|Horizon \\+))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Inco[ _])?(Plain[_ ]2S?|Horizon_S|Horizon \\+|Aurora II|Flex 2S|S4|Bloom 2)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Plain2 S",
			model: "Plain 2S"
		},
		{
			regex: "Inco Sphere(?:[);/ ]|$)",
			device: "tablet",
			model: "Sphere"
		}
	]
};
var Wink = {
	regex: "(?<!mismart )Wink[_ ]",
	device: "smartphone",
	models: [
		{
			regex: "Wink[_ ]((?:Glory|World|Share|City)(?:[_ ](?:SE|S))?)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Wink[ _](Primo|Highway)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Wiko = {
	regex: "(?:WIKO[_ -])|(?:WIKO-)?CINK_[a-z0-9_]+|(?:WIKO-)?HIGHWAY_[a-z0-9_]+|(?:WIKO-)?(?:Cink([^/;]*)|Highway([^/;]*)|Iggy|Stairway|Rainbow ?(Jam|Lite|Up)?|Darkside|Darkmoon|Darkfull|Darknight|Freddy|FEVER|Jerry[2]?|Sublim|Ozzy|JIMMY|Barry|Birdy|Bloom|Getaway|Goa(?!nna)|Kite|Robby|Lenny[2-9]?|Slide|Sunset[2-9]?|Sunny[2-9]?|Tommy[2-9]?|PULP(?: Fab)?|Wax|HARRY|Ridge(?: Fab)?|U FEEL(?: Prime| Lite)?|U PULSE(?: LITE)?|View2 Go|View XL|View Prime)(?: Plus)?(?: 4G)?(?: Build|$)?|W_(?:C8[06]0|K[346]00|P130|P200|C200SN)|WC300|W-(?:V7[23]0|V8[30]0|P[36]11|K420|K510S?|K130)-(?:TMV|TIM|TVM|EEA|SUN|SWI|OPE|BYT|DU|TH)|WIM Lite|W-K360-TV|W-V600|W-K200|W-U300|U307AS|CINK PEAX 2|HIGHWAY PURE|C210AE|v3913",
	device: "smartphone",
	models: [
		{
			regex: "(?:WIKO-)?Cink Peax 2",
			model: "Cink Peax 2"
		},
		{
			regex: "(?:Wiko-)?Cink([^/;]*) Build",
			model: "Cink$1"
		},
		{
			regex: "(?:WIKO-)?CINK_([a-z0-9_]+)",
			model: "Cink $1"
		},
		{
			regex: "(?:WIKO-)?HIGHWAY PURE",
			model: "Highway Pure"
		},
		{
			regex: "(?:WIKO-)?HIGHWAY STAR",
			model: "Highway Star"
		},
		{
			regex: "(?:Wiko-)?Highway([^/;]*) Build",
			model: "Highway$1"
		},
		{
			regex: "(?:WIKO-)?HIGHWAY_([a-z0-9_]+)",
			model: "Highway $1"
		},
		{
			regex: "(?:WIKO-)?Iggy",
			model: "Iggy"
		},
		{
			regex: "(?:WIKO-)?FEVER",
			model: "Fever"
		},
		{
			regex: "(?:WIKO-)?Stairway",
			model: "Stairway"
		},
		{
			regex: "(?:WIKO-)?Ridge Fab 4G",
			model: "Ridge Fab 4G"
		},
		{
			regex: "(?:WIKO-)?Ridge 4G",
			model: "Ridge 4G"
		},
		{
			regex: "(?:WIKO-)?Ridge",
			model: "Ridge"
		},
		{
			regex: "(?:WIKO-)?Rainbow ([^/;]+) Build",
			model: "Rainbow $1"
		},
		{
			regex: "(?:WIKO-)?Rainbow",
			model: "Rainbow"
		},
		{
			regex: "(?:WIKO-)?Darkside",
			model: "Darkside"
		},
		{
			regex: "(?:WIKO-)?Darkmoon",
			model: "Darkmoon"
		},
		{
			regex: "(?:WIKO-)?Darkfull",
			model: "Darkfull"
		},
		{
			regex: "(?:WIKO-)?Darknight",
			model: "Darknight"
		},
		{
			regex: "(?:WIKO-)?Sublim",
			model: "Sublim"
		},
		{
			regex: "(?:WIKO-)?Ozzy",
			model: "Ozzy"
		},
		{
			regex: "(?:WIKO-)?Barry",
			model: "Barry"
		},
		{
			regex: "(?:WIKO-)?Birdy",
			model: "Birdy"
		},
		{
			regex: "(?:WIKO-)?Bloom",
			model: "Bloom"
		},
		{
			regex: "(?:WIKO-)?JIMMY",
			model: "Jimmy"
		},
		{
			regex: "JERRY MAX",
			model: "Jerry Max"
		},
		{
			regex: "W_K300",
			model: "Jerry 3"
		},
		{
			regex: "W-K420-TVM",
			model: "Jerry 4"
		},
		{
			regex: "(?:WIKO-)?Jerry2",
			model: "Jerry 2"
		},
		{
			regex: "(?:WIKO-)?Jerry",
			model: "Jerry"
		},
		{
			regex: "(?:WIKO-)?Getaway",
			model: "Getaway"
		},
		{
			regex: "(?:WIKO-)?Goa(?!nna)",
			model: "Goa"
		},
		{
			regex: "(?:WIKO-)?Freddy",
			model: "Freddy"
		},
		{
			regex: "(?:WIKO-)?Kite",
			model: "Kite"
		},
		{
			regex: "W_K400",
			model: "Lenny 5"
		},
		{
			regex: "C210AE(?:[);/ ]|$)",
			model: "Life"
		},
		{
			regex: "U307AS(?:[);/ ]|$)",
			model: "Life 2"
		},
		{
			regex: "v3913(?:[);/ ]|$)",
			model: "Kenny"
		},
		{
			regex: "(?:WIKO-)?Lenny[ -_]?3 Max",
			model: "Lenny 3 Max"
		},
		{
			regex: "(?:WIKO-)?Lenny[ -_]?4 Plus",
			model: "Lenny 4 Plus"
		},
		{
			regex: "(?:WIKO-)?Lenny[ -_]?([2-9])",
			model: "Lenny $1"
		},
		{
			regex: "(?:WIKO-)?Lenny",
			model: "Lenny"
		},
		{
			regex: "(?:WIKO-)?Slide",
			model: "Slide"
		},
		{
			regex: "(?:WIKO-)?Sunset2",
			model: "Sunset 2"
		},
		{
			regex: "(?:WIKO-)?Sunset",
			model: "Sunset"
		},
		{
			regex: "(?:WIKO-)?Sunny3",
			model: "Sunny 3"
		},
		{
			regex: "W-K200",
			model: "Sunny 3 Plus"
		},
		{
			regex: "(?:WIKO-)?Sunny2 Plus",
			model: "Sunny 2 Plus"
		},
		{
			regex: "(?:WIKO-)?Sunny2",
			model: "Sunny 2"
		},
		{
			regex: "W-K360-TV",
			model: "Sunny 4 Plus"
		},
		{
			regex: "W-K130-TMV",
			model: "Sunny 4"
		},
		{
			regex: "(?:WIKO-)?Sunny",
			model: "Sunny"
		},
		{
			regex: "(?:W_K600|Tommy3|W_C200SN)",
			model: "Tommy 3"
		},
		{
			regex: "(?:WIKO-)?Tommy2 Plus",
			model: "Tommy 2 Plus"
		},
		{
			regex: "(?:WIKO-)?Tommy2",
			model: "Tommy 2"
		},
		{
			regex: "(?:WIKO-)?Tommy",
			model: "Tommy"
		},
		{
			regex: "(?:WIKO-)?Wax",
			model: "Wax"
		},
		{
			regex: "(?:WIKO-)?HARRY",
			model: "Harry"
		},
		{
			regex: "W-V600",
			model: "Harry 2"
		},
		{
			regex: "(?:WIKO-)?WIM Lite",
			model: "WIM Lite"
		},
		{
			regex: "(?:WIKO-)?Pulp Fab 4G",
			model: "Pulp Fab 4G"
		},
		{
			regex: "(?:WIKO-)?Pulp Fab",
			model: "Pulp Fab"
		},
		{
			regex: "(?:WIKO-)?Pulp 4G",
			model: "Pulp 4G"
		},
		{
			regex: "(?:WIKO-)?Pulp",
			model: "Pulp"
		},
		{
			regex: "(?:WIKO-)?Robby",
			model: "Robby"
		},
		{
			regex: "(?:WIKO-)?U PULSE LITE",
			model: "U Pulse Lite"
		},
		{
			regex: "(?:WIKO-)?U PULSE",
			model: "U Pulse"
		},
		{
			regex: "(?:WIKO-)?U FEEL LITE",
			model: "U Feel Lite"
		},
		{
			regex: "(?:WIKO-)?U FEEL PRIME",
			model: "U Feel Prime"
		},
		{
			regex: "(?:WIKO-)?U FEEL",
			model: "U Feel"
		},
		{
			regex: "(?:WIKO-)?View2 Go",
			model: "View 2 Go"
		},
		{
			regex: "(?:WIKO-)?View XL",
			model: "View XL"
		},
		{
			regex: "(?:WIKO-)?View Prime",
			model: "View Prime"
		},
		{
			regex: "WC300",
			model: "View Lite"
		},
		{
			regex: "W_C800",
			model: "View 2"
		},
		{
			regex: "W_C860",
			model: "View 2 Pro"
		},
		{
			regex: "W_P200",
			model: "View Max"
		},
		{
			regex: "W_P130",
			model: "View Go"
		},
		{
			regex: "W-V800-(TVM|TIM|EEA|OPE|DU)",
			model: "View 3 Lite"
		},
		{
			regex: "W-K130-(?:OPE|EEA)",
			model: "Y50"
		},
		{
			regex: "W-K420-EEA",
			model: "Y50"
		},
		{
			regex: "W-K510-(?:TVM|EEA|OPE|SUN|BYT|TH)|W-K510S-SWI",
			model: "Y60"
		},
		{
			regex: "W-V720-(?:EEA|OPE|SUN)",
			model: "Y80"
		},
		{
			regex: "W-P311-(?:EEA|OPE|TVM)",
			model: "View 3"
		},
		{
			regex: "W-P611-(?:EEA|OPE)",
			model: "View 3 Pro"
		},
		{
			regex: "W-V830-EEA",
			model: "View 4"
		},
		{
			regex: "W-V730-EEA",
			model: "View 4 Lite"
		},
		{
			regex: "W-U300(?:[);/ ]|$)",
			model: "Ride"
		},
		{
			regex: "Wiko ([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Wiko ([^/; ]+)",
			model: "$1"
		}
	]
};
var Wieppo = {
	regex: "Wieppo (S6 Lite|S[658]|E1)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Weimei = {
	regex: "weplus_3",
	device: "smartphone",
	models: [
		{
			regex: "weplus_3",
			model: "WePlus 3"
		}
	]
};
var Wileyfox = {
	regex: "(?:Wileyfox [^/]+)|Swift 2(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Wileyfox Spark \\+",
			model: "Spark +"
		},
		{
			regex: "Wileyfox Spark X",
			model: "Spark X"
		},
		{
			regex: "Wileyfox (Spark|Swift)",
			model: "$1"
		},
		{
			regex: "Wileyfox ([^/)]+)(?: Build|\\))",
			model: "$1"
		},
		{
			regex: "Swift 2 (X|Plus)(?:[);/ ]|$)",
			model: "Swift 2 $1"
		},
		{
			regex: "Swift 2(?:[);/ ]|$)",
			model: "Swift 2"
		}
	]
};
var Wolder = {
	regex: "miSmart|miTab|WIAM \\#24|WOLDER",
	device: "smartphone",
	models: [
		{
			regex: "WIAM \\#24",
			model: "Wiam #24"
		},
		{
			regex: "WOLDER_WIAM_65",
			model: "Wiam #65"
		},
		{
			regex: "miSmart[ \\-_]?([^/]+) Build",
			model: "miSmart $1"
		},
		{
			regex: "miTab[ \\-_]?([^/)]+)(?: Build|\\))",
			device: "tablet",
			model: "miTab $1"
		}
	]
};
var Wolfgang = {
	regex: "AT[ _-]AS([0-9A-Z]+)(?:[);/ ]|$)",
	device: "smartphone",
	model: "AT-AS$1"
};
var Wonu = {
	regex: "Wonu ([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
};
var Woo = {
	regex: "SP5026i-Scorpio",
	device: "smartphone",
	models: [
		{
			regex: "SP5026i-Scorpio",
			model: "Scorpio"
		}
	]
};
var Woxter = {
	regex: "Woxter[ _]([^/;)]+)(?: Build|\\))|Nimbus 101Q",
	device: "tablet",
	models: [
		{
			regex: "Nimbus 101Q",
			model: "Nimbus 101Q"
		},
		{
			regex: "Woxter[ _]([^/;)]+)(?: Build|\\))",
			model: "$1"
		}
	]
};
var POCO = {
	regex: "(?:POCO[ _](?:X[23]|F2 PRO|M[32])|M2010J19C[GI]|M2007J20C[ITG]|M2012K11AG|M2006C3MI|M2004J19PI|M2102J20SG)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "POCO X2(?:[);/ ]|$)",
			model: "X2"
		},
		{
			regex: "(?:M2010J19C[GI]|POCO M3)(?:[);/ ]|$)",
			model: "M3"
		},
		{
			regex: "M2012K11AG(?:[);/ ]|$)",
			model: "F3"
		},
		{
			regex: "M2004J19PI(?:[);/ ]|$)",
			model: "M2"
		},
		{
			regex: "POCO M2 Pro(?:[);/ ]|$)",
			model: "M2 Pro"
		},
		{
			regex: "(?:M2007J20C[GT]|POCO X3 NFC)(?:[);/ ]|$)",
			model: "X3 NFC"
		},
		{
			regex: "(?:M2007J20CI|POCO X3)(?:[);/ ]|$)",
			model: "X3"
		},
		{
			regex: "M2102J20SG(?:[);/ ]|$)",
			model: "X3 Pro"
		},
		{
			regex: "M2006C3MI(?:[);/ ]|$)",
			model: "C3"
		},
		{
			regex: "POCO F2 PRO(?:[);/ ]|$)",
			model: "F2 Pro"
		}
	]
};
var Xiaomi = {
	regex: "Xiaomi(?!/(?:Miui|Mint[ ])Browser)|Mi9 Pro 5G|(?:MI [a-z0-9]+|Mi-4c|MI-One[ _]?[a-z0-9]+|MIX(?: 2S?)?)(?:[);/ ]|$)|HM (?:[^/;]+) (?:Build|MIUI)|(?:2014501|2014011|201481[12378]|201302[23]|2013061) Build|Redmi|POCOPHONE|(?:SHARK )?(KLE|MBU)-[AH]0|SKR-[AH]0|SKW-[AH]0|POCO F1|DLT-[AH]0|MIBOX[234]([_ ]PRO)?|MiTV4[CSX]?|MiTV-(MSSP[01]|AXSO0)|AWM-A0|MI CC 9 Meitu Edition|MiBOX1S|MiTV4A|M2006J10C|M2006C3(?:L[IGC]|LVG|MN?G)|M2007J1(?:7[CGI]|SC)|M2002J9[EG]|HM2014819|WT88047|M2004J(?:7[AB]|19)C|M2012K11C|M2011K2[CG]|M2006C3[ML]II|M2003J15SC|M2007J3S[ICYGP]|M2007J22[CG]|M2101K6[GI]|M2101K(?:[79]AG|7AI)|M2010J19S[CGYI]|HM NOTE 1(?:LTE|W)|MI[_ ]PLAY|XIG01|MI_(NOTE_Pro|5X|4i|(?:A2|8)_Lite)",
	device: "smartphone",
	models: [
		{
			regex: "SKR-[AH]0",
			model: "Black Shark"
		},
		{
			regex: "AWM-A0",
			model: "Black Shark Helo"
		},
		{
			regex: "SKW-[AH]0",
			model: "Black Shark 2"
		},
		{
			regex: "DLT-[AH]0",
			model: "Black Shark 2 Pro"
		},
		{
			regex: "(?:SHARK )?KLE-A0",
			model: "Black Shark 3"
		},
		{
			regex: "(?:SHARK )?KLE-H0",
			model: "Black Shark 3 5G"
		},
		{
			regex: "(?:SHARK )?MBU-H0",
			model: "Black Shark 3 Pro 5G"
		},
		{
			regex: "(?:SHARK )?MBU-A0",
			model: "Black Shark 3 Pro"
		},
		{
			regex: "Xiaomi_2014501|2014501 Build",
			model: "Hongmi 4G"
		},
		{
			regex: "Xiaomi_2014011|2014011 Build",
			model: "Hongmi 1S"
		},
		{
			regex: "Xiaomi_201302[23]|201302[23] Build",
			model: "Hongmi"
		},
		{
			regex: "Xiaomi[_-]2014818|2014818 Build",
			model: "Hongmi 2 3G"
		},
		{
			regex: "Xiaomi_2014817|2014817 Build",
			model: "Hongmi 2"
		},
		{
			regex: "Xiaomi[_-]201481[123]|201481[123] Build",
			model: "Hongmi 2 4G"
		},
		{
			regex: "MI[_ ]PLAY(?:[);/ ]|$)",
			model: "MI Play"
		},
		{
			regex: "Mi 9 SE(?:[);/ ]|$)",
			model: "MI 9 SE"
		},
		{
			regex: "MI CC 9 Meitu Edition(?:[);/ ]|$)",
			model: "MI CC 9"
		},
		{
			regex: "Xiaomi_M2001J2E_TD-LTE(?:[);/ ]|$)",
			model: "MI 10"
		},
		{
			regex: "M2011K2[CG](?:[);/ ]|$)",
			model: "MI 11"
		},
		{
			regex: "M2007J3S[CYP](?:[);/ ]|$)",
			model: "MI 10T 5G"
		},
		{
			regex: "M2007J3S[GI](?:[);/ ]|$)",
			model: "MI 10T Pro 5G"
		},
		{
			regex: "M2007J17G(?:[);/ ]|$)",
			model: "MI 10T Lite 5G"
		},
		{
			regex: "M2007J1SC(?:[);/ ]|$)",
			model: "MI 10 Ultra 5G"
		},
		{
			regex: "(?:M2002J9[EG]|XIG01)(?:[);/ ]|$)",
			model: "MI 10 Lite 5G"
		},
		{
			regex: "M2007J17I(?:[);/ ]|$)",
			model: "MI 10i"
		},
		{
			regex: "M2101K9AG(?:[);/ ]|$)",
			model: "MI 11 Lite"
		},
		{
			regex: "MI[ _]8[ _]Lite(?:[);/ ]|$)",
			model: "MI 8 Lite"
		},
		{
			regex: "Mi 9T Pro(?:[);/ ]|$)",
			model: "MI 9T Pro"
		},
		{
			regex: "Mi9 Pro 5G(?:[);/ ]|$)",
			model: "MI 9 Pro 5G"
		},
		{
			regex: "MI ([89]) Lite(?:[);/ ]|$)",
			model: "MI $1 Lite"
		},
		{
			regex: "MI 5s Plus(?:[);/ ]|$)",
			model: "MI 5s Plus"
		},
		{
			regex: "Xiaomi_2013061|2013061 Build",
			model: "MI 3"
		},
		{
			regex: "Mi-4c(?:[);/ ]|$)",
			model: "MI 4C"
		},
		{
			regex: "MI 4W(?:[);/ ]|$)",
			model: "MI 4W"
		},
		{
			regex: "Mi_4i(?:[);/ ]|$)",
			model: "MI 4i"
		},
		{
			regex: "MI MAX 3(?:[);/ ]|$)",
			model: "MI MAX 3"
		},
		{
			regex: "MI MAX 2(?:[);/ ]|$)",
			model: "MI MAX 2"
		},
		{
			regex: "Mi[ _]A2[ _]Lite(?:[);/ ]|$)",
			model: "MI A2 Lite"
		},
		{
			regex: "MIX 3(?:[);/ ]|$)",
			model: "MI MIX 3"
		},
		{
			regex: "MIX 2S(?:[);/ ]|$)",
			model: "MI MIX 2S"
		},
		{
			regex: "MIX 2(?:[);/ ]|$)",
			model: "MI MIX 2"
		},
		{
			regex: "MIX(?:[);/ ]|$)",
			model: "MI MIX"
		},
		{
			regex: "POCOPHONE[ _]F1|POCO F1",
			model: "Pocophone F1"
		},
		{
			regex: "Redmi 5 Plus",
			model: "Redmi 5 Plus"
		},
		{
			regex: "WT88047(?:[);/ ]|$)",
			model: "Redmi 2"
		},
		{
			regex: "HM2014819(?:[);/ ]|$)",
			model: "Redmi 2 Pro"
		},
		{
			regex: "HM 2A(?:[);/ ]|$)",
			model: "Redmi 2A"
		},
		{
			regex: "HM 1S[CW]?(?:[);/ ]|$)",
			model: "Redmi 1S"
		},
		{
			regex: "HM 1(?:[);/ ]|$)",
			model: "Redmi 1"
		},
		{
			regex: "M2004J7AC(?:[);/ ]|$)",
			model: "Redmi 10X"
		},
		{
			regex: "(?:M2004J19C|M2006C3MII)(?:[);/ ]|$)",
			model: "Redmi 9"
		},
		{
			regex: "M2010J19SI(?:[);/ ]|$)",
			model: "Redmi 9 Power"
		},
		{
			regex: "M2006C3L[GCI](?:[);/ ]|$)",
			model: "Redmi 9A"
		},
		{
			regex: "M2006C3LII(?:[);/ ]|$)",
			model: "Redmi 9i"
		},
		{
			regex: "M2006C3MG(?:[);/ ]|$)",
			model: "Redmi 9C"
		},
		{
			regex: "M2006C3LVG(?:[);/ ]|$)",
			model: "Redmi 9AT"
		},
		{
			regex: "M2010J19S[GY](?:[);/ ]|$)",
			model: "Redmi 9T"
		},
		{
			regex: "M2006C3MNG(?:[);/ ]|$)",
			model: "Redmi 9C NFC"
		},
		{
			regex: "M2004J7BC(?:[);/ ]|$)",
			model: "Redmi 10X Pro"
		},
		{
			regex: "Redmi K20 Pro(?:[);/ ]|$)",
			model: "Redmi K20 Pro"
		},
		{
			regex: "Redmi K30 5G(?:[);/ ]|$)",
			model: "Redmi K30 5G"
		},
		{
			regex: "M2012K11C(?:[);/ ]|$)",
			model: "Redmi K40 Pro"
		},
		{
			regex: "M2006J10C(?:[);/ ]|$)",
			model: "Redmi K30 Ultra"
		},
		{
			regex: "Redmi Y1 Lite(?:[);/ ]|$)",
			model: "Redmi Y1 Lite"
		},
		{
			regex: "MI PAD 4 PLUS(?:[);/ ]|$)",
			model: "Mi Pad 4 Plus",
			device: "tablet"
		},
		{
			regex: "MI PAD 4(?:[);/ ]|$)",
			model: "Mi Pad 4",
			device: "tablet"
		},
		{
			regex: "MI PAD 3(?:[);/ ]|$)",
			model: "Mi Pad 3",
			device: "tablet"
		},
		{
			regex: "MI PAD 2(?:[);/ ]|$)",
			model: "Mi Pad 2",
			device: "tablet"
		},
		{
			regex: "MI PAD(?:[);/ ]|$)",
			model: "Mi Pad",
			device: "tablet"
		},
		{
			regex: "MIBOX3[ _]Pro(?:[);/ ]|$)",
			model: "Mi Box 3 Pro",
			device: "tv"
		},
		{
			regex: "MIBOX([234])(?:[);/ ]|$)",
			model: "Mi Box $1",
			device: "tv"
		},
		{
			regex: "MiBOX1S(?:[);/ ]|$)",
			model: "Mi Box 1S",
			device: "tv"
		},
		{
			regex: "MiTV-MSSP1(?:[);/ ]|$)",
			model: "MiTV 4S",
			device: "tv"
		},
		{
			regex: "(?:MiTV-AXSO0|MiTV4(?:A|-ANSM0)|MiTV-MSSP0)(?:[);/ ]|$)",
			model: "MiTV 4A",
			device: "tv"
		},
		{
			regex: "(MiTV)(4[CSX]|4)(?:[);/ ]|$)",
			model: "$1 $2",
			device: "tv"
		},
		{
			regex: "HM NOTE 1W(?:[);/ ]|$)",
			device: "phablet",
			model: "Redmi Note"
		},
		{
			regex: "HM NOTE 1TD (?:Build|MIUI)",
			device: "phablet",
			model: "Hongmi Note 1TD"
		},
		{
			regex: "HM NOTE 1(?:LTE|S)(?:W|GLOBAL|TD)? (?:Build|MIUI)|HM NOTE 1LTE",
			device: "phablet",
			model: "Redmi Note 4G"
		},
		{
			regex: "Redmi Note 5A Prime",
			model: "Redmi Note 5A Prime",
			device: "phablet"
		},
		{
			regex: "M2010J19SC(?:[);/ ]|$)",
			model: "Redmi Note 9",
			device: "phablet"
		},
		{
			regex: "M2003J15SC(?:[);/ ]|$)",
			model: "Redmi Note 10X",
			device: "phablet"
		},
		{
			regex: "M2007J22G(?:[);/ ]|$)",
			model: "Redmi Note 9T 5G",
			device: "phablet"
		},
		{
			regex: "M2007J22C(?:[);/ ]|$)",
			model: "Redmi Note 9 5G",
			device: "phablet"
		},
		{
			regex: "M2007J17C(?:[);/ ]|$)",
			model: "Redmi Note 9 Pro 5G",
			device: "phablet"
		},
		{
			regex: "M2101K7A[GI]",
			model: "Redmi Note 10",
			device: "phablet"
		},
		{
			regex: "M2101K6[GI]",
			model: "Redmi Note 10 Pro",
			device: "phablet"
		},
		{
			regex: "Redmi Note ([5-9]) Pro(?:[);/ ]|$)",
			model: "Redmi Note $1 Pro",
			device: "phablet"
		},
		{
			regex: "Redmi[ _]Note[ _]([^;/) ]+)?",
			model: "Redmi Note $1",
			device: "phablet"
		},
		{
			regex: "Redmi[ _]([^;/) ]+)?",
			model: "Redmi $1"
		},
		{
			regex: "MI_NOTE_Pro",
			model: "MI Note Pro",
			device: "phablet"
		},
		{
			regex: "Mi Note 10 Pro",
			model: "Mi Note 10 Pro",
			device: "phablet"
		},
		{
			regex: "MI[ _]Note[ _]([^;/) ]+)?",
			model: "MI Note $1",
			device: "phablet"
		},
		{
			regex: "(MI(?:-One)?[ _](?:[^;/]*))Build",
			model: "$1"
		},
		{
			regex: "(MI[ _][a-z0-9]+|MI-One[ _]?[a-z0-9]+)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "HM Note ([^/;]+) (?:Build|MIUI)",
			device: "phablet",
			model: "Note"
		},
		{
			regex: "HM ([^/;]+) (?:Build|MIUI)",
			model: "HM $1"
		},
		{
			regex: "Xiaomi[ _-]([^/;]+)(?: Build|$)",
			model: "$1"
		}
	]
};
var Xion = {
	regex: "XI-CE(?:655|U[48])",
	device: "smartphone",
	models: [
		{
			regex: "XI-CE(655|U[48])",
			model: "CE$1"
		}
	]
};
var Xolo = {
	regex: "Xolo|(?:Q600|Q700s?|Q800|Q1000s|Q1000[ _]Opus|Q1010i|Q2000|Omega[ _]5.[05]|Era5X|Era[ _]2V|Era_4X(?:_2GB)?)(?:[);/ ]|$)|BLACK-1XM",
	device: "smartphone",
	models: [
		{
			regex: "BLACK-1XM",
			model: "Black 1X"
		},
		{
			regex: "Era_?([45])X(?:[);/ ]|$)",
			model: "Era $1X"
		},
		{
			regex: "Era_4X_2GB(?:[);/ ]|$)",
			model: "Era 4X 2GB"
		},
		{
			regex: "Era[ _]2V(?:[);/ ]|$)",
			model: "Era 2V"
		},
		{
			regex: "(Q600 Club|Q600|Q700s?|Q800|Q1000s Plus|Q1000s|Q1000[ _]Opus|Q1010i|Q2000|Omega[ _]5.[05])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Xolo[ _]?([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Xolo[ _]?([a-z0-9_-]+)",
			model: "$1"
		}
	]
};
var Yarvik = {
	regex: "Xenta[ \\-]Tab|Luna TAB|TAB09-410|TAB10-410|TAB07-485|TAB0[78]-200|TAB08-201-3G|TAB9-200|TAB09-211|TAB10-2[01]1|TAB13-201",
	device: "tablet",
	models: [
		{
			regex: "Luna TAB07-920N",
			model: "Luna 7"
		},
		{
			regex: "Luna TAB07-10[01]",
			model: "Luna 7c"
		},
		{
			regex: "Luna TAB274",
			model: "Luna 7c"
		},
		{
			regex: "Luna TAB474",
			model: "Luna 10"
		},
		{
			regex: "Luna TAB10-150",
			model: "Luna 10c"
		},
		{
			regex: "TAB09-410",
			model: "Noble 9.7"
		},
		{
			regex: "TAB10-410",
			model: "Noble 10.1"
		},
		{
			regex: "TAB07-485",
			model: "Noble Mini"
		},
		{
			regex: "Xenta-TAB07-21[01]",
			model: "Xenta 7c"
		},
		{
			regex: "TAB07-200",
			model: "Xenta 7ic"
		},
		{
			regex: "TAB08-200",
			model: "Xenta 8ic"
		},
		{
			regex: "TAB08-201-3G",
			model: "Xenta 8c"
		},
		{
			regex: "TAB9-200",
			model: "Xenta 9.7ic"
		},
		{
			regex: "TAB09-211",
			model: "Xenta 9.7ic+"
		},
		{
			regex: "TAB10-2[01]1",
			model: "Xenta 10ic"
		},
		{
			regex: "TAB13-201",
			model: "Xenta 13c"
		}
	]
};
var Yes = {
	regex: "M631Y|M685Y4|M651G_MY|YES (MPY(?:48|54))",
	device: "smartphone",
	models: [
		{
			regex: "M631Y",
			model: "Altitude"
		},
		{
			regex: "M651G_MY",
			model: "Altitude 2"
		},
		{
			regex: "M685Y4",
			model: "Altitude 3"
		},
		{
			regex: "YES (MPY(?:48|54))",
			model: "$1"
		}
	]
};
var Yezz = {
	regex: "Yezz|ANDY[ _]|(?:4E4|A5EI|LIV1)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "4E4",
			model: "Andy 4E4"
		},
		{
			regex: "Yezz-AC4EI",
			model: "Andy 4EI"
		},
		{
			regex: "YEZZ-A4M",
			model: "Andy A4M"
		},
		{
			regex: "A5EI",
			model: "Andy A5EI"
		},
		{
			regex: "LIV1",
			model: "LIV1"
		},
		{
			regex: "Andy[ _]([A-Z]*[0-9]\\.[0-9][A-Z0-9]*)(?:[ _](LTE))?",
			model: "Andy $1 $2"
		},
		{
			regex: "Andy[ _]([A-Z]*[0-9])([0-9][A-Z0-9]*)(?:[ _](LTE))?",
			model: "Andy $1.$2 $3"
		},
		{
			regex: "Andy[ _]([A-Z]*[0-9][A-Z0-9]+)(?:[ _](LTE))?",
			model: "Andy $1 $2"
		}
	]
};
var Yu = {
	regex: "(?:YU5[05]10[A]?|YU4711|AO5510|YU5050|YU501[14]|YU5551)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "YU5010[A]?(?:[);/ ]|$)",
			model: "Yuphoria"
		},
		{
			regex: "YU5011(?:[);/ ]|$)",
			model: "Yunique 2"
		},
		{
			regex: "YU5050(?:[);/ ]|$)",
			model: "Yutopia"
		},
		{
			regex: "AO5510(?:[);/ ]|$)",
			model: "Yureka"
		},
		{
			regex: "YU5551(?:[);/ ]|$)",
			model: "Yureka 2"
		},
		{
			regex: "YU5510[A]?(?:[);/ ]|$)",
			model: "Yureka Plus"
		},
		{
			regex: "YU4711(?:[);/ ]|$)",
			model: "Yunique"
		},
		{
			regex: "YU5014(?:[);/ ]|$)",
			model: "Ace"
		}
	]
};
var Yuandao = {
	regex: "N101[ _]DUAL(?:[ _]CORE)?(?:[ _]?2|\\|\\|)?(?:[ _]V11)?(?:[);/ ]|$)",
	device: "tablet",
	model: "N101"
};
var Yusun = {
	regex: "Yusun|LA2-T",
	device: "smartphone",
	models: [
		{
			regex: "LA2-T",
			model: "LA2-T"
		},
		{
			regex: "Yusun ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Yusun ([a-z0-9_\\-\\+]+)",
			model: "$1"
		}
	]
};
var Ytone = {
	regex: "YTONE[ _\\-]",
	device: "smartphone",
	models: [
		{
			regex: "YTONE[ _\\-]?([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "YTONE[ _\\-]?([^);/ ]+)",
			model: "$1"
		}
	]
};
var Zonda = {
	regex: "(ZM(?:CK|EM|TFTV|TN)[a-z0-9]+)|ZA409",
	device: "feature phone",
	models: [
		{
			regex: "ZA409",
			device: "smartphone",
			model: "Muzic"
		},
		{
			regex: "(ZM(?:CK|EM|TFTV|TN)[a-z0-9]+)",
			model: "$1"
		}
	]
};
var ZYQ = {
	regex: "ZYQ-Q88|(Q(?:2602|262[436]|638|2688|272[89]|3022|3623|TAB Tab4|328 m9|328|668)|J77|Q[._](?:Up|Boss P99|Dee R09|Good M9|Hi|Hot|Me|Mate R99|Next|TOP-X8|You))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Q638",
			model: "I7"
		},
		{
			regex: "Q2624",
			model: "Cheer 3G"
		},
		{
			regex: "Q2602",
			model: "TV Next"
		},
		{
			regex: "Q2728",
			model: "Zone 3G"
		},
		{
			regex: "Q2729",
			model: "Q2729"
		},
		{
			regex: "Q2688",
			model: "Q2688"
		},
		{
			regex: "Q2623",
			model: "Win 3G"
		},
		{
			regex: "Q2626",
			model: "Care 3G"
		},
		{
			regex: "Q3623",
			model: "Braw 3G"
		},
		{
			regex: "Q3022",
			model: "Q3022"
		},
		{
			regex: "Q328 m9",
			model: "Q328 M9"
		},
		{
			regex: "Q328",
			model: "Speed 3G"
		},
		{
			regex: "Q668",
			model: "TV I4"
		},
		{
			regex: "J77",
			model: "Q.Dee"
		},
		{
			regex: "Q\\.Up C5",
			model: "Q.Up C5"
		},
		{
			regex: "Q\\.Up",
			model: "Q.Up"
		},
		{
			regex: "Q\\.Boss P99",
			model: "Q.Boss P99"
		},
		{
			regex: "Q[._]Dee R09",
			model: "Q.Dee R09"
		},
		{
			regex: "Q\\.Good M9",
			model: "Q.Good M9"
		},
		{
			regex: "Q[._]Hi S1",
			model: "Q.Hi S1"
		},
		{
			regex: "Q[._]Hi",
			model: "Q.Hi"
		},
		{
			regex: "Q[._]Hot P7 3G",
			model: "Q.Hot P7 3G"
		},
		{
			regex: "Q[._]Hot",
			model: "Q.Hot"
		},
		{
			regex: "Q[._]Me Phone7 3G",
			model: "Q.Me Phone 7 3G"
		},
		{
			regex: "Q[._]Me Plus7",
			model: "Q.Me Plus 7"
		},
		{
			regex: "Q[._]Me",
			model: "Q.Me"
		},
		{
			regex: "Q[._]Mate R99",
			model: "Q.Mate R99"
		},
		{
			regex: "Q[._]Next B7",
			model: "Q.Next B7"
		},
		{
			regex: "Q[._]Next J2",
			model: "Q.Next J2"
		},
		{
			regex: "Q[._]TOP-X8",
			model: "Q.Top X8"
		},
		{
			regex: "Q[._]You",
			model: "Q.You"
		},
		{
			regex: "QTAB Tab4",
			model: "QTab Tab4",
			device: "tablet"
		},
		{
			regex: "ZYQ-Q88",
			model: "Q88",
			device: "tablet"
		}
	]
};
var Toshiba$3 = {
	regex: "Toshiba|TSBNetTV/|portalmmm/[12].0 TS|T-01C|T-0[12]D|IS04|IS11T|AT1S0|AT300SE|AT(7-C|10-A|10[PL]E-A|100|200|270|300|330|374|400|470|500|503|570|703|830)",
	device: "smartphone",
	models: [
		{
			regex: "T-01C",
			model: "Regza T-01C"
		},
		{
			regex: "T-01D",
			model: "Regza T-01D"
		},
		{
			regex: "T-02D",
			model: "Regza T-02D"
		},
		{
			regex: "IS04",
			model: "Regza IS04"
		},
		{
			regex: "IS11T",
			model: "Regza IS11T"
		},
		{
			regex: "AT7-C",
			model: "Excite",
			device: "tablet"
		},
		{
			regex: "AT1S0",
			model: "Regza AT1S0",
			device: "tablet"
		},
		{
			regex: "AT300SE",
			model: "Regza AT300SE",
			device: "tablet"
		},
		{
			regex: "AT500a",
			model: "Regza AT500a",
			device: "tablet"
		},
		{
			regex: "AT(100|200|270|300|330|374|400|470|500|503|570|703|830)",
			model: "Regza AT$1",
			device: "tablet"
		},
		{
			regex: "AT10([PL])E-A",
			model: "Excite AT10$1-A",
			device: "tablet"
		},
		{
			regex: "AT10-A",
			model: "Excite AT10-A",
			device: "tablet"
		},
		{
			regex: "TSBNetTV/",
			device: "tv",
			model: ""
		},
		{
			regex: "Toshiba[ /_\\-]?([a-z0-9_ \\-]+) Build",
			model: "$1"
		},
		{
			regex: "Toshiba[ /_\\-]?([a-z0-9_\\-]+)",
			model: "$1"
		},
		{
			regex: "portalmmm/[12].0 (TS[a-z0-9 ]+)",
			model: "$1"
		}
	]
};
var Vivax = {
	regex: "VIVAX|(?:Fly5[_ ]Lite|Fun[_ ]S500|Point_(?:X[12]|X501)|PRO3|32LE77SM|40LE77SM|FUN S1|FUN_S20)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Fly5[_ ]Lite(?:[);/ ]|$)",
			model: "Fly 5 Lite"
		},
		{
			regex: "Point_X([12])(?:[);/ ]|$)",
			model: "Point X$1"
		},
		{
			regex: "Fun[_ ]S500(?:[);/ ]|$)",
			model: "Fun S500"
		},
		{
			regex: "FUN[ _]S(1|20)(?:[);/ ]|$)",
			model: "Fun S$1"
		},
		{
			regex: "VIVAX[ _]Fly3(?:[);/ ]|$)",
			model: "Fly 3"
		},
		{
			regex: "VIVAX[ _]Fly[ _]V1(?:[);/ ]|$)",
			model: "Fly V1"
		},
		{
			regex: "(?:VIVAX )?(Point[ _](?:X551|X501))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "SMART Point X5010(?:[);/ ]|$)",
			model: "Smart Point X5010"
		},
		{
			regex: "VIVAX[_ ]PRO3",
			model: "Pro 3"
		},
		{
			regex: "VIVAX TABLET TPC 802 3G(?:[);/ ]|$)",
			model: "TPC-802 3G"
		},
		{
			regex: "(32LE77SM|40LE77SM)",
			device: "tv",
			model: "$1"
		}
	]
};
var MLS = {
	regex: "IQ(?:0705|L550|1010w?|1012N?|1019N|1025|1380|1401|1436|1452a|1453|1470|1502a|1511|1552|1553|1568|1570|1805N|1806|1808|1810B_M|1832|1850|1890|5017|9610|181011N|E[12]00|EL41|G550|GW516|L30|L5[01]|M801|M1001|N700|P50|R300|S300|S1001|W503|W511T|W553N?|W60[38]|W626|M960|D700|9013_4N)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IQ0705(?:[);/ ]|$)",
			model: "iQTalk Twist"
		},
		{
			regex: "IQL550(?:[);/ ]|$)",
			model: "Notch Lite"
		},
		{
			regex: "IQ1010W?(?:[);/ ]|$)",
			model: "iQTab 10",
			device: "tablet"
		},
		{
			regex: "IQ1012N?(?:[);/ ]|$)",
			model: "iQTab Brave 3G",
			device: "tablet"
		},
		{
			regex: "IQ1025(?:[);/ ]|$)",
			model: "iQTab Action 4G",
			device: "tablet"
		},
		{
			regex: "iQ9013_4N(?:[);/ ]|$)",
			model: "Life 10.1\"",
			device: "tablet"
		},
		{
			regex: "IQ1019N(?:[);/ ]|$)",
			model: "Alu Plus 4G 10.1\"",
			device: "tablet"
		},
		{
			regex: "iQ1805N(?:[);/ ]|$)",
			model: "iQTab Ideal 8.0\"",
			device: "tablet"
		},
		{
			regex: "iQ181011N(?:[);/ ]|$)",
			model: "iQTab Care 8.0\"",
			device: "tablet"
		},
		{
			regex: "IQ1380(?:[);/ ]|$)",
			model: "Brain 3G"
		},
		{
			regex: "IQ1401(?:[);/ ]|$)",
			model: "iQTalk Verse 4G"
		},
		{
			regex: "IQ1436(?:[);/ ]|$)",
			model: "Color mini 4G"
		},
		{
			regex: "IQ1452a(?:[);/ ]|$)",
			model: "TOP-S 4G"
		},
		{
			regex: "IQ1453(?:[);/ ]|$)",
			model: "Trend 4G"
		},
		{
			regex: "IQ1470(?:[);/ ]|$)",
			model: "iQTalk Onyx"
		},
		{
			regex: "IQ1502a(?:[);/ ]|$)",
			model: "iQTalk Flame"
		},
		{
			regex: "IQ1511(?:[);/ ]|$)",
			model: "iQTalk Spicy"
		},
		{
			regex: "IQ1552(?:[);/ ]|$)",
			model: "iQTalk Titan 4G"
		},
		{
			regex: "IQ1553(?:[);/ ]|$)",
			model: "Color 3 4G"
		},
		{
			regex: "IQ1568(?:[);/ ]|$)",
			model: "Range 4G"
		},
		{
			regex: "IQ1570(?:[);/ ]|$)",
			model: "iQTalk Color 5.5 4G"
		},
		{
			regex: "IQ1806(?:[);/ ]|$)",
			model: "iQTab Rose",
			device: "tablet"
		},
		{
			regex: "IQ1808(?:[);/ ]|$)",
			model: "iQTab Master",
			device: "tablet"
		},
		{
			regex: "IQ1810B_M(?:[);/ ]|$)",
			model: "iQTab Novel 3G",
			device: "tablet"
		},
		{
			regex: "IQ1832(?:[);/ ]|$)",
			model: "Jet 3G",
			device: "tablet"
		},
		{
			regex: "IQ1850(?:[);/ ]|$)",
			model: "Diamond 5.2 4G"
		},
		{
			regex: "IQ1890(?:[);/ ]|$)",
			model: "iQTalk Aura"
		},
		{
			regex: "IQ5017(?:[);/ ]|$)",
			model: "Slice 4G"
		},
		{
			regex: "IQ9610(?:[);/ ]|$)",
			model: "Angel 3G",
			device: "tablet"
		},
		{
			regex: "iQM960(?:[);/ ]|$)",
			model: "Angel 3G (2018)",
			device: "tablet"
		},
		{
			regex: "IQG550(?:[);/ ]|$)",
			model: "Style 4G"
		},
		{
			regex: "IQGW516(?:[);/ ]|$)",
			model: "F5"
		},
		{
			regex: "IQE100(?:[);/ ]|$)",
			model: "Energy 4G"
		},
		{
			regex: "iQE200(?:[);/ ]|$)",
			model: "MX 4G"
		},
		{
			regex: "IQEL41(?:[);/ ]|$)",
			model: "Fab 4G"
		},
		{
			regex: "IQL30(?:[);/ ]|$)",
			model: "Status 4G"
		},
		{
			regex: "IQL50(?:[);/ ]|$)",
			model: "More 4G"
		},
		{
			regex: "IQL51(?:[);/ ]|$)",
			model: "Wave 4G"
		},
		{
			regex: "IQM801(?:[);/ ]|$)",
			model: "Brace 2018 4G",
			device: "tablet"
		},
		{
			regex: "IQM1001(?:[);/ ]|$)",
			model: "Level 4G",
			device: "tablet"
		},
		{
			regex: "IQN700(?:[);/ ]|$)",
			model: "Inspire 4G"
		},
		{
			regex: "IQP50(?:[);/ ]|$)",
			model: "Ruby 4G"
		},
		{
			regex: "IQS300(?:[);/ ]|$)",
			model: "DX 4G"
		},
		{
			regex: "IQS1001(?:[);/ ]|$)",
			model: "Vista 4G",
			device: "tablet"
		},
		{
			regex: "IQR300(?:[);/ ]|$)",
			model: "R3 4G"
		},
		{
			regex: "IQW608(?:[);/ ]|$)",
			model: "Regal"
		},
		{
			regex: "iQW603(?:[);/ ]|$)",
			model: "Phab 6.0\"",
			device: "phablet"
		},
		{
			regex: "IQW626(?:[);/ ]|$)",
			model: "D6 4G"
		},
		{
			regex: "IQW511T(?:[);/ ]|$)",
			model: "Liberal"
		},
		{
			regex: "IQW553N?(?:[);/ ]|$)",
			model: "Alu 5.5\""
		},
		{
			regex: "IQW503(?:[);/ ]|$)",
			model: "Flame 4G (2018)"
		},
		{
			regex: "iQD700(?:[);/ ]|$)",
			model: "Color Fingerprint 4G"
		}
	]
};
var Fly = {
	regex: "Fly(?!Flow|touch)|Power Plus 5000|Photo Pro|Slimline|Life (?:Ace|Jet|Sky|Compact 4G|Geo)|FS50[1-9]|FS51[0-8]|FS52[0-9]|FS530|FS55[134]|FS40[1-9]|FS45[1-9]|4FS06|MERIDIAN-|(?:IQ(?!10[134]0)[0-9]{3,}[i]?)[ _]?(?:Quad|Firebird|Quattro|Turbo|Magic)?(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Fly_)?IQ310(?:[);/ ]|$)",
			model: "Panorama",
			device: "tablet"
		},
		{
			regex: "(?:Fly_)?IQ236(?:[);/ ]|$)",
			model: "Victory"
		},
		{
			regex: "Slimline(?:[);/ ]|$)",
			model: "Slimline"
		},
		{
			regex: "Power Plus 5000(?:[);/ ]|$)",
			model: "Power Plus 5000"
		},
		{
			regex: "Photo Pro(?:[);/ ]|$)",
			model: "Photo Pro"
		},
		{
			regex: "Life Ace(?:[);/ ]|$)",
			model: "Life Ace"
		},
		{
			regex: "Life Jet(?:[);/ ]|$)",
			model: "Life Jet"
		},
		{
			regex: "Life Sky(?:[);/ ]|$)",
			model: "Life Sky"
		},
		{
			regex: "Life Geo(?:[);/ ]|$)",
			model: "Life Geo"
		},
		{
			regex: "Life Compact 4G(?:[);/ ]|$)",
			model: "Life Compact 4G"
		},
		{
			regex: "FS506",
			model: "Cirrus 3"
		},
		{
			regex: "FS403",
			model: "Cumulus 1"
		},
		{
			regex: "FS508",
			model: "Cirrus 6"
		},
		{
			regex: "FS511",
			model: "Cirrus 7"
		},
		{
			regex: "FS509",
			model: "Nimbus 9"
		},
		{
			regex: "FS406",
			model: "Stratus 5"
		},
		{
			regex: "FS404",
			model: "Stratus 3"
		},
		{
			regex: "FS504",
			model: "Cirrus 2"
		},
		{
			regex: "FS407",
			model: "Stratus 6"
		},
		{
			regex: "FS401",
			model: "Stratus 1"
		},
		{
			regex: "FS402",
			model: "Stratus 2"
		},
		{
			regex: "FS501",
			model: "Nimbus 3"
		},
		{
			regex: "FS502",
			model: "Cirrus 1"
		},
		{
			regex: "FS507",
			model: "Cirrus 4"
		},
		{
			regex: "FS505",
			model: "Nimbus 7"
		},
		{
			regex: "FS551",
			model: "Nimbus 4"
		},
		{
			regex: "FS514",
			model: "Cirrus 8"
		},
		{
			regex: "FS553",
			model: "Cirrus 9"
		},
		{
			regex: "FS554",
			model: "Power Plus FHD"
		},
		{
			regex: "FS517",
			model: "Cirrus 11"
		},
		{
			regex: "FS516",
			model: "Cirrus 12"
		},
		{
			regex: "FS518",
			model: "Cirrus 13"
		},
		{
			regex: "FS520",
			model: "Selfie 1"
		},
		{
			regex: "FS521",
			model: "Power Plus 1"
		},
		{
			regex: "FS522",
			model: "Cirrus 14"
		},
		{
			regex: "FS523",
			model: "Cirrus 16"
		},
		{
			regex: "FS524",
			model: "Knockout"
		},
		{
			regex: "FS526",
			model: "Power Plus 2"
		},
		{
			regex: "FS527",
			model: "Nimbus 17"
		},
		{
			regex: "FS528",
			model: "Memory Plus"
		},
		{
			regex: "FS529",
			model: "Сhamp"
		},
		{
			regex: "FS530",
			model: "Power Plus XXL"
		},
		{
			regex: "FS454",
			model: "Nimbus 8"
		},
		{
			regex: "FS452",
			model: "Nimbus 2"
		},
		{
			regex: "FS512",
			model: "Nimbus 10"
		},
		{
			regex: "FS510",
			model: "Nimbus 12"
		},
		{
			regex: "FS451",
			model: "Nimbus 1"
		},
		{
			regex: "FS405",
			model: "Stratus 4"
		},
		{
			regex: "FS408",
			model: "Stratus 8"
		},
		{
			regex: "FS409",
			model: "Stratus 9"
		},
		{
			regex: "FS455",
			model: "Nimbus 11"
		},
		{
			regex: "FS456",
			model: "Nimbus 14"
		},
		{
			regex: "FS457",
			model: "Nimbus 15"
		},
		{
			regex: "FS459",
			model: "Nimbus 16"
		},
		{
			regex: "FS458",
			model: "Stratus 7"
		},
		{
			regex: "(?:Fly_)?IQ237(?:[);/ ]|$)",
			model: "Dynamic"
		},
		{
			regex: "(?:Fly_)?IQ238(?:[);/ ]|$)",
			model: "Jazz"
		},
		{
			regex: "(?:Fly_)?IQ240(?:[);/ ]|$)",
			model: "Whizz"
		},
		{
			regex: "(?:Fly_)?IQ255(?:[);/ ]|$)",
			model: "Pride"
		},
		{
			regex: "(?:Fly_)?IQ270(?: Firebird)?(?:[);/ ]|$)",
			model: "Firebird"
		},
		{
			regex: "(?:Fly_)?IQ275(?:[);/ ]|$)",
			model: "Marathon"
		},
		{
			regex: "(?:Fly_)?IQ285(?: Turbo)?(?:[);/ ]|$)",
			model: "Turbo"
		},
		{
			regex: "(?:Fly_)?IQ430(?:[);/ ]|$)",
			model: "Evoke"
		},
		{
			regex: "(?:Fly_)?IQ431(?:[);/ ]|$)",
			model: "Glory"
		},
		{
			regex: "(?:Fly_)?IQ432(?:[);/ ]|$)",
			model: "Era Nano 1"
		},
		{
			regex: "(?:Fly_)?IQ436(?:[);/ ]|$)",
			model: "Era Nano 3"
		},
		{
			regex: "(?:Fly_)?IQ4490(?:[);/ ]|$)",
			model: "Era Nano 4"
		},
		{
			regex: "(?:Fly_)?IQ434(?:[);/ ]|$)",
			model: "Era Nano 5"
		},
		{
			regex: "(?:Fly_)?IQ4406(?:[);/ ]|$)",
			model: "Era Nano 6"
		},
		{
			regex: "(?:Fly_)?IQ436i(?:[);/ ]|$)",
			model: "Era Nano 9"
		},
		{
			regex: "(?:Fly_)?IQ440(?:[);/ ]|$)",
			model: "Energy"
		},
		{
			regex: "(?:Fly_)?IQ4401(?:[);/ ]|$)",
			model: "Era Energy 2"
		},
		{
			regex: "(?:Fly_)?IQ441(?:[);/ ]|$)",
			model: "Radiance"
		},
		{
			regex: "(?:Fly_)?IQ442 Quad(?:[);/ ]|$)",
			model: "Miracle 2"
		},
		{
			regex: "(?:Fly_)?IQ442(?:[);/ ]|$)",
			model: "Miracle"
		},
		{
			regex: "(?:Fly_)?IQ443(?:[);/ ]|$)",
			model: "Trend"
		},
		{
			regex: "(?:Fly_)?IQ444(?: Quattro)?(?:[);/ ]|$)",
			model: "Diamond 2"
		},
		{
			regex: "(?:Fly_)?IQ445(?:[);/ ]|$)",
			model: "Genius"
		},
		{
			regex: "(?:Fly_)?IQ446(?: Magic)?(?:[);/ ]|$)",
			model: "Magic"
		},
		{
			regex: "(?:Fly_)?IQ447(?:[);/ ]|$)",
			model: "Era Life 1"
		},
		{
			regex: "(?:Fly_)?IQ456(?:[);/ ]|$)",
			model: "Era Life 2"
		},
		{
			regex: "(?:Fly_)?IQ4409 Quad(?:[);/ ]|$)",
			model: "Era Life 4"
		},
		{
			regex: "(?:Fly_)?IQ448(?:[);/ ]|$)",
			model: "Chic"
		},
		{
			regex: "(?:Fly_)?IQ449(?:[);/ ]|$)",
			model: "Pronto"
		},
		{
			regex: "(?:Fly_)?IQ450(?:[);/ ]|$)",
			model: "Horizon"
		},
		{
			regex: "(?:Fly_)?IQ450[ _]Quattro(?:[);/ ]|$)",
			model: "Horizon 2"
		},
		{
			regex: "(?:Fly_)?IQ451(?:[);/ ]|$)",
			model: "Vista"
		},
		{
			regex: "(?:Fly_)?IQ452 Quad(?:[);/ ]|$)",
			model: "Ego Vision 1"
		},
		{
			regex: "(?:Fly_)?IQ454(?:[);/ ]|$)",
			model: "Evo Tech 1"
		},
		{
			regex: "(?:Fly_)?IQ4403(?:[);/ ]|$)",
			model: "Energy 3"
		},
		{
			regex: "(?:Fly_)?IQ4404(?:[);/ ]|$)",
			model: "Spark"
		},
		{
			regex: "(?:Fly_)?IQ4410 Quad(?:[);/ ]|$)",
			model: "Phoenix"
		},
		{
			regex: "(?:Fly_)?IQ4411(?:[);/ ]|$)",
			model: "Energy 2"
		},
		{
			regex: "(?:Fly_)?IQ4412 Quad(?:[);/ ]|$)",
			model: "Coral"
		},
		{
			regex: "(?:Fly_)?IQ4413[ _]Quad(?:[);/ ]|$)",
			model: "Evo Chic 3"
		},
		{
			regex: "(?:Fly_)?IQ4414 Quad(?:[);/ ]|$)",
			model: "Evo Tech 3"
		},
		{
			regex: "(?:Fly_)?IQ4415 Quad(?:[);/ ]|$)",
			model: "Era Style 3"
		},
		{
			regex: "(?:Fly_)?IQ4504 Quad(?:[);/ ]|$)",
			model: "Evo Energy 5"
		},
		{
			regex: "(?:Fly_)?IQ([0-9]+[i]? ?(?:Quad|Firebird|Quattro)?)(?:[);/ ]|$)",
			model: "IQ$1"
		},
		{
			regex: "Fly[ _\\-]?([a-z0-9_]+)/",
			model: "$1",
			device: "feature phone"
		},
		{
			regex: "Flylife[ _\\-]?([^/;]+) Build",
			model: "Flylife $1",
			device: "tablet"
		},
		{
			regex: "Fly[ _\\-]?([a-z0-9]+)",
			model: "$1"
		},
		{
			regex: "MERIDIAN-([a-z0-9]+)",
			model: "$1"
		}
	]
};
var FinePower = {
	regex: "FinePower[_ ]?([AB][1-9]|[CD][1-9])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "FinePower[_ ]?([AB][1-9])(?:[);/ ]|$)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "FinePower[_ ]?([CD][1-9])(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Freetel = {
	regex: "(?:FTJ17[AC]00|FTJ152[ABCD]|FTU18A00|FT141B|FT142D(?:_LTEXM)?|FT142A?|FTJ161[AB]|FTJ1[56]2E|FTJ162[BD]|FTE161[GE])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "FTJ152C",
			model: "Samurai Miyabi"
		},
		{
			regex: "FTJ17A00(?:[);/ ]|$)",
			model: "Rei 2 Dual"
		},
		{
			regex: "FTJ17C00(?:[);/ ]|$)",
			model: "Priori 5"
		},
		{
			regex: "FTU18A00(?:[);/ ]|$)",
			model: "Cricket Wave"
		},
		{
			regex: "FTJ161A",
			model: "Musashi"
		},
		{
			regex: "FTE161E",
			model: "Ice 2"
		},
		{
			regex: "FTE161G",
			model: "Ice 2 Plus"
		},
		{
			regex: "FTJ162E",
			model: "Raijin"
		},
		{
			regex: "FT141B",
			model: "Nico"
		},
		{
			regex: "FT142D(?:_LTEXM)?(?:[);/ ]|$)",
			model: "XM"
		},
		{
			regex: "FT142A?",
			model: "Priori 2"
		},
		{
			regex: "FTJ152A",
			model: "Priori 3"
		},
		{
			regex: "FTJ162D",
			model: "Priori 4"
		},
		{
			regex: "FTJ152B",
			model: "Priori 3S LTE"
		},
		{
			regex: "FTJ152D",
			model: "Samurai Kiwami"
		},
		{
			regex: "FTJ162B",
			model: "Samurai Kiwami 2"
		},
		{
			regex: "FTJ161B",
			model: "Samurai Rei"
		},
		{
			regex: "FTJ152E",
			model: "Katana 1"
		}
	]
};
var Zeemi = {
	regex: "ZEEMI[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "ZEEMI[ _-]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "ZEEMI[ _-]([^/;)]+)(?:[);/]|$)",
			model: "$1"
		}
	]
};
var Zenek = {
	regex: "Z5007|Z551[679]|Z6001",
	device: "smartphone",
	models: [
		{
			regex: "Z5517",
			model: "Leopardo"
		},
		{
			regex: "Z6001",
			model: "Libelula"
		},
		{
			regex: "Z5007",
			model: "Oso"
		},
		{
			regex: "Z5519",
			model: "Pingûino"
		},
		{
			regex: "Z5516",
			model: "Zebra"
		}
	]
};
var Zopo = {
	regex: "ZOPO|(?:ZOPO[_ ])?(Flash X3|ZP[0-9]{2,}[^/;]+)(?:\\)| Build)",
	device: "smartphone",
	models: [
		{
			regex: "(?:ZOPO_C2_MOD|ZP998)(?:[);/ ]|$)",
			model: "C2 II"
		},
		{
			regex: "ZOPO 9xxQuad(?:[);/ ]|$)",
			model: "9XX Quad"
		},
		{
			regex: "(?:ZOPO_)?ZP980[+](?:[);/ ]|$)",
			model: "ZP980+"
		},
		{
			regex: "(?:ZOPO_)?ZP980(?:[);/ ]|$)",
			model: "Scorpio"
		},
		{
			regex: "ZP952(?:[);/ ]|$)",
			model: "Speed 7 Plus"
		},
		{
			regex: "ZP951(?:[);/ ]|$)",
			model: "Speed 7"
		},
		{
			regex: "ZP955(?:[);/ ]|$)",
			model: "Speed 8"
		},
		{
			regex: "ZP950[+h]?(?:[);/ ]|$)",
			model: "Leader Max"
		},
		{
			regex: "ZP(?:900H?|910)(?:[);/ ]|$)",
			model: "Leader"
		},
		{
			regex: "ZP(?:800H|810)(?:[);/ ]|$)",
			model: "Libero HD"
		},
		{
			regex: "ZP500[+]?(?:[);/ ]|$)",
			model: "Libero"
		},
		{
			regex: "ZP330(?:[);/ ]|$)",
			model: "Color C"
		},
		{
			regex: "ZP370(?:[);/ ]|$)",
			model: "Color S"
		},
		{
			regex: "ZP5(63|86)(?:[);/ ]|$)",
			model: "Color X"
		},
		{
			regex: "ZP567(?:[);/ ]|$)",
			model: "Color C5i"
		},
		{
			regex: "ZP300[S+]?(?:[);/ ]|$)",
			model: "Field"
		},
		{
			regex: "ZP200[+]?(?:[);/ ]|$)",
			model: "Shining"
		},
		{
			regex: "ZP100(?:[);/ ]|$)",
			model: "Pilot"
		},
		{
			regex: "ZP1790(?:[);/ ]|$)",
			model: "Flash X2"
		},
		{
			regex: "ZP781(?:[);/ ]|$)",
			model: "Flash G5 Plus"
		},
		{
			regex: "(?:ZOPO_)?(Flash X3|X1i|ZP[0-9]{2,}[^/;)]+)(?: Build|\\))",
			model: "$1"
		}
	]
};
var ZTE = {
	regex: "ZTE|AxonPhone|([a-z0-9]+)_USA_Cricket|(?:Blade (?:V0820|L110|L[2357]|L7A|S6|V[6789]|V8Q|V8 SE|V9 VITA|X7|A(310|460|465|475|520|530|602)|V580|V Ultra|Q Lux)|N9[15]8St|NX(?:403A|404H|406E|40[X2]|507J|503A|505J|506J|508J|510J|512J|511J|513J|521J|523J_V1|529J|531J|541J|5[48]9J|551J|563J|569[HJ]|573J|575J|59[157]J|60[1689]J|61[12679]J|62[79]J|65[19]J|907J)|N818S|N951[0579]|N91[38]0|N9101|N913[267]|N952[01]|N9560|N9810|N799D|[UV]9180|[UV]9815|Z(?:233V|331|5031O|559DL|6621O|667T|768G|792|81[25]|818L|82[08]|83[12359]|85[125]|851M|992|(557|71[67]|798|836|861|916)BL|986DL|(232|718|828)TL|(?:233|353|558|717|799|837|862|899|917|963)VL|955A|95[678]|965|97[018]|98[1237]|986U|999|936L)|V769M|Apex2|G (LTE|Lux)|Vec|Z959|V865M|Z3001S|902ZT|KIS II Max|Kis 3|K3DX-V5G|Z930L|Optus X|Blade[ _](A510|A[357] 2019-T|A6 MAX|A0622|X9)|Z3153V|Z836F|Nubia Z(?:9|11)|Ctyon-A9|602ZT|MO-01[JK]|Z963U|402ZT|P545|P609|dandelion|901ZT|A001ZT|Z-01K|UZTE V808|ZR01|ZTG01|K8[37]CA)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "602ZT(?:[);/ ]|$)",
			model: "Libero 2"
		},
		{
			regex: "A001ZT(?:[);/ ]|$)",
			model: "Libero 3"
		},
		{
			regex: "901ZT(?:[);/ ]|$)",
			model: "Libero S10"
		},
		{
			regex: "ZR01(?:[);/ ]|$)",
			model: "Rakuten Big"
		},
		{
			regex: "ZTG01(?:[);/ ]|$)",
			model: "A1"
		},
		{
			regex: "A7020(?:[);/ ]|$)",
			model: "Blade A7s (2020)"
		},
		{
			regex: "ZTE 2050(?:RU)?",
			model: "Blade 20 Smart"
		},
		{
			regex: "902ZT(?:[);/ ]|$)",
			model: "Axon 10 Pro 5G"
		},
		{
			regex: "N799D(?:[);/ ]|$)",
			model: "Blade Eg"
		},
		{
			regex: "Z818L(?:[);/ ]|$)",
			model: "Allstar"
		},
		{
			regex: "Z3001S(?:[);/ ]|$)",
			model: "Quest Plus"
		},
		{
			regex: "Ctyon-A9(?:[);/ ]|$)",
			model: "Ctyon A9"
		},
		{
			regex: "K3DX-V5G(?:[);/ ]|$)",
			model: "V5G"
		},
		{
			regex: "N918St(?:[);/ ]|$)",
			model: "V5S"
		},
		{
			regex: "N958St(?:[);/ ]|$)",
			model: "V5 Max"
		},
		{
			regex: "N9101(?:[);/ ]|$)",
			model: "Imperial"
		},
		{
			regex: "Z963U(?:[);/ ]|$)",
			model: "Imperial Max"
		},
		{
			regex: "N9120(?:[);/ ]|$)",
			model: "Avid"
		},
		{
			regex: "N9130(?:[);/ ]|$)",
			model: "Speed"
		},
		{
			regex: "N9132(?:[);/ ]|$)",
			model: "Prestige"
		},
		{
			regex: "N9136(?:[);/ ]|$)",
			model: "Prestige 2"
		},
		{
			regex: "N9137(?:[);/ ]|$)",
			model: "Tempo X"
		},
		{
			regex: "N9180(?:[);/ ]|$)",
			model: "V5"
		},
		{
			regex: "N9510(?:[);/ ]|$)",
			model: "Warp 4G"
		},
		{
			regex: "N9517(?:[);/ ]|$)",
			model: "Blade Force"
		},
		{
			regex: "Z559DL(?:[);/ ]|$)",
			model: "Blade T2"
		},
		{
			regex: "402ZT(?:[);/ ]|$)",
			model: "Blade Q+"
		},
		{
			regex: "Blade Q Lux(?:[);/ ]|$)",
			model: "Blade Q Lux"
		},
		{
			regex: "N9515(?:[);/ ]|$)",
			model: "Warp Sync"
		},
		{
			regex: "N9519(?:[);/ ]|$)",
			model: "Warp 7"
		},
		{
			regex: "N9520(?:[);/ ]|$)",
			model: "Boost Max"
		},
		{
			regex: "N9521(?:[);/ ]|$)",
			model: "Boost Max+"
		},
		{
			regex: "N9560(?:[);/ ]|$)",
			model: "Max XL"
		},
		{
			regex: "N9810(?:[);/ ]|$)",
			model: "Vital"
		},
		{
			regex: "NX40[X2](?:[);/ ]|$)",
			model: "Nubia Z5 Mini"
		},
		{
			regex: "NX(403[AE]|406E|404H)(?:[);/ ]|$)",
			model: "Nubia Z5S Mini"
		},
		{
			regex: "NX503A(?:[);/ ]|$)",
			model: "Nubia Z5S"
		},
		{
			regex: "NX506J(?:[);/ ]|$)",
			model: "Nubia Z7"
		},
		{
			regex: "NX507J(?:[);/ ]|$)",
			model: "Nubia Z7 Mini"
		},
		{
			regex: "NX505J(?:[);/ ]|$)",
			model: "Nubia Z7 Max"
		},
		{
			regex: "NX508J(?:[);/ ]|$)",
			model: "Nubia Z9"
		},
		{
			regex: "(NX5[12]1J|Nubia Z9 mini)(?:[);/ ]|$)",
			model: "Nubia Z9 Mini"
		},
		{
			regex: "(NX510J|Nubia Z9 Max)(?:[);/ ]|$)",
			model: "Nubia Z9 Max"
		},
		{
			regex: "NX512J(?:[);/ ]|$)",
			model: "Nubia Z9 Max Dual"
		},
		{
			regex: "NX531J(?:[);/ ]|$)",
			model: "Nubia Z11"
		},
		{
			regex: "NX523J_V1",
			model: "Nubia Z11 Max"
		},
		{
			regex: "(?:NX549J|Nubia Z11 mini S)(?:[);/ ]|$)",
			model: "Nubia Z11 Mini S"
		},
		{
			regex: "(?:NX529J|Nubia Z11 mini)(?:[);/ ]|$)",
			model: "Nubia Z11 Mini"
		},
		{
			regex: "NX606J(?:[);/ ]|$)",
			model: "Nubia Z18"
		},
		{
			regex: "NX616J(?:[);/ ]|$)",
			model: "Nubia Z18S"
		},
		{
			regex: "NX611J(?:[);/ ]|$)",
			model: "Nubia Z18 Mini"
		},
		{
			regex: "NX551J(?:[);/ ]|$)",
			model: "Nubia M2"
		},
		{
			regex: "NX563J(?:[);/ ]|$)",
			model: "Nubia Z17"
		},
		{
			regex: "NX569[HJ](?:[);/ ]|$)",
			model: "Nubia Z17 Mini"
		},
		{
			regex: "NX589J(?:[);/ ]|$)",
			model: "Nubia Z17 Mini S"
		},
		{
			regex: "NX591J(?:[);/ ]|$)",
			model: "Nubia Z17 Lite"
		},
		{
			regex: "NX595J(?:[);/ ]|$)",
			model: "Nubia Z17S"
		},
		{
			regex: "NX612J(?:[);/ ]|$)",
			model: "Nubia V18"
		},
		{
			regex: "NX627J",
			model: "Nubia Z20"
		},
		{
			regex: "NX513J(?:[);/ ]|$)",
			model: "Nubia My Prague"
		},
		{
			regex: "NX601J(?:[);/ ]|$)",
			model: "Nubia X6"
		},
		{
			regex: "NX609J(?:[);/ ]|$)",
			model: "Nubia Red Magic"
		},
		{
			regex: "NX659J(?:[);/ ]|$)",
			model: "Nubia Red Magic 5G"
		},
		{
			regex: "NX651J(?:[);/ ]|$)",
			model: "Nubia Play"
		},
		{
			regex: "NX619J(?:[);/ ]|$)",
			model: "Nubia Red Magic Mars"
		},
		{
			regex: "NX629J(?:[);/ ]|$)",
			model: "Nubia Red Magic 3"
		},
		{
			regex: "NX573J",
			model: "Nubia M2 Lite"
		},
		{
			regex: "NX907J(?:[);/ ]|$)",
			model: "Nubia M2 Play"
		},
		{
			regex: "NX541J",
			model: "Nubia N1"
		},
		{
			regex: "NX597J",
			model: "Nubia N1 Lite"
		},
		{
			regex: "NX575J",
			model: "Nubia N2"
		},
		{
			regex: "NX6(08|17)J(?:[);/ ]|$)",
			model: "Nubia N3"
		},
		{
			regex: "[UV]9180(?:[);/ ]|$)",
			model: "V5 Red Bull"
		},
		{
			regex: "[UV]9815(?:[);/ ]|$)",
			model: "Grand Memo LTE"
		},
		{
			regex: "V779M",
			model: "Joey Jump 2"
		},
		{
			regex: "V807",
			model: "Blade C"
		},
		{
			regex: "V809",
			model: "Blade C2"
		},
		{
			regex: "ZTE_Blade_C2_Plus",
			model: "Blade C2 Plus"
		},
		{
			regex: "Blade G Plus",
			model: "Blade G Plus"
		},
		{
			regex: "ZTE_Blade_III",
			model: "Blade III"
		},
		{
			regex: "(?:ZTE_)?V829",
			model: "Blade G Pro"
		},
		{
			regex: "V882",
			model: "Lord"
		},
		{
			regex: "V967S",
			model: "Grand X2"
		},
		{
			regex: "V970M?|V987",
			model: "Grand X"
		},
		{
			regex: "Z959(?:[);/ ]|$)",
			model: "Grand X3"
		},
		{
			regex: "V8000",
			model: "Nova 4"
		},
		{
			regex: "Z95[67]",
			model: "Grand X4"
		},
		{
			regex: "Z987",
			model: "Grand X Max+"
		},
		{
			regex: "(?:ZTE_)?Grand[ _]Era",
			model: "Grand Era"
		},
		{
			regex: "V788D",
			model: "Kis Plus"
		},
		{
			regex: "Z331(?:[);/ ]|$)",
			model: "Z331"
		},
		{
			regex: "N818S(?:[);/ ]|$)",
			model: "N818S"
		},
		{
			regex: "Z5031O(?:[);/ ]|$)",
			model: "Optus X Spirit 2"
		},
		{
			regex: "P545(?:[);/ ]|$)",
			model: "Optus X Power 2"
		},
		{
			regex: "P609(?:[);/ ]|$)",
			model: "Optus X Wave"
		},
		{
			regex: "Optus X Start(?:[);/ ]|$)",
			model: "Optus X Start"
		},
		{
			regex: "BA520(?:[);/ ]|$)",
			model: "Blade A520"
		},
		{
			regex: "Blade (A(0620|310|321|452|460|462|465|475|510|512|52[012]|530|531|602|612|910)|L[12]10|L130|V0730|V0800|V580|V1000)(?:[);/ ]|$)",
			model: "Blade $1"
		},
		{
			regex: "Blade L2 Plus(?:[);/ ]|$)",
			model: "Blade L2 Plus"
		},
		{
			regex: "(?:ZTE_)?Blade[ _]L2(?:[);/ ]|$)",
			model: "Blade L2"
		},
		{
			regex: "Blade L3 Plus(?:[);/ ]|$)",
			model: "Blade L3 Plus"
		},
		{
			regex: "Blade L3 Apex(?:[);/ ]|$)",
			model: "Blade L3 Apex"
		},
		{
			regex: "Blade L3(?:[);/ ]|$)",
			model: "Blade L3"
		},
		{
			regex: "Blade L5 Plus(?:[);/ ]|$)",
			model: "Blade L5 Plus"
		},
		{
			regex: "Blade L5(?:[);/ ]|$)",
			model: "Blade L5"
		},
		{
			regex: "Blade L6(?:[);/ ]|$)",
			model: "Blade L6"
		},
		{
			regex: "Blade L7A(?:[);/ ]|$)",
			model: "Blade L7A"
		},
		{
			regex: "Blade L7(?:[);/ ]|$)",
			model: "Blade L7"
		},
		{
			regex: "Blade L8(?:RU)?(?:[);/ ]|$)",
			model: "Blade L8"
		},
		{
			regex: "Blade A([357]) (20(?:19|20))",
			model: "Blade A$1 ($2)"
		},
		{
			regex: "Blade A3 Lite(?:[);/ ]|$)",
			model: "Blade A3 Lite"
		},
		{
			regex: "BLADE A0622(?:[);/ ]|$)",
			model: "Blade A6"
		},
		{
			regex: "BLADE A6 MAX(?:[);/ ]|$)",
			model: "Blade A6 Max"
		},
		{
			regex: "Blade S6 Plus(?:[);/ ]|$)",
			model: "Blade S6 Plus"
		},
		{
			regex: "Blade S6(?:[);/ ]|$)",
			model: "Blade S6"
		},
		{
			regex: "T920(?:[);/ ]|$)",
			model: "Blade S7"
		},
		{
			regex: "BLADE V Ultra(?:[);/ ]|$)",
			model: "Blade V Ultra"
		},
		{
			regex: "Blade V6 MAX(?:[);/ ]|$)",
			model: "Blade V6 Max"
		},
		{
			regex: "Blade V6 Plus(?:[);/ ]|$)",
			model: "Blade V6 Plus"
		},
		{
			regex: "Blade (?:V7 Lite|V0720)(?:[);/ ]|$)",
			model: "Blade V7 Lite"
		},
		{
			regex: "Blade V([67])(?:[);/ ]|$)",
			model: "Blade V$1"
		},
		{
			regex: "Blade X([79])(?:[);/ ]|$)",
			model: "Blade X$1"
		},
		{
			regex: "Blade V8Q(?:[);/ ]|$)",
			model: "Blade V8Q"
		},
		{
			regex: "Blade V8 SE(?:[);/ ]|$)",
			model: "Blade V8 SE"
		},
		{
			regex: "Blade V(9|10) Vita(?:[);/ ]|$)",
			model: "Blade V$1 Vita"
		},
		{
			regex: "Blade V([89]|10)(?:[);/ ]|$)",
			model: "Blade V$1"
		},
		{
			regex: "BLADE V0820(?:[);/ ]|$)",
			model: "Blade V8 Lite"
		},
		{
			regex: "BLADE V0850(?:[);/ ]|$)",
			model: "Blade V8 Mini"
		},
		{
			regex: "(?:Blade[ _])?(Apex2|G (LTE|Lux)|Vec|A510)",
			model: "Blade $1"
		},
		{
			regex: "Z768G(?:[);/ ]|$)",
			model: "Midnight"
		},
		{
			regex: "Z820",
			model: "Obsidian"
		},
		{
			regex: "Z986U",
			model: "Blade Max 3"
		},
		{
			regex: "Z971",
			model: "Blade Spark"
		},
		{
			regex: "Z978",
			model: "Blade V8 Pro"
		},
		{
			regex: "Z839",
			model: "Blade Vantage"
		},
		{
			regex: "Z3153V",
			model: "Blade Vantage 2"
		},
		{
			regex: "Z930L",
			model: "Unico LTE"
		},
		{
			regex: "Z965",
			model: "Blade X"
		},
		{
			regex: "Z981",
			model: "Blade Z Max Pro"
		},
		{
			regex: "Z982",
			model: "Blade Z Max"
		},
		{
			regex: "Z983",
			model: "Blade X Max"
		},
		{
			regex: "Z717[BV]L(?:[);/ ]|$)",
			model: "Citrine LTE"
		},
		{
			regex: "Z233VL(?:[);/ ]|$)",
			model: "Cymbal-C LTE"
		},
		{
			regex: "Z233V",
			model: "Cymbal LTE"
		},
		{
			regex: "Z232TL",
			model: "Cymbal-G LTE"
		},
		{
			regex: "Z353VL",
			model: "Cymbal-T LTE"
		},
		{
			regex: "Z718TL",
			model: "Jasper LTE"
		},
		{
			regex: "KIS II Max",
			model: "Kis II Max"
		},
		{
			regex: "Kis 3",
			model: "Kis 3"
		},
		{
			regex: "(?:Z798BL|Z799VL)(?:[);/ ]|$)",
			model: "Majesty Pro LTE"
		},
		{
			regex: "Z899VL",
			model: "Majesty Pro Plus LTE"
		},
		{
			regex: "Z828TL",
			model: "Midnight Pro LTE"
		},
		{
			regex: "(?:ZTE-)?Z792",
			model: "Fanfare"
		},
		{
			regex: "(?:ZTE-)?Z812",
			model: "Maven"
		},
		{
			regex: "Z815",
			model: "Fanfare 2"
		},
		{
			regex: "Z831",
			model: "Maven 2"
		},
		{
			regex: "Z832",
			model: "Sonata 3"
		},
		{
			regex: "Z835",
			model: "Maven 3"
		},
		{
			regex: "Z851(?:[);/ ]|$)",
			model: "Prelude Plus"
		},
		{
			regex: "Z851M",
			model: "Overture 3"
		},
		{
			regex: "Z852",
			model: "Fanfare 3"
		},
		{
			regex: "Z828",
			model: "Avid Plus"
		},
		{
			regex: "Z855",
			model: "Avid 4"
		},
		{
			regex: "Z833",
			model: "Avid TRIO"
		},
		{
			regex: "(?:Z836BL|Z837VL|Z836F)(?:[);/ ]|$)",
			model: "ZFive 2 LTE"
		},
		{
			regex: "Z558VL",
			model: "ZFive C LTE"
		},
		{
			regex: "Z557BL",
			model: "ZFive G LTE"
		},
		{
			regex: "(?:Z861BL|Z862VL)(?:[);/ ]|$)",
			model: "ZFive L LTE"
		},
		{
			regex: "Z916BL",
			model: "ZMax Grand LTE"
		},
		{
			regex: "Z917VL",
			model: "ZMax Champ LTE"
		},
		{
			regex: "(?:Z958|Z955A)(?:[);/ ]|$)",
			model: "ZMax 2"
		},
		{
			regex: "dandelion(?:[);/ ]|$)",
			model: "ZMax 3"
		},
		{
			regex: "Z963VL",
			model: "Max Duo LTE"
		},
		{
			regex: "Z970",
			model: "ZMax Z970"
		},
		{
			regex: "Z986DL",
			model: "MAX Blue LTE"
		},
		{
			regex: "(?:ZTE[-_])?Z992",
			model: "Avail 2"
		},
		{
			regex: "(?:Z999|Z-01K)(?:[);/ ]|$)",
			model: "Axon M"
		},
		{
			regex: "B2016",
			model: "Axon Mini"
		},
		{
			regex: "A2015",
			model: "Axon Tianji"
		},
		{
			regex: "A2017[GU]?",
			model: "Axon 7"
		},
		{
			regex: "A2018",
			model: "Axon 7s"
		},
		{
			regex: "A2019G Pro",
			model: "Axon Pro"
		},
		{
			regex: "B2017G",
			model: "Axon 7 Mini"
		},
		{
			regex: "A2020G? Pro(?:[);/ ]|$)",
			model: "Axon 10 Pro"
		},
		{
			regex: "Z667T",
			model: "Zinger"
		},
		{
			regex: "V?975|geek",
			model: "Geek"
		},
		{
			regex: "Z716BL",
			model: "Citrine LTE"
		},
		{
			regex: "X500",
			model: "Score"
		},
		{
			regex: "X501",
			model: "Groove"
		},
		{
			regex: "(?:ZTE-)?G-X991",
			model: "Rio"
		},
		{
			regex: "F-450",
			model: "Adamant"
		},
		{
			regex: "Z936L(?:[);/ ]|$)",
			model: "Lever"
		},
		{
			regex: "MO-01[JK](?:[);/ ]|$)",
			model: "Mono"
		},
		{
			regex: "V865M(?:[);/ ]|$)",
			model: "V865M"
		},
		{
			regex: "Z6621O(?:[);/ ]|$)",
			model: "Optus X Vista"
		},
		{
			regex: "V769M(?:[);/ ]|$)",
			model: "Leo Q2"
		},
		{
			regex: "K83CA(?:[);/ ]|$)",
			device: "tablet",
			model: "Grand X View 3"
		},
		{
			regex: "K87CA(?:[);/ ]|$)",
			device: "tablet",
			model: "Grand X View 4"
		},
		{
			regex: "AxonPhone ([^;/]+) Build",
			model: "AxonPhone $1"
		},
		{
			regex: "([a-z0-9]+)_USA_Cricket",
			model: "$1"
		},
		{
			regex: "ZTE[- ](V98|V96A|V81|V70)(?:[);/ ]|$)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "ZTE[- ]([a-z0-9\\-_ ]+) Build",
			model: "$1"
		},
		{
			regex: "ZTE-(?:G |G-)?([a-z0-9 _]+)",
			model: "$1"
		},
		{
			regex: "U?ZTE[ _]([a-z0-9]+)",
			model: "$1"
		}
	]
};
var Zuum = {
	regex: "Zuum[ _-]|(?:Akus Z|COVET|MAGNO|ONIX S|STEDI|STELLAR(?:[ _](?:Z|PRO|[MP]1))?|GRAVITY Z|AURA X|COVET_PRO_LITE|RONI)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Akus Z",
			model: "Akus Z"
		},
		{
			regex: "COVET_PRO_LITE",
			model: "Covet Pro Lite"
		},
		{
			regex: "COVET PRO",
			model: "Covet Pro"
		},
		{
			regex: "COVET( Z)?",
			model: "Covet$1"
		},
		{
			regex: "MAGNO PLUS",
			model: "Magno Plus"
		},
		{
			regex: "MAGNO( C)?",
			model: "Magno$1"
		},
		{
			regex: "ONIX S",
			model: "Onix S"
		},
		{
			regex: "STEDI",
			model: "Stedi"
		},
		{
			regex: "STELLAR PRO",
			model: "Stellar Pro"
		},
		{
			regex: "STELLAR PLUS",
			model: "Stellar Plus"
		},
		{
			regex: "STELLAR ([MP]1|Z)",
			model: "Stellar $1"
		},
		{
			regex: "STELLAR MINI",
			model: "Stellar Mini"
		},
		{
			regex: "STELLAR MINI",
			model: "Stellar Mini"
		},
		{
			regex: "STELLAR",
			model: "Stellar"
		},
		{
			regex: "GRAVITY Z",
			model: "Gravity Z"
		},
		{
			regex: "AURA X",
			model: "Aura X"
		},
		{
			regex: "RONI",
			model: "Roni"
		},
		{
			regex: "Zuum[ _-]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Zuum[ _-]?([^;/)]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Zen = {
	regex: "(Admire[_ ][^/;]+|Cinemax[^/;)]+)(?:Build|\\))|AdmireGlam",
	device: "smartphone",
	models: [
		{
			regex: "AdmireGlam(?:[);/ ]|$)",
			model: "Admire Glam"
		},
		{
			regex: "(Admire[_ ][^/;]+|Cinemax[^/;)]+)(?:Build|\\))",
			model: "$1"
		}
	]
};
var Zync = {
	regex: "ZYNC|(Cloud Z5|Z1000|Z18|Z99|Z99[_ ][23]G|Z99|Z900[_ ]Plus|Z909|Z930[+]|Z930)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(Z18| DuZ99al Core|Z99[_ ][23]G|Z99 Dual Core|Z99|Z900[_ ]Plus|Z909|Z930[+]|Z930)",
			model: "$1"
		},
		{
			regex: "(Z1000[^/;]+)Build",
			model: "$1"
		},
		{
			regex: "Cloud (Z5)",
			model: "Cloud $1"
		},
		{
			regex: "ZYNC Cloud[ _]([^;]+)Build",
			model: "Cloud $1"
		},
		{
			regex: "ZYNC[ _]([^;]+)Build",
			model: "$1"
		}
	]
};
var Lemhoov = {
	regex: "Lemhoov",
	device: "smartphone",
	models: [
		{
			regex: "Lemhoov[ _-]([^/;]+) Build",
			model: "$1"
		}
	]
};
var MTC$1 = {
	regex: "MTC[ _](968|97[82]|970|982[OT]?|1078)|(?:MTC[_ ])?SMART[ _]?(?:Race[2]?|Sprint|Run|Surf[2]?)[ _]4G|MTC975|Smart_(?:LINE|Light)|MTC[ _]SMART[ _](?:Run|Start_2)|Redbox Mini 5\\(MTS\\)",
	device: "smartphone",
	models: [
		{
			regex: "MTC[ _]?(97[258]|970[H]?|982[OT]?|968)",
			model: "$1"
		},
		{
			regex: "MTC[ _](1078)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "SMART[ _]Race[ _]4G",
			model: "Smart Race 4G"
		},
		{
			regex: "SMART[ _]Race2[ _]4G",
			model: "Smart Race 2 4G"
		},
		{
			regex: "(?:MTC_)?SMART[ _]Sprint[ _]4G",
			model: "Smart Sprint 4G"
		},
		{
			regex: "(?:MTC_)?SMART[ _]Start_2",
			model: "Smart Start 2"
		},
		{
			regex: "Smart_LINE",
			model: "Smart Line"
		},
		{
			regex: "Smart_Light",
			model: "Smart Light"
		},
		{
			regex: "SMART[ _]?Run(?:[ _]4G)?",
			model: "Smart Run 4G"
		},
		{
			regex: "SMART[ _]Surf2[ _]4G",
			model: "Smart Surf 2 4G"
		},
		{
			regex: "SMART[ _]Surf[ _]4G",
			model: "Smart Surf 4G"
		},
		{
			regex: "Redbox Mini 5\\(MTS\\)",
			device: "tv",
			model: "Redbox Mini 5"
		}
	]
};
var MegaFon = {
	regex: "MegaFon|MFLoginPh|MegLogPh|(MFLogin[34]T?|MS3B|SP-A5|SP-A20i)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "MFLoginPh|MegLogPh",
			model: "Login+"
		},
		{
			regex: "MFLogin4",
			model: "Login 4 LTE"
		},
		{
			regex: "MFLogin3T|MegaFon Login 3",
			model: "Login 3",
			device: "tablet"
		},
		{
			regex: "MS3B|Megafon Optima",
			model: "Optima"
		},
		{
			regex: "SP-A20i",
			model: "Mint"
		},
		{
			regex: "(SP-A5)",
			model: "$1"
		}
	]
};
var Inoi = {
	regex: "INOI",
	device: "smartphone",
	models: [
		{
			regex: "INOI 2 Lite 2019",
			model: "2 Lite (2019)"
		},
		{
			regex: "INOI ([257]) (2019|202[01])(?:[);/ ]|$)",
			model: "$1 ($2)"
		},
		{
			regex: "INOI[_ ]([^);/]+)(?: Build|[;)])",
			model: "$1"
		}
	]
};
var Vertex = {
	regex: "(?:Luck|Lion_Dual|V709X|Tab [43]G (?:7-2|8-1|10-1)|Pro_P3[01]0_4G|Lion_DC|Baccara|Eagle[ _]4G|ImpressMAX)(?:[);/ ]|$)|Impress[ _]([^;/]+)(?:Build|\\))",
	device: "smartphone",
	models: [
		{
			regex: "(Lion_Dual|Lion_DC|Baccara|Eagle[ _]4G|Luck)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "ImpressMAX(?:[);/ ]|$)",
			model: "Impress Max"
		},
		{
			regex: "Pro_P(3[01]0)_4G(?:[);/ ]|$)",
			model: "Pro P$1 4G"
		},
		{
			regex: "(Impress[ _]([^;/]+))(?:Build|\\))",
			model: "$1"
		},
		{
			regex: "(V709X)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Tab ([43])G ([78]|10)-([21])",
			device: "tablet",
			model: "Tab $1G $2.$3\""
		}
	]
};
var Unknown = {
	regex: "WebTV/(\\d+\\.\\d+)",
	device: "tv",
	model: "Web TV"
};
var Starway = {
	regex: "Andromeda[ _]S(707|84[05]|850|8)(?:[);/ ]|$)",
	device: "tablet",
	model: "Andromeda S$1"
};
var Savio = {
	regex: " (TB-PO1|TB-B01|TB-G01)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Simbans = {
	regex: "TangoTab|Presto[ )]|Ultimax|Valumax|S72-B|SX2W",
	device: "tablet",
	models: [
		{
			regex: "TangoTab",
			model: "TangoTab"
		},
		{
			regex: "Ultimax",
			model: "Ultimax"
		},
		{
			regex: "Valumax",
			model: "Valumax"
		},
		{
			regex: "Presto",
			model: "Presto"
		},
		{
			regex: "S72-B",
			model: "S72-B"
		},
		{
			regex: "SX2W",
			model: "SX2W"
		}
	]
};
var MYFON = {
	regex: "MYPAD7s",
	device: "tablet",
	model: "My Pad 7s"
};
var Xiaolajiao = {
	regex: "(LA2-(?:L|S[N]?)|HLA Note3|20190416Q|20170608S|20180322D)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "HLA Note3(?:[);/ ]|$)",
			model: "Red Pepper Note 3"
		},
		{
			regex: "(LA2-(?:L|S[N]?))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(20190416Q)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "20170608S(?:[);/ ]|$)",
			model: "Red Pepper Plus"
		},
		{
			regex: "20180322D(?:[);/ ]|$)",
			model: "E Sports"
		}
	]
};
var Ritmix = {
	regex: "(RMD[-_](?:10(?:2[689]|30|5[089])|1121|75[017]|726|85[57]|870)|RMP-(?:450|50[56]|530|600))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "RMD[-_](10(?:2[689]|30|5[089])|1121|75[017]|726|85[57]|870)(?:[);/ ]|$)",
			model: "RMD-$1"
		},
		{
			regex: "RMP[-_](450|50[56]|530|600)(?:[);/ ]|$)",
			model: "RMP-$1",
			device: "smartphone"
		}
	]
};
var NEXBOX = {
	regex: "(MXQ|MXQ-Pro)-NEXBOX|NEXBOX-([^) ]+)",
	device: "tv",
	models: [
		{
			regex: "MXQ-Pro-NEXBOX",
			model: "MXQ Pro"
		},
		{
			regex: "MXQ-NEXBOX",
			model: "MXQ"
		},
		{
			regex: "NEXBOX-([^) ]+)",
			model: "$1"
		}
	]
};
var True = {
	regex: " TRUE BEYOND TAB 3G|SMART[ _](MAX 4.0 PLUS|4G[ _](?:GEN C [45].[05]|Champion|Speedy 5.0 Plus|Speedy[_ ]5inch|P1))",
	device: "smartphone",
	models: [
		{
			regex: "SMART MAX 4.0 PLUS",
			model: "Smart Max 4.0 Plus"
		},
		{
			regex: "SMART 4G Gen C ([45].[05])",
			model: "Smart 4G Gen C $1\""
		},
		{
			regex: "SMART 4G Speedy 5.0 Plus",
			model: "Smart 4G Speedy 5.0 Plus"
		},
		{
			regex: "SMART[ _]4G[_ ]Speedy[_ ]5inch",
			model: "Smart 4G Speedy 5"
		},
		{
			regex: "SMART[ _]4G[_ ]Champion",
			model: "Smart 4G Champion"
		},
		{
			regex: "SMART[ _]4G[_ ]P1 Prime",
			model: "Smart 4G P1 Prime"
		},
		{
			regex: "SMART[ _]4G[_ ]P1",
			model: "Smart 4G P1"
		},
		{
			regex: "TRUE BEYOND TAB 3G",
			model: "Beyond Tab 3G"
		}
	]
};
var Yandex = {
	regex: "(YNDX-?000SB)(?:[);/ ]|$)",
	device: "smartphone",
	model: "YNDX-000SB"
};
var FORME = {
	regex: "FORME[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "FORME[ _-]F520(?:[);/ ]|$)",
			model: "Forever"
		},
		{
			regex: "FORME[ _-](A[35]7|R7S?|P6)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Shuttle = {
	regex: "(PNT-704[025])(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var BDF = {
	regex: "(BDF[- ](?:819|P10|K107H|KT107|MT6753|X20)|K960N_MT(?:6580|6753)(?:_32_N)?)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "BDF[- ](819|P10|K107H|KT107|MT6753|X20)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "K960N_MT(6580|6753)(_32_N)?(?:[);/ ]|$)",
			model: "BK960N MT$1"
		}
	]
};
var Highscreen = {
	regex: "HIGHSCREEN|(Easy[- ]Power(?:[- ]Pro)?|Pure[_ ](?:Power|F)|Power Ice(?: Max)?|Easy[_ ]([SFL]|XL)(?:_Pro)?|Razar_Pro|Power Rage(?: Evo)?|Zera-S-Power|Zera[ _][UFS]|Power[ _]?Five[ matrixstyle _]?(?:Pro|Evo|Max|Max(?:Lite|2))|PowerFour|BOOST II(?:se)?|Fest(?:XL)?(?:-Pro)?|Tasty|Boost3|Boost 3(?: Pro)? SE|Expanse|Hercules|Alpha Rage|VergeM)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(Power Ice(?:[ ](?:Max|Evo))?|Power Rage(?: Evo)?|Zera[ _][UFS])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "PowerFivePro(?:[);/ ]|$)",
			model: "Power Five Pro"
		},
		{
			regex: "PowerFiveMaxLite(?:[);/ ]|$)",
			model: "Power Five Max Lite"
		},
		{
			regex: "PowerFiveMax2(?:[);/ ]|$)",
			model: "Power Five Max 2"
		},
		{
			regex: "Power Five Evo(?:[);/ ]|$)",
			model: "Power Five Evo"
		},
		{
			regex: "Power Five Max(?:[);/ ]|$)",
			model: "Power Five Max"
		},
		{
			regex: "FestXL-Pro(?:[);/ ]|$)",
			model: "Fest XL Pro"
		},
		{
			regex: "FestXL(?:[);/ ]|$)",
			model: "Fest XL"
		},
		{
			regex: "Fest-Pro(?:[);/ ]|$)",
			model: "Fest Pro"
		},
		{
			regex: "Fest(?:[);/ ]|$)",
			model: "Fest"
		},
		{
			regex: "PowerFour(?:[);/ ]|$)",
			model: "Power Four"
		},
		{
			regex: "Pure[_ ]Power(?:[);/ ]|$)",
			model: "Pure Power"
		},
		{
			regex: "Pure[ _]F(?:[);/ ]|$)",
			model: "Pure F"
		},
		{
			regex: "Razar_Pro(?:[);/ ]|$)",
			model: "Razar Pro"
		},
		{
			regex: "Easy[_ ]([SLF]|XL)[_ ]Pro(?:[);/ ]|$)",
			model: "Easy $1 Pro"
		},
		{
			regex: "Easy[_ ]([SFL]|XL)(?:[);/ ]|$)",
			model: "Easy $1"
		},
		{
			regex: "(?:HIGHSCREEN )?Easy[- ]Power[- ]Pro(?:[);/ ]|$)",
			model: "Easy Power Pro"
		},
		{
			regex: "(?:HIGHSCREEN )?Easy-Power(?:[);/ ]|$)",
			model: "Easy Power"
		},
		{
			regex: "BOOST II(?:[);/ ]|$)",
			model: "Boost 2"
		},
		{
			regex: "BOOST IIse(?:[);/ ]|$)",
			model: "Boost 2 SE"
		},
		{
			regex: "Boost 3 SE(?:[);/ ]|$)",
			model: "Boost 3 SE"
		},
		{
			regex: "Boost 3 Pro SE(?:[);/ ]|$)",
			model: "Boost 3 Pro SE"
		},
		{
			regex: "BOOST3(?:[);/ ]|$)",
			model: "Boost 3"
		},
		{
			regex: "Zera-S-Power(?:[);/ ]|$)",
			model: "Zera S Power"
		},
		{
			regex: "Tasty(?:[);/ ]|$)",
			model: "Tasty"
		},
		{
			regex: "VergeM(?:[);/ ]|$)",
			model: "Verge M"
		},
		{
			regex: "WinWin(?:[);/ ]|$)",
			model: "WinWin"
		},
		{
			regex: "Expanse(?:[);/ ]|$)",
			model: "Expanse"
		},
		{
			regex: "Hercules(?:[);/ ]|$)",
			model: "Hercules"
		},
		{
			regex: "Alpha Rage(?:[);/ ]|$)",
			model: "Alpha Rage"
		}
	]
};
var CVTE = {
	regex: "CVTE[_ ](MSD338_(:?1G|512M))(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Globex = {
	regex: "(GU1011C|GU8012C|GU7013C|GU730C|GU-6012B)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "GU8012C(?:[);/ ]|$)",
			model: "X8"
		},
		{
			regex: "GU-6012B(?:[);/ ]|$)",
			model: "GU6012B"
		},
		{
			regex: "(GU1011C|GU7013C|GU730C)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Atom = {
	regex: "ATOM-(108AM|216RK|216AM)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Qumo = {
	regex: "QUMO[ _]?|(?:Quest[ _]?(?:408|410|45[56]|50[679])|Vega[ _]?78[23]|Sirius[ _]?(?:1001|890))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(?:QUMO[ _]?)?Vega[ _]?(78[23]|8002)(?:[);/ ]|$)",
			model: "Vega $1"
		},
		{
			regex: "Yooda(?:[);/ ]|$)",
			model: "Yooda"
		},
		{
			regex: "Sirius[ _]?(1001|890)(?:[);/ ]|$)",
			model: "Sirius $1"
		},
		{
			regex: "(?:QUMO)?(Sirius 101-4G 8GB Black|Altair 701 8GB Black|Altair 71 4GB Black|Altair 700[24]|Altair 706)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(?:QUMO[ _])?Quest[ _]?(35[34]|40[268]|410|45[2568]|47[46]|50[679]|5[17]0|600)(?:[);/ ]|$)",
			device: "smartphone",
			model: "Quest $1"
		}
	]
};
var Umax = {
	regex: "VisionBook[ _]|[78]Qa_3G(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(VisionBook[ _](?:10Qi|7Q[i]?|8Q[ei]?|P70|8Qi_3G)(?:[ _](?:[34]G|Plus|LTE))?)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "([78])Qa_3G(?:[);/ ]|$)",
			model: "VisionBook $1Qa 3G"
		},
		{
			regex: "VisionBook_10Q_LTE(?:[);/ ]|$)",
			model: "VisionBook 10Q LTE"
		},
		{
			regex: "VisionBook_P50Plus_LTE(?:[);/ ]|$)",
			device: "smartphone",
			model: "VisionBook P50 Plus LTE"
		},
		{
			regex: "(VisionBook[ _](?:P50 LTE|P55 X2 LTE|P55 LTE(?: Pro)?))(?:[);/ ]|$)",
			device: "smartphone",
			model: "$1"
		}
	]
};
var Mann = {
	regex: "(ZUG 3|ZUG 5S(?: Q)?)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Unihertz = {
	regex: "(Titan|Jelly-Pro|Atom_X?L)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(Jelly)-(Pro)(?:[);/ ]|$)",
			model: "$1 $2"
		},
		{
			regex: "(Titan|Atom_X?L)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Chuwi = {
	regex: "(?:CW-(Hi8-super|Hi12|V99i?|V17HD3G|VX8-3G|V88-QUAD|V9-DUAL|V88S|Vi[78]|[HV]i10 (?:pro|plus))|Hi10 (?:Pro|plus)|HiPad X|HiBox-hero|HiBook(?: pro)?|Hi[89] ?(?:Air|Pro)|Hi8SE|Vi10(?: ?Pro)?)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(CW-Hi8-super)(?:[);/ ]|$)",
			model: "Hi8"
		},
		{
			regex: "(?:CW-)?(Vi10|Hi10) plus(?:[);/ ]|$)",
			model: "$1 Plus"
		},
		{
			regex: "CW-(V88)-QUAD(?:[);/ ]|$)",
			model: "$1 Quad"
		},
		{
			regex: "CW-(V9)-DUAL(?:[);/ ]|$)",
			model: "$1 Dual"
		},
		{
			regex: "CW-(V17HD|VX8)-?(3G)(?:[);/ ]|$)",
			model: "$1 $2"
		},
		{
			regex: "(?:CW-)?(Hi10) pro(?:[);/ ]|$)",
			model: "$1 Pro"
		},
		{
			regex: "HiBook pro(?:[);/ ]|$)",
			model: "HiBook Pro"
		},
		{
			regex: "HiBook(?:[);/ ]|$)",
			model: "HiBook"
		},
		{
			regex: "HiPad X(?:[);/ ]|$)",
			model: "HiPad X"
		},
		{
			regex: "Hi([89]) ?Air(?:[);/ ]|$)",
			model: "Hi$1 Air"
		},
		{
			regex: "Hi8SE(?:[);/ ]|$)",
			model: "Hi8 SE"
		},
		{
			regex: "Hi([89]) ?pro(?:[);/ ]|$)",
			model: "Hi$1 Pro"
		},
		{
			regex: "Vi10 Plus(?:[);/ ]|$)",
			model: "Vi10 Plus"
		},
		{
			regex: "Vi10 ?Pro(?:[);/ ]|$)",
			model: "Vi10 Pro"
		},
		{
			regex: "Vi10(?:[);/ ]|$)",
			model: "Vi10"
		},
		{
			regex: "HiBox-hero(?:[);/ ]|$)",
			model: "HiBox Hero",
			device: "desktop"
		},
		{
			regex: "CW-(Vi[78]|Hi12|V99i?|V88S)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Bezkam = {
	regex: "BEZKAM (BK-RAM2)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var KATV1 = {
	regex: "(KATV-01) PRO(?:[);/ ]|$)",
	device: "tv",
	model: "$1 Pro"
};
var Ghong = {
	regex: "GHONG(V10)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Xoro = {
	regex: "(?:TelePAD(?:795|731|1032|10A3|7A3)|Era 2X|HMT(?:390Q?|400)|HST 260)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "TelePAD(7|10)A3 4G(?:[);/ ]|$)",
			model: "TelePad $1 A3 4G"
		},
		{
			regex: "TelePAD(795|731|1032)(?:[);/ ]|$)",
			model: "TelePad $1"
		},
		{
			regex: "HMT(390Q?|400)(?:[);/ ]|$)",
			model: "HMT $1",
			device: "portable media player"
		},
		{
			regex: "HST 260(?:[);/ ]|$)",
			model: "HST 260",
			device: "tv"
		},
		{
			regex: "(Era 2X)(?:[);/ ]|$)",
			model: "$1",
			device: "smartphone"
		}
	]
};
var Vinga = {
	regex: "VMP-(015-162|021-82|041-162|011-81|025-324|045-664)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "VMP-021-82",
			model: "021"
		},
		{
			regex: "VMP-025-324",
			model: "025"
		},
		{
			regex: "VMP-015-162",
			model: "015"
		},
		{
			regex: "VMP-041-162",
			model: "041"
		},
		{
			regex: "VMP-045-664",
			model: "045"
		},
		{
			regex: "VMP-011-81",
			model: "011"
		}
	]
};
var Viumee = {
	regex: "SMART[_ ](EV[56])(?:[);/ ]|$)",
	device: "smartphone",
	model: "Smart $1"
};
var Nuvo = {
	regex: "Nuvo[_ ](NS35|Blue ND40|Green[_ ]ND[_ ]45)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Nuvo[_ ](NS35)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Blue (ND40)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Green[_ ]ND[_ ]45(?:[);/ ]|$)",
			model: "ND45"
		}
	]
};
var Sunvell = {
	regex: "(?:T95ZPLUS|T95[KU]PRO)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "T95ZPLUS",
			model: "T95Z Plus"
		},
		{
			regex: "(T95[KU])PRO",
			model: "$1 Pro"
		}
	]
};
var Ugoos = {
	regex: "UGOOS-AM6(?:[);/ ]|$)",
	device: "tv",
	model: "AM6"
};
var Yxtel = {
	regex: "YXTEL_([HU]1|U3)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Proline = {
	regex: "(H10882M-TN)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Yota = {
	regex: "(YD20[16]|YOTA 3[+])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "YD20[16](?:[);/ ]|$)",
			model: "Phone 2"
		},
		{
			regex: "YOTA 3[+](?:[);/ ]|$)",
			model: "Phone 3 Plus"
		}
	]
};
var Mystery = {
	regex: "MYSTERY|(MID-(?:123G|72[12]|7[01348]3G|753G|8[23]3G))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "MID-(123G|72[12]|7[01348]3G|753G|8[23]3G)(?:[);/ ]|$)",
			model: "MID-$1"
		},
		{
			regex: "MYSTERY_TV_(D3155CH31)",
			device: "tv",
			model: "$1"
		}
	]
};
var Ritzviva = {
	regex: "(RITZVIVA[_ ]S500C)(?:[);/ ]|$)",
	device: "smartphone",
	model: "S500C"
};
var DeWalt = {
	regex: "DeWalt (MD501)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Runbo = {
	regex: "Runbo|F1-TT(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Runbo[ _-]?(X5-W|F1 Plus|F1-TT|F1-EN|F1|TT|Q5-S|X5-King|X6|Q5)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "F1-TT",
			model: "F1-TT"
		}
	]
};
var NewsMy = {
	regex: "(CarPad-(?:II|III)-P)(?:[);/ ]|$)",
	device: "car browser",
	model: "$1"
};
var Newsday = {
	regex: "Newsday[_ ](E1|A[12])(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Daewoo = {
	regex: "Daewoo|(DTA-07IDRF)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(DTA-07IDRF)(?:[);/ ]|$)",
			model: "Archive 7P"
		},
		{
			regex: "Daewoo (Android TV 638)(?:[);/ ]|$)",
			model: "$1",
			device: "tv"
		}
	]
};
var Vesta = {
	regex: "VESTA32LD86(?:[);/ ]|$)",
	device: "tv",
	model: "SmartT V2.0 32LD86S"
};
var Spectrum = {
	regex: "(CARBONO_5|CUARZO_6|DIAMANTE_5|VULCANO_55)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "VULCANO_55(?:[);/ ]|$)",
			model: "Vulcano 5.5\""
		},
		{
			regex: "CARBONO_5(?:[);/ ]|$)",
			model: "Carbono 5.0\""
		},
		{
			regex: "CUARZO_6(?:[);/ ]|$)",
			model: "Cuarzo 6.0\""
		},
		{
			regex: "DIAMANTE_5(?:[);/ ]|$)",
			model: "Diamante 5.0\""
		}
	]
};
var Kivi = {
	regex: "(?:24H600G[RU]|24FR50WU|24HK30B|32HR55GU|4[39]UP50GU|40UR50G[RU]|40U600G[RU]|55U600G[RU]|65UP50GU|55U[PC]50G[RU]|50U600G[RU]|50UX10S|55UR50G[RU]|40FK30G|40FR50BR|43UK35G|50FK30G|50UK35G|32HR50GR|55UC30G|32HK30G|40FK30G|32HR50GU|43UK30G|32FR50(?:WR|BU)|32FK3[02]G)(?:_-Ver0[0-9])?(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "(24H600G[RU]|24FR50WU|24HK30B|32HR55GU|4[39]UP50GU|40UR50G[RU]|40U600G[RU]|55U600G[RU]|65UP50GU|55U[PC]50G[RU]|50UX10S|50U600G[RU]|55UR50G[RU]|40FK30G|40FR50BR|43UK35G|50FK30G|50UK35G|32HR50GR|32FR50(?:WR|BU)|32FK3[02]G)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(55UC30G|40FK30G|43UK30G|32HR50G[RU]|32HK30G|32FK32G)_-Ver0([0-9])(?:[);/ ]|$)",
			model: "$1 v$2"
		}
	]
};
var Divisat = {
	regex: "(Divisat)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "(J-Link)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Kanji = {
	regex: "KJ-(OB03|YUBI)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "KJ-OB03(?:[);/ ]|$)",
			model: "Cata 7"
		},
		{
			regex: "KJ-YUBI(?:[);/ ]|$)",
			model: "Yubi 3G"
		}
	]
};
var Kaiomy = {
	regex: "KaiCloud[ ]?(7[48]4|942)(?:[);/ ]|$)",
	device: "tablet",
	model: "KaiCloud $1"
};
var National = {
	regex: "(NX-32THS100)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Vsun = {
	regex: "(?:VSUN (?:ILLUSION|RACE|V9)|MARS TOUCH|MARS NOTE|MARS NOCAM|SATURN SELFIE)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ILLUSION(?:[);/ ]|$)",
			model: "Illusion"
		},
		{
			regex: "MARS TOUCH(?:[);/ ]|$)",
			model: "Mars Touch"
		},
		{
			regex: "MARS NOTE(?:[);/ ]|$)",
			model: "Mars Note"
		},
		{
			regex: "MARS NOCAM(?:[);/ ]|$)",
			model: "Mars Nocam"
		},
		{
			regex: "SATURN SELFIE(?:[);/ ]|$)",
			model: "Saturn Selfie"
		},
		{
			regex: "RACE(?:[);/ ]|$)",
			model: "Race"
		},
		{
			regex: "(V9)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var RugGear = {
	regex: "(RugGear|RG(?:310|500|65[05]|702|7[13]0|850))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(RG[0-9]+)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Aligator = {
	regex: "ALIGATOR[_ ]",
	device: "smartphone",
	models: [
		{
			regex: "ALIGATOR[ _](S4080|S50(?:6[56]|[678]0)|S5540|RX510|S6500|RX710|RX800|S5520)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Maxcom = {
	regex: "(MS(?:45[036]|505|514)|MS457(?:PLUS)?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(MS457)PLUS(?:[);/ ]|$)",
			model: "$1 Plus"
		},
		{
			regex: "MS(45[0367]|505|514)(?:[);/ ]|$)",
			model: "MS$1"
		}
	]
};
var Luna = {
	regex: "(?:LUNA[ _](?:V55|G[56]0)|TG-L800S)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "LUNA[ _](V55|G[56]0)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(TG-L800S)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Protruly = {
	regex: "PROTRULY[ _](D[78]|V10S)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var JFone = {
	regex: "JFone[ _](JS501)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Uhans = {
	regex: "(A101S)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Soyes = {
	regex: "SOYES[ _]([67]S|XS)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Zidoo = {
	regex: "ZIDOO[ _](H6 Pro|X6 Pro|X9S|Z10|X[158]|X20 Pro|Z9S)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Zfiner = {
	regex: "ZFINERY900(?:[);/ ]|$)",
	device: "tablet",
	model: "Y900"
};
var iGet = {
	regex: "SMART[_ ](G10[12]|S7[02]|G71|G81[H]?)(?:[);/ ]|$)",
	device: "tablet",
	model: "Smart $1"
};
var iVA = {
	regex: "(LAMCY (?:L3[05]0|C100|L400)|IVA S6)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "LAMCY (L3[05]0|C100|L400)(?:[);/ ]|$)",
			model: "Lamcy $1"
		},
		{
			regex: "IVA S6(?:[);/ ]|$)",
			model: "S6"
		}
	]
};
var Phicomm = {
	regex: "(PHICOMM)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "C630 \\(CLUE L\\)(?:[);/ ]|$)",
			model: "Clue L"
		},
		{
			regex: "E653\\(ENERGY L\\)(?:[);/ ]|$)",
			model: "Energy L"
		},
		{
			regex: "PHICOMM ENERGY 3\\+(?:[);/ ]|$)",
			model: "Energy 3+"
		},
		{
			regex: "CLUE (2S|M)(?:[);/ ]|$)",
			model: "Clue $1"
		}
	]
};
var Huadoo = {
	regex: "Huadoo[ _](HG0[46]|HG11|V[34])(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Gome = {
	regex: "(?:GOME[_ ](?:201[678].+|C7_Note(?:_Plus)?|U9|S[17])|Fenmmy_Note)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "GOME[_ ](?:2018X38A)(?:[);/ ]|$)",
			model: "C72"
		},
		{
			regex: "GOME[_ ](?:2018X07A)(?:[);/ ]|$)",
			model: "C7"
		},
		{
			regex: "GOME[_ ](?:2017X05A)(?:[);/ ]|$)",
			model: "C71"
		},
		{
			regex: "GOME[_ ](?:2016G68A)(?:[);/ ]|$)",
			model: "K1"
		},
		{
			regex: "GOME[_ ](?:2016M25A)(?:[);/ ]|$)",
			model: "U1"
		},
		{
			regex: "GOME[_ ](?:2017M27A)(?:[);/ ]|$)",
			model: "U7"
		},
		{
			regex: "GOME[_ ](C7_Note(?:_Plus)?|U9|S[17])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(?:GOME[_ ])?(Fenmmy_Note)(?:[);/ ]|$)",
			device: "phablet",
			model: "$1"
		}
	]
};
var Voyo = {
	regex: "(?:VOYO[_ ](?:A15)|i8-Max|Q101-4G)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "i8-Max(?:[);/ ]|$)",
			model: "i8 Max"
		},
		{
			regex: "(Q101)-4G(?:[);/ ]|$)",
			model: "$1 4G"
		},
		{
			regex: "VOYO[_ ](A15)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Ryte = {
	regex: "RYTE (U55 LTE)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Vontar = {
	regex: "(HK1 (?:Max|MINI|PLUS|PRO)|VONTAR[ -](?:Z[58]|V1|KIII|MX-4K|X3))(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "VONTAR[ -](Z[58]|V1|KIII|MX-4K|X3)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "HK1 Max(?:[);/ ]|$)",
			model: "HK1 Max"
		},
		{
			regex: "HK1 MINI(?:[);/ ]|$)",
			model: "HK1 Mini"
		},
		{
			regex: "HK1 PLUS(?:[);/ ]|$)",
			model: "HK1 Plus"
		},
		{
			regex: "HK1 PRO(?:[);/ ]|$)",
			model: "HK1 Pro"
		}
	]
};
var Vorke = {
	regex: "VORKE (Z[157]|Z6(?: Plus)?)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Wigor = {
	regex: "Wigor (V4)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var NEXON = {
	regex: "NEXON (X[1589])(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var ONN = {
	regex: "(ONA19TB00[327]|10000520[6-9]|O8HD)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var EXO = {
	regex: "(Wave_i101G|Wave i101[Hb])(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Datawind = {
	regex: "DW-[A-Z0-9]{5}(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(DW-PS3G5)(?:[);/ ]|$)",
			model: "Pocket Surfer 3G5"
		},
		{
			regex: "DW-UBT7W",
			device: "tablet",
			model: "Ubislate 7W"
		}
	]
};
var Droxio = {
	regex: "DROXIO (C40|B45)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Goophone = {
	regex: "Goophone[ _]|(?:M(G492|L7[JK]2)CH|MN(4A2|8J2)ZP|MGA92ZP|MKU82ZP|MNGW2CH|MNH02CH|MNRM2CH)[/]A(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:MG492CH|MGA92ZP)[/]A(?:[);/ ]|$)",
			model: "I6 Plus"
		},
		{
			regex: "ML7[JK]2CH[/]A(?:[);/ ]|$)",
			model: "I6"
		},
		{
			regex: "MKU82ZP[/]A(?:[);/ ]|$)",
			model: "I6S"
		},
		{
			regex: "MNGW2CH[/]A(?:[);/ ]|$)",
			model: "I6S Plus"
		},
		{
			regex: "(?:MN4A2ZP|MNH02CH)[/]A(?:[);/ ]|$)",
			model: "I7"
		},
		{
			regex: "(?:MN8J2ZP|MNRM2CH)[/]A(?:[);/ ]|$)",
			model: "I7 Plus"
		},
		{
			regex: "S4 MEGA(?:[);/ ]|$)",
			model: "S4 Mega"
		},
		{
			regex: "Goophone i([69])(?:[);/ ]|$)",
			model: "I$1"
		}
	]
};
var PocketBook = {
	regex: "PocketBook[ _/]",
	device: "tablet",
	models: [
		{
			regex: "PocketBook SURFpad 3 \\(([\\d]+).([\\d]+)[\"]?\\)(?:[);/ ]|$)",
			model: "Surfpad 3 $1.$2\""
		},
		{
			regex: "PocketBook/(62[67]|63[12]|740|840)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Bitmore = {
	regex: "(?:Mobitab10c-3G|Tab1011Q_II)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(Mobitab)(10)c-3G(?:[);/ ]|$)",
			model: "$1 $2C 3G"
		},
		{
			regex: "Tab1011Q_II(?:[);/ ]|$)",
			model: "Tab1011Q II"
		}
	]
};
var Kuliao = {
	regex: "KULIAO (K10)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Sugar = {
	regex: "SUGAR[ _]",
	device: "smartphone",
	models: [
		{
			regex: "SUGAR Y([78]) MAX(?:[);/ ]|$)",
			model: "Y$1 Max"
		},
		{
			regex: "SUGAR F7 Mini(?:[);/ ]|$)",
			model: "F7 Mini"
		},
		{
			regex: "SUGAR (C[12]1|C1[23]|S11|C11s|[SF]20s?|[YF]11|[YFS]9|C[679]|[FY]7|Y12s|Y1[256]|P1)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Subor = {
	regex: "SUBOR[ _]",
	device: "smartphone",
	models: [
		{
			regex: "SUBOR[ _](S5|2019)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "SUBOR[_ ]K10PLUS(?:[);/ ]|$)",
			model: "K10 Plus"
		}
	]
};
var Xshitou = {
	regex: "Xshitou[_ ](P7)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var JKL = {
	regex: "JKL[_ ](A28)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Gree = {
	regex: "(G0215D|G0245D|G0335D)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Vodacom = {
	regex: "(?:Vodacom)[ _](Power Tab 10)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var VKworld = {
	regex: "(?:(?:VK700)-MAX|VK700 Pro|T5SE|VK700X|vk6050|vk6735|vk700)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(VK700)-MAX(?:[);/ ]|$)",
			model: "$1 Max"
		},
		{
			regex: "(VK700) Pro(?:[);/ ]|$)",
			model: "$1 Pro"
		},
		{
			regex: "T5SE(?:[);/ ]|$)",
			model: "T5 SE"
		},
		{
			regex: "VK(700X|6050|6735|700)(?:[);/ ]|$)",
			model: "VK$1"
		}
	]
};
var Mito = {
	regex: "MITO[- _](A(?:1[0678]|19_[12]GB|21|3[59]|55|180|2[36]0|313|322|33|3[136]0|[35]50|6[89]|7[235]|82|[356]0|810|950)|T(?:8|10|35|3[03]0|510|888)|311)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "MITO[- _](A(?:1[0678]|19_[12]GB|21|3[59]|55|180|2[36]0|33|322|313|3[136]0|[35]50|6[89]|7[235]|82|[356]0|810|950)|311)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "MITO[ _](T(?:8|10|35|3[03]0|510|888))(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		}
	]
};
var TWM = {
	regex: "Amazing[ _](X[35]s|X[123567]|A5S|A3[025]|A[468]|A4S|A5[057]|P6)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Amazing[ _](X[35])s(?:[);/ ]|$)",
			model: "Amazing $1S"
		},
		{
			regex: "Amazing[ _](A5S|X[123567]|A[468]|A4S|A5[057]|A3[025])(?:[);/ ]|$)",
			model: "Amazing $1"
		},
		{
			regex: "Amazing[ _](P6)(?:[);/ ]|$)",
			device: "tablet",
			model: "Amazing $1"
		}
	]
};
var TWZ = {
	regex: "TWZ[-_ ](?:TabPlay|Y6[08]|Y52|A49|A[59]5|A567|AA8|QQ[12])|TWZQQ1",
	device: "smartphone",
	models: [
		{
			regex: "TWZ[_ ]TabPlay[_ ](12[56])",
			device: "tablet",
			model: "TabPlay $1"
		},
		{
			regex: "TWZ[-_ ]?(Y6[08]|Y52|A49|A[59]5|A567|AA8|QQ[12])",
			model: "$1"
		}
	]
};
var Onix = {
	regex: "(?:ONIX S405|AT101-1116)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(AT101-1116)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(S405)(?:[);/ ]|$)",
			device: "smartphone",
			model: "$1"
		}
	]
};
var Oale = {
	regex: "Apex([13])(?:[);/ ]|$)",
	device: "smartphone",
	model: "Apex $1"
};
var Mobo = {
	regex: "(?:(?:MOBO[_ ]MB7005|MT7-421HD)|(?:MT7-442D|MT7-411D))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(?:MOBO[_ ])?(MB7005|MT7-421HD|MT7-442D|MT7-411D)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Macoox = {
	regex: "(MC-X7MINI)(?:[);/ ]|$)",
	device: "smartphone",
	model: "MC-X7 Mini"
};
var Prixton = {
	regex: "PRIXTON |(T7012Q)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "PRIXTON (C18)",
			device: "smartphone",
			model: "$1"
		},
		{
			regex: "(T7012Q)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Magnus = {
	regex: "Magnus[ _](?:bravoZ[23]0|Infinity_?(?:G8|G11))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "bravo(Z[23]0)",
			model: "Bravo $1"
		},
		{
			regex: "(?:Magnus[ _])?Infinity_?(G8|G11)",
			model: "Infinity $1"
		}
	]
};
var Newland = {
	regex: "(?:NLS-MT90)(?:[);/ ]|$)",
	device: "smartphone",
	model: "MT90 Orca"
};
var Orbic = {
	regex: "(?:RC555L|RC501L)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "RC555L(?:[);/ ]|$)",
			model: "Wonder"
		},
		{
			regex: "RC501L(?:[);/ ]|$)",
			model: "Slim"
		}
	]
};
var RED = {
	regex: "(?:H1A1000)(?:[);/ ]|$)",
	device: "smartphone",
	model: "Hydrogen One"
};
var Contixo = {
	regex: "Contixo|(?:CX-1045 3G|KT995 3G|CX1045)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "CX-?1045(?: 3G)?(?:[);/ ]|$)",
			model: "CX-1045 3G"
		},
		{
			regex: "CONTIXO GX 1035(?:[);/ ]|$)",
			model: "GX-1035 4G 10.1\""
		},
		{
			regex: "Contixo GT1160 4G(?:[);/ ]|$)",
			model: "GT1160 4G 10.1\""
		},
		{
			regex: "B105(?:[);/ ]|$)",
			model: "B105 3G 10.1\""
		},
		{
			regex: "B108(?:[);/ ]|$)",
			model: "B108 4G 10.1\""
		},
		{
			regex: "KT107(?: 3G)?(?:[);/ ]|$)",
			model: "KT107 3G 10.1\""
		},
		{
			regex: "K109(?:[);/ ]|$)",
			model: "KT109 4G 10.1\""
		},
		{
			regex: "KT715 3G(?:[);/ ]|$)",
			model: "KT715 3G 7.0\""
		},
		{
			regex: "KT995(?:[);/ ]|$)",
			model: "KT995 3G 10.1\""
		},
		{
			regex: "KT1100GT(?:[);/ ]|$)",
			model: "KT1100GT"
		}
	]
};
var How = {
	regex: "(?:HT-705XS|705-G Go|1001-G Go)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(HT-705XS)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(1001-G Go)(?:[);/ ]|$)",
			model: "HT-1001G Go Kids"
		},
		{
			regex: "(705-G Go)(?:[);/ ]|$)",
			model: "HT-$1"
		}
	]
};
var Multilaser = {
	regex: "(?:Multilaser[ _](?:[FEGH])(?:[_ ](?:Pro|Max|Lite))?|MS50[LGX]|M7[_-]3G[_-]PLUS|MS5\\.V2|MS45S_A6|ML([02]1|12)-M7s[- ]?Quad-?Core| ML01-M7-SD|MS45S|MS50S|MS60[XZ]|M7SQC_Plus|MS80X|MS40[GS]|MS55M|MS70|M7-3G QUAD CORE|M7sLite|MS50L_4G|MS60F(?:_PLUS)?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Multilaser[ _]G[_ ]Pro(?:[);/ ]|$)",
			model: "G Pro"
		},
		{
			regex: "Multilaser[ _]F[_ ]Pro(?:[);/ ]|$)",
			model: "F Pro"
		},
		{
			regex: "Multilaser[ _]G[_ ]Max(?:[);/ ]|$)",
			model: "G Max"
		},
		{
			regex: "Multilaser[ _]G(?:[);/ ]|$)",
			model: "G"
		},
		{
			regex: "Multilaser[ _]E[_ ]Lite(?:[);/ ]|$)",
			model: "E Lite"
		},
		{
			regex: "Multilaser[ _]([FEH])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "MS60F_PLUS(?:[);/ ]|$)",
			model: "MS60F Plus"
		},
		{
			regex: "(MS50[LGX]|MS45S_A6|MS40[GS]|MS55M|MS60F|MS70|MS60[XZ]|MS45S|MS80X|MS50L_4G|MS50S|MS5\\.V2)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "M7[_-]3G[_-]PLUS(?:[);/ ]|$)",
			device: "tablet",
			model: "M7 3G Plus"
		},
		{
			regex: "M7SQC_PLUS(?:[);/ ]|$)",
			device: "tablet",
			model: "M7SQC Plus"
		},
		{
			regex: "M7-3G QUAD CORE(?:[);/ ]|$)",
			device: "tablet",
			model: "M7 3G Quad Core"
		},
		{
			regex: "ML([02]1|12)-M7s[- ]?Quad-?Core(?:[);/ ]|$)",
			device: "tablet",
			model: "ML$1-M7s Quad Core"
		},
		{
			regex: "M7sLite(?:[);/ ]|$)",
			device: "tablet",
			model: "M7s Lite"
		},
		{
			regex: "ML01-M7-SD(?:[);/ ]|$)",
			device: "tablet",
			model: "ML01-M7 SD"
		}
	]
};
var Maxtron = {
	regex: "Maxtron[ _-](V[327]|S[89]|T1)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Maxtron[ _-](V[327]|S[89])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Maxtron[ _-](T1)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Philco = {
	regex: "PHILCO |(PCS01|PH350B|PTB7R|PTB7PAP_PTB7PAB_PTB7PAR)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(PCS01|PH350B)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(PTB7R)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "PHILCO Android TV(?:[);/ ]|$)",
			device: "tv",
			model: ""
		},
		{
			regex: "PTB7PAP_PTB7PAB_PTB7PAR(?:[);/ ]|$)",
			device: "tablet",
			model: "PTB7PA"
		}
	]
};
var Newman = {
	regex: "Newman[ _](P308|K1)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Swipe = {
	regex: "(Elite Sense|Elite_VR)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Owwo = {
	regex: "(?:OWWO[ _]?(?:[1457]S|Q[78])|CARNIVAL B5)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "OWWO[ _]?([1457]S|Q[78])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "CARNIVAL B5(?:[);/ ]|$)",
			model: "Carnival B5"
		}
	]
};
var Ravoz = {
	regex: "RAVOZ[ _](Z5 (?:Lite|Pro)|Z[3-7]|R[478])(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Tone = {
	regex: "TONE (e19|m15|e20)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var BIHEE = {
	regex: "(ZBH-)?BIHEE",
	device: "smartphone",
	models: [
		{
			regex: "(A1[12]|A[78]\\+|A[56])(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Enot = {
	regex: "Enot[ _-](E102|J101)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Kooper = {
	regex: "Kooper-mobile-W502(?:[);/ ]|$)",
	device: "smartphone",
	model: "Mobile W502"
};
var Lesia = {
	regex: "ANOVA A5(?:[);/ ]|$)",
	device: "smartphone",
	model: "Anova A5"
};
var Anry = {
	regex: "ANRY-(RS10|[SX]20)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Tinai = {
	regex: "Tinai (K[12])(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Winds = {
	regex: "NOTE GRACE V(?:[);/ ]|$)",
	device: "smartphone",
	model: "Note Grace V"
};
var Asano = {
	regex: "32LF7130S(?:[);/ ]|$)",
	device: "tv",
	model: "32LF7130S 32.0\""
};
var Phonemax = {
	regex: "PHONEMAX[_ ](Saturn(?:[_ ]X)?|Mars|Venus X)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "PHONEMAX[_ ]Saturn[_ ]X(?:[);/ ]|$)",
			model: "Saturn X"
		},
		{
			regex: "PHONEMAX[_ ]Saturn(?:[);/ ]|$)",
			model: "Saturn"
		},
		{
			regex: "PHONEMAX[_ ]Mars(?:[);/ ]|$)",
			model: "Mars"
		},
		{
			regex: "PHONEMAX[_ ]Venus X(?:[);/ ]|$)",
			model: "Venus X"
		}
	]
};
var Vipro = {
	regex: "VIPRO(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "VIPRO PRO2X(?:[);/ ]|$)",
			model: "Pro 2X"
		},
		{
			regex: "VIPRO PRO[ _-]?([0-9])(?:[);/ ]|$)",
			model: "Pro $1"
		}
	]
};
var OzoneHD = {
	regex: "Ozone HD|OzoneHD[ _](T2 WiFi|4K(?: TV)?|Fun)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Kzen = {
	regex: "(?:Ureki_U1|Victor V1|DART KZ07)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Ureki_U1",
			model: "Ureki U1"
		},
		{
			regex: "Victor V1",
			model: "Victor V1"
		},
		{
			regex: "DART KZ07",
			device: "tablet",
			model: "Dart KZ07"
		}
	]
};
var Melrose = {
	regex: "MELROSE_(?:S9|2019)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "MELROSE_S9(?:[);/ ]|$)",
			model: "S9"
		},
		{
			regex: "MELROSE_2019(?:[);/ ]|$)",
			model: "2019 Ultra Slim 3.4\""
		}
	]
};
var Crony = {
	regex: "CRONY-7021(?:[);/ ]|$)",
	device: "tablet",
	model: "7021"
};
var Takara = {
	regex: "(MID211H)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Tronsmart = {
	regex: "(Orion R68G|Draco AW80|Draco H3|Vega S95_(?:Meta|Pro|Telos))(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Amigoo = {
	regex: "AMIGOO (R300|R9 Max|M1 Max|X15)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Lumigon = {
	regex: "Lumigon[ _](T3)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Neomi = {
	regex: "NEO[ ]?(90[689])(?:[);/ ]|$)",
	device: "smartphone",
	model: "Neo $1"
};
var Eltex = {
	regex: "(?:NV5(?:01|10)WAC|NV501|NV510WB)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "NV5(01|10)WAC(?:[);/ ]|$)",
			model: "NV-5$1-Wac"
		},
		{
			regex: "NV501(?:[);/ ]|$)",
			model: "NV-501"
		},
		{
			regex: "NV510WB(?:[);/ ]|$)",
			model: "NV-510-WB"
		}
	]
};
var Senkatel = {
	regex: "Senkatel[ _](T1009|T8002|T701[12]|T9702)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Bobarry = {
	regex: "(?:K10[ ]?SE)(?:[);/ ]|$)",
	device: "tablet",
	model: "K10 SE"
};
var Wortmann = {
	regex: "TERRA[ _]PAD[ _](100[45])(?:[);/ ]|$)",
	device: "tablet",
	model: "Terra Pad $1"
};
var Billion = {
	regex: "Capture\\+(?:[);/ ]|$)",
	device: "smartphone",
	model: "Capture Plus"
};
var Tele2 = {
	regex: "Tele2[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Tele2[ _](Mi[dn]i)[ _]1.1(?:[);/ ]|$)",
			model: "$1 1.1"
		},
		{
			regex: "Tele2[ _]Midi[ _]2.0(?:[);/ ]|$)",
			model: "Midi 2.0"
		},
		{
			regex: "Tele2[ _]((?:Maxi|Midi)(?:[_ ](?:Plus|LTE))?)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Tele2[ _](Mi[dn]i)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Alfawise = {
	regex: "(?:Alfawise (?:A9)|(?:A95X_R1))(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "(A95X_R1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Alfawise (A9)",
			model: "$1"
		}
	]
};
var Klipad = {
	regex: "KLIPAD_|(?:KL-V905|KL4889|KL9878|7589AN)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:KLIPAD_)?(V355B?|KL600|KL-V905)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(KL4889|7589AN|KL9878)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		}
	]
};
var SQOOL = {
	regex: "SQOOL-V(41?)(?:[);/ ]|$)",
	device: "tablet",
	model: "V$1"
};
var TurboKids = {
	regex: "Turbokids[-_ ]?(TMNT|3G|S4)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Jinga = {
	regex: "Jinga[-_ ]|(?:(?:Fresh|Optim)4G|Pass(?:Plus|3G)|PicassoNote|Hotz[_ ]M1|WinPRO|Touch4G|Start3G|IGO[ _]L[41]|Basco (?:L3|L[45]00|XS1|S2))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Optim4G(?:[);/ ]|$)",
			model: "Optim 4G"
		},
		{
			regex: "Fresh4G(?:[);/ ]|$)",
			model: "Fresh 4G"
		},
		{
			regex: "Hotz[_ ]M1(?:[);/ ]|$)",
			model: "Hotz M1"
		},
		{
			regex: "PassPlus(?:[);/ ]|$)",
			model: "Pass Plus"
		},
		{
			regex: "Pass3G(?:[);/ ]|$)",
			model: "Pass 3G"
		},
		{
			regex: "WinPRO(?:[);/ ]|$)",
			model: "Win Pro"
		},
		{
			regex: "Touch4G(?:[);/ ]|$)",
			model: "Touch 4G"
		},
		{
			regex: "Start3G(?:[);/ ]|$)",
			model: "Start 4G"
		},
		{
			regex: "PicassoNote(?:[);/ ]|$)",
			model: "Picasso Note"
		},
		{
			regex: "Jinga Iron(?:[);/ ]|$)",
			model: "Iron"
		},
		{
			regex: "Jinga Basco neo(?:[);/ ]|$)",
			model: "Basco Neo"
		},
		{
			regex: "(?:Jinga )?Basco (L3|L[45]00|XS1|S2)(?:[);/ ]|$)",
			model: "Basco $1"
		},
		{
			regex: "Jinga Trezor S1 Plus(?:[);/ ]|$)",
			model: "Trezor S1 Plus"
		},
		{
			regex: "JINGA_IGO_L2(?:[);/ ]|$)",
			model: "IGO L2"
		},
		{
			regex: "(?:JINGA[_ ])?IGO[_ ]([ML]1|L4)(?:[);/ ]|$)",
			model: "IGO $1"
		},
		{
			regex: "Jinga Trezor S1 Plus(?:[);/ ]|$)",
			model: "Trezor S1 Plus"
		}
	]
};
var Twoe = {
	regex: "(?:TWOE[-_ ]E450R|F534L|F572L|E500A)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "TWOE[-_ ](E450R)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "(F534L|F572L|E500A)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var iTruck = {
	regex: "iTRUCK 7 3G(?:[);/ ]|$)",
	device: "smartphone",
	model: "7.0\" 3G"
};
var Torex = {
	regex: "TOREX[- ](?:PS12|S18|S27)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "TOREX-(PS12)",
			model: "$1"
		},
		{
			regex: "TOREX[- ](S18|S27)",
			device: "smartphone",
			model: "$1"
		}
	]
};
var Doffler = {
	regex: "(24DHS54)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Oyyu = {
	regex: "OYYUT11(?:[);/ ]|$)",
	device: "tablet",
	model: "T11 3G"
};
var Primux = {
	regex: "Primux",
	device: "smartphone",
	models: [
		{
			regex: "Primux_ioxphone(?:[);/ ]|$)",
			model: "IOX Phone"
		},
		{
			regex: "PrimuxDelta6(?:[);/ ]|$)",
			model: "Delta 6"
		},
		{
			regex: "PrimuxKappa(P50[01])(?:[);/ ]|$)",
			model: "Kappa $1"
		},
		{
			regex: "PrimuxKappa(?:[);/ ]|$)",
			model: "Kappa"
		},
		{
			regex: "Primux_Beta2(?:[);/ ]|$)",
			model: "Beta 2"
		},
		{
			regex: "Primux_?Omega([57])(?:[);/ ]|$)",
			model: "Omega $1"
		},
		{
			regex: "PrimuxUP(?:[);/ ]|$)",
			device: "tablet",
			model: "UP"
		},
		{
			regex: " PrimuxZonda4(?:[);/ ]|$)",
			device: "tablet",
			model: "Zonda 4"
		},
		{
			regex: "Primux_Siroco6(?:[);/ ]|$)",
			device: "tablet",
			model: "Siroco 6"
		}
	]
};
var iMars = {
	regex: "(?:IMARS VEGA X7|VIVI_8)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IMARS VEGA X7",
			model: "Vega X7"
		},
		{
			regex: "VIVI_8",
			model: "VIVI 8"
		}
	]
};
var Logic = {
	regex: "LOGIC[_ ](X[135]|X4M|L5D|X5[AFT]|X60G|L61|X60_PLUS)(:?[_ ]LITE2?)?(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "LOGIC[_ ]X60_PLUS(?:[);/ ]|$)",
			model: "X60 Plus"
		},
		{
			regex: "LOGIC[_ ](X5|X4M)[_ ]LITE(?:[);/ ]|$)",
			model: "$1 Lite"
		},
		{
			regex: "LOGIC[_ ](X5)[_ ]LITE2(?:[);/ ]|$)",
			model: "$1 Lite 2"
		},
		{
			regex: "LOGIC[_ ](X[13]|X4M|L5D|X5[AFT]|X60G|L61)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Cloudpad = {
	regex: "\\+VT(?:107C|Q007C)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "\\+VT(107C)",
			model: "+VT$1"
		},
		{
			regex: "\\+VTQ(007C)",
			model: "+VTQ$1"
		}
	]
};
var Cloudfone = {
	regex: "(?:Thrill (?:Boost[ ]?(2|3)?|Snap|Access)|Excite Prime 2 Pro|NBA Edition)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Thrill Boost (2|3)(?:[);/ ]|$)",
			model: "Thrill Boost $1"
		},
		{
			regex: "Thrill Boost(?:[);/ ]|$)",
			model: "Thrill Boost"
		},
		{
			regex: "Thrill Snap(?:[);/ ]|$)",
			model: "Thrill Snap"
		},
		{
			regex: "Thrill Access(?:[);/ ]|$)",
			model: "Thrill Access"
		},
		{
			regex: "Excite Prime 2 Pro(?:[);/ ]|$)",
			model: "Excite Prime 2 Pro"
		},
		{
			regex: "NBA Edition(?:[);/ ]|$)",
			model: "NBA Edition"
		}
	]
};
var Vsmart = {
	regex: "(?:Joy 1\\+|Active 1\\+|Bee 3|Active 3)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Joy 1\\+(?:[);/ ]|$)",
			model: "Joy 1 Plus"
		},
		{
			regex: "Active 1\\+(?:[);/ ]|$)",
			model: "Active 1 Plus"
		},
		{
			regex: "Bee 3(?:[);/ ]|$)",
			model: "Bee 3"
		},
		{
			regex: "Active 3(?:[);/ ]|$)",
			model: "Active 3"
		}
	]
};
var MiXzo = {
	regex: "(?:MiXzo[ _])?(?:ME1023|ME1030|MX1037|MX1024|MX10[24]1|MX1397)([ _][34]G)?(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "MiXzo[_ ]ME(1023|1030)(?:[_ ]3G)(?:[);/ ]|$)",
			model: "ME$1 3G"
		},
		{
			regex: "MiXzo[_ ]MX1021(?:[_ ]3G)?(?:[);/ ]|$)",
			model: "MX1021 3G"
		},
		{
			regex: "(?:MiXzo[ _])?MX(1037|1041|1024|1397)[ _]4G(?:[);/ ]|$)",
			model: "MX$1 4G"
		}
	]
};
var Openbox = {
	regex: "Openbox (A[34](?: (?:Pro|Lite))?)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Ziox = {
	regex: "ZIOX[_ ]|(?:Astra Viva 4G|Astra NXT Pro|Duopix F9)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ZIOX[_ ]F9[_ ]PRO(?:[);/ ]|$)",
			model: "F9 Pro"
		},
		{
			regex: "Astra Viva 4G(?:[);/ ]|$)",
			model: "Astra Viva 4G"
		},
		{
			regex: "Astra NXT Pro(?:[);/ ]|$)",
			model: "Astra NXT Pro"
		},
		{
			regex: "Duopix F9(?:[);/ ]|$)",
			model: "Duopix F9"
		}
	]
};
var iDroid = {
	regex: "APACHE G6(?:[);/ ]|$)",
	device: "smartphone",
	model: "Apache G6"
};
var Aoson = {
	regex: "aoson(?:R10[1-3]|S[78]|M707TG)(?:[_ ]?Pro)?(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "aosonR10([1-3])(?:[);/ ]|$)",
			model: "R10$1 10.1\""
		},
		{
			regex: "aosonS7_Pro(?:[);/ ]|$)",
			model: "S7 Pro 7.0\""
		},
		{
			regex: "aosonS7(?:[);/ ]|$)",
			model: "S7 7.0\""
		},
		{
			regex: "aosonS8Pro(?:[);/ ]|$)",
			model: "S8 Pro 8.0\""
		},
		{
			regex: "aoson(M707TG)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var NextTab = {
	regex: "TAB (A40[13]0)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Time2 = {
	regex: "(TC1050G)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1 10.1\""
};
var Sunstech = {
	regex: "(TAB2323GMQC)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Hotwav = {
	regex: "(?:Venus[_ ]X1[024569]|Cosmos[ _](?:V8_lite|V19_Plus|V2[0-3]|U2|V19|V[569])|Pearl K2|Magic Q8|Magic 5 Plus|Magic (?:[89]|1[13])|Hot[_ ]6)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Cosmos[ _]V8_lite(?:[);/ ]|$)",
			model: "Cosmos V8 Lite"
		},
		{
			regex: "Hot[_ ]6?(?:[);/ ]|$)",
			model: "Hot 6"
		},
		{
			regex: "(Venus[_ ]X1[024569]|Cosmos[ _](?:V19_Plus|V2[0-3]|U2|V19|V[569])|Pearl K2|Magic Q8|Magic 5 Plus|Magic (?:[89]|1[13]))(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Tetratab = {
	regex: "CASEBOOK_3(?:[);/ ]|$)",
	device: "tablet",
	model: "Casebook 3"
};
var Dolamee = {
	regex: "Dolamee[_ -](D[56])(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Invin = {
	regex: "INVIN[ _-]|KM5PRO(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "INVIN[ _-](X[24]|KM[678])",
			model: "$1"
		},
		{
			regex: "KM5PRO",
			model: "KM5 Pro"
		}
	]
};
var Doopro = {
	regex: "Doopro P3(?:[);/ ]|$)",
	device: "smartphone",
	model: "P3"
};
var IQM = {
	regex: "IQM (?:picasso|vivaldi|newton)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IQM picasso(?:[);/ ]|$)",
			model: "Picasso"
		},
		{
			regex: "IQM vivaldi(?:[);/ ]|$)",
			model: "Vivaldi"
		},
		{
			regex: "IQM newton(?:[);/ ]|$)",
			model: "Newton"
		}
	]
};
var Nos = {
	regex: "Nos (?:FIVE|NOVU|NEVA|Roya)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "NOS FIVE(?:[);/ ]|$)",
			model: "Five"
		},
		{
			regex: "NOS NOVU III(?:[);/ ]|$)",
			model: "Novu III"
		},
		{
			regex: "NOS NOVU II(?:[);/ ]|$)",
			model: "Novu II"
		},
		{
			regex: "NOS NOVU(?:[);/ ]|$)",
			model: "Novu"
		},
		{
			regex: "NOS NEVA 80(?:[);/ ]|$)",
			model: "Neva 80"
		},
		{
			regex: "NOS Roya(?:[);/ ]|$)",
			model: "Roya"
		}
	]
};
var Accent = {
	regex: "(?:ACCENT[_ ]NEON|FAST73G|PEARL[_ ]A[24567]|TANK_P55|CAMELEON[_ ](?:C[456]|A1)(?:[_ ]PLUS)?|Speed[- ](?:[AXYM]2|X2\\+))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ACCENT[_ ]NEON(?:[);/ ]|$)",
			model: "Neon"
		},
		{
			regex: "CAMELEON[_ ]C6[_ ]PLUS(?:[);/ ]|$)",
			model: "Cameleon C6 Plus"
		},
		{
			regex: "Speed[- ]([AXYM]2)(?:[);/ ]|$)",
			model: "Speed $1"
		},
		{
			regex: "Speed-X2\\+(?:[);/ ]|$)",
			model: "Speed X2 Plus"
		},
		{
			regex: "CAMELEON[_ ](C[456]|A1)(?:[);/ ]|$)",
			model: "Cameleon $1"
		},
		{
			regex: "PEARL A4 Lite(?:[);/ ]|$)",
			model: "Pearl A4 Lite"
		},
		{
			regex: "PEARL[_ ]A([2567])(?:[);/ ]|$)",
			model: "Pearl A$1"
		},
		{
			regex: "TANK_P55(?:[);/ ]|$)",
			model: "Tank P55"
		},
		{
			regex: "FAST73G(?:[);/ ]|$)",
			device: "phablet",
			model: "FAST7 3G"
		}
	]
};
var Avenzo = {
	regex: "Avenzo(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "MOB4 4G(?:[);/ ]|$)",
			model: "Mob 4 4G"
		},
		{
			regex: "MOB4PRO 4G(?:[);/ ]|$)",
			model: "Mob 4 Pro 4G"
		}
	]
};
var Beelink = {
	regex: "(?:Beelink (?:G[ST]1|LAKE I|SEA I|A1)|GTKing|GT1mini-2|GT1-mini(?:-AT)?)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "Beelink (G[ST]1|LAKE I|SEA I|A1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "GT1-mini(?:-AT)?(?:[);/ ]|$)",
			model: "GT1 Mini"
		},
		{
			regex: "GT1mini-2(?:[);/ ]|$)",
			model: "GT1 Mini 2"
		},
		{
			regex: "GTKing(?:[);/ ]|$)",
			model: "GT King"
		}
	]
};
var MAXVI = {
	regex: "MAXVI[ _](?:MS401)(?:[);/ ]|$)|(?:\\w+)?_MAXVI_\\w+|MS502[_ ]Orion|MS531",
	device: "smartphone",
	models: [
		{
			regex: "MAXVI[ _](MS401)",
			model: "$1"
		},
		{
			regex: "MS531",
			model: "MS531 Vega"
		},
		{
			regex: "MS502[_ ]Orion",
			model: "MS502 Orion"
		},
		{
			regex: "(?:\\w+)?MAXVI_(P11|K10|X[358]00)_\\w+",
			device: "feature phone",
			model: "$1"
		}
	]
};
var meanIT = {
	regex: "meanIT[ _](?:C[12]|X10|X[126]|MG430|Q[145])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "meanIT[ _]Q1 plus(?:[);/ ]|$)",
			model: "Q1 Plus"
		},
		{
			regex: "meanIT[ _](C[12]|X[126]|MG430|Q[145])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "meanIT[ _]X10(?:[);/ ]|$)",
			device: "tablet",
			model: "X10"
		}
	]
};
var Kenxinda = {
	regex: "Three[_ ]Proofings[_ ]W([5-9])(?:[);/ ]|$)",
	device: "smartphone",
	model: "Three Proofings W$1"
};
var Xgody = {
	regex: "XGODY",
	device: "smartphone",
	models: [
		{
			regex: "XGODY Y17(?:[);/ ]|$)",
			model: "Y17"
		},
		{
			regex: "XGODY_X96(?:[);/ ]|$)",
			model: "X96",
			device: "tv"
		}
	]
};
var Alcor = {
	regex: "(Access_Q784C)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var iBrit = {
	regex: "IBRIT_|(?:SI5[12])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "IBRIT_I([57])(?:[);/ ]|$)",
			model: "I$1"
		},
		{
			regex: "iBRIT_POWER6(?:[);/ ]|$)",
			model: "Power 6"
		},
		{
			regex: "iBRIT_Speed Pro(?:[);/ ]|$)",
			model: "Speed Pro"
		},
		{
			regex: "SI51(?:[);/ ]|$)",
			model: "Speed"
		},
		{
			regex: "SI52(?:[);/ ]|$)",
			model: "Speed Plus"
		}
	]
};
var Ovvi = {
	regex: "Jumbo X1",
	device: "smartphone",
	model: "Jumbo X1"
};
var Fero = {
	regex: "Fero[_ ]|Royale[_ ](?:[YX]2|A1)",
	device: "smartphone",
	models: [
		{
			regex: "Fero_Y1",
			model: "Y1"
		},
		{
			regex: "Royale Y2 Lite",
			model: "Royale Y2 Lite"
		},
		{
			regex: "Royale[_ ]([YX]2|A1)",
			model: "Royale $1"
		},
		{
			regex: "FERO PACE",
			model: "Pace"
		},
		{
			regex: "Fero[ _](A4001|A450[23]|A5001|L100|Iris|Power|Mega LTE|Vibe)",
			model: "$1"
		}
	]
};
var Ruio = {
	regex: "Ruio[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Ruio[ _](S4)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Ruio[ _](S5)Plus(?:[);/ ]|$)",
			model: "$1 Plus"
		}
	]
};
var Transpeed = {
	regex: "Transpeed_|(?:TR99 MINI\\+|TR99)(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "TR99 MINI\\+",
			model: "TR99 Mini Plus"
		},
		{
			regex: "(?:Transpeed_)?(TR99|H616|6K)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var VVETIME = {
	regex: "ZYVV1(?:[);/ ]|$)",
	device: "smartphone",
	model: "V1"
};
var A1 = {
	regex: "A1 (?:Alpha|Alpha 20\\+)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "A1 Alpha 20\\+",
			model: "Alpha 20 Plus"
		},
		{
			regex: "A1 Alpha",
			model: "Alpha"
		}
	]
};
var Swisstone = {
	regex: "swisstone (SD 5[13]0)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var iVooMi = {
	regex: "(?:Innelo_1|iV 505)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Innelo_1",
			model: "Innelo 1"
		},
		{
			regex: "iV 505",
			model: "Me 1"
		}
	]
};
var Pixelphone = {
	regex: "Pixelphone S1(?:[);/ ]|$)",
	device: "smartphone",
	model: "S1"
};
var Pixela = {
	regex: "Infineum[_ ](Z4?5)(?:[);/ ]|$)",
	device: "smartphone",
	model: "Infineum $1"
};
var Iris = {
	regex: "(?:Vox[_ ](?:[45]S|Alpha|POP|STEEL Plus|Energy)|IS2_?Plus|IS2S|Next_P_PRO|IRS002-16)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Vox[_ ]([45])S",
			model: "Vox $1S"
		},
		{
			regex: "VOX Alpha Plus",
			model: "Vox Alpha Plus"
		},
		{
			regex: "VOX STEEL Plus",
			model: "Vox Steel Plus"
		},
		{
			regex: "VOX Alpha",
			model: "Vox Alpha"
		},
		{
			regex: "VOX Energy",
			model: "Vox Energy"
		},
		{
			regex: "VOX POP plus",
			model: "Vox Pop Plus"
		},
		{
			regex: "VOX POP Pro",
			model: "Vox Pop Pro"
		},
		{
			regex: "Next_P_PRO",
			model: "Next P Pro"
		},
		{
			regex: "IS2_?Plus",
			model: "IS2 Plus"
		},
		{
			regex: "IRS002-16",
			model: "I-S6"
		},
		{
			regex: "IS2S",
			model: "IS2S"
		}
	]
};
var Fonos = {
	regex: "Fonos-(O1)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Xtouch = {
	regex: "Xtouch[ _](X10|A5)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Conquest = {
	regex: "Conquest[-_](?:S(?:[68]|1[0126])|F2)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Conquest[-_]S([68]|1[0126])",
			model: "S$1"
		},
		{
			regex: "Conquest-F2",
			model: "F2"
		}
	]
};
var Zatec = {
	regex: "ZATEC[_ ]|(?:[ ]WIND|ZPLAY1_2018|Zpower_(?:Plus|2018))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ZATEC[_ ]GRAVITY(?:[);/ ]|$)",
			model: "Gravity"
		},
		{
			regex: "[ ]WIND(?:[);/ ]|$)",
			model: "Wind"
		},
		{
			regex: "ZPLAY1_2018",
			model: "Zplay (2018)"
		},
		{
			regex: "Zpower_2018",
			model: "Zpower (2018)"
		},
		{
			regex: "Zpower_Plus",
			model: "Zpower Plus"
		}
	]
};
var Selenga = {
	regex: "Selenga[ _](A[134])(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Starlight = {
	regex: "Starlight|(?:My_Star_X|RIO STAR|C_Note_Pro|Star_Mix_2)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "My_Star_X",
			model: "My Star X"
		},
		{
			regex: "RIO STAR",
			model: "Rio Star"
		},
		{
			regex: "C_Note_Pro",
			model: "C Note Pro"
		},
		{
			regex: "Star_Mix_2",
			model: "Star Mix 2"
		},
		{
			regex: "Starlight_ROME_X",
			model: "Rome X"
		}
	]
};
var GEOFOX = {
	regex: "GEOFOX[_](MID743)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Tinmo = {
	regex: "TiNMO[- _](A11|K3)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Matrix = {
	regex: "(7116-A5)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Verico = {
	regex: "(RP-UDM0[12]A|RP-UDP05A)(?:[);/ ]|$)",
	device: "tablet",
	model: "Uni Pad $1"
};
var TTEC = {
	regex: "(Magictab (?:9GX|7GE|718))(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var eSTAR = {
	regex: "eSTAR[_ ](?:Grand|GO\\!?|Zoom Quad|Gemini|MINI[_ ]3G|BEAUTY|MOON)",
	device: "tablet",
	models: [
		{
			regex: "eSTAR (Grand|GO\\!?) (HD Intel|IPS Intel|IPS|HD|Intel) Quad Core 3G",
			model: "$1 $2 Quad Core 3G"
		},
		{
			regex: "eSTAR (Zoom Quad|Gemini|GO)",
			model: "$1"
		},
		{
			regex: "eSTAR GRAND HD quad core( [34]G)?",
			model: "Grand HD Quad Core$1"
		},
		{
			regex: "eSTAR GRAND",
			model: "Grand"
		},
		{
			regex: "eSTAR BEAUTY HD Quad core",
			model: "Beauty HD Quad Core"
		},
		{
			regex: "eSTAR MOON HD Quad core",
			model: "Moon HD Quad Core 3G"
		},
		{
			regex: "eSTAR BEAUTY 2 HD Quad core",
			model: "Beauty 2 HD Quad Core"
		},
		{
			regex: "eSTAR[_ ]MINI[_ ]3G",
			model: "Mini 3G"
		}
	]
};
var Hometech = {
	regex: "(?:Ideal (?:10S|Tab [79])|ALFA10TB|ALFA[_ ](?:10RC|10TM?|7RS|[78]RC|7M)|HT[ _](?:7RT|8MZ))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(Ideal (?:10S|Tab 9))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "ALFA[_ ]?(10RC|10T[BM]?|7RS|[78]RC|7M)(?:[);/ ]|$)",
			model: "ALFA $1"
		},
		{
			regex: "Ideal Tab 7 Ips( 3G)?",
			model: "Ideal Tab 7 IPS$1"
		},
		{
			regex: "HT[ _](7RT|8MZ)(?:[);/ ]|$)",
			model: "HT $1"
		}
	]
};
var ExMobile = {
	regex: "EX(29|45)i(?:[);/ ]|$)",
	device: "smartphone",
	model: "EX $1i"
};
var Hipstreet = {
	regex: "10DTB12(?:[);/ ]|$)",
	device: "tablet",
	model: "Phoenix"
};
var Navitech = {
	regex: "(NeoTab)[ _-]((?:S1[23]0|S125|H85|H11[05]|KID741|S9700))(?:[);/ ]|$)",
	device: "tablet",
	model: "$1 $2"
};
var NorthTech = {
	regex: "(NT-TP10)(?:[);/ ]|$)",
	device: "tablet",
	model: "TouchPad 10.0\""
};
var UNIWA = {
	regex: "UNIWA[ _](X5)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Andowl = {
	regex: "ANDOWL-(Q[45])(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Silelis = {
	regex: "Silelis[ _](T-1)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Bluedot = {
	regex: "BLUEDOT[_ ]|(?:BNT-71)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "(?:BLUEDOT[_ ])?(BNP-500)(?:[);/ ]|$)",
			device: "smartphone",
			model: "$1"
		},
		{
			regex: "(BNT-71)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Reach = {
	regex: "(Allure[_ ](?:Ultra(?:[_]Curve)?|Secure|Admire|Rise))(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var MobiWire = {
	regex: "(?:Kiona|KANUNA|Halona|Kicka[_ ][45][ _]Plus|Kohana|Kosumi|KWANITA|Lonan|Hotah|Kicka 5|Kiona)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "KANUNA",
			model: "Kanuna"
		},
		{
			regex: "KWANITA",
			model: "Kwanita"
		},
		{
			regex: "(Kiona|Kicka[_ ][45][ _]Plus|Kohana|Kosumi|Lonan|Halona|Hotah|Kicka 5|Kiona)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Hezire = {
	regex: "(HTB801)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Hurricane = {
	regex: "Hurricane[ _]|(?:Flame_Plus)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Hurricane[ _]IGNITE",
			model: "Ignite"
		},
		{
			regex: "Hurricane[ _]Bolt",
			model: "Bolt"
		},
		{
			regex: "Hurricane[ _]VORTEX",
			model: "Vortex"
		},
		{
			regex: "Hurricane[ _]GIGA",
			model: "Giga"
		},
		{
			regex: "Flame_Plus",
			model: "Flame Plus"
		}
	]
};
var iSWAG = {
	regex: "ISWAG[ _]",
	device: "smartphone",
	models: [
		{
			regex: "ISWAG[_ ]VIPER",
			model: "Viper"
		},
		{
			regex: "iSWAG[_ ]Lynx",
			model: "Lynx"
		},
		{
			regex: "iSWAG[_ ]MANTRA",
			model: "Mantra"
		},
		{
			regex: "iSWAG[_ ]MEGA",
			model: "Mega"
		},
		{
			regex: "iSWAG[_ ]NEMESIS",
			model: "Nemesis"
		}
	]
};
var Reeder = {
	regex: "(?:reeder[_ ](?:3G_Tablet|A7iC|A[78]i[_ ]Quad|A8i Q2|M8 Plus|[TM]8|M10 Plus|P11SE)|P12Curve)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "reeder[_ ](3G_Tablet|A7iC|A[78]i[_ ]Quad|A8i Q2|M8 Plus|[TM]8|M10 Plus|P11SE)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "P12Curve",
			device: "smartphone",
			model: "P12 Curve"
		}
	]
};
var ELARI = {
	regex: "KidPhone4G(?:[);/ ]|$)",
	device: "wearable",
	model: "KidPhone 4G"
};
var Altice = {
	regex: "Altice[ _](S62|S31|S43)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Kult = {
	regex: "(Ambition|Beyond)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Beyond = {
	regex: "SURVE(10|[26-8]|[12] PRO)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "SURVE([12]) PRO",
			model: "Surve $1 Pro"
		},
		{
			regex: "SURVE(10|[26-8])",
			model: "Surve $1"
		}
	]
};
var BioRugged = {
	regex: "(?:BioWolf 8-F30|BIOWOLF8F30|Ruggbo 20 Lite)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "BioWolf 8-F30|BIOWOLF8F30",
			model: "BioWolf 8-F30"
		},
		{
			regex: "Ruggbo 20 Lite",
			model: "Ruggbo 20 Lite"
		}
	]
};
var VAIO = {
	regex: "(?:VPA051|VA-10J)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "VPA051",
			model: "Phone A"
		},
		{
			regex: "(VA-10J)",
			model: "$1"
		}
	]
};
var Spark = {
	regex: "Spark Plus 3(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Plus 3",
			model: "Plus 3"
		}
	]
};
var SPC = {
	regex: "(?:Gravity Max|GRAVITY_OCTACORE|SPC SMART LITE|SPC_ALIEN(?:_STICK)?|SPC Glow9.7)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "GRAVITY_OCTACORE",
			model: "Gravity OctaCore"
		},
		{
			regex: "Gravity Max",
			model: "Gravity Max"
		},
		{
			regex: "SPC Glow9.7",
			model: "Glow 9.7\""
		},
		{
			regex: "SPC SMART LITE",
			device: "smartphone",
			model: "Smart Lite"
		},
		{
			regex: "SPC_ALIEN_STICK",
			device: "tv",
			model: "Alien Stick"
		},
		{
			regex: "SPC_ALIEN",
			device: "tv",
			model: "Alien"
		}
	]
};
var Winmax = {
	regex: "Winmax[ _](?:XC14|XC[46]|TX30)(?:[);/ ]|$)|MAUI.+Winmax_BD45",
	device: "smartphone",
	models: [
		{
			regex: "Winmax[ _](XC14|XC[46])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Winmax[ _](TX30)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "MAUI.+Winmax_(BD45)",
			device: "feature phone",
			model: "$1"
		}
	]
};
var Zebra = {
	regex: " (TC5[16]|TC2[05]|TC75|TC7[05]x|TC700H)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Thuraya = {
	regex: "Thuraya[ _](X5-Touch)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Bkav = {
	regex: "Bphone[ _](B111[45]|B2017)(?:[);/ ]|$)",
	device: "smartphone",
	model: "Bphone $1"
};
var Brandt = {
	regex: "(BPRIME|BSTAR\\+?|BPRIMES|B-ONE)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Bigben = {
	regex: "GAMETAB-ONE(?:[);/ ]|$)",
	device: "tablet",
	model: "GameTab-One"
};
var SMARTEC = {
	regex: "(Atractivo)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Asanzo = {
	regex: "ASANZO[ _](?:A2|S[23]|[SZ]5|S3_PLUS)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ASANZO[ _]S3[ _]PLUS",
			model: "S3 Plus"
		},
		{
			regex: "ASANZO[ _](A2|S[23]|[SZ]5)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Artizlee = {
	regex: "Artizlee[ _]S9|ATL-(?:16|21(?:PLUS|[XT])?|31|26)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "ATL-21PLUS(?:[);/ ]|$)",
			model: "ATL-21 Plus"
		},
		{
			regex: "(ATL-(?:16|21[XT]?|31|26))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Artizlee[ _]S9",
			device: "smartphone",
			model: "S9"
		}
	]
};
var Mintt = {
	regex: "(?:Coolmintt(?:A3|M2)?|Ultramintt(?:S2)?|FRESHMINTT(?:A7|A10)?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Coolmintt ?([PM]1|P3|A3|M2)(?:[);/ ]|$)",
			model: "CoolMintt $1"
		},
		{
			regex: "Ultramintt ?([SR]1|S2)(?:[);/ ]|$)",
			model: "UltraMintt $1"
		},
		{
			regex: "FRESHMINTT ?(A7|A10)(?:[);/ ]|$)",
			device: "tablet",
			model: "FreshMintt $1"
		}
	]
};
var Premio = {
	regex: "(?:186HS2080531|186HS1050531|186HS1050232|186FT1080231|185FT5050231|PREMIO[ _](?:S50|P420|P451))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "186HS2080531",
			model: "X1"
		},
		{
			regex: "186HS1050531",
			model: "P541"
		},
		{
			regex: "185FT5050231",
			model: "P511"
		},
		{
			regex: "186FT1080231",
			model: "P571"
		},
		{
			regex: "186HS1050232",
			model: "P630"
		},
		{
			regex: "PREMIO[ _](S50|P420|P451)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Trifone = {
	regex: "Passion[-_](?:1S|PRO|PLUS)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Passion-1S",
			model: "Passion 1S"
		},
		{
			regex: "Passion-Plus",
			model: "Passion Plus"
		},
		{
			regex: "Passion_Pro",
			model: "Passion Pro"
		}
	]
};
var Bluewave = {
	regex: "(?:33GT HD|WV8R-M|WV8R[_-]N)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "33GT HD",
			model: "Wave 8 HD+"
		},
		{
			regex: "WV8R-M",
			model: "Wave 8 Red Marshmallow"
		},
		{
			regex: "WV8R[_-]N",
			model: "Wave 8 Red Nougat"
		}
	]
};
var Siragon = {
	regex: "Siragon|(?:SP-(?:5250|5400|5050))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Siragon[_ ])?(SP-(?:5[12]50|5400|5050))",
			model: "$1"
		}
	]
};
var Poppox = {
	regex: "Poppox P3",
	device: "smartphone",
	model: "P3"
};
var Zentality = {
	regex: "C-723ULTRA(?:[);/ ]|$)",
	device: "tablet",
	model: "C-723 Ultra"
};
var Fortis = {
	regex: "(Apollo 5 Neo)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var OpelMobile = {
	regex: " OpelMobile_(SmartJX)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var NuAns = {
	regex: "NEO \\[Reloaded\\](?:[);/ ]|$)",
	device: "smartphone",
	model: "NEO Reloaded"
};
var Koolnee = {
	regex: "(K1 Trio)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Sansui = {
	regex: "Sansui[_ ]",
	device: "smartphone",
	models: [
		{
			regex: "Sansui[_ ](Switch|Play|Fun|SA4[01]|U4[56]|U3[02]|Nova)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Sico = {
	regex: "SICO[_ ](?:PLUS|e1002)|Express3-Max|SSR3-1-51-5M|SSD-1-53-13M",
	device: "smartphone",
	models: [
		{
			regex: "SICO[_ ]PLUS2",
			model: "Plus 2"
		},
		{
			regex: "SICO[_ ]PLUS",
			model: "Plus"
		},
		{
			regex: "SSR3-1-51-5M",
			model: "Pro 3"
		},
		{
			regex: "SSD-1-53-13M",
			model: "Diamond"
		},
		{
			regex: "SICO[_ ]e1002",
			device: "tablet",
			model: "E1002"
		},
		{
			regex: "Express3-Max",
			device: "tablet",
			model: "Express 3 Max"
		}
	]
};
var Smadl = {
	regex: "Android.+(?:Safari)(?!/[\\d.]+)(?: Build|\\) AppleWebKit)|SMADL[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Android.+(?:Safari)(?!/[\\d.]+)(?: Build|\\) AppleWebKit)",
			model: "Safari"
		},
		{
			regex: "SMADL[ _]Matri([2X])",
			model: "Matri $1"
		}
	]
};
var EXCEED = {
	regex: "(EX7SL?4|EX10S4)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Tymes = {
	regex: "Tymes[ _](V5)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Solone = {
	regex: "SOLONE|(?:E1457|W145[02])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "E1457",
			model: "Earth Iron E1457"
		},
		{
			regex: "W1450",
			model: "Wind Breeze W1450"
		},
		{
			regex: "W1452",
			model: "Wind Air W1452"
		},
		{
			regex: "SOLONE A47",
			model: "SL-A47"
		},
		{
			regex: "SOLONE[ _]Elite[ _]L5501",
			model: "Elite L5501"
		},
		{
			regex: "SOLONE[ _]SUMO[_ ]S5001",
			model: "Sumo S5001"
		},
		{
			regex: "SOLONE[ _](SL-K40|S5002)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var FarEasTone = {
	regex: "Smart ?(601|550|50[59])(?:[);/ ]|$)",
	device: "smartphone",
	model: "Smart $1"
};
var Smailo = {
	regex: "Smailo_(2GO)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Colors = {
	regex: "(?:Colors[ _](S(?:[19]|11)|P70|P[456]5|P32|E15|P50 Plus)|Pride_1A|P52_Pride5C|P90_Pride5X)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Pride_1A(?:[);/ ]|$)",
			model: "Pride 1A"
		},
		{
			regex: "P52_Pride5C(?:[);/ ]|$)",
			model: "Pride 5C"
		},
		{
			regex: "P90_Pride5X(?:[);/ ]|$)",
			model: "Pride 5X"
		},
		{
			regex: "Colors[ _](S(?:[19]|11)|P70|E15|P[456]5|P32|P50 Plus)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Honeywell = {
	regex: "(EDA50K?|EDA70|EDA51)(?:[);/ ]|$)",
	device: "smartphone",
	model: "ScanPal $1"
};
var Electroneum = {
	regex: "electroneum(M1)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Pluzz = {
	regex: "Pluzz[_-](Z552|PL5[05]10|PL4010|PL501[46]|Elite_Dual)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var IUNI = {
	regex: "IUNI[ _]",
	device: "smartphone",
	models: [
		{
			regex: "IUNI[ _](U3|i1|N1)",
			model: "$1"
		}
	]
};
var Ordissimo$1 = {
	regex: "(LeNumero1)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Necnot = {
	regex: "(M002[DGQK]-2|M002N|M002N-3T|M002W-2T|6M-3T)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Einstein = {
	regex: "Einstein(T3)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var AfriOne = {
	regex: "(CYGNUSX?|Gravity Z2|ChampionPro)(?:[);/ ]|$)",
	device: "phablet",
	models: [
		{
			regex: "CYGNUSX(?:[);/ ]|$)",
			model: "Cygnus X"
		},
		{
			regex: "CYGNUS(?:[);/ ]|$)",
			model: "Cygnus"
		},
		{
			regex: "Gravity Z2(?:[);/ ]|$)",
			device: "smartphone",
			model: "Gravity Z2"
		},
		{
			regex: "ChampionPro(?:[);/ ]|$)",
			device: "smartphone",
			model: "Champion Pro"
		}
	]
};
var Connex = {
	regex: "(CTAB1044hn|CTAB-1044)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Connectce = {
	regex: "(?:CP6001A)(?:[);/ ]|$)",
	device: "smartphone",
	model: "Connect Core 6"
};
var Clementoni = {
	regex: "(?:CLEMPAD[_ ](?:6_XL|HR_Plus|HR|[68]|7_S|201[89])|ClemPhone_7|MFC_(?:2018|8))(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "CLEMPAD_(201[89])",
			model: "Clempad ($1)"
		},
		{
			regex: "MFC_2018",
			model: "Clempad (2018)"
		},
		{
			regex: "MFC_8",
			model: "Clempad 8"
		},
		{
			regex: "CLEMPAD_7_S",
			model: "Clempad 7S"
		},
		{
			regex: "Clempad[_ ](6_XL|HR_Plus|HR|[68])",
			model: "Clempad $1"
		},
		{
			regex: "ClemPhone[ _](7)",
			device: "smartphone",
			model: "Clemphone $1"
		}
	]
};
var VC = {
	regex: "(?:Camellia_II|Cactus II|Maple III|Maple-II|Cactus-Pro|LavenderII|Jasmine-II)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(Camellia_II|Cactus II|Maple III)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Cactus-Pro",
			model: "Cactus Pro"
		},
		{
			regex: "(Maple|Jasmine|Lavender)-?II(?:[);/ ]|$)",
			model: "$1 II"
		}
	]
};
var CellAllure = {
	regex: "(?:Cool_Extreme_2|Earn|Fashion2Plus|Fashion[ _]C|Cool Duo|CHIC_X1)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(Cool_Extreme_2|Earn|Fashion[ _]C|Cool Duo)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Fashion2Plus",
			model: "Fashion 2 Plus"
		},
		{
			regex: "CHIC_X1",
			model: "Chic X1"
		}
	]
};
var Eagle = {
	regex: "Eagle[ _](Classic Pro|Elite|Gold)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Invens = {
	regex: "(Fighter|Eager)(?: Build|[;)])",
	device: "smartphone",
	model: "$1"
};
var Claresta = {
	regex: "Claresta[ _]|(?:AirPhoneS[56]|AirPhone K6)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "AirPhone ?(S[56]|K6)",
			model: "AirPhone $1"
		},
		{
			regex: "Claresta (F3) PRO",
			model: "$1 Pro"
		},
		{
			regex: "Claresta[ _](F4)",
			model: "$1"
		}
	]
};
var Camfone = {
	regex: "(?:Camfone (?:SE)|Hero[_ ](?:H5\\+|SE2|H9|(?:H7|XR)_Plus|SX|1[123]|SE3[ _]Max)|Honey (?:Y1|Y2s))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(Hero[_ ](?:H5\\+|SE2|H9|(?:H7|XR)_Plus|SX|1[123]|SE3[ _]Max)|Honey (?:Y1|Y2s))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Camfone (SE)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Bellphone = {
	regex: "Bp100 X-Plus(?:[);/ ]|$)",
	device: "smartphone",
	model: "BP 100 X-Plus"
};
var Gini = {
	regex: "Gini[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Gini[ _]W(7)",
			model: "W$1"
		},
		{
			regex: "Gini[ _]n(8)",
			model: "N$1"
		},
		{
			regex: "Gini[ _]s5Pro",
			model: "S5 Pro"
		},
		{
			regex: "Gini[ _]Tab[ _](V[78])",
			device: "tablet",
			model: "Tab $1"
		}
	]
};
var MIVO = {
	regex: "(Caryota [1245789]|Jazz J[13] 2018)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(Caryota [1245789])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Jazz (J[13]) 2018",
			model: "Jazz $1 (2018)"
		}
	]
};
var Jesy = {
	regex: "Jesy_(J7)",
	device: "smartphone",
	model: "$1"
};
var Teknosa = {
	regex: "Preo[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Preo Teknosa P1",
			model: "Preo P1"
		},
		{
			regex: "Preo[ _]P([23])",
			model: "Preo P$1"
		}
	]
};
var Hyve = {
	regex: "(?:Pryme 01|ST01)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Pryme 01",
			model: "Pryme 01"
		},
		{
			regex: "ST01",
			model: "Storm ST01"
		}
	]
};
var EWIS = {
	regex: "OCTA T720Q(?:[);/ ]|$)",
	device: "tablet",
	model: "Octa T720Q"
};
var Cavion = {
	regex: "(?:Cavion[_ ](?:Solid[_ ]4[\\._]5|Base[ _](?:7|7_3G_Silver|5\\.0|10|7.2 Quad)|10_3GRQ)|Cavion7.1quad)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Cavion[_ ]Solid[_ ]4[\\._]5",
			model: "Solid 4.5\""
		},
		{
			regex: "Cavion BASE 5.0",
			model: "Base 5.0\""
		},
		{
			regex: "CAVION_10_3GRQ",
			device: "tablet",
			model: "Base 10 3GR Quad"
		},
		{
			regex: "Cavion(?:7.1quad)",
			device: "tablet",
			model: "Base 7.1\" Quad"
		},
		{
			regex: "Cavion Base 7.2 Quad",
			device: "tablet",
			model: "Base 7.2\" Quad"
		},
		{
			regex: "Cavion Base 10",
			device: "tablet",
			model: "Base 10"
		},
		{
			regex: "Cavion Base 7 Dual",
			device: "tablet",
			model: "Base 7.0\" Dual"
		},
		{
			regex: "Cavion Base 7 Quad",
			device: "tablet",
			model: "Base 7.0\" Quad"
		},
		{
			regex: "Cavion_Base_7_3G_Silver",
			device: "tablet",
			model: "Base 7.0\" 3G Silver"
		}
	]
};
var GLX = {
	regex: "GLX (?:Aria|Dorna|Taban|Shine|Spark|ASA)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "GLX ASA",
			model: "Asa"
		},
		{
			regex: "GLX (Aria|Taban|Shine|Spark)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "GLX (Dorna)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Seeken = {
	regex: "Seeken[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "Seeken[_ -](SG1|SJ1)",
			model: "$1"
		},
		{
			regex: "Seeken[_ -](ST-101)",
			device: "tablet",
			model: "$1"
		}
	]
};
var Jivi = {
	regex: "(?:Revolution TnT3|Xtreme_(?:[37]|3x)|Xtreme (?:XT84|XT309 Plus|1))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Revolution (TnT3)",
			model: "Revolution $1"
		},
		{
			regex: "Xtreme (XT84)",
			model: "Xtreme Klick $1"
		},
		{
			regex: "Xtreme (XT309) Plus",
			model: "Xtreme View Pro $1Plus"
		},
		{
			regex: "Xtreme[ _]([137]|3x)(?:[);/ ]|$)",
			model: "Xtreme $1"
		}
	]
};
var Winnovo = {
	regex: "Winnovo[ _]",
	device: "tablet",
	models: [
		{
			regex: "Winnovo[ _](M866|M798|VTab|750[PK])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Winnovo[ _](K5[46]|K43)[a-z]{2}",
			device: "smartphone",
			model: "$1"
		}
	]
};
var WE = {
	regex: "WE (A[15]0|B3|F[12]0|E[12]|L[3469]|R[34]|V[34]|S1|X[13]|T1)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Trio = {
	regex: "Trio V51 DT(?:[);/ ]|$)",
	device: "smartphone",
	model: "V51DT"
};
var Seuic = {
	regex: "(AUTOID9N)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Centric = {
	regex: "(?:Centric[- ]CM(?:5001|33[23]1|3321Plus)|CM4331)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(?:Centric[- ])?CM5001",
			model: "A1"
		},
		{
			regex: "(?:Centric[- ])?CM3321Plus",
			model: "P1 Plus"
		},
		{
			regex: "(?:Centric[- ])?CM3321",
			model: "P1"
		},
		{
			regex: "(?:Centric[- ])?CM3331",
			model: "L3"
		},
		{
			regex: "(?:Centric[- ])?CM4331",
			model: "G1"
		}
	]
};
var Kata = {
	regex: "Kata[ _-]",
	device: "smartphone",
	models: [
		{
			regex: "Kata[ _-](C3|L1|M3s|M4|V[56])(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Kata[ _-]i5-\\w",
			model: "I5"
		},
		{
			regex: "Kata-(T5)(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Kata-Tmini4(?:[);/ ]|$)",
			device: "tablet",
			model: "T Mini 4"
		},
		{
			regex: "Kata Box 2(?:[);/ ]|$)",
			device: "tv",
			model: "Box 2"
		}
	]
};
var Leff = {
	regex: "Leff Shell (?:HV320WHB-N55|LC390TA2A)(?:[);/ ]|$)",
	device: "tv",
	model: ""
};
var Hardkernel = {
	regex: "ODROID[-]?(C2|U2|XU[34])(?:[);/ ]|$)",
	device: "peripheral",
	model: "ODROID $1"
};
var Wiseasy = {
	regex: "WISENET5(?:[);/ ]|$)",
	device: "peripheral",
	model: "WISENET5"
};
var BBK = {
	regex: "([65]5|4[03]|3[29]|28)LEX[-_](81(?:27|39|45|58|61)|71(?:[23]7|4[345]|5[45]|6[368]|[57]8))[_/]([FU]?TS2C)(?:[);/ ]|$)",
	device: "tv",
	model: "$1LEX-$2/$3"
};
var Westpoint = {
	regex: "WESTPOINT[;,]",
	device: "tv",
	models: [
		{
			regex: "(TETS-4919SM)",
			model: "$1"
		}
	]
};
var Wintouch = {
	regex: "Q93S",
	device: "tablet",
	model: "Q93S"
};
var Aiuto = {
	regex: "(AT702)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Seatel = {
	regex: "Seatel",
	device: "smartphone",
	models: [
		{
			regex: "Seatel[ _](L2|V8[AE]|T[5-8]|R6|V[89])(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Ditecma = {
	regex: "(M1092R(?:-[12]|V[45])?)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Datamini = {
	regex: "(K908H4G)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Formuler = {
	regex: "Formuler[ _]",
	device: "tv",
	models: [
		{
			regex: "Formuler[ _](Z8(?: Pro)?)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Malata = {
	regex: "(?:Build/)?Malata[ _]?([a-z0-9]+)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var IT = {
	regex: "IT-(?:1101S?|1101-QUAD)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "IT-1101-QUAD",
			model: "1101 Quad"
		},
		{
			regex: "IT-(1101S?)",
			model: "$1"
		}
	]
};
var Navcity = {
	regex: "NP-752Go(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "NP-752Go",
			model: "NP-752 Go"
		}
	]
};
var Jiake = {
	regex: "(?:JK(?:960|103) 3G|JK-?760)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "JK-?(760)(?:[);/ ]|$)",
			model: "JK-$1"
		},
		{
			regex: "JK(960|103) 3G(?:[);/ ]|$)",
			device: "tablet",
			model: "JK-$1 3G"
		}
	]
};
var Mantra = {
	regex: "(MFSTAB(?:_74G)?)(?:[);/ ]|$)",
	device: "peripheral",
	model: "$1"
};
var Datalogic = {
	regex: "(?:MEMOR 10)(?:[);/ ]|$)",
	device: "smartphone",
	model: "Memor 10"
};
var Navitel = {
	regex: "NAVITEL[ _]",
	device: "tablet",
	models: [
		{
			regex: "NAVITEL[ _](T70[07]) 3G(?:[);/ ]|$)",
			model: "$1 3G"
		},
		{
			regex: "NAVITEL[ _](T757)LTE(?:[);/ ]|$)",
			model: "$1 LTE"
		},
		{
			regex: "NAVITEL[ _](A73[0157]|A650)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "RE900 Full HD(?:[);/ ]|$)",
			model: "RE900 Full HD"
		}
	]
};
var Linnex = {
	regex: "LI(22)(?:[);/ ]|$)",
	device: "smartphone",
	model: "Li $1"
};
var Smartab = {
	regex: "(ST1009)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var SuperTab = {
	regex: "SuperTab(A10|K7|S7G)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var Suzuki = {
	regex: "SUZUKI[ _]|(?:ECOPAD7|SUMOPad10)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "SUMOPAD(8100|10)(?:[);/ ]|$)",
			model: "SumoPad $1"
		},
		{
			regex: "ECOPAD7",
			model: "ECOPad 7"
		}
	]
};
var Philips$1 = {
	regex: "Philips|AND1E(?:[);/ ]|$)|NETTV/|PI3210G|TLE(821L|722G)|TPM1[79]1E|70PUH6774_96|QM16[134]E|Xenium S[25]66|S397|W5510",
	device: "smartphone",
	models: [
		{
			regex: "(?:Philips[_ ])?Xenium[ _](S[25]66|V787)(?:[);/ ]|$)",
			model: "Xenium $1"
		},
		{
			regex: "(?:Philips[_ ])?(S397|W5510)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "AND1E(?: TV)?(?:[);/ ]|$)",
			model: "Android TV",
			device: "tv"
		},
		{
			regex: "(PI3210G)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(TPM1[79]1E)",
			model: "$1",
			device: "tv"
		},
		{
			regex: "(QM16[134]E)",
			model: "$1",
			device: "tv"
		},
		{
			regex: "(70PUH6774)_96",
			model: "$1/96 4K UHD",
			device: "tv"
		},
		{
			regex: "(TLE821L)(?:[);/ ]|$)",
			model: "$1 4G LTE",
			device: "tablet"
		},
		{
			regex: "(TLE722G)(?:[);/ ]|$)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Philips, BDP([0-9]{4})",
			model: "Blu-ray Player (BDP$1)",
			device: "tv"
		},
		{
			regex: "Philips, ([a-z0-9-]+)",
			model: "$1",
			device: "tv"
		},
		{
			regex: "(NETTV/[0-9\\.]{5})",
			model: "NetTV Series",
			device: "tv"
		},
		{
			regex: "Philips-FISIO ([a-z0-9]+)",
			model: "Fisio $1"
		},
		{
			regex: "Philips[ _-]?([a-z0-9\\-@]+)",
			model: "$1"
		}
	]
};
var INCAR = {
	regex: "(KZCAR)(?:[);/ ]|$)",
	device: "car browser",
	model: "$1"
};
var Nabi = {
	regex: "(?:DMTAB-(?:IN08A|NV08B|NV2[04]A)|NBTY07SMKG|NBFP07PMKG|SNB02-NV7A|NABI2-NV7A)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "DMTAB-(?:IN08A|NV08B)",
			model: "Dream Tab HD 8.0\""
		},
		{
			regex: "DMTAB-NV(2[04])A",
			model: "Big Tab HD $1.0\""
		},
		{
			regex: "NBTY07SMKG",
			model: "Barbie Tab 7.0\""
		},
		{
			regex: "NBFP07PMKG",
			model: "Fisher Price Learning Tab 7.0\""
		},
		{
			regex: "SNB02-NV7A",
			model: "2S Tab"
		},
		{
			regex: "NABI2-NV7A",
			model: "2 Tab"
		}
	]
};
var StrawBerry = {
	regex: "StrawBerry[ _]",
	device: "smartphone",
	models: [
		{
			regex: "StrawBerry[ _](SX|QX15)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Gresso = {
	regex: "Gresso[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Gresso[ _]Regal(?:[);/ ]|$)",
			model: "Regal"
		}
	]
};
var Pendoo = {
	regex: "Pendoo|A5X MAX(?:[\\.-]\\w+)?\\.01\\.d4",
	device: "tv",
	models: [
		{
			regex: "Pendoo ?(T95Z|X10) PLUS",
			model: "$1 Plus"
		},
		{
			regex: "Pendoo ?X8PRO+",
			model: "X8 Pro+"
		},
		{
			regex: "Pendoo[ \\.]?(X9[29])",
			model: "$1"
		},
		{
			regex: "pendoo mini",
			model: "Mini"
		},
		{
			regex: "A5X MAX(?:[\\.-]\\w+)?\\.01\\.d4",
			model: "A5X Max"
		}
	]
};
var PiPO = {
	regex: "Pipo[_ ]|PipoM9Pro",
	device: "tablet",
	models: [
		{
			regex: "Pipo[_ ]([TP]9)",
			model: "$1"
		},
		{
			regex: "PipoM9Pro",
			model: "M9 Pro"
		},
		{
			regex: "PIPO[_ ](X10|X9S)",
			device: "tv",
			model: "$1"
		}
	]
};
var Engel = {
	regex: "(EN1007Q)plus(?:[);/ ]|$)",
	device: "tv",
	model: "$1 Plus"
};
var Genesis = {
	regex: "(SK-Mtek GT730[15])(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var InfoKit = {
	regex: "(TVB-906X)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
};
var Blloc = {
	regex: "(Zero18)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Huskee = {
	regex: "VULKANO(?:[);/ ]|$)",
	device: "smartphone",
	model: "Vulkano"
};
var SOLE = {
	regex: "SOLE[_ ]POP[_ ]S([45]0)(?:[);/ ]|$)",
	device: "smartphone",
	model: "Pop S$1"
};
var SOLO = {
	regex: "SOLO[_ ](Aspire(?: M)?)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var OINOM = {
	regex: "OINOM[_ ](V9D|V7H|V[679])(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var Singtech = {
	regex: "Singtech|(?:Sapphire[_ ](?:H50S|H7S?|H90))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Sapphire[_ ](H50S|H7S?|H90)(?:[);/ ]|$)",
			model: "Sapphire $1"
		},
		{
			regex: "Singtech[ _](Q2|S1)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Sunny = {
	regex: "(SS4G9 Mira|SS4G7 Sole|SS4G1 Luna|SS4G8 Nora|SS4G6 Lola)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var TEENO = {
	regex: "TEENO",
	device: "smartphone",
	models: [
		{
			regex: "TEENO[_ ](S9|A1|S11)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var OASYS = {
	regex: "(TEG9300)(?:[);/ ]|$)",
	device: "peripheral",
	model: "$1"
};
var Aspera = {
	regex: "ASPERA|(?:Wren)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ASPERA[ _](R5h|RT3|A4[02]|A50)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Wren(?:[);/ ]|$)",
			model: "Wren"
		}
	]
};
var NOBUX = {
	regex: "SMART_VOLT_NX5(?:[);/ ]|$)",
	device: "smartphone",
	model: "Smart Volt NX5"
};
var Hitech = {
	regex: "(Amaze[ _](?:S2_4G|S[56] 4G|S1|S[56](?: Plus)?))(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
};
var F150 = {
	regex: "Bison2021(?:[);/ ]|$)",
	device: "smartphone",
	model: "B2021"
};
var BilimLand = {
	regex: "BilimBook mini(?:[);/ ]|$)",
	device: "desktop",
	model: "BilimBook Mini"
};
var Greentel = {
	regex: "X1_Light_Lte(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "X1_Light_Lte",
			model: "X1 Light LTE"
		}
	]
};
var Kyowon = {
	regex: "(KA-E410W)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var GFive = {
	regex: "(?:PRESIDENT_GOLD_(9|10))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "PRESIDENT_GOLD_(9|10)",
			model: "President Gold $1"
		}
	]
};
var KINGZONE = {
	regex: "KINGZONE_",
	device: "smartphone",
	models: [
		{
			regex: "KINGZONE_(N5)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var Fantec = {
	regex: "FAN-M300H(?:[);/ ]|$)",
	device: "smartphone",
	model: "M300H"
};
var AURIS = {
	regex: "(TB-703G)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
};
var YUHO = {
	regex: "YUHO_",
	device: "smartphone",
	models: [
		{
			regex: "YUHO_(O2|H2|Y[123])_PRO",
			model: "$1 Pro"
		},
		{
			regex: "YUHO_Vast_Plus",
			model: "Vast Plus"
		},
		{
			regex: "YUHO_Y1_ACE",
			model: "Y1 Ace"
		},
		{
			regex: "YUHO_Y1_STAR",
			model: "Y1 Star"
		},
		{
			regex: "YUHO_O1_LITE",
			model: "O1 Lite"
		},
		{
			regex: "YUHO_(Vast2?|O[12]|Y2)(?:[);/ ]|$)",
			model: "$1"
		}
	]
};
var require$$0$8 = {
	"360": {
	regex: "(?:180[1379]-A01|1713-A01|1707-A01|1509-A00|1603-A03|1607-A01|1503-A01)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "1807-A01(?:[);/ ]|$)",
			model: "N7"
		},
		{
			regex: "1803-A01(?:[);/ ]|$)",
			model: "N7 Lite"
		},
		{
			regex: "1809-A01(?:[);/ ]|$)",
			model: "N7 Pro"
		},
		{
			regex: "1713-A01(?:[);/ ]|$)",
			model: "N6 Lite"
		},
		{
			regex: "1707-A01(?:[);/ ]|$)",
			model: "N6"
		},
		{
			regex: "1801-A01(?:[);/ ]|$)",
			model: "N6 Pro"
		},
		{
			regex: "1509-A00(?:[);/ ]|$)",
			model: "Q5 Plus"
		},
		{
			regex: "1503-A01(?:[);/ ]|$)",
			model: "N4"
		},
		{
			regex: "1603-A03(?:[);/ ]|$)",
			model: "N4A"
		},
		{
			regex: "1607-A01(?:[);/ ]|$)",
			model: "N5S"
		}
	]
},
	"8848": {
	regex: "8848 (M[3-6])(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	Ace: Ace,
	"Tunisie Telecom": {
	regex: "StarTrail TT(?:[);/ ]|$)",
	device: "smartphone",
	model: "StarTrail by TT"
},
	SFR: SFR,
	HTC: HTC,
	Microsoft: Microsoft$2,
	Nokia: Nokia,
	CnM: CnM,
	RIM: RIM,
	CHIA: CHIA,
	Palm: Palm,
	HP: HP$2,
	TiPhone: TiPhone,
	Apple: Apple$1,
	MicroMax: MicroMax,
	"3Q": {
	regex: "AC0731B|AC1024C|AC7803C|BC9710AM|EL72B|LC0720C|LC0723B|LC0725B|LC0804B|LC0808B|LC0809B|LC0810C|LC0816C|LC0901D|LC1016C|MT0724B|MT0729[BD]|MT0811B|OC1020A|RC0709B|RC0710B|RC0718C|RC0719H|RC0721B|RC0722C|RC0726B|RC0734H|RC0743H|RC0817C|RC1018C|RC1019G|RC1025F|RC1301C|RC780[24]F|RC9711B|RC9712C|RC9716B|RC9717B|RC9724C|RC9726C|RC9727F|RC9730C|RC9731C|TS0807B|TS1013B|VM0711A|VM1017A|RC0813C|QS9719D|QS9718C|QS9715F|QS1023H|QS0815C|QS0730C|QS0728C|QS0717D|QS0716D|QS0715C|MT7801C|TS9708B|AC0732C|MT0739D|MT0812E|(?:3Q_)?ER71B",
	device: "tablet",
	models: [
		{
			regex: "MT0724B|LC0901D|LC0816C|LC0810C|LC0809B|LC0808B|LC0804B|LC0725B|LC0723B",
			model: "Qoo! P-Pad"
		},
		{
			regex: "VM1017A|TS1013B|TS0807B|RC9731C|RC9730C|RC9727F|RC9726C|RC9724C|RC9717B|RC9716B|RC9712C|RC9711B|RC1301C|RC1025F|RC1019G|RC1018C|RC0817C|RC0813C|RC0743H|RC0734H|RC0726B|RC0722C|RC0721B|RC0719H|RC0718C|RC0710B|RC0709B|QS9715F|QS1023H|QS0815C|QS0730C|QS0728C|QS0717D|QS0716D|QS0715C|MT0811B|MT0739D|MT0729[BD]|LC1016C|LC0720C|BC9710AM|AC1024C|AC0731B",
			model: "Qoo! Q-Pad"
		},
		{
			regex: "MT7801C|QS9718C|QS9719D|VM0711A|OC1020A",
			model: "Qoo! Surf"
		},
		{
			regex: "TS9708B",
			model: "Surf TS1009B"
		},
		{
			regex: "AC7803C|AC0732C",
			model: "Qoo! Lite"
		},
		{
			regex: "MT0812E|RC7802F",
			model: "Qoo! Meta"
		},
		{
			regex: "EL72B|(?:3Q_)?ER71B",
			model: "Qoo! Q-Book"
		},
		{
			regex: "(RC7804F)",
			model: "Qoo! Glaze"
		}
	]
},
	"4Good": {
	regex: "4Good[ _]|S450m [43]G|S555m 4G|S501m 3G|T700i_3G|People (?:G503|G410|GT300)|Light (?:A103|B100)",
	device: "smartphone",
	models: [
		{
			regex: "T700i_3G",
			model: "T700i 3G",
			device: "tablet"
		},
		{
			regex: "People GT300",
			model: "People GT300",
			device: "tablet"
		},
		{
			regex: "S555m[_ ]4G",
			model: "People"
		},
		{
			regex: "(S(?:450m|501m)[_ ][43]G|Light (?:A103|B100)|People (?:G503|G410))",
			model: "$1"
		},
		{
			regex: "4Good[ _]([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "4Good[ _]([^);/ ]+)",
			model: "$1"
		}
	]
},
	Acteck: Acteck,
	Alba: Alba,
	AllCall: AllCall,
	Bravis: Bravis,
	Acer: Acer$2,
	Advan: Advan,
	Advance: Advance,
	AGM: AGM,
	Airness: Airness,
	Aiwa: Aiwa,
	Akai: Akai,
	"Arian Space": {
	regex: "Arian Space",
	device: "tablet",
	models: [
		{
			regex: "100 ST1004PG",
			model: "100"
		},
		{
			regex: "80 SS8003PG",
			model: "80"
		},
		{
			regex: "71 ST7002PG",
			model: "71"
		},
		{
			regex: "70 ST7001RW",
			model: "70"
		}
	]
},
	Alcatel: Alcatel,
	Allview: Allview,
	Allwinner: Allwinner,
	altron: altron,
	AMGOO: AMGOO,
	Amoi: Amoi,
	Ainol: Ainol,
	Archos: Archos$1,
	Axxion: Axxion,
	MEU: MEU,
	Arnova: Arnova,
	ARRIS: ARRIS$1,
	Ask: Ask,
	ANS: ANS,
	AOC: AOC$1,
	Assistant: Assistant,
	Ark: Ark,
	"Garmin-Asus": {
	regex: "Garmin-Asus|Garminfone",
	device: "smartphone",
	models: [
		{
			regex: "Garminfone[ \\-_]([^;/]*)Build",
			model: "Garminfone $1"
		},
		{
			regex: "Garmin-Asus[ \\-_]([^;/]+)Build",
			model: "$1"
		},
		{
			regex: "Garmin-Asus[ \\-_]([^;/]+)[\\)/]",
			model: "$1"
		}
	]
},
	Asus: Asus$2,
	Audiovox: Audiovox,
	AVH: AVH,
	Avvio: Avvio,
	"Azumi Mobile": {
	regex: "Azumi[_ -]|(?:SPEED55|A50_Style_Plus)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Azumi[_ -]([^/;]+) Build",
			model: "$1"
		},
		{
			regex: "Azumi[_ -]([a-z0-9_]+)",
			model: "$1"
		},
		{
			regex: "SPEED55",
			model: "Speed 5.5\""
		},
		{
			regex: "A50_Style_Plus",
			model: "A50 Style Plus"
		}
	]
},
	"Barnes & Noble": {
	regex: "Nook|BN[TR]V[0-9]+",
	device: "tablet",
	models: [
		{
			regex: "Nook([a-z0-9]+)",
			model: "Nook $1"
		},
		{
			regex: "Nook[ _]([^/;]+)[ _]Build",
			model: "Nook $1"
		},
		{
			regex: "(BN[TR]V[0-9]+)",
			model: "Nook $1"
		}
	]
},
	BGH: BGH,
	Bitel: Bitel,
	Blu: Blu,
	Bluegood: Bluegood,
	Blackview: Blackview,
	Bluboo: Bluboo,
	"Black Fox": {
	regex: "BMM[ _-]?(?:44[123]D|441[WB]|44[12]S|431D|533D|54[12]S|541[ABW]|54[123]D|543S|531[ABD]|532 S)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "BMM443D",
			model: "B7 Fox+"
		},
		{
			regex: "BMM441S",
			model: "B8 Fox"
		},
		{
			regex: "BMM442S|BMM441B",
			model: "B8 Fox+"
		},
		{
			regex: "BMM441W",
			model: "B8M"
		},
		{
			regex: "BMM442D",
			model: "B7"
		},
		{
			regex: "BMM531D",
			model: "B6"
		},
		{
			regex: "BMM531A",
			model: "B5"
		},
		{
			regex: "BMM541A",
			model: "B5+"
		},
		{
			regex: "BMM543[DS]",
			model: "B4"
		},
		{
			regex: "BMM441D",
			model: "B4 Mini"
		},
		{
			regex: "BMM541B",
			model: "B4 Mini NFC"
		},
		{
			regex: "BMM531B",
			model: "B4 Mini (2019)"
		},
		{
			regex: "BMM542D",
			model: "B3+"
		},
		{
			regex: "BMM541D",
			model: "B3"
		},
		{
			regex: "BMM541W",
			model: "B7R Fox"
		},
		{
			regex: "BMM 532 S",
			model: "BMM 532S"
		},
		{
			regex: "BMM[ _-]?(533D|431D|54[12]S)(?:[);/ ]|$)",
			model: "BMM $1"
		}
	]
},
	bogo: bogo,
	Boway: Boway,
	Brondi: Brondi,
	"VGO TEL": {
	regex: "(?:Venture V(?:[278]|12)|Ocean[_ ][689]|Ocean9L)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Venture V([278]|12)(?:[);/ ]|$)",
			model: "Venture V$1"
		},
		{
			regex: "Ocean[_ ]?([689]|9L)(?:[);/ ]|$)",
			model: "Ocean $1"
		}
	]
},
	Vivo: Vivo,
	Vinsoc: Vinsoc,
	Bird: Bird,
	Becker: Becker,
	Beeline: Beeline,
	Beetel: Beetel,
	"BenQ-Siemens": {
	regex: "BENQ-SIEMENS - ([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
},
	BenQ: BenQ,
	Blaupunkt: Blaupunkt$1,
	Bmobile: Bmobile,
	bq: bq,
	Bush: Bush$1,
	CAGI: CAGI,
	Capitel: Capitel,
	Captiva: Captiva,
	Casio: Casio,
	Casper: Casper,
	Cat: Cat,
	Carrefour: Carrefour,
	Celkon: Celkon,
	Changhong: Changhong$1,
	"Cherry Mobile": {
	regex: "Cherry|Superion S1 DTV|Flare([ _])?(2X|4|A[123]|J[123568]|P[13]|S[4-8]|X2|Y[367]|S Play|HD|LITE|XL|X_V2|Y3s|Tab)(?:[ _](?:Pro|Plus|Max|LTE))?|Fusion Bolt|Omega[_ ](?:Icon 2|Icon Lite 2|lite[_ ][43][Cs]?|HD [45]|HD_Duo)|Spin Max 2|Selfie_Two",
	device: "smartphone",
	models: [
		{
			regex: "(Flare2X)",
			model: "$1"
		},
		{
			regex: "Flare[_ ]HD[_ ]([345])",
			model: "Flare HD $1"
		},
		{
			regex: "Flare_HD_MAX",
			model: "Flare HD Max"
		},
		{
			regex: "FLARE LITE",
			model: "Flare Lite"
		},
		{
			regex: "Flare S Play",
			model: "Flare S Play"
		},
		{
			regex: "Flare[_ ]J([26])S",
			model: "Flare J$1s"
		},
		{
			regex: "Flare_(J2|S7)_Prime",
			model: "Flare $1 Prime"
		},
		{
			regex: "Flare_S7_Deluxe",
			model: "Flare S7 Deluxe"
		},
		{
			regex: "Flare_S7_Power",
			model: "Flare S7 Power"
		},
		{
			regex: "Flare[_ ]Y([367])[_ ]Pro",
			model: "Flare Y$1 Pro"
		},
		{
			regex: "Flare XL Plus",
			model: "Flare XL Plus"
		},
		{
			regex: "Flare[ _]X[_ ]V2",
			model: "Flare X V2"
		},
		{
			regex: "Flare[ _](A2|J3|P1|S[467])[ _]Lite",
			model: "Flare $1 Lite"
		},
		{
			regex: "Flare[ _](J[12]|S[57]|Y3|J6)[ _]mini",
			model: "Flare $1 Mini"
		},
		{
			regex: "Flare_J2_2018",
			model: "Flare J2 (2018)"
		},
		{
			regex: "Flare S4 Max LTE",
			model: "Flare S4 Max LTE"
		},
		{
			regex: "Flare[_ ](S[47]|J2)[_ ]Max",
			model: "Flare $1 Max"
		},
		{
			regex: "FlareS5LiteDTV",
			model: "Flare S5 Lite DTV"
		},
		{
			regex: "Flare[_ ](S[567]|J6)[_ ]Plus",
			model: "Flare $1 Plus"
		},
		{
			regex: "FLARE S6 POWER",
			model: "Flare S6 Power"
		},
		{
			regex: "Flare(?:[ _])?(4|A[123]|J8 LTE|J[13568]|P[13]|S[4-8]|X2|Y3s|Y7_LTE|Y[673])",
			model: "Flare $1"
		},
		{
			regex: "OMEGA HD ([45])",
			model: "Omega HD $1"
		},
		{
			regex: "Omega_HD_Duo",
			model: "Omega HD Duo"
		},
		{
			regex: "Omega Icon Lite 2",
			model: "Omega Icon Lite 2"
		},
		{
			regex: "Omega Icon 2",
			model: "Omega Icon 2"
		},
		{
			regex: "Omega[_ ]Lite[_ ](3[Cs]|4)",
			model: "Omega Lite $1"
		},
		{
			regex: "Spin Max 2",
			model: "Spin Max 2"
		},
		{
			regex: "Selfie_Two",
			model: "Selfie Two"
		},
		{
			regex: "(Fusion Bolt|Flare Tab Pro|Flare Tab|Superion S1 DTV)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Cherry(?:[ _]?Mobile)?[ _]?([^/;]+)(?: Build|[);])",
			model: "$1"
		}
	]
},
	"China Mobile": {
	regex: "(M812C|1501_M02|9930i|A1303|A309W|M651CY) Build",
	device: "smartphone",
	models: [
		{
			regex: "M651CY",
			model: "A3"
		},
		{
			regex: "(M812C|1501_M02|9930i|A1303|A309W)",
			model: "$1"
		}
	]
},
	Comio: Comio,
	Compal: Compal,
	Artel: Artel,
	"ComTrade Tesla": {
	regex: "Tesla|Impulse 7.85 3G|Impulse 10.1 OCTA|Smartphone_6.1|SP(?:6.2|6.2_Lite)|TTL(?:713G|8)",
	device: "smartphone",
	models: [
		{
			regex: "TeslaEvo5.0",
			model: "Evo 5.0"
		},
		{
			regex: "(Gravity 9.7 SHD)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(Impulse 7.85 3G)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "Impulse 10.1 OCTA",
			model: "Impulse 10.1\" OCTA",
			device: "tablet"
		},
		{
			regex: "Tesla_SP([^/;]+)L Build",
			model: "Smartphone $1 Lite"
		},
		{
			regex: "Smartphone_6.1",
			model: "Smartphone 6.1"
		},
		{
			regex: "SP6.2_Lite",
			model: "Smartphone 6.2 Lite"
		},
		{
			regex: "Tesla_SP([^/;]+) Build",
			model: "Smartphone $1"
		},
		{
			regex: "SP([^/;]+) Build",
			model: "Smartphone $1"
		},
		{
			regex: "Smartphone ([36])",
			model: "Smartphone $1"
		},
		{
			regex: "Tesla_Tablet_785",
			model: "7.85\"",
			device: "tablet"
		},
		{
			regex: "TTH7",
			model: "H7",
			device: "tablet"
		},
		{
			regex: "TTL7 Build",
			model: "L7",
			device: "tablet"
		},
		{
			regex: "Tesla_Tablet_L7_3G",
			model: "L7 3G",
			device: "tablet"
		},
		{
			regex: "(L7.1)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "TTL713G",
			model: "L7.1 3G",
			device: "tablet"
		},
		{
			regex: "(L7 Quad) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "(L7 Quad Lite)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "TTL8 Build",
			model: "L8",
			device: "tablet"
		},
		{
			regex: "(L8.1)",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "TESLA_TABLET_M7",
			model: "M7",
			device: "tablet"
		},
		{
			regex: "Tesla_Tablet_M8",
			model: "M8",
			device: "tablet"
		}
	]
},
	ConCorde: ConCorde,
	Condor: Condor,
	Coolpad: Coolpad,
	Clarmin: Clarmin,
	CORN: CORN,
	Cosmote: Cosmote,
	Cricket: Cricket,
	"Crius Mea": {
	regex: "(Q7A\\+?)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
},
	Crosscall: Crosscall,
	AllDocube: AllDocube,
	Cube: Cube,
	CUBOT: CUBOT,
	Clout: Clout,
	Concord: Concord,
	Crescent: Crescent,
	Cyrus: Cyrus,
	Datang: Datang,
	Datsun: Datsun,
	Danew: Danew,
	Denver: Denver,
	Dell: Dell$2,
	Desay: Desay,
	DEXP: DEXP,
	Dbtel: Dbtel,
	Dialog: Dialog,
	Dicam: Dicam,
	Digi: Digi,
	Digicel: Digicel,
	Digiland: Digiland,
	Digma: Digma,
	DoCoMo: DoCoMo,
	Doogee: Doogee,
	Doov: Doov,
	Dopod: Dopod,
	Doro: Doro,
	"Dune HD": {
	regex: "DuneHD|SOLO 4K(?:[);/ ]|$)",
	device: "tv",
	models: [
		{
			regex: "SOLO 4K(?:[);/ ]|$)",
			model: "Solo 4k"
		},
		{
			regex: "DuneHD/\\d.\\d \\([a-z]+__([a-z0-9_-]+);",
			model: "$1"
		},
		{
			regex: "DuneHD/\\d.\\d \\(([a-z0-9_-]+);",
			model: "$1"
		}
	]
},
	DNS: DNS,
	"E-Boda": {
	regex: "E-Boda|Eclipse_(?:G400M|G500)",
	device: "smartphone",
	models: [
		{
			regex: "E-Boda ((?:Revo|Izzycomm|Essential|Intelligence|Supreme)[^/;]+) Build",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "Eclipse_(G400M|G500)",
			model: "Eclipse $1"
		},
		{
			regex: "E-Boda ([^/;]+) Build",
			model: "$1"
		}
	]
},
	Easypix: Easypix,
	EBEST: EBEST,
	"Echo Mobiles": {
	regex: "ECHO[ _](HOLI|HORIZON|MAX|MOSS|NOTE|POWER|SMART|DUNE|JAVA|FUSION)|HORIZON_M|Stellar 3G|FEELING",
	device: "smartphone",
	models: [
		{
			regex: "ECHO_HORIZON_LITE",
			model: "HORIZON Lite"
		},
		{
			regex: "(HORIZON_M|FEELING)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "STELLAR 3G",
			model: "STELLAR 3G"
		},
		{
			regex: "ECHO_SMART_4G",
			model: "SMART 4G"
		},
		{
			regex: "ECHO[ _](HOLI|MAX|MOSS|NOTE|POWER|SMART|DUNE|JAVA|FUSION)",
			model: "$1"
		}
	]
},
	ECS: ECS,
	EE: EE,
	EKT: EKT,
	"Eks Mobility": {
	regex: "S5LS|X4UPlus",
	device: "smartphone",
	models: [
		{
			regex: "S5LS",
			model: "S5LS"
		},
		{
			regex: "X4UPlus",
			model: "X4U Plus"
		}
	]
},
	Elephone: Elephone,
	Element: Element,
	Elenberg: Elenberg,
	Ericy: Ericy,
	Essential: Essential,
	"E-tel": {
	regex: "E-tel_i250",
	device: "smartphone",
	models: [
		{
			regex: "E-tel[_ ]i250",
			model: "i250"
		}
	]
},
	Evercoss: Evercoss,
	Eurostar: Eurostar,
	Eton: Eton,
	Essentielb: Essentielb$1,
	Facebook: Facebook,
	Rikomagic: Rikomagic,
	Rinno: Rinno,
	Riviera: Riviera,
	Senseit: Senseit,
	Sony: Sony$3,
	Ergo: Ergo,
	Ericsson: Ericsson,
	Energizer: Energizer,
	"Energy Sistem": {
	regex: "ENERGY[ _-]?([^;/]+) Build|Energy Phone Pro 3",
	device: "smartphone",
	models: [
		{
			regex: "Energy Phone Pro 3",
			model: "Energy Phone Pro 3"
		},
		{
			regex: "ENERGY[ _-]?([^;/]+) Build",
			device: "tablet",
			model: "$1"
		}
	]
},
	eTouch: eTouch,
	Etuline: Etuline,
	Storex: Storex,
	Evertek: Evertek,
	Evolio: Evolio,
	Evolveo: Evolveo,
	Explay: Explay,
	EvroMedia: EvroMedia,
	EKO: EKO,
	Extrem: Extrem,
	Ezze: Ezze,
	Ezio: Ezio,
	Forstar: Forstar,
	Foxconn: Foxconn,
	Fondi: Fondi,
	Fairphone: Fairphone,
	Famoco: Famoco,
	FiGO: FiGO,
	FNB: FNB,
	Fujitsu: Fujitsu$1,
	"G-TiDE": {
	regex: "G-TiDE",
	device: "smartphone",
	models: [
		{
			regex: "Shining7",
			model: "Shining 7"
		},
		{
			regex: "G-TiDE_(A1|S[34])",
			model: "$1"
		},
		{
			regex: "G-TiDE V6",
			model: "V6"
		},
		{
			regex: "E(57|60|66|72|77)",
			model: "$1"
		}
	]
},
	Gemini: Gemini,
	"General Mobile": {
	regex: "GM 5 Plus|GM8 go|GM [68] d|GM 8|General Mobile 4G|GM 9 (?:Pro|Plus)|e-tab 20(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "GM 5 Plus",
			model: "GM 5 Plus"
		},
		{
			regex: "GM ([68]) d",
			model: "GM $1D"
		},
		{
			regex: "GM 8",
			model: "GM 8"
		},
		{
			regex: "GM8 go",
			model: "GM 8 Go"
		},
		{
			regex: "GM 9 Pro",
			model: "GM 9 Pro"
		},
		{
			regex: "GM 9 Plus",
			model: "GM 9 Plus"
		},
		{
			regex: "General Mobile 4G Dual",
			model: "4G Dual"
		},
		{
			regex: "General Mobile 4G",
			model: "4G"
		},
		{
			regex: "e-tab 20(?:[);/ ]|$)",
			device: "tablet",
			model: "E-Tab 20"
		}
	]
},
	Geotel: Geotel,
	Ghia: Ghia,
	Gigabyte: Gigabyte,
	Gigaset: Gigaset,
	Ginzzu: Ginzzu,
	Gionee: Gionee,
	Grape: Grape,
	Vizio: Vizio,
	GOCLEVER: GOCLEVER,
	GoMobile: GoMobile,
	"Gol Mobile": {
	regex: "F10_PRIME",
	device: "smartphone",
	models: [
		{
			regex: "F10_PRIME",
			model: "F10 Prime"
		}
	]
},
	Goly: Goly,
	Google: Google,
	Gradiente: Gradiente,
	Grundig: Grundig$1,
	Hafury: Hafury,
	Haier: Haier$1,
	HannSpree: HannSpree,
	Hasee: Hasee,
	Hisense: Hisense$1,
	"Hi-Level": {
	regex: "HLV-T([a-z0-9]+)",
	device: "tablet",
	model: "HLV-T$1"
},
	Hoffmann: Hoffmann,
	Homtom: Homtom,
	Hosin: Hosin,
	Hoozo: Hoozo,
	Minix: Minix,
	Huawei: Huawei,
	Hyundai: Hyundai$1,
	"i-Joy": {
	regex: "i-Joy|i-Call|(?:Neon[79]|Sygnus|Deox|Elektra (?:M|L|XL|XXL))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Elektra M(?:[);/ ]|$)",
			model: "Elektra M"
		},
		{
			regex: "Elektra L(?:[);/ ]|$)",
			model: "Elektra L"
		},
		{
			regex: "Elektra XL(?:[);/ ]|$)",
			model: "Elektra XL"
		},
		{
			regex: "Elektra XXL(?:[);/ ]|$)",
			model: "Elektra XXL",
			device: "phablet"
		},
		{
			regex: "Neon([79])(?:[);/ ]|$)",
			model: "Neon $1",
			device: "tablet"
		},
		{
			regex: "Sygnus(?:[);/ ]|$)",
			model: "Sygnus",
			device: "tablet"
		},
		{
			regex: "Deox(?:[);/ ]|$)",
			model: "Deox",
			device: "tablet"
		},
		{
			regex: "i-Call ([^;/]+) Build",
			model: "i-Call $1"
		},
		{
			regex: "i-Joy ([^;/]+) Build",
			model: "$1"
		}
	]
},
	iBall: iBall,
	iRola: iRola,
	iRulu: iRulu,
	Irbis: Irbis,
	iBerry: iBerry,
	iHunt: iHunt,
	IconBIT: IconBIT,
	LYF: LYF,
	Lumus: Lumus,
	M4tel: M4tel,
	"IMO Mobile": {
	regex: "IMO[ _]\\w",
	device: "smartphone",
	models: [
		{
			regex: "IMO[ _]Q([23]) Plus(?:[);/ ]|$)",
			model: "Q$1 Plus"
		},
		{
			regex: "IMO[ _]Q2(?:[);/ ]|$)",
			model: "Q2"
		},
		{
			regex: "IMO[ _]S2(?:[);/ ]|$)",
			model: "S2"
		},
		{
			regex: "IMO[ _]FEEL A2(?:[);/ ]|$)",
			model: "Feel A2"
		},
		{
			regex: "IMO[ _]S50(?:[);/ ]|$)",
			model: "S50 Light"
		},
		{
			regex: "IMO[ _]S80(?:[);/ ]|$)",
			model: "S80 Hero"
		},
		{
			regex: "IMO[ _]S89(?:[);/ ]|$)",
			model: "S89 Miracle"
		},
		{
			regex: "IMO[ _]S88(?:[);/ ]|$)",
			model: "S88 Discovery"
		},
		{
			regex: "IMO[ _]S99(?:[);/ ]|$)",
			model: "S99 Ocean"
		},
		{
			regex: "IMO[ _]S98(?:[);/ ]|$)",
			model: "S98 Champion"
		},
		{
			regex: "IMO[ _]S87(?:[);/ ]|$)",
			model: "S87 Raptor"
		},
		{
			regex: "IMO[ _]S67(?:[);/ ]|$)",
			model: "S67 Blast"
		},
		{
			regex: "IMO[ _]S78(?:[);/ ]|$)",
			model: "S78 Glory"
		},
		{
			regex: "IMO[ _]Q8(?:[);/ ]|$)",
			model: "Q8 Clarity"
		},
		{
			regex: "IMO[ _]Discovery II(?:[);/ ]|$)",
			model: "Discovery II"
		},
		{
			regex: "IMO[ _]Q(?:[);/ ]|$)",
			model: "Q"
		},
		{
			regex: "IMO[ _](Y5|Z[67])(?:[);/ ]|$)",
			model: "Tab $1",
			device: "tablet"
		},
		{
			regex: "IMO TAB X9(?:[);/ ]|$)",
			model: "Tab X9",
			device: "tablet"
		}
	]
},
	iLA: iLA,
	iNew: iNew,
	iPro: iPro,
	Infinix: Infinix,
	InFocus: InFocus,
	InnJoo: InnJoo,
	Inkti: Inkti,
	Innos: Innos,
	Innostream: Innostream,
	Insignia: Insignia,
	INQ: INQ,
	Intex: Intex,
	"i-mate": {
	regex: "i-mate ([a-z0-9]+)",
	device: "feature phone",
	model: "$1"
},
	"i-mobile": {
	regex: "i-mobile ?[a-z0-9]+|i-Style|IQ ?(9\\.1|5\\.5|5\\.6A?)",
	device: "feature phone",
	models: [
		{
			regex: "i-mobile (i-note[^/;]*) Build",
			model: "$1",
			device: "tablet"
		},
		{
			regex: "i-Style ?([^;/]+) Build",
			model: "i-Style $1",
			device: "smartphone"
		},
		{
			regex: "IQ ?(9\\.1|5\\.5|5\\.6A?)",
			model: "IQ $1",
			device: "smartphone"
		},
		{
			regex: "i-mobile (IQ[^/;]*) Build",
			model: "$1",
			device: "smartphone"
		},
		{
			regex: "i-mobile(?: )?([a-z0-9\\- ]+) Build",
			model: "$1"
		},
		{
			regex: "i-mobile(?: )?([a-z0-9]+)",
			model: "$1"
		}
	]
},
	iKoMo: iKoMo,
	iOcean: iOcean,
	iView: iView,
	Impression: Impression,
	iLife: iLife,
	iTel: iTel,
	iZotron: iZotron,
	"JAY-Tech": {
	regex: "TPC-[A-Z0-9]+|TPCY-TX[TE][^);/ ]+",
	device: "tablet",
	models: [
		{
			regex: "TPC-([A-Z0-9]+)",
			model: "Tablet PC $1"
		},
		{
			regex: "(TPCY-TX[TE][^);/ ]+)",
			model: "$1"
		}
	]
},
	Jiayu: Jiayu,
	Jolla: Jolla,
	Just5: Just5,
	Kalley: Kalley$1,
	Kaan: Kaan,
	Kazam: Kazam,
	Keneksi: Keneksi,
	"Kempler & Strauss": {
	regex: "Alumini_?3_?Plus|Alumini ?[23]|KEMPLER_(?:P1|TV|X|8_PLUS)",
	device: "smartphone",
	models: [
		{
			regex: "Alumini ?2",
			model: "Alumini 2"
		},
		{
			regex: "Alumini_?3_?Plus",
			model: "Alumini 3 Plus"
		},
		{
			regex: "Alumini3",
			model: "Alumini 3"
		},
		{
			regex: "KEMPLER_P1",
			model: "P1"
		},
		{
			regex: "KEMPLER_TV",
			model: "TV"
		},
		{
			regex: "KEMPLER_X",
			model: "X"
		},
		{
			regex: "KEMPLER_8_PLUS",
			model: "8 Plus"
		}
	]
},
	Kiano: Kiano,
	Kingsun: Kingsun,
	Kocaso: Kocaso,
	Kogan: Kogan,
	Komu: Komu,
	Koobee: Koobee,
	Kumai: Kumai,
	"KT-Tech": {
	regex: "(KM-[a-z0-9]+|EV-[a-z0-9]+)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	KDDI: KDDI,
	Kodak: Kodak,
	KOPO: KOPO,
	Koridy: Koridy,
	KRONO: KRONO,
	"K-Touch": {
	regex: "K-?Touch[ _][a-z0-9]+",
	device: "smartphone",
	models: [
		{
			regex: "K-?Touch[ _]([^/;]*)[ _]Build",
			model: "$1"
		},
		{
			regex: "K-?Touch[ _]([a-z0-9]+)",
			model: "$1"
		}
	]
},
	Diva: Diva,
	Kyocera: Kyocera,
	"Krüger&Matz": {
	regex: "Kruger[ _&]Matz|KrugerMatz[ _]|FLOW ?5PLUS|FLOW_5|FLOW7|FLOW6(?:S|Lite)|DRIVE[_ ]6S?|MOVE8mini|MOVE_|LIVE_6plus|LIVE 5 PLUS|LIVE4_KM043[89]|LIVE 7S|KM(?:106[67]|1065G|0701_1|0702|0805_1)",
	device: "smartphone",
	models: [
		{
			regex: "MOVE8mini",
			model: "MOVE 8 Mini"
		},
		{
			regex: "MOVE_6_mini",
			model: "MOVE 6 Mini"
		},
		{
			regex: "MOVE[_ ]([78]|6S)",
			model: "MOVE $1"
		},
		{
			regex: "DRIVE 4 mini LTE",
			model: "DRIVE 4 mini LTE"
		},
		{
			regex: "DRIVE[ _]([456][S]?)(?:[);/ ]|$)",
			model: "DRIVE $1"
		},
		{
			regex: "FLOW ?5PLUS(?:[);/ ]|$)",
			model: "FLOW 5 Plus"
		},
		{
			regex: "FLOW6Lite(?:[);/ ]|$)",
			model: "FLOW 6 Lite"
		},
		{
			regex: "FLOW[ _]?([4-7][S]?)(?:[);/ ]|$)",
			model: "FLOW $1"
		},
		{
			regex: "LIVE4_(KM043[89])(?:[);/ ]|$)",
			model: "LIVE 4 $1"
		},
		{
			regex: "KrugerMatz_LIVE4(?:[);/ ]|$)",
			model: "LIVE 4"
		},
		{
			regex: "_LIVE5_(KM0450)(?:[);/ ]|$)",
			model: "LIVE 5 $1"
		},
		{
			regex: "LIVE 5 PLUS(?:[);/ ]|$)",
			model: "LIVE 5 Plus"
		},
		{
			regex: "LIVE_6plus(?:[);/ ]|$)",
			model: "LIVE 6 Plus"
		},
		{
			regex: "LIVE 7S(?:[);/ ]|$)",
			model: "LIVE 7S"
		},
		{
			regex: "KM(106[67])(?:[);/ ]|$)",
			device: "tablet",
			model: "EAGLE $1 10.1\""
		},
		{
			regex: "KM(1065G)(?:[);/ ]|$)",
			device: "tablet",
			model: "EAGLE $1 10.1\""
		},
		{
			regex: "KM0(701)_1(?:[);/ ]|$)",
			device: "tablet",
			model: "EAGLE $1 7.1\""
		},
		{
			regex: "KM0(805)_1(?:[);/ ]|$)",
			device: "tablet",
			model: "EAGLE $1 8.0\""
		},
		{
			regex: "KM0(702)(?:[);/ ]|$)",
			device: "tablet",
			model: "EAGLE $1 7.0\""
		}
	]
},
	LAIQ: LAIQ,
	AIS: AIS,
	Lava: Lava,
	SKG: SKG,
	Landvo: Landvo,
	"Land Rover": {
	regex: "Land[ ]?Rover[d]?[ _-](?:X1[0-9]|Explore|T878|L15\\+|V18|V[168]|X)(?:[);/ ]|$)|Polar3",
	device: "smartphone",
	models: [
		{
			regex: "Land[ ]?Rover[d]?[ _-](X1[0-9]|Explore|T878|L15\\+|V18|V[168]|X)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Polar3",
			model: "Ioutdoor Polar 3"
		}
	]
},
	Lanix: Lanix,
	Lark: Lark,
	LCT: LCT,
	"Le Pan": {
	regex: "Le ?Pan|TC970 ([^;/]+)Build",
	device: "tablet",
	models: [
		{
			regex: "TC802A",
			model: "Le Pan Mini"
		},
		{
			regex: "TC970 ([^;/]+)Build",
			model: "TC970 $1"
		},
		{
			regex: "Le ?Pan ?(II|S)(?:[);/ ]|$)",
			model: "Le Pan $1"
		},
		{
			regex: "Le ?Pan ?([^;/]+) Build",
			model: "$1"
		}
	]
},
	Leagoo: Leagoo,
	Ledstar: Ledstar,
	LeEco: LeEco,
	Leotec: Leotec,
	Lephone: Lephone,
	Lenco: Lenco,
	Lenovo: Lenovo$2,
	Lexand: Lexand,
	Lexibook: Lexibook,
	LG: LG$1,
	Lingwin: Lingwin,
	Logicom: Logicom,
	Konka: Konka,
	Konrow: Konrow,
	Karbonn: Karbonn,
	Sagem: Sagem,
	"Coby Kyros": {
	regex: "(MID(?:1024|1125|1126|1045|1048|1060|1065|4331|7012|7015A?|7016|7022|7032|7035|7036|7042|7047|7048|7052|7065|7120|8024|8042|8048|8065|8125|8127|8128|9724|9740|9742))(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
},
	Mpman: Mpman,
	Majestic: Majestic,
	"Manta Multimedia": {
	regex: "MSP950(1[245]|2[01])|MSP96017|((?<!/)MID713|MID(?:06[SN]|08[S]?|12|13|14|15|701|702|703|704|705(?:DC)?|706[AS]?|707|708|709|711|712|714|717|781|801|802|901|1001|1002|1003|1004(?: 3G)?|1005|1009|1010|7802|9701|9702))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "((?<!/)MID713|MID(?:06[SN]|08[S]?|12|13|14|15|701|702|703|704|705(?:DC)?|706[AS]?|707|708|709|711|712|714|717|781|801|802|901|1001|1002|1003|1004(?: 3G)?|1005|1009|1010|7802|9701|9702))(?:[);/ ]|$)",
			device: "tablet",
			model: "$1"
		},
		{
			regex: "MSP95012",
			model: "Titano 1"
		},
		{
			regex: "MSP95014",
			model: "Titano 3"
		},
		{
			regex: "MSP95015",
			model: "Mezo 2"
		},
		{
			regex: "MSP95020",
			model: "Rocky 2"
		},
		{
			regex: "MSP95021",
			model: "Rocky 3 Pro"
		},
		{
			regex: "MSP96017",
			model: "Forto 2"
		}
	]
},
	Masstel: Masstel,
	Maxwest: Maxwest,
	"True Slim": {
	regex: "(SSB-508[ED])(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	"Maze Speed": {
	regex: "(SSB-(?:500|508)|SSB408D|SSB504R)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "SSB-?(500|508|408D|504R)(?:[);/ ]|$)",
			model: "SSB-$1"
		}
	]
},
	Maze: Maze,
	Mediacom: Mediacom,
	Medion: Medion$2,
	MEEG: MEEG,
	Fourel: Fourel,
	Meizu: Meizu,
	Meitu: Meitu,
	Memup: Memup,
	Mecer: Mecer,
	Mio: Mio,
	Miray: Miray$1,
	Mitsubishi: Mitsubishi,
	MIXC: MIXC,
	Mobiola: Mobiola,
	Mobicel: Mobicel,
	Mobiistar: Mobiistar,
	MSI: MSI$1,
	MLLED: MLLED,
	Mobistel: Mobistel,
	Mecool: Mecool,
	Modecom: Modecom,
	Mofut: Mofut,
	BrightSign: BrightSign,
	Motorola: Motorola,
	Movic: Movic,
	MTN: MTN,
	MyTab: MyTab,
	MyPhone: MyPhone,
	MyWigo: MyWigo,
	Myros: Myros,
	Myria: Myria,
	"M.T.T.": {
	regex: "M.T.T.",
	device: "smartphone",
	models: [
		{
			regex: "M.T.T. ?Tablet([^;/]+)? Build",
			device: "tablet",
			model: "Tablet$1"
		},
		{
			regex: "M.T.T. ?([^;/]+) Build",
			model: "$1"
		}
	]
},
	Navon: Navon,
	NOA: NOA,
	Nobby: Nobby,
	NEC: NEC,
	Neffos: Neffos,
	Nextbit: Nextbit,
	Newgen: Newgen,
	Netgear: Netgear,
	NeuImage: NeuImage,
	NextBook: NextBook,
	NGM: NGM,
	Nexian: Nexian,
	Noain: Noain,
	Noblex: Noblex,
	Nomu: Nomu,
	Nomi: Nomi,
	"NUU Mobile": {
	regex: "NUU_|(?:(?:N(5702|5001)L|S6001L)|A6L-[CG])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "NUU_A([13])",
			model: "A$1"
		},
		{
			regex: "NUU_M([32])(?:[);/ ]|$)",
			model: "M$1"
		},
		{
			regex: "NUU_X5(?:[);/ ]|$)",
			model: "X5"
		},
		{
			regex: "S6001L",
			model: "G2"
		},
		{
			regex: "N5702L",
			model: "G3"
		},
		{
			regex: "(N5001L|A6L-[CG])(?:[);/ ]|$)",
			model: "$1"
		}
	]
},
	"NYX Mobile": {
	regex: "NYX[ _]",
	device: "smartphone",
	models: [
		{
			regex: "NYX_A1",
			model: "A1"
		},
		{
			regex: "NYX_Blink",
			model: "Blink"
		},
		{
			regex: "NYX_EGO",
			model: "Ego"
		},
		{
			regex: "NYX_FENIX",
			model: "Fenix"
		},
		{
			regex: "NYX_FLY_II",
			model: "Fly II"
		},
		{
			regex: "NYX_FLY_MINI",
			model: "Fly Mini"
		},
		{
			regex: "NYX_FLY",
			model: "Fly"
		},
		{
			regex: "NYX_HIT",
			model: "Hit"
		},
		{
			regex: "NYX_JAK",
			model: "Jak"
		},
		{
			regex: "NYX_JOIN",
			model: "Join"
		},
		{
			regex: "NYX_NOBA_II",
			model: "Noba II"
		},
		{
			regex: "NYX_NOBA",
			model: "Noba"
		},
		{
			regex: "NYX_ORBIS",
			model: "Orbis"
		},
		{
			regex: "NYX[ _]REX",
			model: "Rex"
		},
		{
			regex: "NYX_SHADE",
			model: "Shade"
		},
		{
			regex: "NYX_SKY",
			model: "Sky"
		},
		{
			regex: "NYX_SPARK",
			model: "Spark"
		},
		{
			regex: "NYX_VOX",
			model: "Vox"
		},
		{
			regex: "NYX_ZEUZ_HD",
			model: "Zeus HD"
		}
	]
},
	Nous: Nous,
	Nvidia: Nvidia,
	"O+": {
	regex: "O\\+[ _](Air|Crunch|Ultra|Upsized|Venti|360 ALPHA PLUS 2.0)",
	device: "smartphone",
	models: [
		{
			regex: "O\\+[ _](Crunch|Ultra 2.0|Ultra|Upsized|Venti 4G)",
			model: "$1"
		},
		{
			regex: "O\\+_AIR",
			model: "Air"
		},
		{
			regex: "O\\+ 360 ALPHA PLUS 2.0",
			model: "360 Alpha Plus 2.0"
		}
	]
},
	O2: O2,
	Odys: Odys,
	Obi: Obi,
	Okapia: Okapia,
	Onda: Onda,
	OnePlus: OnePlus,
	Realme: Realme,
	OPPO: OPPO,
	Opsson: Opsson,
	Orange: Orange,
	Oukitel: Oukitel,
	OKWU: OKWU,
	Ouki: Ouki,
	Overmax: Overmax,
	Oysters: Oysters,
	"öwn": {
	regex: "OWN[ _]|(?:S4035[ _][34]G|Smart8|SMART PLUS LTE)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "FUN ([67])",
			model: "Fun $1"
		},
		{
			regex: "FUN 5\\(4G\\)",
			model: "Fun 5 4G"
		},
		{
			regex: "(?:OWN[ _])?(S3000D|S3010|S3020D|S4010|S4025|S4035[ _][34]G)",
			model: "$1"
		},
		{
			regex: "One Plus",
			model: "One Plus"
		},
		{
			regex: "One",
			model: "One"
		},
		{
			regex: "SMART 9",
			model: "Smart 9"
		},
		{
			regex: "Smart8(?:[);/ ]|$)",
			model: "Smart 8"
		},
		{
			regex: "SMART PLUS LTE(?:[);/ ]|$)",
			model: "Smart Plus LTE"
		}
	]
},
	Panacom: Panacom,
	Panasonic: Panasonic$2,
	PCBOX: PCBOX,
	PCD: PCD,
	"PCD Argentina": {
	regex: "PCD[ ]?50[689]",
	device: "smartphone",
	models: [
		{
			regex: "PCD[ ]?(50[689])",
			model: "$1"
		}
	]
},
	ArmPhone: ArmPhone,
	Pentagram: Pentagram,
	TCL: TCL$1,
	JVC: JVC$1,
	phoneOne: phoneOne,
	Primepad: Primepad,
	Pioneer: Pioneer,
	Pixus: Pixus,
	PULID: PULID,
	"Point of View": {
	regex: "POV_TV|POV_TAB|MOB-5045",
	device: "tablet",
	models: [
		{
			regex: "POV_TV-HDMI-KB-01",
			model: "HDMI Smart TV Dongle",
			device: "tv"
		},
		{
			regex: "POV_TV-HDMI-200BT",
			model: "Mini PC HDMI Dongle",
			device: "tv"
		},
		{
			regex: "MOB-5045",
			model: "Mobii Phone 5045",
			device: "smartphone"
		},
		{
			regex: "POV_TAB-P506",
			model: "ONYX 506 Navi"
		},
		{
			regex: "POV_TAB[_-]NAVI7[_-]3G[_-]M",
			model: "ONYX 507 Navi"
		},
		{
			regex: "POV_TAB-P527S",
			model: "ONYX 527S"
		},
		{
			regex: "POV_TAB-P547",
			model: "ONYX 547 Navi"
		},
		{
			regex: "POV_TAB-PROTAB26",
			model: "ProTab 26 XXL IPS"
		},
		{
			regex: "POV_TAB-PROTAB25XXL8?",
			model: "ProTab 25XXL"
		},
		{
			regex: "POV_TAB-PL1015",
			model: "Mobii 1015"
		},
		{
			regex: "POV_TAB-PROTAB([a-z0-9]+)",
			model: "ProTab $1"
		},
		{
			regex: "POV_TAB-P?([a-z0-9]+)",
			model: "Mobii $1"
		}
	]
},
	Pomp: Pomp,
	PPTV: PPTV,
	ProScan: ProScan,
	"RCA Tablets": {
	regex: "RCT([^;/]+) Build|RCA RLTP4028|RCT6513W87|RCT6973W43(?:MD)?|RCT6703W12|RCT(?:6A06P22|6603W47M7|6303W87(?:DK|M)|6773W22B|6203W46L|6873W42M|6K03W13)",
	device: "smartphone",
	models: [
		{
			regex: "RCA RLTP4028",
			model: "RLTP4028"
		},
		{
			regex: "RCT6513W87",
			device: "tablet",
			model: "Galileo Pro 11.5\""
		},
		{
			regex: "RCT6873W42M",
			device: "tablet",
			model: "Voyager 7.0\""
		},
		{
			regex: "RCT6973W43(?:MD)?",
			device: "tablet",
			model: "Voyager III 7.0\""
		},
		{
			regex: "RCT6773W22B",
			device: "tablet",
			model: "Voyager II 7.0\""
		},
		{
			regex: "RCT6703W12",
			device: "tablet",
			model: "Atlas 10.0\""
		},
		{
			regex: "RCT6203W46L",
			device: "tablet",
			model: "Pro 10 Edition II"
		},
		{
			regex: "RCT6A06P22",
			device: "tablet",
			model: "Endeavor 10.0\" HD"
		},
		{
			regex: "RCT(?:6303W87(?:DK|M)|6K03W13)",
			device: "tablet",
			model: "Viking Pro 10.0\""
		},
		{
			regex: "RCT6603W47M7",
			device: "tablet",
			model: "Viking II 10.0\""
		},
		{
			regex: "RCT([^;/)]+)(?: Build|[;)])",
			device: "tablet",
			model: "RCT$1"
		}
	]
},
	Readboy: Readboy,
	Roku: Roku,
	Rokit: Rokit,
	Rombica: Rombica,
	Rover: Rover,
	RoverPad: RoverPad,
	Roadrover: Roadrover,
	"RT Project": {
	regex: "Shock 5",
	device: "smartphone",
	models: [
		{
			regex: "Shock 5",
			model: "Shock 5"
		}
	]
},
	"S-TELL": {
	regex: "S-TELL",
	device: "smartphone",
	models: [
		{
			regex: "(?:S-TELL[ _])?M4(61|77|80)",
			model: "M4$1"
		}
	]
},
	Safaricom: Safaricom,
	Santin: Santin,
	Siemens: Siemens,
	Soundmax: Soundmax,
	Samsung: Samsung$3,
	Sanei: Sanei,
	Selfix: Selfix,
	Sencor: Sencor,
	Senwa: Senwa,
	Sky: Sky,
	Skyworth: Skyworth$1,
	Smartfren: Smartfren,
	Smartisan: Smartisan,
	"STF Mobile": {
	regex: "(?:Fractal|AERIAL PLUS|Origins Pro|BLOCK_MINI|BLOCK GO|BLOCK 3|SLAY II)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Fractal",
			model: "Fractal"
		},
		{
			regex: "Origins Pro",
			model: "Origins Pro"
		},
		{
			regex: "AERIAL PLUS",
			model: "Aerial Plus"
		},
		{
			regex: "BLOCK_MINI",
			model: "Block Mini"
		},
		{
			regex: "BLOCK 3 mini",
			model: "Block 3 Mini"
		},
		{
			regex: "BLOCK 3",
			model: "Block 3"
		},
		{
			regex: "BLOCK GO",
			model: "Block Go"
		},
		{
			regex: "SLAY II",
			model: "Slay II"
		}
	]
},
	STK: STK,
	Stonex: Stonex,
	SuperSonic: SuperSonic,
	Supra: Supra,
	Sumvision: Sumvision,
	SunVan: SunVan,
	SWISSMOBILITY: SWISSMOBILITY,
	Thomson: Thomson$2,
	Tanix: Tanix,
	Pantech: Pantech,
	Ployer: Ployer,
	Plum: Plum,
	Polaroid: Polaroid$1,
	PolyPad: PolyPad,
	Polytron: Polytron,
	Positivo: Positivo,
	Prestigio: Prestigio,
	Sanyo: Sanyo,
	Qilive: Qilive$1,
	QMobile: QMobile,
	Maximus: Maximus,
	Quantum: Quantum,
	Quechua: Quechua,
	Ramos: Ramos,
	Razer: Razer,
	Sendo: Sendo,
	"Turbo-X": {
	regex: "Turbo-X|Hive V 3G|Turbox_S3",
	device: "smartphone",
	models: [
		{
			regex: "Turbox_S3",
			model: "S3"
		},
		{
			regex: "Turbo-X_A2(?:[);/ ]|$)",
			model: "A2"
		},
		{
			regex: "Turbo-X_e3(?:[);/ ]|$)",
			model: "E3"
		},
		{
			regex: "Turbo-X Ice(?:[);/ ]|$)",
			device: "tablet",
			model: "Ice"
		},
		{
			regex: "Hive V 3G(?:[);/ ]|$)",
			device: "tablet",
			model: "Hive V 3G"
		},
		{
			regex: "Turbo-X Tablet([^;/]+) Build",
			device: "tablet",
			model: "Tablet$1"
		},
		{
			regex: "Turbo-X ([^;/]+) Build",
			model: "$1"
		}
	]
},
	Turbo: Turbo,
	"Silent Circle": {
	regex: "Blackphone 2",
	device: "smartphone",
	model: "Blackphone 2"
},
	Sigma: Sigma,
	Spice: Spice,
	Sharp: Sharp$1,
	Simply: Simply,
	Softbank: Softbank,
	Sonim: Sonim,
	Star: Star,
	Starmobile: Starmobile,
	Amazon: Amazon,
	Symphony: Symphony,
	Helio: Helio,
	Syrox: Syrox,
	Qtek: Qtek,
	"Q-Touch": {
	regex: "( Q09|QS701|Q05A)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	"G-Touch": {
	regex: "GTouch[_ ]|(?:Stella (?:XS?|Omega))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Stella (XS?|Omega)",
			model: "Stella $1"
		},
		{
			regex: "GTouch[_ ]STELLA",
			model: "Stella"
		}
	]
},
	"T-Mobile": {
	regex: "T-Mobile[ _][a-z0-9 ]+|(?:REVVLRY|REVVL 2(?: PLUS)?|5062[ZW]|5007[ZW])(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "5062[ZW]",
			model: "REVVL 4 Plus"
		},
		{
			regex: "5007[ZW]",
			model: "REVVL 4"
		},
		{
			regex: "REVVL 2 PLUS",
			model: "REVVL 2 Plus"
		},
		{
			regex: "REVVLRY",
			model: "REVVL Plus"
		},
		{
			regex: "REVVL 2(?:[);/ ]|$)",
			model: "REVVL 2"
		},
		{
			regex: "T-Mobile[ _]([a-z0-9_ ]+) Build",
			model: "$1"
		},
		{
			regex: "T-Mobile[ _]([a-z0-9_ ]+)",
			model: "$1"
		}
	]
},
	"TB Touch": {
	regex: "Ignis [89]",
	device: "tablet",
	models: [
		{
			regex: "Ignis ([89])",
			model: "Ignis $1"
		}
	]
},
	Teclast: Teclast,
	"Tecno Mobile": {
	regex: "Tecno|Phantom6|Phantom6-Plus|DP7C Pro-SGA1",
	device: "smartphone",
	models: [
		{
			regex: "Phantom6-Plus",
			model: "Phantom 6 Plus"
		},
		{
			regex: "Phantom6",
			model: "Phantom 6"
		},
		{
			regex: "TECNO-W3",
			model: "W3"
		},
		{
			regex: "TECNO[ _]F4 Pro(?:[);/ ]|$)",
			model: "F4 Pro"
		},
		{
			regex: "TECNO[ _]KE5j(?:[);/ ]|$)",
			model: "Spark 6 Go"
		},
		{
			regex: "TECNO[ _]ID6(?:[);/ ]|$)",
			model: "Camon iClick 2"
		},
		{
			regex: "Tecno[ _]7C(?:[);/ ]|$)",
			model: "DroidPad 7C",
			device: "tablet"
		},
		{
			regex: "DP7C Pro-SGA1(?:[);/ ]|$)",
			model: "DroidPad 7C Pro",
			device: "tablet"
		},
		{
			regex: "TECNO[ _]DP10A Pro(?:[);/ ]|$)",
			model: "DroidPad 10A Pro",
			device: "tablet"
		},
		{
			regex: "TECNO[ _]P904(?:[);/ ]|$)",
			model: "DroidPad 10D 4G",
			device: "tablet"
		},
		{
			regex: "Tecno[ _]CB7[j]?",
			model: "Camon i4"
		},
		{
			regex: "Tecno[ _]CF7(?:[);/ ]|$)",
			model: "Camon 11"
		},
		{
			regex: "Tecno[ _]CC6(?:[);/ ]|$)",
			model: "Camon 12 Air"
		},
		{
			regex: "Tecno[ _]CC7(?:[);/ ]|$)",
			model: "Camon 12"
		},
		{
			regex: "Tecno[ _]KC8(?:[);/ ]|$)",
			model: "Spark 4"
		},
		{
			regex: "Tecno[ _]BB4k(?:[);/ ]|$)",
			model: "Spark 4 Lite"
		},
		{
			regex: "Tecno[ _]KD7(?:[);/ ]|$)",
			model: "Spark 5 Pro"
		},
		{
			regex: "Tecno[ _]DP8D(?:[);/ ]|$)",
			model: "DroidPad 8D",
			device: "tablet"
		},
		{
			regex: "Tecno[ _]LB8",
			model: "Pouvoir 3 Plus"
		},
		{
			regex: "TECNO S9",
			device: "phablet",
			model: "S9"
		},
		{
			regex: "Tecno ([^;/]+) Build",
			model: "$1"
		},
		{
			regex: "Tecno[ _]?([a-z0-9_\\-]+)",
			model: "$1"
		}
	]
},
	TechPad: TechPad,
	Tesco: Tesco,
	teXet: teXet,
	Telefunken: Telefunken$1,
	Telego: Telego,
	Telenor: Telenor,
	Telit: Telit,
	ThL: ThL,
	TIANYU: TIANYU,
	Timovi: Timovi,
	Tooky: Tooky,
	Tolino: Tolino,
	"Top House": {
	regex: "Coto[_ ]|X1013",
	device: "smartphone",
	models: [
		{
			regex: "Coto W418",
			model: "Coto W418"
		},
		{
			regex: "COTO_T117",
			model: "Coto T117",
			device: "tablet"
		},
		{
			regex: "X1013",
			model: "X1013",
			device: "tablet"
		},
		{
			regex: "COTO_T40017",
			model: "T40017"
		}
	]
},
	Toplux: Toplux,
	Touchmate: Touchmate,
	TrekStor: TrekStor,
	Trevi: Trevi,
	TVC: TVC,
	"U.S. Cellular": {
	regex: "USCC-",
	device: "smartphone",
	models: [
		{
			regex: "USCC-E6762",
			model: "Kyocera DuraForce"
		},
		{
			regex: "(USCC-[a-z0-9_\\-]+)",
			model: "$1"
		}
	]
},
	Uhappy: Uhappy,
	Unimax: Unimax,
	Unowhy: Unowhy,
	UTStarcom: UTStarcom,
	Ulefone: Ulefone,
	UMIDIGI: UMIDIGI,
	Uniscope: Uniscope,
	Unnecto: Unnecto,
	Unonu: Unonu,
	UTOK: UTOK,
	Vastking: Vastking,
	ViewSonic: ViewSonic,
	Vitelcom: Vitelcom,
	Fengxiang: Fengxiang,
	"VK Mobile": {
	regex: "VK-VK([79]00)(?:[);/ ]|$)",
	device: "feature phone",
	model: "VK$1"
},
	Vernee: Vernee,
	Vertu: Vertu,
	Venso: Venso,
	Verizon: Verizon,
	Verykool: Verykool,
	Vestel: Vestel$1,
	Videocon: Videocon,
	Vodafone: Vodafone,
	Vonino: Vonino,
	Vorago: Vorago,
	Voto: Voto,
	Voxtel: Voxtel,
	Vulcan: Vulcan,
	Walton: Walton,
	WellcoM: WellcoM,
	Wexler: Wexler,
	Inco: Inco,
	Wink: Wink,
	Wiko: Wiko,
	Wieppo: Wieppo,
	Weimei: Weimei,
	Wileyfox: Wileyfox,
	Wolder: Wolder,
	Wolfgang: Wolfgang,
	Wonu: Wonu,
	Woo: Woo,
	Woxter: Woxter,
	"X-View": {
	regex: "ZEN_U5\\+|AMBER_KIDS|Proton_Amber_HD|PROTON_JADE_2_PRO",
	device: "smartphone",
	models: [
		{
			regex: "ZEN_U5\\+",
			model: "ZEN U5+"
		},
		{
			regex: "AMBER_KIDS",
			device: "tablet",
			model: "Amber Kids"
		},
		{
			regex: "Proton_Amber_HD",
			device: "tablet",
			model: "Proton Amber HD"
		},
		{
			regex: "PROTON_JADE_2_PRO",
			device: "tablet",
			model: "Proton Jade 2 Pro"
		}
	]
},
	POCO: POCO,
	Xiaomi: Xiaomi,
	Xion: Xion,
	Xolo: Xolo,
	Yarvik: Yarvik,
	Yes: Yes,
	Yezz: Yezz,
	Yu: Yu,
	Yuandao: Yuandao,
	Yusun: Yusun,
	Ytone: Ytone,
	Zonda: Zonda,
	ZYQ: ZYQ,
	Toshiba: Toshiba$3,
	Vivax: Vivax,
	MLS: MLS,
	Fly: Fly,
	FinePower: FinePower,
	Freetel: Freetel,
	"Western Digital": {
	regex: "Westerndigital|WDSimpleBrowser",
	device: "tv",
	models: [
		{
			regex: "Streamer2010",
			model: "Streamer (2010)"
		}
	]
},
	Zeemi: Zeemi,
	Zenek: Zenek,
	Zopo: Zopo,
	ZTE: ZTE,
	Zuum: Zuum,
	Zen: Zen,
	Zync: Zync,
	Lemhoov: Lemhoov,
	MTC: MTC$1,
	MegaFon: MegaFon,
	Inoi: Inoi,
	Vertex: Vertex,
	Unknown: Unknown,
	Starway: Starway,
	Savio: Savio,
	Simbans: Simbans,
	MYFON: MYFON,
	"X-TIGI": {
	regex: "X[-_]TIGI|Hope7[_ ]Mate|Photo_P15_Lite",
	device: "smartphone",
	models: [
		{
			regex: "X-TIGI_JOY10_PRO",
			model: "Joy 10 Pro",
			device: "tablet"
		},
		{
			regex: "Hope7[_ ]Mate",
			model: "Hope 7 Mate",
			device: "tablet"
		},
		{
			regex: "X-TIGI_JOY7_MAX",
			model: "Joy 7 Max",
			device: "tablet"
		},
		{
			regex: "X-TIGI[_ ]V28[_ ]LTE",
			model: "V28 LTE"
		},
		{
			regex: "X[-_]TIGI[_ ]V19",
			model: "V19"
		},
		{
			regex: "X-TIGI[_ ]Photo[_ ]P11",
			model: "Photo P11"
		},
		{
			regex: "Photo_P15_Lite",
			model: "Photo P15 Lite"
		},
		{
			regex: "X[-_]TIGI[ _-]([^/;)]+) Build",
			model: "$1"
		}
	]
},
	Xiaolajiao: Xiaolajiao,
	Ritmix: Ritmix,
	"Ross&Moor": {
	regex: "RMD[-_](974R|600)(?:[);/ ]|$)",
	device: "tablet",
	model: "RMD-$1"
},
	"R-TV": {
	regex: "R-TV BOX[ _]?(MINI\\+|X99|X10 PRO|[RXS]10)",
	device: "tv",
	model: "Box $1"
},
	NEXBOX: NEXBOX,
	True: True,
	Yandex: Yandex,
	FORME: FORME,
	Shuttle: Shuttle,
	BDF: BDF,
	Highscreen: Highscreen,
	CVTE: CVTE,
	Globex: Globex,
	Atom: Atom,
	Qumo: Qumo,
	Umax: Umax,
	Mann: Mann,
	Unihertz: Unihertz,
	Chuwi: Chuwi,
	Bezkam: Bezkam,
	"NG Optics": {
	regex: "(NG3128HD)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
},
	KATV1: KATV1,
	Ghong: Ghong,
	Xoro: Xoro,
	Vinga: Vinga,
	Viumee: Viumee,
	Nuvo: Nuvo,
	Sunvell: Sunvell,
	Ugoos: Ugoos,
	Yxtel: Yxtel,
	Proline: Proline,
	Yota: Yota,
	Mystery: Mystery,
	Ritzviva: Ritzviva,
	DeWalt: DeWalt,
	Runbo: Runbo,
	NewsMy: NewsMy,
	Newsday: Newsday,
	Daewoo: Daewoo,
	Vesta: Vesta,
	Spectrum: Spectrum,
	Kivi: Kivi,
	Divisat: Divisat,
	Kanji: Kanji,
	Kaiomy: Kaiomy,
	National: National,
	Vsun: Vsun,
	"Shift Phones": {
	regex: "(SHIFT6m)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	RugGear: RugGear,
	Aligator: Aligator,
	Maxcom: Maxcom,
	Luna: Luna,
	Protruly: Protruly,
	JFone: JFone,
	Uhans: Uhans,
	Soyes: Soyes,
	Zidoo: Zidoo,
	Zfiner: Zfiner,
	iGet: iGet,
	iVA: iVA,
	Phicomm: Phicomm,
	Huadoo: Huadoo,
	Gome: Gome,
	Voyo: Voyo,
	Ryte: Ryte,
	Vontar: Vontar,
	Vorke: Vorke,
	Wigor: Wigor,
	NEXON: NEXON,
	ONN: ONN,
	EXO: EXO,
	"Q.Bell": {
	regex: "(QPHONE[_ ](?:10.1|9.[12]|7.1|5.[46])|QTAB10EW)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "(QPHONE[_ ](?:10.1|9.[12]|7.1|5.[46]))(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "QTAB10EW",
			device: "tablet",
			model: "QTAB10EW"
		}
	]
},
	Datawind: Datawind,
	Droxio: Droxio,
	Goophone: Goophone,
	PocketBook: PocketBook,
	Bitmore: Bitmore,
	Kuliao: Kuliao,
	Sugar: Sugar,
	Subor: Subor,
	Xshitou: Xshitou,
	JKL: JKL,
	Gree: Gree,
	Vodacom: Vodacom,
	VKworld: VKworld,
	Mito: Mito,
	TWM: TWM,
	TWZ: TWZ,
	Onix: Onix,
	Oale: Oale,
	Mobo: Mobo,
	Macoox: Macoox,
	Prixton: Prixton,
	Magnus: Magnus,
	Newland: Newland,
	Orbic: Orbic,
	RED: RED,
	Contixo: Contixo,
	"E-Ceros": {
	regex: "(?:CT9716(?:-B)?)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "CT9716(?:[);/ ]|$)",
			model: "Revolution"
		},
		{
			regex: "CT9716-B(?:[);/ ]|$)",
			model: "Revolution HD"
		}
	]
},
	How: How,
	Multilaser: Multilaser,
	"Positivo BGH": {
	regex: "(?:T1060B|S455|Positivo (?:Twist|Ypy|Mini I)|Twist[ _](?:\\(2018\\)|2 (?:Fit|Pro)|Mini|Tab|Metal(?: 32GB)?|Max|XL|SE|[23SM]))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "S455(?:[);/ ]|$)",
			model: "Selfie"
		},
		{
			regex: "Twist \\(2018\\)(?:[);/ ]|$)",
			model: "Twist (2018)"
		},
		{
			regex: "Twist Metal 32GB(?:[);/ ]|$)",
			model: "Twist Metal 32GB"
		},
		{
			regex: "Twist Metal(?:[);/ ]|$)",
			model: "Twist Metal"
		},
		{
			regex: "Twist Max(?:[);/ ]|$)",
			model: "Twist Max"
		},
		{
			regex: "Twist[ _]Mini(?:[);/ ]|$)",
			model: "Twist Mini"
		},
		{
			regex: "Twist 2 Fit(?:[);/ ]|$)",
			model: "Twist 2 Fit"
		},
		{
			regex: "Twist 2 Pro(?:[);/ ]|$)",
			model: "Twist 2 Pro"
		},
		{
			regex: "Twist XL(?:[);/ ]|$)",
			model: "Twist XL"
		},
		{
			regex: "Twist SE(?:[);/ ]|$)",
			model: "Twist SE"
		},
		{
			regex: "(?:Positivo )?Twist ([23SM])(?:[);/ ]|$)",
			model: "Twist $1"
		},
		{
			regex: "(?:Positivo )Mini I(?:[);/ ]|$)",
			model: "Mini I"
		},
		{
			regex: "T1060B(?:[);/ ]|$)",
			device: "tablet",
			model: "T1060B"
		},
		{
			regex: "Positivo Ypy (AB7F|AB10H|L1050E)(?:[);/ ]|$)",
			device: "tablet",
			model: "Ypy $1"
		},
		{
			regex: "Twist Tab(?:[);/ ]|$)",
			device: "tablet",
			model: "Twist Tab"
		}
	]
},
	Maxtron: Maxtron,
	Philco: Philco,
	"SEMP TCL": {
	regex: "(?:GO[35]E|5101J|GO3C(?: Plus)?)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "5101J(?:[);/ ]|$)",
			model: "L9 Plus"
		},
		{
			regex: "GO3C Plus(?:[);/ ]|$)",
			model: "GO! 3C Plus"
		},
		{
			regex: "GO3C(?:[);/ ]|$)",
			model: "GO! 3C"
		},
		{
			regex: "(GO[35]E)(?:[);/ ]|$)",
			model: "$1"
		}
	]
},
	Newman: Newman,
	Swipe: Swipe,
	Owwo: Owwo,
	"TD Systems": {
	regex: "(K32DLX9HS|K40DLM8FS|K40DLX9FS)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
},
	Ravoz: Ravoz,
	Tone: Tone,
	"AT&T": {
	regex: "(?:U304AA|QS5509A|U705AA)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "U304AA(?:[);/ ]|$)",
			model: "Radiant Core"
		},
		{
			regex: "U705AA(?:[);/ ]|$)",
			model: "Radiant Max"
		},
		{
			regex: "QS5509A(?:[);/ ]|$)",
			model: "Axia"
		}
	]
},
	BIHEE: BIHEE,
	Enot: Enot,
	Kooper: Kooper,
	Lesia: Lesia,
	Anry: Anry,
	Tinai: Tinai,
	Winds: Winds,
	Asano: Asano,
	Phonemax: Phonemax,
	Vipro: Vipro,
	OzoneHD: OzoneHD,
	Kzen: Kzen,
	Melrose: Melrose,
	Crony: Crony,
	Takara: Takara,
	Tronsmart: Tronsmart,
	Amigoo: Amigoo,
	Lumigon: Lumigon,
	Neomi: Neomi,
	Eltex: Eltex,
	Senkatel: Senkatel,
	Bobarry: Bobarry,
	Wortmann: Wortmann,
	"BB Mobile": {
	regex: "Techno[-_ ](8\\.0|9\\.7|TQ863Q|X595BT|S700BF|I700AJ|10.1 LTE TQ060X|7.0 LTE TQ763I|I785AP|I101BI)(?:[);/ ]|$)",
	device: "tablet",
	models: [
		{
			regex: "Techno[_ ]S700BF(?:[);/ ]|$)",
			model: "Techno 7.0\" Pioneer LTE S700BF"
		},
		{
			regex: "Techno[_ ]10.1 LTE TQ060X(?:[);/ ]|$)",
			model: "Techno 10.0\" LTE TQ060X"
		},
		{
			regex: "Techno[_ ]TQ863Q(?:[);/ ]|$)",
			model: "Techno 8.0\" Poplar LTE TQ863Q"
		},
		{
			regex: "Techno[_ ]I700AJ(?:[);/ ]|$)",
			model: "Techno 7.0\" Mozg LTE I700AJ"
		},
		{
			regex: "Techno[-_ ]I785AP(?:[);/ ]|$)",
			model: "Techno 7.85\" Mozg I785AP"
		},
		{
			regex: "Techno[-_ ]I101BI(?:[);/ ]|$)",
			model: "Techno 10.1\" Mozg I101BI"
		},
		{
			regex: "Techno[_ ]7.0 LTE TQ763I(?:[);/ ]|$)",
			model: "Techno 7.0\" Kalash LTE TQ763I"
		},
		{
			regex: "Techno[_ ](9\\.7|8\\.0) 3G(?:[);/ ]|$)",
			model: "Techno $1\" 3G"
		},
		{
			regex: "Techno[_ ](?:X595BT)(?:[);/ ]|$)",
			device: "smartphone",
			model: "Techno Spark 3G X595BT"
		}
	]
},
	"2E": {
	regex: "(?:E500A_2019|2E E450 2018)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "E500A_2019(?:[);/ ]|$)",
			model: "E500A (2019)"
		},
		{
			regex: "2E E450 2018(?:[);/ ]|$)",
			model: "E450 (2018)"
		}
	]
},
	Billion: Billion,
	Tele2: Tele2,
	Alfawise: Alfawise,
	Klipad: Klipad,
	SQOOL: SQOOL,
	TurboKids: TurboKids,
	Jinga: Jinga,
	Twoe: Twoe,
	iTruck: iTruck,
	Torex: Torex,
	Doffler: Doffler,
	Oyyu: Oyyu,
	Primux: Primux,
	iMars: iMars,
	Logic: Logic,
	Cloudpad: Cloudpad,
	Cloudfone: Cloudfone,
	Vsmart: Vsmart,
	MiXzo: MiXzo,
	Openbox: Openbox,
	Ziox: Ziox,
	iDroid: iDroid,
	Aoson: Aoson,
	"FireFly Mobile": {
	regex: "(?:AURII[ _](?:Passion|Virtuoso|ULTRA|Secret Lite|AMUSE[_ ]3G|FORCE|FUSION|F8[_ ]Premium|XCITE|DELIGHT|DREAM[_ ](?:MINI|One))|SECRET_XR|INTENSE[ _](?:POWER|METAL_2|XT)|SUPER SWEET|SWEET MINI)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "AURII[ _]FORCE(?:[);/ ]|$)",
			model: "Aurii Force"
		},
		{
			regex: "AURII[ _]DELIGHT(?:[);/ ]|$)",
			model: "Aurii Delight"
		},
		{
			regex: "AURII[ _]DREAM[_ ]MINI(?:[);/ ]|$)",
			model: "Aurii Dream Mini"
		},
		{
			regex: "AURII[ _]DREAM[_ ]One(?:[);/ ]|$)",
			model: "Aurii Dream One"
		},
		{
			regex: "AURII[ _]ULTRA(?:[);/ ]|$)",
			model: "Aurii Ultra"
		},
		{
			regex: "AURII[ _]AMUSE[_ ]3G(?:[);/ ]|$)",
			model: "Aurii Amuse 3G"
		},
		{
			regex: "AURII[ _]FUSION(?:[);/ ]|$)",
			model: "Aurii Fusion"
		},
		{
			regex: "AURII[ _]XCITE(?:[);/ ]|$)",
			model: "Aurii xCite"
		},
		{
			regex: "SECRET_XR(?:[);/ ]|$)",
			model: "Aurii Secret XR"
		},
		{
			regex: "AURII[ _]((?:Passion|Virtuoso|Secret Lite|F8[_ ]Premium))(?:[);/ ]|$)",
			model: "Aurii $1"
		},
		{
			regex: "INTENSE POWER(?:[);/ ]|$)",
			model: "Intense Power"
		},
		{
			regex: "INTENSE_XT(?:[);/ ]|$)",
			model: "Intense XT"
		},
		{
			regex: "INTENSE_METAL_2(?:[);/ ]|$)",
			model: "Intense Metal 2"
		},
		{
			regex: "SUPER SWEET(?:[);/ ]|$)",
			model: "Super Sweet"
		},
		{
			regex: "SWEET MINI(?:[);/ ]|$)",
			model: "Sweet Mini"
		}
	]
},
	"i-Cherry": {
	regex: "iCherry_?",
	device: "smartphone",
	models: [
		{
			regex: "iCherry[ _](C(?:25[1258]|21[16]|110|121|22[0379]|23[03])|X1)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "iCherry-C256",
			device: "tablet",
			model: "C256 Nano 3G"
		}
	]
},
	NextTab: NextTab,
	Time2: Time2,
	Sunstech: Sunstech,
	Hotwav: Hotwav,
	Tetratab: Tetratab,
	Dolamee: Dolamee,
	Invin: Invin,
	Doopro: Doopro,
	IQM: IQM,
	Nos: Nos,
	Accent: Accent,
	Avenzo: Avenzo,
	Beelink: Beelink,
	MAXVI: MAXVI,
	"MDC Store": {
	regex: "Prime_S(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Prime_S(?:[);/ ]|$)",
			model: "Prime S"
		}
	]
},
	meanIT: meanIT,
	Kenxinda: Kenxinda,
	"X-BO": {
	regex: "X[-]?BO (V[78]|V1[01]|V[89]\\+)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	Xgody: Xgody,
	Alcor: Alcor,
	iBrit: iBrit,
	Ovvi: Ovvi,
	Fero: Fero,
	Ruio: Ruio,
	Transpeed: Transpeed,
	VVETIME: VVETIME,
	A1: A1,
	Swisstone: Swisstone,
	"P-UP": {
	regex: "MD-04P(?:[);/ ]|$)",
	device: "phablet",
	model: "Mode 1 RR"
},
	iVooMi: iVooMi,
	Pixelphone: Pixelphone,
	Pixela: Pixela,
	Iris: Iris,
	Fonos: Fonos,
	Xtouch: Xtouch,
	Conquest: Conquest,
	Zatec: Zatec,
	Selenga: Selenga,
	Starlight: Starlight,
	GEOFOX: GEOFOX,
	Tinmo: Tinmo,
	Matrix: Matrix,
	Verico: Verico,
	TTEC: TTEC,
	eSTAR: eSTAR,
	Hometech: Hometech,
	ExMobile: ExMobile,
	Hipstreet: Hipstreet,
	Navitech: Navitech,
	NorthTech: NorthTech,
	UNIWA: UNIWA,
	Andowl: Andowl,
	Silelis: Silelis,
	Bluedot: Bluedot,
	"Planet Computers": {
	regex: "(Cosmo_Communicator)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
},
	Reach: Reach,
	MobiWire: MobiWire,
	Hezire: Hezire,
	Hurricane: Hurricane,
	iSWAG: iSWAG,
	Reeder: Reeder,
	ELARI: ELARI,
	"Epik One": {
	regex: "(K501 Plus|[ ]K5(?:0[0-4]|1[01]|03T|3[456]|4[05]|73)|[ ]K60[01]|[ ]X507T|[ ]K40[56]|[ ]T700)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "K501 Plus",
			model: "Leo Plus"
		},
		{
			regex: "K501",
			model: "Leo"
		},
		{
			regex: "K500",
			model: "Omega Lite"
		},
		{
			regex: "K502",
			model: "Omega"
		},
		{
			regex: "K503T",
			model: "Leo Turbo"
		},
		{
			regex: "K503",
			model: "Leo Max"
		},
		{
			regex: "K504",
			model: "Titan 3G"
		},
		{
			regex: "X507T",
			model: "Titan II"
		},
		{
			regex: "K510",
			model: "Bolt"
		},
		{
			regex: "K511",
			model: "Bolt Pro"
		},
		{
			regex: "K534",
			model: "Hada"
		},
		{
			regex: "K535",
			model: "Hada Turbo"
		},
		{
			regex: "K545",
			model: "Rocket"
		},
		{
			regex: "K536",
			model: "Royal"
		},
		{
			regex: "K540",
			model: "Excalibur"
		},
		{
			regex: "K573",
			model: "Panther"
		},
		{
			regex: "K600",
			model: "Jupiter"
		},
		{
			regex: "K601",
			model: "Jupiter One"
		},
		{
			regex: "K406",
			model: "Pebble Plus"
		},
		{
			regex: "K405",
			model: "Pebble II"
		},
		{
			regex: "T700",
			model: "Palette",
			device: "tablet"
		}
	]
},
	Altice: Altice,
	Kult: Kult,
	Beyond: Beyond,
	BioRugged: BioRugged,
	VAIO: VAIO,
	Spark: Spark,
	SPC: SPC,
	Winmax: Winmax,
	Zebra: Zebra,
	Thuraya: Thuraya,
	Bkav: Bkav,
	Brandt: Brandt,
	Bigben: Bigben,
	SMARTEC: SMARTEC,
	Asanzo: Asanzo,
	Artizlee: Artizlee,
	Mintt: Mintt,
	Premio: Premio,
	Trifone: Trifone,
	Bluewave: Bluewave,
	Siragon: Siragon,
	Poppox: Poppox,
	Zentality: Zentality,
	"Black Bear": {
	regex: "(B6 Master|B6 Note X)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	Fortis: Fortis,
	OpelMobile: OpelMobile,
	NuAns: NuAns,
	Koolnee: Koolnee,
	Sansui: Sansui,
	Sico: Sico,
	Smadl: Smadl,
	EXCEED: EXCEED,
	Tymes: Tymes,
	Solone: Solone,
	FarEasTone: FarEasTone,
	Smailo: Smailo,
	Colors: Colors,
	Honeywell: Honeywell,
	Electroneum: Electroneum,
	"High Q": {
	regex: "(ELT070[46]H|ELT0802H)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
},
	Pluzz: Pluzz,
	"IKU Mobile": {
	regex: "(Powerful_K55i|Curvy C50L)(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	"IKI Mobile": {
	regex: "(?:GO5_55|BLESS_GO55|BLESSPLUS|KF4Go|KF5bless)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "GO5_55",
			model: "Go 5.5\""
		},
		{
			regex: "BLESS_GO55",
			model: "Bless Go 5.5\""
		},
		{
			regex: "BLESSPLUS",
			model: "Bless Plus"
		},
		{
			regex: "(KF4Go|KF5bless)",
			model: "$1"
		}
	]
},
	"CG Mobile": {
	regex: "(?:CG_OMEGA6|Omega (?:[38])|CG_EON_Blaze_Pro|CG\\|EON Blaze GOLD)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Omega ([38])(?:[);/ ]|$)",
			model: "Omega $1"
		},
		{
			regex: "CG_OMEGA6(?:[);/ ]|$)",
			model: "Omega 6"
		},
		{
			regex: "CG_EON_Blaze_Pro(?:[);/ ]|$)",
			model: "EON Blaze Pro"
		},
		{
			regex: "CG\\|EON Blaze GOLD(?:[);/ ]|$)",
			model: "EON Blaze Gold"
		}
	]
},
	IUNI: IUNI,
	"ZH&K": {
	regex: "(?:ODYSSEY O2|ODYSSEY RANGE)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ODYSSEY O2",
			model: "Odyssey O2"
		},
		{
			regex: "ODYSSEY RANGE",
			model: "Odyssey Range"
		}
	]
},
	Ordissimo: Ordissimo$1,
	Necnot: Necnot,
	Einstein: Einstein,
	AfriOne: AfriOne,
	Connex: Connex,
	Connectce: Connectce,
	Clementoni: Clementoni,
	"Cell-C": {
	regex: "Cell_?C_",
	device: "smartphone",
	models: [
		{
			regex: "Cell_C_(Summit_Plus|Fame|Evolve)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "CELLC_Evolve",
			device: "tablet",
			model: "Evolve"
		}
	]
},
	VC: VC,
	CellAllure: CellAllure,
	Eagle: Eagle,
	Invens: Invens,
	"Chico Mobile": {
	regex: "(?:ALTO (?:Bombo|classic|Estrella|JUEGO|SUBIR|[235])|FUEGO MAX|OJOS[ _](?:CAMBIO|NUBE|[68i]|ORO))(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "ALTO Bombo",
			model: "Alto Bombo"
		},
		{
			regex: "ALTO classic",
			model: "Alto Classic"
		},
		{
			regex: "ALTO Estrella",
			model: "Alto Estrella"
		},
		{
			regex: "ALTO JUEGO",
			model: "Alto Juego"
		},
		{
			regex: "ALTO SUBIR",
			model: "Alto Subir"
		},
		{
			regex: "ALTO ([235])",
			model: "Alto $1"
		},
		{
			regex: "OJOS[ _]([68i])",
			model: "Ojos $1"
		},
		{
			regex: "OJOS NUBE",
			model: "Ojos Nube"
		},
		{
			regex: "OJOS CAMBIO",
			model: "Ojos Cambio"
		},
		{
			regex: "OJOS ORO",
			model: "Ojos Oro"
		},
		{
			regex: "FUEGO MAX",
			device: "tablet",
			model: "Fuego Max"
		}
	]
},
	Claresta: Claresta,
	Camfone: Camfone,
	Bellphone: Bellphone,
	Gini: Gini,
	MIVO: MIVO,
	Jesy: Jesy,
	Teknosa: Teknosa,
	Hyve: Hyve,
	EWIS: EWIS,
	"Leader Phone": {
	regex: "(Vyper|N-5[07]|N-45)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "N-45 light",
			model: "N-45 Light"
		},
		{
			regex: "(Vyper|N-5[07]|N-45)(?:[);/ ]|$)",
			model: "$1"
		}
	]
},
	Cavion: Cavion,
	GLX: GLX,
	Seeken: Seeken,
	Jivi: Jivi,
	Winnovo: Winnovo,
	WE: WE,
	Trio: Trio,
	Seuic: Seuic,
	Centric: Centric,
	Kata: Kata,
	Leff: Leff,
	Hardkernel: Hardkernel,
	Wiseasy: Wiseasy,
	"Shtrikh-M": {
	regex: "SHTRIH-SMARTPOS-F2(?:[);/ ]|$)",
	device: "peripheral",
	model: "Smartpos F2"
},
	BBK: BBK,
	"4ife": {
	regex: "4ife (4K Smart TV Box)(?:[);/ ]|$)",
	device: "tv",
	model: "$1"
},
	Westpoint: Westpoint,
	Wintouch: Wintouch,
	Aiuto: Aiuto,
	Seatel: Seatel,
	Ditecma: Ditecma,
	Datamini: Datamini,
	"3GNET": {
	regex: "(?<!NetType/)3GNET[ _]",
	device: "smartphone",
	models: [
		{
			regex: "3GNET[ _](U8|T800|U6s)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "3GNET[ _]T ?900",
			model: "T900"
		}
	]
},
	"Yoka TV": {
	regex: "KB2 PRO(?:[);/ ]|$)",
	device: "tv",
	model: "KB2 Pro"
},
	Formuler: Formuler,
	Malata: Malata,
	IT: IT,
	Navcity: Navcity,
	Jiake: Jiake,
	"iQ&T": {
	regex: "(IFoo (?:U200|H55))(?:[);/ ]|$)",
	device: "smartphone",
	model: "$1"
},
	Mantra: Mantra,
	Datalogic: Datalogic,
	"Naomi Phone": {
	regex: "NAOMIPHONE Ambar(?:[);/ ]|$)",
	device: "smartphone",
	model: "Ambar"
},
	Navitel: Navitel,
	Linnex: Linnex,
	Smartab: Smartab,
	SuperTab: SuperTab,
	Suzuki: Suzuki,
	Philips: Philips$1,
	INCAR: INCAR,
	"FaRao Pro": {
	regex: "(FTRW100)(?:[);/ ]|$)",
	device: "tablet",
	model: "$1"
},
	Nabi: Nabi,
	StrawBerry: StrawBerry,
	Gresso: Gresso,
	Pendoo: Pendoo,
	PiPO: PiPO,
	Engel: Engel,
	Genesis: Genesis,
	InfoKit: InfoKit,
	Blloc: Blloc,
	Huskee: Huskee,
	SOLE: SOLE,
	SOLO: SOLO,
	OINOM: OINOM,
	Singtech: Singtech,
	Sunny: Sunny,
	TEENO: TEENO,
	"v-mobile": {
	regex: "Vmobile[ _]",
	device: "smartphone",
	models: [
		{
			regex: "Vmobile[ _](J7)(?:[);/ ]|$)",
			model: "$1"
		},
		{
			regex: "Vmobile XS Pro(?:[);/ ]|$)",
			model: "XS Pro"
		}
	]
},
	OASYS: OASYS,
	Aspera: Aspera,
	"Vision Touch": {
	regex: "Vision ?Touch",
	device: "smartphone",
	models: [
		{
			regex: "VisionTouchLife",
			model: "Life"
		},
		{
			regex: "Inspire",
			model: "Inspire"
		}
	]
},
	NOBUX: NOBUX,
	Hitech: Hitech,
	F150: F150,
	BilimLand: BilimLand,
	Greentel: Greentel,
	Kyowon: Kyowon,
	"LT Mobile": {
	regex: "(?:LT-NOTE 10S)",
	device: "smartphone",
	models: [
		{
			regex: "LT-NOTE 10S",
			model: "Note 10S"
		}
	]
},
	"ONYX BOOX": {
	regex: "KON_TIKI(?:[);/ ]|$)",
	device: "tablet",
	model: "Kon Tiki"
},
	GFive: GFive,
	KINGZONE: KINGZONE,
	"M-Tech": {
	regex: "EROS 4G(?:[);/ ]|$)",
	device: "smartphone",
	model: "Eros 4G"
},
	Fantec: Fantec,
	AURIS: AURIS,
	YUHO: YUHO,
	"2F Mobile": {
	regex: "(Z8PLUS|Z8POCKET)(?:[);/ ]|$)",
	device: "smartphone",
	models: [
		{
			regex: "Z8PLUS",
			model: "Z8 Plus"
		},
		{
			regex: "Z8POCKET",
			model: "Z8 Pocket"
		}
	]
}
};

var model = {};

Object.defineProperty(model, "__esModule", { value: true });
model.buildModel = (model) => {
    model = model.replace(/_/g, " ");
    model = model.replace(RegExp(" TD$", "i"), "");
    if (model === "Build")
        return "";
    return model;
};

var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(mobiles, "__esModule", { value: true });
const mobiles_json_1 = __importDefault$a(require$$0$8);
const variable_replacement_1$6 = variableReplacement;
const user_agent_1$9 = userAgent;
const model_1$2 = model;
class MobileParser {
    constructor() {
        this.parse = (userAgent) => {
            const result = {
                type: "",
                brand: "",
                model: ""
            };
            let resultType = "";
            for (const [brand, mobile] of Object.entries(mobiles_json_1.default)) {
                const match = user_agent_1$9.userAgentParser(mobile.regex, userAgent);
                if (!match)
                    continue;
                resultType = "device" in mobile && mobile.device || "";
                result.brand = brand;
                if ("model" in mobile && mobile.model) {
                    result.model = model_1$2.buildModel(variable_replacement_1$6.variableReplacement(mobile.model, match)).trim();
                }
                else if ("models" in mobile && mobile.models) {
                    for (const model of mobile.models) {
                        const modelMatch = user_agent_1$9.userAgentParser(model.regex, userAgent);
                        if (!modelMatch)
                            continue;
                        result.model = model_1$2.buildModel(variable_replacement_1$6.variableReplacement(model.model, modelMatch)).trim();
                        if ("device" in model && model.device) {
                            resultType = model.device;
                        }
                        if ("brand" in model) {
                            result.brand = model.brand || "";
                        }
                        break;
                    }
                }
                break;
            }
            // Sanitize device type
            if (resultType === "tv") {
                result.type = "television";
            }
            else if (resultType === "car browser") {
                result.type = "car";
            }
            else {
                result.type = resultType;
            }
            // Sanitize device brand
            if (result.brand === "Unknown") {
                result.brand = "";
            }
            return result;
        };
    }
}
mobiles.default = MobileParser;

var televisions = {};

var Airties = {
	regex: "Airties",
	device: "tv",
	models: [
		{
			regex: "Airties; ?([^);/]+)",
			model: "$1"
		}
	]
};
var AOC = {
	regex: "AOC",
	device: "tv",
	models: [
		{
			regex: "(LE43S5970-20|S50856)",
			model: "$1"
		}
	]
};
var ARRIS = {
	regex: "ARRIS[;,]",
	device: "tv",
	models: [
		{
			regex: "FS-ARS-01B",
			model: "FS-ARS-01B"
		}
	]
};
var Atvio = {
	regex: "ATVIO",
	device: "tv",
	models: [
		{
			regex: "55D1620",
			model: "55D1620"
		}
	]
};
var BangOlufsen = {
	regex: "Bangolufsen",
	device: "tv",
	model: "BeoVision"
};
var Blaupunkt = {
	regex: "Blaupunkt_UMC[;,]",
	device: "tv",
	models: [
		{
			regex: "LC-65CUG8052E",
			model: "LC-65CUG8052E"
		}
	]
};
var Bush = {
	regex: "BUSH[;,]",
	device: "tv",
	model: ""
};
var Celcus = {
	regex: "CELCUS[;,]",
	device: "tv",
	model: ""
};
var Changhong = {
	regex: "Changhong",
	device: "tv",
	models: [
		{
			regex: "Changhong; ?([^);/]+)",
			model: "$1"
		}
	]
};
var CreNova = {
	regex: "CreNova",
	device: "tv",
	model: "CNV001"
};
var Digihome = {
	regex: "DIGIHOME[;,]",
	device: "tv",
	model: ""
};
var DMM = {
	regex: "DMM",
	device: "tv",
	model: "Dreambox"
};
var ELECTRONIA = {
	regex: "ELECTRONIA[;,]",
	device: "tv",
	model: ""
};
var Essentielb = {
	regex: "ESSENTIELB[;,]",
	device: "tv",
	model: ""
};
var Finlux = {
	regex: "FINLUX[;,]",
	device: "tv",
	model: ""
};
var Fuego = {
	regex: "FUEGO[;,]",
	device: "tv",
	model: ""
};
var GoGEN = {
	regex: "GOGEN[;,]",
	device: "tv",
	model: ""
};
var Grundig = {
	regex: "(OWB|Grundig|Arcelik)",
	device: "tv",
	model: ""
};
var Haier = {
	regex: "(?:HHW_)?HAIER",
	device: "tv",
	models: [
		{
			regex: "LE55X7000U",
			model: "LE55X7000U"
		}
	]
};
var Hisense = {
	regex: "Hisense|Eurofins_Digital_Testing",
	device: "tv",
	models: [
		{
			regex: "50ADEVTOOL",
			model: "50ADEVTOOL"
		},
		{
			regex: "50A683FEVS",
			model: "50A683FEVS"
		},
		{
			regex: "55A6100EE",
			model: "55A6100EE"
		},
		{
			regex: "55U62QGAVT",
			model: "55U62QGAVT"
		},
		{
			regex: "50A6502EA",
			model: "50A6502EA"
		},
		{
			regex: "MICALIDVB6886",
			model: "MICALIDVB6886"
		},
		{
			regex: "(L[A-Z]{2,3}[0-9]{2}[A-Z][0-9]{3,4}[A-Z]{0,6}[0-9]?[A-Z]?)",
			model: "$1"
		},
		{
			regex: "(H[A-Z]?[0-9]{2}[A-Z][0-9]{3,4}[A-Z]{0,4})",
			model: "$1"
		}
	]
};
var Hitachi = {
	regex: "Hitachi[;,]",
	device: "tv",
	models: [
		{
			regex: "49D2900",
			model: "49D2900"
		}
	]
};
var Horizon = {
	regex: "HORIZON[;,]",
	device: "tv",
	model: ""
};
var Hotel = {
	regex: "HOTEL[;,]",
	device: "tv",
	model: ""
};
var Humax = {
	regex: "Humax",
	device: "tv",
	models: [
		{
			regex: "(HD-FOX C|HD (FOX\\+|NANO)|iCord (HD\\+|MINI|Cable)|(CX|IR)HD-5100(C|S)|HM9503HD)",
			model: "$1"
		},
		{
			regex: "HMS1000S",
			model: "HMS-1000S"
		},
		{
			regex: "Humax; ([^);/]+)",
			model: "$1"
		}
	]
};
var Hyundai = {
	regex: "HYUNDAI[;,]",
	device: "tv",
	model: ""
};
var Ikea = {
	regex: "Ikea",
	device: "tv",
	model: ""
};
var Intek = {
	regex: "Intek",
	device: "tv",
	models: [
		{
			regex: "(Vantage|VT-100|VT-1)",
			model: "$1"
		}
	]
};
var Inverto = {
	regex: "Inverto",
	device: "tv",
	models: [
		{
			regex: "inverto; ([^);/]+)",
			model: "$1"
		},
		{
			regex: "(Volksbox Web Edition|Volksbox Essential|Volksbox II|Volksbox)",
			model: "$1"
		}
	]
};
var JVC = {
	regex: "AFTSO001|JVC[;,]",
	device: "tv",
	models: [
		{
			regex: "AFTSO001",
			model: "4K (2019)"
		}
	]
};
var Kalley = {
	regex: "KALLEY[;,]",
	device: "tv",
	models: [
		{
			regex: "32D1620",
			model: "32D1620"
		}
	]
};
var KUBO = {
	regex: "KUBO[;,]",
	device: "tv",
	model: ""
};
var Laurus = {
	regex: "LAURUS[;,]",
	device: "tv",
	model: ""
};
var LG = {
	regex: "LGE",
	device: "tv",
	models: [
		{
			regex: "XU43WT180N",
			model: "XU43WT180N"
		},
		{
			regex: "43LJ614V-ZA",
			model: "43LJ614V-ZA"
		},
		{
			regex: "55SK850V-ZA",
			model: "55SK850V-ZA"
		},
		{
			regex: "KEY0000213F1z",
			model: "KEY0000213F1z"
		},
		{
			regex: "KEY0000213F",
			model: "KEY0000213F"
		},
		{
			regex: "KEY000000(2E|2F|3B|3F)",
			model: "KEY000000$1"
		},
		{
			regex: "(NetCast [0-9]{1}.[0-9]{1}|GLOBAL_PLAT3)",
			model: "$1"
		},
		{
			regex: "(OLED[0-9]{2}[A-Z0-9]{3}[A-Z]{2})",
			model: "$1"
		},
		{
			regex: "(OLED[0-9]{2}[A-Z][0-9][A-Z])",
			model: "$1"
		},
		{
			regex: "(OLED[0-9]{2}[A-Z0-9]{2})",
			model: "$1"
		},
		{
			regex: "([0-9]{2}[A-Z]{2}[0-9]{4}[A-Z0-9]{1}[A-Z]{2})",
			model: "$1"
		},
		{
			regex: "([0-9]{2}NANO[0-9]{3}[A-Z]{2})",
			model: "$1"
		},
		{
			regex: "([0-9]{2}NANO[0-9]{2})",
			model: "$1"
		},
		{
			regex: "LGE;? ?([0-9]{2}[A-Z]{2}[0-9]{2,4}[A-Z]?)",
			model: "$1"
		},
		{
			regex: "LM21U",
			model: "LM21U"
		},
		{
			regex: "32LM",
			model: "32LM"
		}
	]
};
var Lifemaxx = {
	regex: "Lifemaxx[;,]",
	device: "tv",
	model: ""
};
var Linsar = {
	regex: "LINSAR[;,]",
	device: "tv",
	model: ""
};
var Loewe = {
	regex: "Loewe",
	device: "tv",
	models: [
		{
			regex: "([A-Z]{2}[0-9]{3})",
			model: "$1"
		}
	]
};
var Luxor = {
	regex: "LUXOR[;,]",
	device: "tv",
	model: ""
};
var Manhattan = {
	regex: "Manhattan",
	device: "tv",
	models: [
		{
			regex: "T3",
			model: "T3"
		}
	]
};
var MediaTek = {
	regex: "MTK|MediaTek;",
	device: "tv",
	models: [
		{
			regex: "(MT[0-9]{4})",
			model: "$1"
		}
	]
};
var Medion$1 = {
	regex: "Medion",
	device: "tv",
	model: ""
};
var Miray = {
	regex: "MIRAY",
	device: "tv",
	models: [
		{
			regex: "LEDM-322NIP",
			model: "LEDM-322NIP"
		}
	]
};
var MStar = {
	regex: "MStar[;,]",
	device: "tv",
	models: [
		{
			regex: "([24])KTV18",
			model: "$1KTV18"
		}
	]
};
var MTC = {
	regex: "MTC[;,]",
	device: "tv",
	models: [
		{
			regex: "([24])K_Android_TV_V01",
			model: "$1K Android TV"
		}
	]
};
var Nordmende = {
	regex: "NORDMENDE[;,]",
	device: "tv",
	model: ""
};
var Metz = {
	regex: "Metz",
	device: "tv",
	model: ""
};
var Ok = {
	regex: "OK[;,]",
	device: "tv",
	model: ""
};
var Panasonic$1 = {
	regex: "Panasonic",
	device: "tv",
	models: [
		{
			regex: "VIERA (201[1-9])",
			model: "VIERA ($1)"
		},
		{
			regex: "(DIGA [A-Z]{1}[0-9]{4})",
			model: "$1"
		},
		{
			regex: "DIGA Webkit ([A-Z]{1}[0-9]{4})",
			model: "DIGA $1"
		},
		{
			regex: "SmartTV(201[89]|202[0-1])",
			model: "Smart TV ($1)"
		}
	]
};
var PEAQ = {
	regex: "PEAQ",
	device: "tv",
	model: ""
};
var Philips = {
	regex: "Philips|NETTV/",
	device: "tv",
	models: [
		{
			regex: "Philips[,;] ?((?! )[^),;/]+)",
			model: "$1"
		},
		{
			regex: "NETTV/[0-9\\.]{5}",
			model: "NetTV Series"
		}
	]
};
var Polaroid = {
	regex: "POLAROID[;,]",
	device: "tv",
	model: ""
};
var PROFiLO = {
	regex: "PROFILO[;,]",
	device: "tv",
	model: ""
};
var Qilive = {
	regex: "QILIVE[;,]",
	device: "tv",
	model: ""
};
var REGAL = {
	regex: "REGAL[;,]",
	device: "tv",
	model: ""
};
var Saba = {
	regex: "Saba[;,]",
	device: "tv",
	model: ""
};
var Salora = {
	regex: "Salora[;,]",
	device: "tv",
	model: ""
};
var Samsung$2 = {
	regex: "Samsung|Maple_2011",
	device: "tv",
	models: [
		{
			regex: "SmartTV(201[2-9]|202[0-1]):([^);/]+)",
			model: "$2"
		},
		{
			regex: "SmartTV(201[2-9]|202[0-1])",
			model: "Smart TV ($1)"
		},
		{
			regex: "Maple_2011",
			model: "Smart TV (2011)"
		}
	]
};
var SCBC = {
	regex: "SCBC[;,]",
	device: "tv",
	models: [
		{
			regex: "SCBC586",
			model: "SCBC586"
		},
		{
			regex: "43D1850",
			model: "43D1850"
		}
	]
};
var SEG = {
	regex: "SEG[;,]",
	device: "tv",
	model: ""
};
var Selevision = {
	regex: "Selevision",
	device: "tv",
	models: [
		{
			regex: "Selevision; (?:Selevision )?([^);/]+)",
			model: "$1"
		},
		{
			regex: "(EMC1000i)",
			model: "$1"
		}
	]
};
var Sharp = {
	regex: "(?:UMC-)?Sharp",
	device: "tv",
	models: [
		{
			regex: "Sharp[,;] ?((?! |HbbTV)[^),;/]+)",
			model: "$1"
		},
		{
			regex: "(LE[0-9]{3}[A-Z]{0,3})",
			model: "$1"
		},
		{
			regex: "LC-([^);/]+)",
			model: "LC-$1"
		},
		{
			regex: "BLA-43",
			model: "BLA-43"
		}
	]
};
var Skyworth = {
	regex: "Sky_worth",
	device: "tv",
	models: [
		{
			regex: "Sky_worth;([^);/]+)",
			model: "$1"
		}
	]
};
var Smart = {
	regex: "Smart[;,]",
	device: "tv",
	models: [
		{
			regex: "Smart; ([^);/]+)",
			model: "$1"
		},
		{
			regex: "([A-Z]{2}[0-9]{2}|ZAPPIX)",
			model: "$1"
		}
	]
};
var Sony$2 = {
	regex: "Sony",
	device: "tv",
	models: [
		{
			regex: "KDL-GR1",
			model: "KDL-GR1"
		},
		{
			regex: "KDL-GN([56])",
			model: "KDL-GN$1"
		},
		{
			regex: "BRAVIA (VH1|4K VH2)",
			model: "BRAVIA $1"
		},
		{
			regex: "(KDL?-?[0-9]{2}[A-Z]{1}[0-9]{4}[A-Z]{1})",
			model: "$1"
		},
		{
			regex: "(KDL?-?[0-9]{2}[A-Z]{1}[0-9]{3}[A-Z]{1})",
			model: "$1"
		},
		{
			regex: "(KDL?-?[0-9]{2}[A-Z]{1,2}[0-9]{1,5})",
			model: "$1"
		}
	]
};
var SWTV = {
	regex: "SWTV[;,]",
	device: "tv",
	models: [
		{
			regex: "SKWE20E21",
			model: "SKWE20E21"
		}
	]
};
var Technicolor = {
	regex: "Technicolor",
	device: "tv",
	models: [
		{
			regex: "uzw4054ttg",
			model: "UZW4054TTG"
		}
	]
};
var Technika = {
	regex: "TECHNIKA[;,]",
	device: "tv",
	model: ""
};
var TechniSat = {
	regex: "TechniSat",
	device: "tv",
	models: [
		{
			regex: "((DigiCorder|MultyVision|Digit) (ISIO S|ISIO C|ISIO))",
			model: "$1"
		}
	]
};
var TechnoTrend = {
	regex: "TechnoTrend",
	device: "tv",
	models: [
		{
			regex: "([A-Z]{1}-[0-9]{3})",
			model: "$1"
		}
	]
};
var Techwood = {
	regex: "Techwood[;,]",
	device: "tv",
	model: ""
};
var Telefunken = {
	regex: "Telefunken",
	device: "tv",
	model: ""
};
var TCL = {
	regex: "TCL",
	device: "tv",
	models: [
		{
			regex: "(32D1820|(?:39|55)D2900|32D2930|(?:32|43)S4900)",
			model: "$1"
		}
	]
};
var Thomson$1 = {
	regex: "THOMSON[,]?|THOM",
	device: "tv",
	models: [
		{
			regex: "(TB28D19DHS-01|T28D18SFS-01B)",
			model: "$1 28.0\""
		},
		{
			regex: "(T32RTM5040|T32D18SFS-01B)",
			model: "$1 32.0\""
		},
		{
			regex: "(T43FSL5031|T43D18SFS-01B)",
			model: "$1 43.0\""
		},
		{
			regex: "(T40D18SFS-01B)",
			model: "$1 40.0\""
		},
		{
			regex: "(T49D18SFS-01B)",
			model: "$1 49.0\""
		},
		{
			regex: "(T55D18[SD]FS-01B)",
			model: "$1 55.0\""
		},
		{
			regex: "40FB5426",
			model: "40FB5426"
		}
	]
};
var TOKYO = {
	regex: "TOKYO[;,]",
	device: "tv",
	models: [
		{
			regex: "TOKTCLED32S",
			model: "TOKTCLED32S"
		}
	]
};
var Toshiba$2 = {
	regex: "Toshiba",
	device: "tv",
	models: [
		{
			regex: "40L2600",
			model: "40L2600"
		},
		{
			regex: "(([0-9]{2}|DTV_)[A-Z]{2}[0-9]{1,3})",
			model: "$1"
		}
	]
};
var Videoweb = {
	regex: "videoweb|tv2n",
	device: "tv",
	models: [
		{
			regex: "(tv2n)",
			model: "$1"
		},
		{
			regex: "(videowebtv)",
			model: "VideoWeb TV"
		}
	]
};
var VOX = {
	regex: "VOX[;,]",
	device: "tv",
	model: ""
};
var WELLINGTON = {
	regex: "WELLINGTON[;,]",
	device: "tv",
	model: ""
};
var Vestel = {
	regex: "(?:Vestel.+VESTEL|VESTEL;)",
	device: "tv",
	model: ""
};
var require$$0$7 = {
	Airties: Airties,
	"ALDI NORD": {
	regex: "ALDINORD[;,]",
	device: "tv",
	model: ""
},
	"ALDI SÜD": {
	regex: "ALDISUED[;,]",
	device: "tv",
	model: ""
},
	"Altech UEC": {
	regex: "Altech UEC",
	device: "tv",
	models: [
		{
			regex: "Altech UEC; ?([^);/]+)",
			model: "$1"
		}
	]
},
	AOC: AOC,
	ARRIS: ARRIS,
	Atvio: Atvio,
	BangOlufsen: BangOlufsen,
	Blaupunkt: Blaupunkt,
	Bush: Bush,
	Celcus: Celcus,
	Changhong: Changhong,
	CreNova: CreNova,
	Digihome: Digihome,
	DMM: DMM,
	ELECTRONIA: ELECTRONIA,
	Essentielb: Essentielb,
	Finlux: Finlux,
	"F&U": {
	regex: "FU[;,]",
	device: "tv",
	model: ""
},
	Fuego: Fuego,
	GoGEN: GoGEN,
	Grundig: Grundig,
	Haier: Haier,
	"Hi-Level": {
	regex: "HI-LEVEL[;,]",
	device: "tv",
	model: ""
},
	Hisense: Hisense,
	Hitachi: Hitachi,
	Horizon: Horizon,
	Hotel: Hotel,
	Humax: Humax,
	Hyundai: Hyundai,
	Ikea: Ikea,
	Intek: Intek,
	Inverto: Inverto,
	JVC: JVC,
	Kalley: Kalley,
	KUBO: KUBO,
	Laurus: Laurus,
	LG: LG,
	Lifemaxx: Lifemaxx,
	Linsar: Linsar,
	Loewe: Loewe,
	Luxor: Luxor,
	Manhattan: Manhattan,
	MediaTek: MediaTek,
	Medion: Medion$1,
	Miray: Miray,
	MStar: MStar,
	MTC: MTC,
	Nordmende: Nordmende,
	Metz: Metz,
	Ok: Ok,
	Panasonic: Panasonic$1,
	PEAQ: PEAQ,
	Philips: Philips,
	Polaroid: Polaroid,
	PROFiLO: PROFiLO,
	Qilive: Qilive,
	REGAL: REGAL,
	Saba: Saba,
	Salora: Salora,
	Samsung: Samsung$2,
	SCBC: SCBC,
	SEG: SEG,
	Selevision: Selevision,
	Sharp: Sharp,
	Skyworth: Skyworth,
	Smart: Smart,
	Sony: Sony$2,
	SWTV: SWTV,
	"TD Systems": {
	regex: "TDSystems[;,]",
	device: "tv",
	models: [
		{
			regex: "SmartTV(2019|2020)",
			model: "Smart TV ($1)"
		}
	]
},
	Technicolor: Technicolor,
	Technika: Technika,
	TechniSat: TechniSat,
	TechnoTrend: TechnoTrend,
	Techwood: Techwood,
	Telefunken: Telefunken,
	TCL: TCL,
	Thomson: Thomson$1,
	TOKYO: TOKYO,
	Toshiba: Toshiba$2,
	Videoweb: Videoweb,
	VOX: VOX,
	WELLINGTON: WELLINGTON,
	"X.Vision": {
	regex: "X-VISION[;,]",
	device: "tv",
	model: ""
},
	Vestel: Vestel
};

var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(televisions, "__esModule", { value: true });
const televisions_json_1 = __importDefault$9(require$$0$7);
const variable_replacement_1$5 = variableReplacement;
const user_agent_1$8 = userAgent;
const model_1$1 = model;
class TelevisionParser {
    constructor() {
        this.parse = (userAgent) => {
            const result = {
                type: "",
                brand: "",
                model: ""
            };
            if (!this.isHbbTv(userAgent))
                return result;
            result.type = "television";
            for (const [brand, television] of Object.entries(televisions_json_1.default)) {
                const match = user_agent_1$8.userAgentParser(television.regex, userAgent);
                if (!match)
                    continue;
                result.brand = brand;
                if ("model" in television && television.model) {
                    result.model = model_1$1.buildModel(variable_replacement_1$5.variableReplacement(television.model, match)).trim();
                }
                else if ("models" in television && television.models) {
                    for (const model of television.models) {
                        const modelMatch = user_agent_1$8.userAgentParser(model.regex, userAgent);
                        if (!modelMatch)
                            continue;
                        result.model = model_1$1.buildModel(variable_replacement_1$5.variableReplacement(model.model, modelMatch)).trim();
                        break;
                    }
                }
                break;
            }
            return result;
        };
        this.isHbbTv = (userAgent) => {
            return user_agent_1$8.userAgentParser("HbbTV\/([1-9]{1}(?:\.[0-9]{1}){1,2})", userAgent);
        };
    }
}
televisions.default = TelevisionParser;

var cars = {};

var Tesla = {
	regex: "(?:Tesla/[0-9.]+|QtCarBrowser)",
	device: "car browser",
	models: [
		{
			regex: "QtCarBrowser",
			model: "Model S"
		},
		{
			regex: "Tesla/[0-9.]+",
			model: ""
		}
	]
};
var Topway = {
	regex: "sp9853i_1h10_vmm",
	device: "car browser",
	models: [
		{
			regex: "sp9853i_1h10_vmm",
			model: "TS9"
		}
	]
};
var require$$0$6 = {
	Tesla: Tesla,
	"MAC AUDIO": {
	regex: "Mac Audio Spro",
	device: "car browser",
	models: [
		{
			regex: "Spro",
			model: "S Pro"
		}
	]
},
	Topway: Topway
};

var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(cars, "__esModule", { value: true });
const car_browsers_json_1 = __importDefault$8(require$$0$6);
const variable_replacement_1$4 = variableReplacement;
const user_agent_1$7 = userAgent;
class CarParser {
    constructor() {
        this.parse = (userAgent) => {
            const result = {
                type: "",
                brand: "",
                model: ""
            };
            for (const [brand, car] of Object.entries(car_browsers_json_1.default)) {
                const match = user_agent_1$7.userAgentParser(car.regex, userAgent);
                if (!match)
                    continue;
                result.type = "car";
                result.brand = brand;
                for (const model of car.models) {
                    const match = user_agent_1$7.userAgentParser(model.regex, userAgent);
                    if (!match)
                        continue;
                    result.model = variable_replacement_1$4.variableReplacement(model.model, match).trim();
                }
                break;
            }
            return result;
        };
    }
}
cars.default = CarParser;

var consoles = {};

var Archos = {
	regex: "Archos.*GAMEPAD([2]?)",
	device: "console",
	model: "Gamepad $1"
};
var Microsoft$1 = {
	regex: "Xbox",
	device: "console",
	models: [
		{
			regex: "Xbox Series X",
			model: "Xbox Series X"
		},
		{
			regex: "Xbox One X",
			model: "Xbox One X"
		},
		{
			regex: "Xbox One",
			model: "Xbox One"
		},
		{
			regex: "XBOX_ONE_ED",
			model: "Xbox One S"
		},
		{
			regex: "Xbox",
			model: "Xbox 360"
		}
	]
};
var Nintendo = {
	regex: "Nintendo (([3]?DS[i]?)|Wii[U]?|Switch)",
	device: "console",
	model: "$1"
};
var OUYA = {
	regex: "OUYA",
	device: "console",
	model: "OUYA"
};
var Sega = {
	regex: "Dreamcast",
	device: "console",
	model: "Dreamcast"
};
var Sony$1 = {
	regex: "PlayStation (3|4 Pro|4|Portable|Vita)",
	device: "console",
	model: "PlayStation $1"
};
var require$$0$5 = {
	Archos: Archos,
	Microsoft: Microsoft$1,
	Nintendo: Nintendo,
	OUYA: OUYA,
	Sega: Sega,
	Sony: Sony$1
};

var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(consoles, "__esModule", { value: true });
const consoles_json_1 = __importDefault$7(require$$0$5);
const variable_replacement_1$3 = variableReplacement;
const user_agent_1$6 = userAgent;
class ConsoleParser {
    constructor() {
        this.parse = (userAgent) => {
            const result = {
                type: "",
                brand: "",
                model: ""
            };
            for (const [brand, gameConsole] of Object.entries(consoles_json_1.default)) {
                const match = user_agent_1$6.userAgentParser(gameConsole.regex, userAgent);
                if (!match)
                    continue;
                result.type = gameConsole.device;
                result.brand = brand;
                if ("model" in gameConsole && gameConsole.model) {
                    result.model = variable_replacement_1$3.variableReplacement(gameConsole.model, match).trim();
                }
                else if ("models" in gameConsole && gameConsole.models) {
                    for (const model of gameConsole.models) {
                        const modelMatch = user_agent_1$6.userAgentParser(model.regex, userAgent);
                        if (!modelMatch)
                            continue;
                        result.model = variable_replacement_1$3.variableReplacement(model.model, modelMatch).trim();
                        break;
                    }
                }
                break;
            }
            return result;
        };
    }
}
consoles.default = ConsoleParser;

var notebooks = {};

var Acer$1 = {
	regex: "FBMD/(?:Aspire E5-421G|Z5WAL|One S1003);",
	device: "desktop",
	models: [
		{
			regex: "FBMD/Aspire E5-421G;",
			model: "Aspire E5-421G"
		},
		{
			regex: "FBMD/Z5WAL;",
			model: "Aspire E5-511"
		},
		{
			regex: "FBMD/One S1003;",
			model: "One 10"
		}
	]
};
var Asus$1 = {
	regex: "FBMD/(?:K50IN|K54L|T100HAN|T103HAF|UX360CAK|X550LB|X553MA|X555LN|X556UQK);",
	device: "desktop",
	models: [
		{
			regex: "FBMD/K50IN;",
			model: "K50IN"
		},
		{
			regex: "FBMD/K54L;",
			model: "K54L"
		},
		{
			regex: "FBMD/T100HAN;",
			model: "Transformer Book"
		},
		{
			regex: "FBMD/T103HAF;",
			model: "Transformer Mini"
		},
		{
			regex: "FBMD/UX360CAK;",
			model: "ZenBook Flip"
		},
		{
			regex: "FBMD/X550LB;",
			model: "X550LB"
		},
		{
			regex: "FBMD/X553MA;",
			model: "X553MA"
		},
		{
			regex: "FBMD/X555LN;",
			model: "X555LN"
		},
		{
			regex: "FBMD/X556UQK;",
			model: "X556UQK"
		}
	]
};
var Dell$1 = {
	regex: "FBMD/(?:Latitude E4300|Inspiron 3541|XPS 15 95[35]0);",
	device: "desktop",
	models: [
		{
			regex: "Latitude E4300",
			model: "Latitude E4300"
		},
		{
			regex: "Inspiron 3541",
			model: "Inspiron 3541"
		},
		{
			regex: "XPS 15 9530",
			model: "XPS 15 9530"
		},
		{
			regex: "XPS 15 9550",
			model: "XPS 15 9550"
		}
	]
};
var HP$1 = {
	regex: "FBMD/((?:Compaq|HP) |23-f364)",
	device: "desktop",
	models: [
		{
			regex: "Compaq Presario CQ61 Notebook PC",
			model: "Compaq Presario CQ61"
		},
		{
			regex: "HP Pavilion x2 Detachable",
			model: "Pavilion x2"
		},
		{
			regex: "HP Laptop 15-bs0xx",
			model: "15 Laptop PC"
		},
		{
			regex: "HP ENVY x360 Convertible 15-bp0xx",
			model: "ENVY x360 Convertible PC"
		},
		{
			regex: "HP EliteBook (25[67]0p)",
			model: "EliteBook $1"
		},
		{
			regex: "HP ProBook (440 G5|6[35]60b)",
			model: "ProBook $1"
		},
		{
			regex: "HP Pavilion dv6 Notebook PC",
			model: "Pavilion dv6"
		},
		{
			regex: "HP Pavilion Notebook",
			model: "Pavilion"
		},
		{
			regex: "HP Spectre x360 Convertible",
			model: "Spectre x360"
		},
		{
			regex: "HP Pavilion All-in-One 24-r0xx",
			model: "Pavilion 24-r0xx All-in-One Desktop PC",
			device: "desktop"
		},
		{
			regex: "23-f364",
			model: "Pavilion TouchSmart 23-f364 All-in-One Desktop PC",
			device: "desktop"
		}
	]
};
var Lenovo$1 = {
	regex: "FBMD/(?:37021C5|80E5|80SM|80VR);",
	device: "desktop",
	models: [
		{
			regex: "FBMD/37021C5;",
			model: "ThinkPad Helix 3702"
		},
		{
			regex: "FBMD/80E5;",
			model: "G50-80"
		},
		{
			regex: "FBMD/80SM;",
			model: "Ideapad 310-15ISK"
		},
		{
			regex: "FBMD/80VR;",
			model: "Legion Y720"
		}
	]
};
var Schneider = {
	regex: "FBMD/SCL141CTP;",
	device: "desktop",
	model: "Notebook 14\" Cherry Trail"
};
var Thomson = {
	regex: "FBMD/TH360R12.32CTW;",
	device: "desktop",
	model: "Prestige TH-360R12.32CTW"
};
var Toshiba$1 = {
	regex: "FBMD/Satellite ",
	device: "desktop",
	models: [
		{
			regex: "Satellite (A[25]00|C650|C855|L650|S855)",
			model: "Satellite $1"
		},
		{
			regex: "Satellite ([^;\\)]+);",
			model: "Satellite $1"
		}
	]
};
var require$$0$4 = {
	Acer: Acer$1,
	Asus: Asus$1,
	Dell: Dell$1,
	HP: HP$1,
	Lenovo: Lenovo$1,
	Schneider: Schneider,
	Thomson: Thomson,
	Toshiba: Toshiba$1
};

var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(notebooks, "__esModule", { value: true });
const notebooks_json_1 = __importDefault$6(require$$0$4);
const variable_replacement_1$2 = variableReplacement;
const user_agent_1$5 = userAgent;
const model_1 = model;
class NotebooksParser {
    constructor() {
        this.parse = (userAgent) => {
            const result = {
                type: "",
                brand: "",
                model: ""
            };
            if (!user_agent_1$5.userAgentParser("FBMD/", userAgent)) {
                return result;
            }
            for (const [brand, notebook] of Object.entries(notebooks_json_1.default)) {
                const match = user_agent_1$5.userAgentParser(notebook.regex, userAgent);
                if (!match)
                    continue;
                result.type = "desktop";
                result.brand = brand;
                if ("model" in notebook && notebook.model) {
                    result.model = model_1.buildModel(variable_replacement_1$2.variableReplacement(notebook.model, match)).trim();
                }
                else if ("models" in notebook && notebook.models) {
                    for (const model of notebook.models) {
                        const match = user_agent_1$5.userAgentParser(model.regex, userAgent);
                        if (!match)
                            continue;
                        result.model = variable_replacement_1$2.variableReplacement(model.model, match).trim();
                    }
                }
                break;
            }
            return result;
        };
    }
}
notebooks.default = NotebooksParser;

var portableMediaPlayers = {};

var Apple = {
	regex: "(?:Apple-)?iPod",
	device: "portable media player",
	models: [
		{
			regex: "(?:Apple-)?iPod1[C,]1",
			model: "iPod Touch 1G"
		},
		{
			regex: "(?:Apple-)?iPod2[C,]1",
			model: "iPod Touch 2G"
		},
		{
			regex: "(?:Apple-)?iPod3[C,]1",
			model: "iPod Touch 3"
		},
		{
			regex: "(?:Apple-)?iPod4[C,]1",
			model: "iPod Touch 4"
		},
		{
			regex: "(?:Apple-)?iPod5[C,]1",
			model: "iPod Touch 5"
		},
		{
			regex: "(?:Apple-)?iPod7[C,]1",
			model: "iPod Touch 6"
		},
		{
			regex: "(?:Apple-)?iPod",
			model: "iPod Touch"
		}
	]
};
var Cowon = {
	regex: "COWON ([^;/]+) Build",
	device: "portable media player",
	model: "$1"
};
var Microsoft = {
	regex: "Microsoft ZuneHD",
	device: "portable media player",
	model: "Zune HD"
};
var Panasonic = {
	regex: "(SV-MV100)",
	device: "portable media player",
	model: "$1"
};
var Samsung$1 = {
	regex: "YP-(G[SIPB]?1|G[57]0|GB70D)",
	device: "portable media player",
	models: [
		{
			regex: "YP-G[B]?1",
			model: "Galaxy Player 4.0"
		},
		{
			regex: "YP-G70",
			model: "Galaxy Player 5.0"
		},
		{
			regex: "YP-GS1",
			model: "Galaxy Player 3.6"
		},
		{
			regex: "YP-GI1",
			model: "Galaxy Player 4.2"
		},
		{
			regex: "YP-GP1",
			model: "Galaxy Player 5.8"
		},
		{
			regex: "YP-G50",
			model: "Galaxy Player 50"
		},
		{
			regex: "YP-GB70D",
			model: "Galaxy Player 70 Plus"
		}
	]
};
var Wizz = {
	regex: "(DV-PTB1080)(?:[);/ ]|$)",
	device: "portable media player",
	model: "$1"
};
var SONOS = {
	regex: "Sonos/.+\\((?:ZP.+)\\)|Sonos;",
	device: "portable media player",
	models: [
		{
			regex: "\\((ZPS(?:[13569]|1[1-578]|2[03])|ZP90)\\)",
			model: "$1"
		},
		{
			regex: "Sonos;Play5;",
			model: "Play:5"
		},
		{
			regex: "Sonos;One;",
			model: "One"
		}
	]
};
var require$$0$3 = {
	Apple: Apple,
	Cowon: Cowon,
	Microsoft: Microsoft,
	Panasonic: Panasonic,
	Samsung: Samsung$1,
	Wizz: Wizz,
	SONOS: SONOS
};

var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(portableMediaPlayers, "__esModule", { value: true });
const portable_media_player_json_1 = __importDefault$5(require$$0$3);
const variable_replacement_1$1 = variableReplacement;
const user_agent_1$4 = userAgent;
class PortableMediaPlayersParser {
    constructor() {
        this.parse = (userAgent) => {
            const result = {
                type: "",
                brand: "",
                model: ""
            };
            for (const [brand, portableMediaPlayer] of Object.entries(portable_media_player_json_1.default)) {
                const match = user_agent_1$4.userAgentParser(portableMediaPlayer.regex, userAgent);
                if (!match)
                    continue;
                result.type = portableMediaPlayer.device;
                result.brand = brand;
                if ("model" in portableMediaPlayer && portableMediaPlayer.model) {
                    result.model = variable_replacement_1$1.variableReplacement(portableMediaPlayer.model, match).trim();
                }
                else if ("models" in portableMediaPlayer && portableMediaPlayer.models) {
                    for (const model of portableMediaPlayer.models) {
                        const modelMatch = user_agent_1$4.userAgentParser(model.regex, userAgent);
                        if (!modelMatch)
                            continue;
                        result.model = variable_replacement_1$1.variableReplacement(model.model, modelMatch).trim();
                        break;
                    }
                }
                break;
            }
            return result;
        };
    }
}
portableMediaPlayers.default = PortableMediaPlayersParser;

var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(device, "__esModule", { value: true });
const cameras_1 = __importDefault$4(cameras);
const mobiles_1 = __importDefault$4(mobiles);
const televisions_1 = __importDefault$4(televisions);
const cars_1 = __importDefault$4(cars);
const consoles_1 = __importDefault$4(consoles);
const notebooks_1 = __importDefault$4(notebooks);
const portable_media_players_1 = __importDefault$4(portableMediaPlayers);
const deviceParsers = [
    consoles_1.default,
    cars_1.default,
    cameras_1.default,
    televisions_1.default,
    portable_media_players_1.default,
    mobiles_1.default,
    notebooks_1.default
];
class ClientParser {
    constructor() {
        this.parse = (userAgent) => {
            for (const Parser of deviceParsers) {
                const parser = new Parser();
                const device = parser.parse(userAgent);
                if (device.type !== "") {
                    return device;
                }
            }
            return null;
        };
    }
}
device.default = ClientParser;

var operatingSystem$1 = {};

var require$$0$2 = [
	{
		regex: "Grid OS (\\d+[\\.\\d]+)",
		name: "GridOS",
		version: "$1"
	},
	{
		regex: "CaixaMagica",
		name: "Caixa Mágica",
		version: ""
	},
	{
		regex: "Mageia; Linux",
		name: "Mageia",
		version: ""
	},
	{
		regex: "(?:WH|WhaleTV/)(\\d+[\\.\\d]+)",
		name: "Whale OS",
		version: "$1"
	},
	{
		regex: "Tizen[ /]?(\\d+[\\.\\d]+)?",
		name: "Tizen",
		version: "$1"
	},
	{
		regex: "Sailfish|Jolla",
		name: "Sailfish OS",
		version: ""
	},
	{
		regex: "(?:Ali)?YunOS[ /]?(\\d+[\\.\\d]+)?",
		name: "YunOS",
		version: "$1"
	},
	{
		regex: "Windows Phone;FBSV/(\\d+[\\.\\d]+)",
		name: "Windows Phone",
		version: "$1"
	},
	{
		regex: "(?:Windows Phone (?:OS)?|wds)[ /]?(\\d+[\\.\\d]+)",
		name: "Windows Phone",
		version: "$1"
	},
	{
		regex: "XBLWP7|Windows Phone",
		name: "Windows Phone",
		version: ""
	},
	{
		regex: "Windows CE(?: (\\d+[\\.\\d]+))?",
		name: "Windows CE",
		version: "$1"
	},
	{
		regex: "(?:IEMobile|Windows ?Mobile)(?: (\\d+[\\.\\d]+))?",
		name: "Windows Mobile",
		version: "$1"
	},
	{
		regex: "Windows NT 6.2; ARM;",
		name: "Windows RT",
		version: ""
	},
	{
		regex: "Windows NT 6.3; ARM;",
		name: "Windows RT",
		version: "8.1"
	},
	{
		regex: "Windows IoT 10.0",
		name: "Windows IoT",
		version: "10"
	},
	{
		regex: "KAIOS(?:/(\\d+[\\.\\d]+))?",
		name: "KaiOS",
		version: "$1"
	},
	{
		regex: "RazoDroiD(?: v(\\d+[\\.\\d]*))?",
		name: "RazoDroiD",
		version: "$1"
	},
	{
		regex: "MildWild(?: CM-(\\d+[\\.\\d]*))?",
		name: "MildWild",
		version: "$1"
	},
	{
		regex: "CyanogenMod(?:[\\-/](?:CM)?(\\d+[\\.\\d]*))?",
		name: "CyanogenMod",
		version: "$1"
	},
	{
		regex: "(?:.*_)?MocorDroid(?:(\\d+[\\.\\d]*))?",
		name: "MocorDroid",
		version: "$1"
	},
	{
		regex: "Fire OS(?:/(\\d+[\\.\\d]*))?",
		name: "Fire OS",
		version: "$1"
	},
	{
		regex: "AFTSO001",
		name: "Fire OS",
		version: "7"
	},
	{
		regex: "FydeOS",
		name: "FydeOS",
		version: ""
	},
	{
		regex: "(?:Podbean|Podimo)(?:.+)?/Android",
		name: "Android",
		version: ""
	},
	{
		regex: "Pinterest for Android/.+; (\\d(?:[\\d\\.]+)?)\\)$",
		name: "Android",
		version: "$1"
	},
	{
		regex: "Android; (\\d+[\\.\\d]*); Mobile;",
		name: "Android",
		version: "$1"
	},
	{
		regex: "[ ]([\\d\\.]+)\\) AppleWebKit.*ROBLOX Android App",
		name: "Android",
		version: "$1"
	},
	{
		regex: "(?:(?:Orca-)?Android|Adr)[ /]?(?:[a-z]+ )?(\\d+[\\.\\d]*)",
		name: "Android",
		version: "$1"
	},
	{
		regex: "(?:Allview_TX1_Quasar|Cosmote_My_mini_Tab) (\\d+[\\.\\d]*)",
		name: "Android",
		version: "$1"
	},
	{
		regex: "Android ?(?:jelly bean|Kit Kat|S.O. Ginger Bread|The FireCyano|:) (\\d+[\\.\\d]*)",
		name: "Android",
		version: "$1"
	},
	{
		regex: "(?:Orca-Android|FB4A).*FBSV/(\\d+[\\.\\d]*);",
		name: "Android",
		version: "$1"
	},
	{
		regex: " Adr |Android|Silk-Accelerated=[a-z]{4,5}",
		name: "Android",
		version: ""
	},
	{
		regex: "(?:TwitterAndroid).*[ /](?:[a-z]+ )?(\\d+[\\.\\d]*)",
		name: "Android",
		version: "$1"
	},
	{
		regex: "BeyondPod|AntennaPod|Podkicker|DoggCatcher|Player FM|okhttp|Podcatcher Deluxe|.+K_?Android_?TV_|Sonos/.+\\(ACR_",
		name: "Android",
		version: ""
	},
	{
		regex: "Linux; Andr0id[; ](\\d+[\\.\\d]*)",
		name: "Android",
		version: "$1"
	},
	{
		regex: "Linux; diordnA[; ](\\d+[\\.\\d]*)",
		name: "Android",
		version: "$1"
	},
	{
		regex: "AmigaOS[ ]?(\\d+[\\.\\d]+)",
		name: "AmigaOS",
		version: "$1"
	},
	{
		regex: "AmigaOS|AmigaVoyager|Amiga-AWeb",
		name: "AmigaOS",
		version: ""
	},
	{
		regex: "ThreadX(?:/(\\d+[\\.\\d]*))?",
		name: "ThreadX",
		version: "$1"
	},
	{
		regex: "Nucleus(?:(?: |/v?)(\\d+[\\.\\d]*))?",
		name: "MTK / Nucleus",
		version: "$1"
	},
	{
		regex: "MTK(?:(?: |/v?)(\\d+[\\.\\d]*))?",
		name: "MTK / Nucleus",
		version: "$1"
	},
	{
		regex: "MRE/(\\d+)\\.(\\d+).*;MAUI",
		name: "MRE",
		version: "$1.$2"
	},
	{
		regex: "dvkbuntu",
		name: "DVKBuntu",
		version: ""
	},
	{
		regex: "Helio/(\\d+[\\.\\d]+)",
		name: "Lumin OS",
		version: "$1"
	},
	{
		regex: "HasCodingOs (\\d+[\\.\\d]+)",
		name: "HasCodingOS",
		version: "$1"
	},
	{
		regex: "PCLinuxOS/(\\d+[\\.\\d]+)",
		name: "PCLinuxOS",
		version: "$1"
	},
	{
		regex: "(Ordissimo|webissimo3)",
		name: "Ordissimo",
		version: ""
	},
	{
		regex: "(?:Win|Sistema )Fenix",
		name: "Fenix",
		version: ""
	},
	{
		regex: "TOS; Linux",
		name: "TmaxOS",
		version: ""
	},
	{
		regex: "Maemo",
		name: "Maemo",
		version: ""
	},
	{
		regex: "Arch ?Linux(?:[ /\\-](\\d+[\\.\\d]+))?",
		name: "Arch Linux",
		version: "$1"
	},
	{
		regex: "VectorLinux(?: package)?(?:[ /\\-](\\d+[\\.\\d]+))?",
		name: "VectorLinux",
		version: "$1"
	},
	{
		regex: "Linux; .*((?:Debian|Knoppix|Mint|Ubuntu|Kubuntu|Xubuntu|Lubuntu|Fedora|Red Hat|Mandriva|Gentoo|Sabayon|Slackware|SUSE|CentOS|BackTrack))[ /](\\d+[\\.\\d]+)",
		name: "$1",
		version: "$2"
	},
	{
		regex: "Deepin[ /](\\d+[\\.\\d]+)",
		name: "Deepin",
		version: "$1"
	},
	{
		regex: "(Debian|Knoppix|Mint(?! Browser)|Ubuntu|Kubuntu|Xubuntu|Lubuntu|Fedora|Red Hat|Mandriva|Gentoo|Sabayon|Slackware|SUSE|CentOS|BackTrack|Freebox)(?:(?: Enterprise)? Linux)?(?:[ /\\-](\\d+[\\.\\d]+))?",
		name: "$1",
		version: "$2"
	},
	{
		regex: "OS ROSA; Linux",
		name: "Rosa",
		version: ""
	},
	{
		regex: "WEBOS(\\d+[\\.\\d]+)",
		name: "webOS",
		version: "$1"
	},
	{
		regex: "Web0S; Linux/SmartTV.+Chrome/68",
		name: "webOS",
		version: "5"
	},
	{
		regex: "Web0S; Linux/SmartTV.+Chrome/53",
		name: "webOS",
		version: "4"
	},
	{
		regex: "Web0S; Linux/SmartTV.+Chrome/38",
		name: "webOS",
		version: "3"
	},
	{
		regex: "Web0S; Linux/SmartTV.+Safari/538",
		name: "webOS",
		version: "2"
	},
	{
		regex: "Web0S; Linux/SmartTV.+Safari/537",
		name: "webOS",
		version: "1"
	},
	{
		regex: "(?:Web0S; .*WEBOS|webOS|web0S|Palm webOS|hpwOS)(?:[/]?(\\d+[\\.\\d]+))?",
		name: "webOS",
		version: "$1"
	},
	{
		regex: "(?:PalmOS|Palm OS)(?:[/ ](\\d+[\\.\\d]+))?|Palm",
		name: "palmOS",
		version: "$1"
	},
	{
		regex: "Xiino(?:.*v\\. (\\d+[\\.\\d]+))?",
		name: "palmOS",
		version: "$1"
	},
	{
		regex: "MorphOS(?:[ /](\\d+[\\.\\d]+))?",
		name: "MorphOS",
		version: "$1"
	},
	{
		regex: "FBW.+FBSV/(\\d+[\\.\\d]*);",
		name: "Windows",
		version: "$1"
	},
	{
		regex: "mingw32",
		name: "Windows",
		version: ""
	},
	{
		regex: "Windows/(\\d+\\.\\d+)",
		name: "Windows",
		version: "$1"
	},
	{
		regex: "CYGWIN_NT-10.0|Windows NT 10.0|Windows 10",
		name: "Windows",
		version: "10"
	},
	{
		regex: "CYGWIN_NT-6.4|Windows NT 6.4|Windows 10|win10",
		name: "Windows",
		version: "10"
	},
	{
		regex: "CYGWIN_NT-6.3|Windows NT 6.3|Windows 8.1",
		name: "Windows",
		version: "8.1"
	},
	{
		regex: "CYGWIN_NT-6.2|Windows NT 6.2|Windows 8",
		name: "Windows",
		version: "8"
	},
	{
		regex: "CYGWIN_NT-6.1|Windows NT 6.1|Windows 7|win7",
		name: "Windows",
		version: "7"
	},
	{
		regex: "CYGWIN_NT-6.0|Windows NT 6.0|Windows Vista",
		name: "Windows",
		version: "Vista"
	},
	{
		regex: "CYGWIN_NT-5.2|Windows NT 5.2|Windows Server 2003 / XP x64",
		name: "Windows",
		version: "Server 2003"
	},
	{
		regex: "CYGWIN_NT-5.1|Windows NT 5.1|Windows XP",
		name: "Windows",
		version: "XP"
	},
	{
		regex: "CYGWIN_NT-5.0|Windows NT 5.0|Windows 2000",
		name: "Windows",
		version: "2000"
	},
	{
		regex: "CYGWIN_NT-4.0|Windows NT 4.0|WinNT|Windows NT",
		name: "Windows",
		version: "NT"
	},
	{
		regex: "CYGWIN_ME-4.90|Win 9x 4.90|Windows ME",
		name: "Windows",
		version: "ME"
	},
	{
		regex: "CYGWIN_98-4.10|Win98|Windows 98",
		name: "Windows",
		version: "98"
	},
	{
		regex: "CYGWIN_95-4.0|Win32|Win95|Windows 95|Windows_95",
		name: "Windows",
		version: "95"
	},
	{
		regex: "Windows 3.1",
		name: "Windows",
		version: "3.1"
	},
	{
		regex: "Windows",
		name: "Windows",
		version: ""
	},
	{
		regex: "Haiku",
		name: "Haiku OS",
		version: ""
	},
	{
		regex: "(?:Watch1,[12]/|Watch OS,|watchOS[ /])(\\d+[\\.\\d]*)",
		name: "watchOS",
		version: "$1"
	},
	{
		regex: "iPad/([89]|1[012]).(\\d+[\\.\\d]*)",
		name: "iOS",
		version: "$1.$2"
	},
	{
		regex: "Pinterest for iOS/.+; (\\d(?:[\\d\\.]+)?)\\)$",
		name: "iOS",
		version: "$1"
	},
	{
		regex: "CFNetwork/.+ Darwin/20.4.0(?!.*x86_64)",
		name: "iOS",
		version: "14.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/20.3.0(?!.*x86_64)",
		name: "iOS",
		version: "14.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/20.2.0(?!.*x86_64)",
		name: "iOS",
		version: "14.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/20.1.0(?!.*x86_64)",
		name: "iOS",
		version: "14.2"
	},
	{
		regex: "CFNetwork/.+ Darwin/20.0.0(?!.*x86_64)",
		name: "iOS",
		version: "14.0"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.6.0(?!.*x86_64)",
		name: "iOS",
		version: "13.6"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.5.0(?!.*x86_64)",
		name: "iOS",
		version: "13.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.4.0(?!.*x86_64)",
		name: "iOS",
		version: "13.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.3.0(?!.*x86_64)",
		name: "iOS",
		version: "13.3.1"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.2.0(?!.*x86_64)",
		name: "iOS",
		version: "13.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.0.0(?!.*x86_64)",
		name: "iOS",
		version: "13.0"
	},
	{
		regex: "CFNetwork/.+ Darwin/18.7.0(?!.*x86_64)",
		name: "iOS",
		version: "12.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/18.6.0(?!.*x86_64)",
		name: "iOS",
		version: "12.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/18.5.0(?!.*x86_64)",
		name: "iOS",
		version: "12.2"
	},
	{
		regex: "CFNetwork/.+ Darwin/18.2.0(?!.*x86_64)",
		name: "iOS",
		version: "12.1"
	},
	{
		regex: "CFNetwork/.+ Darwin/18.0.0(?!.*x86_64)",
		name: "iOS",
		version: "12.0"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.7.0(?!.*x86_64)",
		name: "iOS",
		version: "11.4.1"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.6.0(?!.*x86_64)",
		name: "iOS",
		version: "11.4"
	},
	{
		regex: "CFNetwork/889(?!.*x86_64)",
		name: "iOS",
		version: "11.1"
	},
	{
		regex: "CFNetwork/887(?!.*x86_64)",
		name: "iOS",
		version: "11.0"
	},
	{
		regex: "CFNetwork/811(?!.*x86_64)",
		name: "iOS",
		version: "10.3"
	},
	{
		regex: "CFNetwork/808\\.3",
		name: "iOS",
		version: "10.3"
	},
	{
		regex: "CFNetwork/808\\.2",
		name: "iOS",
		version: "10.2"
	},
	{
		regex: "CFNetwork/808\\.1",
		name: "iOS",
		version: "10.1"
	},
	{
		regex: "CFNetwork/808\\.0",
		name: "iOS",
		version: "10.0"
	},
	{
		regex: "CFNetwork/808",
		name: "iOS",
		version: "10"
	},
	{
		regex: "CFNetwork/758\\.4\\.3",
		name: "iOS",
		version: "9.3.2"
	},
	{
		regex: "CFNetwork/758\\.3\\.15",
		name: "iOS",
		version: "9.3"
	},
	{
		regex: "CFNetwork/758\\.2\\.[78]",
		name: "iOS",
		version: "9.2"
	},
	{
		regex: "CFNetwork/758\\.1\\.6",
		name: "iOS",
		version: "9.1"
	},
	{
		regex: "CFNetwork/758\\.0\\.2",
		name: "iOS",
		version: "9.0"
	},
	{
		regex: "CFNetwork/711\\.5\\.6",
		name: "iOS",
		version: "8.4.1"
	},
	{
		regex: "CFNetwork/711\\.4\\.6",
		name: "iOS",
		version: "8.4"
	},
	{
		regex: "CFNetwork/711\\.3\\.18",
		name: "iOS",
		version: "8.3"
	},
	{
		regex: "CFNetwork/711\\.2\\.23",
		name: "iOS",
		version: "8.2"
	},
	{
		regex: "CFNetwork/711\\.1\\.1[26]",
		name: "iOS",
		version: "8.1"
	},
	{
		regex: "CFNetwork/711\\.0\\.6",
		name: "iOS",
		version: "8.0"
	},
	{
		regex: "CFNetwork/672\\.1",
		name: "iOS",
		version: "7.1"
	},
	{
		regex: "CFNetwork/672\\.0",
		name: "iOS",
		version: "7.0"
	},
	{
		regex: "CFNetwork/609\\.1",
		name: "iOS",
		version: "6.1"
	},
	{
		regex: "CFNetwork/60[29]",
		name: "iOS",
		version: "6.0"
	},
	{
		regex: "CFNetwork/548\\.1",
		name: "iOS",
		version: "5.1"
	},
	{
		regex: "CFNetwork/548\\.0",
		name: "iOS",
		version: "5.0"
	},
	{
		regex: "CFNetwork/485\\.13",
		name: "iOS",
		version: "4.3"
	},
	{
		regex: "CFNetwork/485\\.12",
		name: "iOS",
		version: "4.2"
	},
	{
		regex: "CFNetwork/485\\.10",
		name: "iOS",
		version: "4.1"
	},
	{
		regex: "CFNetwork/485\\.2",
		name: "iOS",
		version: "4.0"
	},
	{
		regex: "CFNetwork/467\\.12",
		name: "iOS",
		version: "3.2"
	},
	{
		regex: "CFNetwork/459",
		name: "iOS",
		version: "3.1"
	},
	{
		regex: "iPhone/(\\d+[\\.\\d]*) hw/",
		name: "iOS",
		version: "$1"
	},
	{
		regex: "iOS(\\d+\\.\\d+\\.\\d+)",
		name: "iOS",
		version: "$1"
	},
	{
		regex: "iOS(\\d+)\\.(\\d+)0",
		name: "iOS",
		version: "$1.$2"
	},
	{
		regex: "iPhone OS ([0-9]{1})([0-9]{1})([0-9]{1})",
		name: "iOS",
		version: "$1.$2.$3"
	},
	{
		regex: "(?:CPU OS|iPh(?:one)?[ _]OS|iOS)[ _/](\\d+(?:[_\\.]\\d+)*)",
		name: "iOS",
		version: "$1"
	},
	{
		regex: "(?:FBIOS|Messenger(?:Lite)?ForiOS).*FBSV/ ?(\\d+[\\.\\d]*);",
		name: "iOS",
		version: "$1"
	},
	{
		regex: "(?:Apple-)?(?:iPhone|iPad|iPod)(?:.*Mac OS X.*Version/(\\d+\\.\\d+)|; Opera)?",
		name: "iOS",
		version: "$1"
	},
	{
		regex: "(?:Podcasts/(?:[\\d\\.]+)|Instacast(?:HD)?/(?:\\d\\.[\\d\\.abc]+)|Pocket Casts, iOS|\\(iOS\\)|iOS; Opera|Overcast|Castro|Podcat|iCatcher|RSSRadio/|MobileSafari/)(?!.*x86_64)",
		name: "iOS",
		version: ""
	},
	{
		regex: "iTunes-(iPod|iPad|iPhone)/(?:[\\d\\.]+)",
		name: "iOS",
		version: ""
	},
	{
		regex: "iOS/Version ([\\d\\.]+)",
		name: "iOS",
		version: "$1"
	},
	{
		regex: "Sonos/.+\\(ICRU_",
		name: "iOS",
		version: ""
	},
	{
		regex: "CFNetwork/.+ Darwin/20.2.0.*(x86_64)|(x86_64-apple-)?darwin20.2.0",
		name: "Mac",
		version: "11.1"
	},
	{
		regex: "CFNetwork/.+ Darwin/20.[01].0.*(x86_64)|(x86_64-apple-)?darwin20.[01].0",
		name: "Mac",
		version: "11.0"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.6.0.*(x86_64)|(x86_64-apple-)?darwin19.6.0",
		name: "Mac",
		version: "10.15.6"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.5.0.*(x86_64)|(x86_64-apple-)?darwin19.5.0",
		name: "Mac",
		version: "10.15.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.4.0.*(x86_64)|(x86_64-apple-)?darwin19.4.0",
		name: "Mac",
		version: "10.15.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.3.0.*(x86_64)|(x86_64-apple-)?darwin19.3.0",
		name: "Mac",
		version: "10.15.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/19.2.0.*(x86_64)|(x86_64-apple-)?darwin19.2.0",
		name: "Mac",
		version: "10.15.2"
	},
	{
		regex: "CFNetwork/(?:108[258]|109[18]|1103).*(x86_64)",
		name: "Mac",
		version: "10.15"
	},
	{
		regex: "CFNetwork/.+ Darwin/18.2.0.*(x86_64)|(x86_64-apple-)?darwin18.2.0",
		name: "Mac",
		version: "10.14.1"
	},
	{
		regex: "CFNetwork/(?:96[29]|97[14568]).*(x86_64)",
		name: "Mac",
		version: "10.14"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.7.0.*(x86_64)|(x86_64-apple-)?darwin17.7.0",
		name: "Mac",
		version: "10.13.6"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.6.0.*(x86_64)|(x86_64-apple-)?darwin17.6.0",
		name: "Mac",
		version: "10.13.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.5.0.*(x86_64)|(x86_64-apple-)?darwin17.5.0",
		name: "Mac",
		version: "10.13.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.4.0.*(x86_64)|(x86_64-apple-)?darwin17.4.0",
		name: "Mac",
		version: "10.13.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.3.0.*(x86_64)|(x86_64-apple-)?darwin17.3.0",
		name: "Mac",
		version: "10.13.2"
	},
	{
		regex: "CFNetwork/.+ Darwin/17.2.0.*(x86_64)|(x86_64-apple-)?darwin17.2.0",
		name: "Mac",
		version: "10.13.1"
	},
	{
		regex: "CFNetwork/(?:887|889|893|897|901|902).*(x86_64)",
		name: "Mac",
		version: "10.13"
	},
	{
		regex: "CFNetwork/.+ Darwin/16.7.0.*(x86_64)|(x86_64-apple-)?darwin16.7.0",
		name: "Mac",
		version: "10.12.6"
	},
	{
		regex: "CFNetwork/.+ Darwin/16.6.0.*(x86_64)|(x86_64-apple-)?darwin16.6.0",
		name: "Mac",
		version: "10.12.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/16.5.0.*(x86_64)|(x86_64-apple-)?darwin16.5.0",
		name: "Mac",
		version: "10.12.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/16.3.0.*(x86_64)|(x86_64-apple-)?darwin16.3.0",
		name: "Mac",
		version: "10.12.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/16.2.0.*(x86_64)|(x86_64-apple-)?darwin16.2.0",
		name: "Mac",
		version: "10.12.2"
	},
	{
		regex: "CFNetwork/.+ Darwin/16.1.0.*(x86_64)|(x86_64-apple-)?darwin16.1.0",
		name: "Mac",
		version: "10.12.1"
	},
	{
		regex: "CFNetwork/811.*(x86_64)",
		name: "Mac",
		version: "10.12"
	},
	{
		regex: "CFNetwork/807",
		name: "Mac",
		version: "10.12"
	},
	{
		regex: "CFNetwork/.+ Darwin/15.6.0.*(x86_64)|(x86_64-apple-)?darwin15.6.0",
		name: "Mac",
		version: "10.11.6"
	},
	{
		regex: "CFNetwork/.+ Darwin/15.5.0.*(x86_64)|(x86_64-apple-)?darwin15.5.0",
		name: "Mac",
		version: "10.11.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/15.4.0.*(x86_64)|(x86_64-apple-)?darwin15.4.0",
		name: "Mac",
		version: "10.11.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/15.3.0.*(x86_64)|(x86_64-apple-)?darwin15.3.0",
		name: "Mac",
		version: "10.11.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/15.2.0.*(x86_64)|(x86_64-apple-)?darwin15.2.0",
		name: "Mac",
		version: "10.11.2"
	},
	{
		regex: "CFNetwork/760",
		name: "Mac",
		version: "10.11"
	},
	{
		regex: "CFNetwork/.+ Darwin/14.5.0.*(x86_64)|(x86_64-apple-)?darwin14.5.0",
		name: "Mac",
		version: "10.10.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/14.4.0.*(x86_64)|(x86_64-apple-)?darwin14.4.0",
		name: "Mac",
		version: "10.10.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/14.3.0.*(x86_64)|(x86_64-apple-)?darwin14.3.0",
		name: "Mac",
		version: "10.10.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/14.1.0.*(x86_64)|(x86_64-apple-)?darwin14.1.0",
		name: "Mac",
		version: "10.10.2"
	},
	{
		regex: "CFNetwork/720",
		name: "Mac",
		version: "10.10"
	},
	{
		regex: "CFNetwork/.+ Darwin/13.4.0.*(x86_64)|(x86_64-apple-)?darwin13.4.0",
		name: "Mac",
		version: "10.9.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/13.3.0.*(x86_64)|(x86_64-apple-)?darwin13.3.0",
		name: "Mac",
		version: "10.9.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/13.2.0.*(x86_64)|(x86_64-apple-)?darwin13.2.0",
		name: "Mac",
		version: "10.9.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/13.1.0.*(x86_64)|(x86_64-apple-)?darwin13.1.0",
		name: "Mac",
		version: "10.9.2"
	},
	{
		regex: "CFNetwork/673",
		name: "Mac",
		version: "10.9"
	},
	{
		regex: "CFNetwork/.+ Darwin/12.5.0.*(x86_64)|(x86_64-apple-)?darwin12.5.0",
		name: "Mac",
		version: "10.8.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/12.4.0.*(x86_64)|(x86_64-apple-)?darwin12.4.0",
		name: "Mac",
		version: "10.8.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/12.3.0.*(x86_64)|(x86_64-apple-)?darwin12.3.0",
		name: "Mac",
		version: "10.8.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/12.2.0.*(x86_64)|(x86_64-apple-)?darwin12.2.0",
		name: "Mac",
		version: "10.8.2"
	},
	{
		regex: "CFNetwork/.+ Darwin/12.1.0.*(x86_64)|(x86_64-apple-)?darwin12.1.0",
		name: "Mac",
		version: "10.8.1"
	},
	{
		regex: "CFNetwork/596",
		name: "Mac",
		version: "10.8"
	},
	{
		regex: "CFNetwork/.+ Darwin/11.5.0.*(x86_64)|(x86_64-apple-)?darwin11.5.0",
		name: "Mac",
		version: "10.7.5"
	},
	{
		regex: "CFNetwork/.+ Darwin/11.4.0.*(x86_64)|(x86_64-apple-)?darwin11.4.0",
		name: "Mac",
		version: "10.7.4"
	},
	{
		regex: "CFNetwork/.+ Darwin/11.3.0.*(x86_64)|(x86_64-apple-)?darwin11.3.0",
		name: "Mac",
		version: "10.7.3"
	},
	{
		regex: "CFNetwork/.+ Darwin/11.2.0.*(x86_64)|(x86_64-apple-)?darwin11.2.0",
		name: "Mac",
		version: "10.7.2"
	},
	{
		regex: "CFNetwork/.+ Darwin/11.1.0.*(x86_64)|(x86_64-apple-)?darwin11.1.0",
		name: "Mac",
		version: "10.7.1"
	},
	{
		regex: "CFNetwork/520",
		name: "Mac",
		version: "10.7"
	},
	{
		regex: "CFNetwork/454",
		name: "Mac",
		version: "10.6"
	},
	{
		regex: "CFNetwork/(?:438|422|339|330|221|220|217)",
		name: "Mac",
		version: "10.5"
	},
	{
		regex: "CFNetwork/12[89]",
		name: "Mac",
		version: "10.4"
	},
	{
		regex: "CFNetwork/1\\.2",
		name: "Mac",
		version: "10.3"
	},
	{
		regex: "CFNetwork/1\\.1",
		name: "Mac",
		version: "10.2"
	},
	{
		regex: "Mac[ +]OS[ +]?X(?:[ /](?:Version )?(\\d+(?:[_\\.]\\d+)+))?",
		name: "Mac",
		version: "$1"
	},
	{
		regex: "Mac (?:OS/)?(\\d+(?:[_\\.]\\d+)+)",
		name: "Mac",
		version: "$1"
	},
	{
		regex: "macOS/(\\d+[\\.\\d]+)",
		name: "Mac",
		version: "$1"
	},
	{
		regex: "Darwin|Macintosh|Mac_PowerPC|PPC|Mac PowerPC|iMac|MacBook|macOS|Sonos/.+\\(MDCR_",
		name: "Mac",
		version: ""
	},
	{
		regex: "SeewoOS x86_64 (\\d+[\\.\\d]+)",
		name: "SeewoOS",
		version: "$1"
	},
	{
		regex: "CrOS [a-z0-9_]+ .* Chrome/(\\d+[\\.\\d]+)",
		name: "Chrome OS",
		version: "$1"
	},
	{
		regex: "(?:BB10;.+Version|Black[Bb]erry[0-9a-z]+|Black[Bb]erry.+Version)/(\\d+[\\.\\d]+)",
		name: "BlackBerry OS",
		version: "$1"
	},
	{
		regex: "RIM Tablet OS (\\d+[\\.\\d]+)",
		name: "BlackBerry Tablet OS",
		version: "$1"
	},
	{
		regex: "RIM Tablet OS|QNX|Play[Bb]ook",
		name: "BlackBerry Tablet OS",
		version: ""
	},
	{
		regex: "BlackBerry",
		name: "BlackBerry OS",
		version: ""
	},
	{
		regex: "bPod",
		name: "BlackBerry OS",
		version: ""
	},
	{
		regex: "BeOS",
		name: "BeOS",
		version: ""
	},
	{
		regex: "Symbian/3.+NokiaBrowser/7\\.3",
		name: "Symbian^3",
		version: "Anna"
	},
	{
		regex: "Symbian/3.+NokiaBrowser/7\\.4",
		name: "Symbian^3",
		version: "Belle"
	},
	{
		regex: "Symbian/3",
		name: "Symbian^3",
		version: ""
	},
	{
		regex: "(?:Series ?60|SymbOS|S60)(?:[ /]?(\\d+[\\.\\d]+|V\\d+))?",
		name: "Symbian OS Series 60",
		version: "$1"
	},
	{
		regex: "Series40",
		name: "Symbian OS Series 40",
		version: ""
	},
	{
		regex: "SymbianOS/(\\d+[\\.\\d]+)",
		name: "Symbian OS",
		version: "$1"
	},
	{
		regex: "MeeGo|WeTab",
		name: "MeeGo",
		version: ""
	},
	{
		regex: "Symbian(?: OS)?|SymbOS",
		name: "Symbian OS",
		version: ""
	},
	{
		regex: "Nokia",
		name: "Symbian",
		version: ""
	},
	{
		regex: "(?:Mobile|Tablet);.+Firefox/\\d+\\.\\d+",
		name: "Firefox OS",
		version: ""
	},
	{
		regex: "RISC OS(?:-NC)?(?:[ /](\\d+[\\.\\d]+))?",
		name: "RISC OS",
		version: "$1"
	},
	{
		regex: "Inferno(?:[ /](\\d+[\\.\\d]+))?",
		name: "Inferno",
		version: "$1"
	},
	{
		regex: "bada(?:[ /](\\d+[\\.\\d]+))?",
		name: "Bada",
		version: "$1"
	},
	{
		regex: "(?:Brew(?!-Applet)(?: MP)?|BMP)(?:[ /](\\d+[\\.\\d]+))?",
		name: "Brew",
		version: "$1"
	},
	{
		regex: "GoogleTV(?:[ /](\\d+[\\.\\d]+))?",
		name: "Google TV",
		version: "$1"
	},
	{
		regex: "AppleTV(?:/?(\\d+[\\.\\d]+))?",
		name: "Apple TV",
		version: "$1"
	},
	{
		regex: "WebTV/(\\d+[\\.\\d]+)",
		name: "WebTV",
		version: "$1"
	},
	{
		regex: "RemixOS 5.1.1",
		name: "Remix OS",
		version: "1"
	},
	{
		regex: "RemixOS 6.0",
		name: "Remix OS",
		version: "2"
	},
	{
		regex: "RemixOS",
		name: "Remix OS",
		version: ""
	},
	{
		regex: "(?:SunOS|Solaris)(?:[/ ](\\d+[\\.\\d]+))?",
		name: "Solaris",
		version: "$1"
	},
	{
		regex: "AIX(?:[/ ]?(\\d+[\\.\\d]+))?",
		name: "AIX",
		version: "$1"
	},
	{
		regex: "HP-UX(?:[/ ]?(\\d+[\\.\\d]+))?",
		name: "HP-UX",
		version: "$1"
	},
	{
		regex: "FreeBSD(?:[/ ]?(\\d+[\\.\\d]+))?",
		name: "FreeBSD",
		version: "$1"
	},
	{
		regex: "NetBSD(?:[/ ]?(\\d+[\\.\\d]+))?",
		name: "NetBSD",
		version: "$1"
	},
	{
		regex: "OpenBSD(?:[/ ]?(\\d+[\\.\\d]+))?",
		name: "OpenBSD",
		version: "$1"
	},
	{
		regex: "DragonFly(?:[/ ]?(\\d+[\\.\\d]+))?",
		name: "DragonFly",
		version: "$1"
	},
	{
		regex: "Syllable(?:[/ ]?(\\d+[\\.\\d]+))?",
		name: "Syllable",
		version: "$1"
	},
	{
		regex: "IRIX(?:;64)?(?:[/ ]?(\\d+[\\.\\d]+))",
		name: "IRIX",
		version: "$1"
	},
	{
		regex: "OSF1(?:[/ ]?v?(\\d+[\\.\\d]+))?",
		name: "OSF1",
		version: "$1"
	},
	{
		regex: "Nintendo (Wii|Switch)",
		name: "Nintendo",
		version: "$1"
	},
	{
		regex: "PlayStation ?([34])",
		name: "PlayStation",
		version: "$1"
	},
	{
		regex: "Xbox|KIN\\.(?:One|Two)",
		name: "Xbox",
		version: "360"
	},
	{
		regex: "Nitro|Nintendo ([3]?DS[i]?)",
		name: "Nintendo Mobile",
		version: "$1"
	},
	{
		regex: "PlayStation ((?:Portable|Vita))",
		name: "PlayStation Portable",
		version: "$1"
	},
	{
		regex: "OS/2",
		name: "OS/2",
		version: ""
	},
	{
		regex: "Linux(?:OS)?[^a-z]",
		name: "GNU/Linux",
		version: ""
	}
];

var operatingSystem = {
	AIX: "AIX",
	AND: "Android",
	AMG: "AmigaOS",
	ATV: "Apple TV",
	ARL: "Arch Linux",
	BTR: "BackTrack",
	SBA: "Bada",
	BEO: "BeOS",
	BLB: "BlackBerry OS",
	QNX: "BlackBerry Tablet OS",
	BMP: "Brew",
	CES: "CentOS",
	COS: "Chrome OS",
	CYN: "CyanogenMod",
	DEB: "Debian",
	DEE: "Deepin",
	DFB: "DragonFly",
	FED: "Fedora",
	FOS: "Firefox OS",
	FIR: "Fire OS",
	FRE: "Freebox",
	BSD: "FreeBSD",
	FYD: "FydeOS",
	GNT: "Gentoo",
	GTV: "Google TV",
	HPX: "HP-UX",
	HAI: "Haiku OS",
	IRI: "IRIX",
	INF: "Inferno",
	KOS: "KaiOS",
	KNO: "Knoppix",
	KBT: "Kubuntu",
	LIN: "GNU/Linux",
	LBT: "Lubuntu",
	VLN: "VectorLinux",
	MAC: "Mac",
	MAE: "Maemo",
	MDR: "Mandriva",
	SMG: "MeeGo",
	MCD: "MocorDroid",
	MIN: "Mint",
	MLD: "MildWild",
	MOR: "MorphOS",
	NBS: "NetBSD",
	MTK: "MTK / Nucleus",
	MRE: "MRE",
	WII: "Nintendo",
	NDS: "Nintendo Mobile",
	OS2: "OS/2",
	T64: "OSF1",
	OBS: "OpenBSD",
	ORD: "Ordissimo",
	PSP: "PlayStation Portable",
	PS3: "PlayStation",
	RHT: "Red Hat",
	ROS: "RISC OS",
	RSO: "Rosa",
	REM: "Remix OS",
	RZD: "RazoDroiD",
	SAB: "Sabayon",
	SSE: "SUSE",
	SAF: "Sailfish OS",
	SEE: "SeewoOS",
	SLW: "Slackware",
	SOS: "Solaris",
	SYL: "Syllable",
	SYM: "Symbian",
	SYS: "Symbian OS",
	S40: "Symbian OS Series 40",
	S60: "Symbian OS Series 60",
	SY3: "Symbian^3",
	TDX: "ThreadX",
	TIZ: "Tizen",
	TOS: "TmaxOS",
	UBT: "Ubuntu",
	WAS: "watchOS",
	WTV: "WebTV",
	WHS: "Whale OS",
	WIN: "Windows",
	WCE: "Windows CE",
	WIO: "Windows IoT",
	WMO: "Windows Mobile",
	WPH: "Windows Phone",
	WRT: "Windows RT",
	XBX: "Xbox",
	XBT: "Xubuntu",
	YNS: "YunOs",
	IOS: "iOS",
	POS: "palmOS",
	WOS: "webOS"
};
var osFamilies$1 = {
	Android: [
		"AND",
		"CYN",
		"FIR",
		"REM",
		"RZD",
		"MLD",
		"MCD",
		"YNS"
	],
	AmigaOS: [
		"AMG",
		"MOR"
	],
	"Apple TV": [
		"ATV"
	],
	BlackBerry: [
		"BLB",
		"QNX"
	],
	Brew: [
		"BMP"
	],
	BeOS: [
		"BEO",
		"HAI"
	],
	"Chrome OS": [
		"COS",
		"FYD",
		"SEE"
	],
	"Firefox OS": [
		"FOS",
		"KOS"
	],
	"Gaming Console": [
		"WII",
		"PS3"
	],
	"Google TV": [
		"GTV"
	],
	IBM: [
		"OS2"
	],
	iOS: [
		"IOS",
		"WAS"
	],
	"RISC OS": [
		"ROS"
	],
	"GNU/Linux": [
		"LIN",
		"ARL",
		"DEB",
		"KNO",
		"MIN",
		"UBT",
		"KBT",
		"XBT",
		"LBT",
		"FED",
		"RHT",
		"VLN",
		"MDR",
		"GNT",
		"SAB",
		"SLW",
		"SSE",
		"CES",
		"BTR",
		"SAF",
		"ORD",
		"TOS",
		"RSO",
		"DEE",
		"FRE"
	],
	Mac: [
		"MAC"
	],
	"Mobile Gaming Console": [
		"PSP",
		"NDS",
		"XBX"
	],
	"Real-time OS": [
		"MTK",
		"TDX",
		"MRE"
	],
	"Other Mobile": [
		"WOS",
		"POS",
		"SBA",
		"TIZ",
		"SMG",
		"MAE"
	],
	Symbian: [
		"SYM",
		"SYS",
		"SY3",
		"S60",
		"S40"
	],
	Unix: [
		"SOS",
		"AIX",
		"HPX",
		"BSD",
		"NBS",
		"OBS",
		"DFB",
		"SYL",
		"IRI",
		"T64",
		"INF"
	],
	WebTV: [
		"WTV"
	],
	Windows: [
		"WIN"
	],
	"Windows Mobile": [
		"WPH",
		"WMO",
		"WCE",
		"WRT",
		"WIO"
	],
	"Other Smart TV": [
		"WHS"
	]
};
var require$$4 = {
	operatingSystem: operatingSystem,
	osFamilies: osFamilies$1
};

var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(operatingSystem$1, "__esModule", { value: true });
const oss_json_1 = __importDefault$3(require$$0$2);
const version_1 = version;
const variable_replacement_1 = variableReplacement;
const user_agent_1$3 = userAgent;
const operating_system_json_1 = __importDefault$3(require$$4);
const desktopOsArray = ["AmigaOS", "IBM", "GNU/Linux", "Mac", "Unix", "Windows", "BeOS", "Chrome OS"];
const shortOsNames = operating_system_json_1.default.operatingSystem;
const osFamilies = operating_system_json_1.default.osFamilies;
class OperatingSystemParser {
    constructor(options) {
        this.options = {
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            const result = {
                name: "",
                version: "",
                platform: this.parsePlatform(userAgent)
            };
            for (const operatingSystem of oss_json_1.default) {
                const match = user_agent_1$3.userAgentParser(operatingSystem.regex, userAgent);
                if (!match)
                    continue;
                result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);
                result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);
                if (result.name === "lubuntu") {
                    result.name = "Lubuntu";
                }
                if (result.name === "debian") {
                    result.name = "Debian";
                }
                if (result.name === "YunOS") {
                    result.name = "YunOs";
                }
                return result;
            }
            return null;
        };
        this.parsePlatform = (userAgent) => {
            if (user_agent_1$3.userAgentParser("arm|aarch64|Watch ?OS|Watch1,[12]", userAgent)) {
                return "ARM";
            }
            if (user_agent_1$3.userAgentParser("mips", userAgent)) {
                return "MIPS";
            }
            if (user_agent_1$3.userAgentParser("sh4", userAgent)) {
                return "SuperH";
            }
            if (user_agent_1$3.userAgentParser("WOW64|x64|win64|amd64|x86_?64", userAgent)) {
                return "x64";
            }
            if (user_agent_1$3.userAgentParser("(?:i[0-9]|x)86|i86pc", userAgent)) {
                return "x86";
            }
            return "";
        };
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
}
operatingSystem$1.default = OperatingSystemParser;
OperatingSystemParser.getDesktopOsArray = () => desktopOsArray;
OperatingSystemParser.getOsFamily = (osName) => {
    const osShortName = OperatingSystemParser.getOsShortName(osName);
    for (const [osFamily, shortNames] of Object.entries(osFamilies)) {
        if (shortNames.includes(osShortName)) {
            return osFamily;
        }
    }
    return "";
};
OperatingSystemParser.getOsShortName = (osName) => {
    for (const [shortName, name] of Object.entries(shortOsNames)) {
        if (name === osName)
            return shortName;
    }
    return "";
};

var vendorFragment = {};

var Dell = [
	"MDDR(JS)?",
	"MDDC(JS)?",
	"MDDS(JS)?"
];
var Acer = [
	"MAAR(JS)?"
];
var Sony = [
	"MASE(JS)?",
	"MASP(JS)?",
	"MASA(JS)?"
];
var Asus = [
	"MAAU",
	"NP0[26789]",
	"ASJB",
	"ASU2(JS)?"
];
var Samsung = [
	"MASM(JS)?",
	"SMJB"
];
var Lenovo = [
	"MALC(JS)?",
	"MALE(JS)?",
	"MALN(JS)?",
	"LCJB",
	"LEN2"
];
var Toshiba = [
	"MATM(JS)?",
	"MATB(JS)?",
	"MATP(JS)?",
	"TNJB",
	"TAJB"
];
var Medion = [
	"MAMD"
];
var MSI = [
	"MAMI(JS)?",
	"MAM3"
];
var Gateway = [
	"MAGW(JS)?"
];
var Fujitsu = [
	"MAFS(JS)?",
	"FSJB"
];
var Compaq = [
	"CPDTDF",
	"CPNTDF(JS?)",
	"CMNTDF(JS)?",
	"CMDTDF(JS)?"
];
var HP = [
	"HPCMHP",
	"HPNTDF(JS)?",
	"HPDTDF(JS)?"
];
var Hyrican = [
	"MANM(JS)?"
];
var Ordissimo = [
	"Ordissimo",
	"webissimo3"
];
var require$$0$1 = {
	Dell: Dell,
	Acer: Acer,
	Sony: Sony,
	Asus: Asus,
	Samsung: Samsung,
	Lenovo: Lenovo,
	Toshiba: Toshiba,
	Medion: Medion,
	MSI: MSI,
	Gateway: Gateway,
	Fujitsu: Fujitsu,
	Compaq: Compaq,
	HP: HP,
	Hyrican: Hyrican,
	Ordissimo: Ordissimo
};

var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(vendorFragment, "__esModule", { value: true });
const vendorfragments_json_1 = __importDefault$2(require$$0$1);
const user_agent_1$2 = userAgent;
class VendorFragmentParser {
    constructor() {
        this.parse = (userAgent) => {
            for (const [brand, vendorFragment] of Object.entries(vendorfragments_json_1.default)) {
                for (const regex of vendorFragment) {
                    const match = user_agent_1$2.userAgentParser(regex, userAgent);
                    if (!match)
                        continue;
                    return brand;
                }
            }
            return "";
        };
    }
}
vendorFragment.default = VendorFragmentParser;

var require$$0 = [
	{
		regex: "360Spider(-Image|-Video)?",
		name: "360Spider",
		category: "Search bot",
		url: "https://www.so.com/help/help_3_2.html",
		producer: {
			name: "Online Media Group, Inc.",
			url: ""
		}
	},
	{
		regex: "Aboundex",
		name: "Aboundexbot",
		category: "Search bot",
		url: "http://www.aboundex.com/crawler/",
		producer: {
			name: "Aboundex.com",
			url: "http://www.aboundex.com"
		}
	},
	{
		regex: "AcoonBot",
		name: "Acoon",
		category: "Search bot",
		url: "http://www.acoon.de/robot.asp",
		producer: {
			name: "Acoon GmbH",
			url: "http://www.acoon.de"
		}
	},
	{
		regex: "AddThis\\.com",
		name: "AddThis.com",
		category: "Social Media Agent",
		url: "",
		producer: {
			name: "Clearspring Technologies, Inc.",
			url: "http://www.clearspring.com"
		}
	},
	{
		regex: "AhrefsBot",
		name: "aHrefs Bot",
		category: "Crawler",
		url: "https://ahrefs.com/robot",
		producer: {
			name: "Ahrefs Pte Ltd",
			url: "https://ahrefs.com/robot"
		}
	},
	{
		regex: "ia_archiver|alexabot|verifybot",
		name: "Alexa Crawler",
		category: "Search bot",
		url: "https://support.alexa.com/hc/en-us/sections/200100794-Crawlers",
		producer: {
			name: "Alexa Internet",
			url: "https://www.alexa.com"
		}
	},
	{
		regex: "alexa site audit",
		name: "Alexa Site Audit",
		category: "Site Monitor",
		url: "https://support.alexa.com/hc/en-us/articles/200450194",
		producer: {
			name: "Alexa Internet",
			url: "https://www.alexa.com"
		}
	},
	{
		regex: "Amazon[ -]Route ?53[ -]Health[ -]Check[ -]Service",
		name: "Amazon Route53 Health Check",
		category: "Service Agent",
		producer: {
			name: "Amazon Web Services",
			url: "https://aws.amazon.com/"
		}
	},
	{
		regex: "AmorankSpider",
		name: "Amorank Spider",
		category: "Crawler",
		url: "http://amorank.com/webcrawler.html",
		producer: {
			name: "Amorank",
			url: "http://www.amorank.com"
		}
	},
	{
		regex: "ApacheBench",
		name: "ApacheBench",
		category: "Benchmark",
		url: "https://httpd.apache.org/docs/2.4/programs/ab.html",
		producer: {
			name: "The Apache Software Foundation",
			url: "https://www.apache.org/foundation/"
		}
	},
	{
		regex: "Applebot",
		name: "Applebot",
		category: "Crawler",
		url: "https://support.apple.com/en-us/HT204683",
		producer: {
			name: "Apple Inc",
			url: "https://www.apple.com"
		}
	},
	{
		regex: "AppSignalBot",
		name: "AppSignalBot",
		category: "Site Monitor",
		url: "https://docs.appsignal.com/uptime-monitoring/",
		producer: {
			name: "AppSignal",
			url: "https://appsignal.com/"
		}
	},
	{
		regex: "Arachni",
		name: "Arachni",
		category: "Security Checker",
		url: "https://www.arachni-scanner.com/",
		producer: {
			name: "Sarosys LLC",
			url: "https://www.sarosys.com/"
		}
	},
	{
		regex: "AspiegelBot",
		name: "AspiegelBot",
		category: "Crawler",
		url: "https://aspiegel.com/",
		producer: {
			name: "Huawei",
			url: "https://www.huawei.com/"
		}
	},
	{
		regex: "Castro 2, Episode Duration Lookup",
		name: "Castro 2",
		category: "Service Agent",
		url: "http://supertop.co/castro/",
		producer: {
			name: "Supertop",
			url: "http://supertop.co"
		}
	},
	{
		regex: "Curious George",
		name: "Analytics SEO Crawler",
		category: "Crawler",
		url: "http://www.analyticsseo.com/crawler",
		producer: {
			name: "Analytics SEO",
			url: "http://www.analyticsseo.com"
		}
	},
	{
		regex: "archive\\.org_bot|special_archiver",
		name: "archive.org bot",
		category: "Crawler",
		url: "https://archive.org/details/archive.org_bot",
		producer: {
			name: "The Internet Archive",
			url: "https://archive.org"
		}
	},
	{
		regex: "Ask Jeeves/Teoma",
		name: "Ask Jeeves",
		category: "Search bot",
		url: "",
		producer: {
			name: "Ask Jeeves Inc.",
			url: "http://www.ask.com"
		}
	},
	{
		regex: "Backlink-Check\\.de",
		name: "Backlink-Check.de",
		category: "Crawler",
		url: "http://www.backlink-check.de/bot.html",
		producer: {
			name: "Mediagreen Medienservice",
			url: "http://www.backlink-check.de"
		}
	},
	{
		regex: "BacklinkCrawler",
		name: "BacklinkCrawler",
		category: "Crawler",
		url: "http://www.backlinktest.com/crawler.html",
		producer: {
			name: "2.0Promotion GbR",
			url: "http://www.backlinktest.com"
		}
	},
	{
		regex: "baiduspider(-image)?|baidu Transcoder|baidu.*spider",
		name: "Baidu Spider",
		category: "Search bot",
		url: "http://www.baidu.com/search/spider.htm",
		producer: {
			name: "Baidu",
			url: "http://www.baidu.com"
		}
	},
	{
		regex: "BazQux",
		name: "BazQux Reader",
		url: "https://bazqux.com/fetcher",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "MSNBot|msrbot|bingbot|BingPreview|msnbot-(UDiscovery|NewsBlogs)|adidxbot",
		name: "BingBot",
		category: "Search bot",
		url: "http://search.msn.com/msnbot.htmn",
		producer: {
			name: "Microsoft Corporation",
			url: "http://www.microsoft.com"
		}
	},
	{
		regex: "Blekkobot",
		name: "Blekkobot",
		category: "Search bot",
		url: "http://blekko.com/about/blekkobot",
		producer: {
			name: "Blekko",
			url: "http://blekko.com"
		}
	},
	{
		regex: "BLEXBot(Test)?",
		name: "BLEXBot Crawler",
		category: "Crawler",
		url: "http://webmeup-crawler.com",
		producer: {
			name: "WebMeUp",
			url: "http://webmeup.com"
		}
	},
	{
		regex: "Bloglovin",
		name: "Bloglovin",
		url: "http://www.bloglovin.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "Blogtrottr",
		name: "Blogtrottr",
		url: "",
		category: "Feed Fetcher",
		producer: {
			name: "Blogtrottr Ltd",
			url: "https://blogtrottr.com/"
		}
	},
	{
		regex: "BoardReader Blog Indexer",
		name: "BoardReader Blog Indexer",
		category: "Crawler",
		producer: {
			name: "BoardReader",
			url: "https://boardreader.com/"
		}
	},
	{
		regex: "BountiiBot",
		name: "Bountii Bot",
		category: "Search bot",
		url: "http://bountii.com/contact.php",
		producer: {
			name: "Bountii Inc.",
			url: "http://bountii.com"
		}
	},
	{
		regex: "Browsershots",
		name: "Browsershots",
		category: "Service Agent",
		url: "http://browsershots.org/faq",
		producer: {
			name: "Browsershots.org",
			url: "http://browsershots.org"
		}
	},
	{
		regex: "BUbiNG",
		name: "BUbiNG",
		category: "Crawler",
		url: "http://law.di.unimi.it/BUbiNG.html",
		producer: {
			name: "The Laboratory for Web Algorithmics (LAW)",
			url: "http://law.di.unimi.it/software.php#buging"
		}
	},
	{
		regex: "(?<!HTC)[ _]Butterfly/",
		name: "Butterfly Robot",
		category: "Search bot",
		url: "http://labs.topsy.com/butterfly",
		producer: {
			name: "Topsy Labs",
			url: "http://labs.topsy.com"
		}
	},
	{
		regex: "CareerBot",
		name: "CareerBot",
		category: "Crawler",
		url: "http://www.career-x.de/bot.html",
		producer: {
			name: "career-x GmbH",
			url: "http://www.career-x.de"
		}
	},
	{
		regex: "CCBot",
		name: "ccBot crawler",
		category: "Crawler",
		url: "http://commoncrawl.org/faq/",
		producer: {
			name: "reddit inc.",
			url: "http://www.reddit.com"
		}
	},
	{
		regex: "Cliqzbot",
		name: "Cliqzbot",
		category: "Crawler",
		url: "http://cliqz.com/company/cliqzbot",
		producer: {
			name: "10betterpages GmbH",
			url: "http://cliqz.com"
		}
	},
	{
		regex: "Cloudflare-AMP",
		name: "CloudFlare AMP Fetcher",
		category: "Crawler",
		url: "https://amp.cloudflare.com/doc/fetcher.html",
		producer: {
			name: "CloudFlare",
			url: "http://www.cloudflare.com"
		}
	},
	{
		regex: "CloudflareDiagnostics",
		name: "Cloudflare Diagnostics",
		category: "Site Monitor",
		url: "https://www.cloudflare.com/",
		producer: {
			name: "Cloudflare",
			url: "https://www.cloudflare.com"
		}
	},
	{
		regex: "CloudFlare-AlwaysOnline",
		name: "CloudFlare Always Online",
		category: "Site Monitor",
		url: "http://www.cloudflare.com/always-online",
		producer: {
			name: "CloudFlare",
			url: "http://www.cloudflare.com"
		}
	},
	{
		regex: "coccoc.com",
		name: "Cốc Cốc Bot",
		url: "https://help.coccoc.com/en/search-engine/coccoc-robots",
		category: "Search bot",
		producer: {
			name: "Cốc Cốc",
			url: "https://coccoc.com/"
		}
	},
	{
		regex: "collectd",
		name: "Collectd",
		url: "https://collectd.org/",
		category: "Site Monitor",
		producer: {
			name: "Collectd",
			url: "https://collectd.org/"
		}
	},
	{
		regex: "CommaFeed",
		name: "CommaFeed",
		url: "http://www.commafeed.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "CSS Certificate Spider",
		name: "CSS Certificate Spider",
		category: "Crawler",
		url: "http://www.css-security.com/certificatespider/",
		producer: {
			name: "Certified Security Solutions",
			url: "https://www.css-security.com/company/about-us/"
		}
	},
	{
		regex: "Datadog Agent",
		name: "Datadog Agent",
		url: "https://github.com/DataDog/dd-agent",
		category: "Site Monitor",
		producer: {
			name: "Datadog",
			url: "https://www.datadoghq.com/"
		}
	},
	{
		regex: "Datanyze",
		name: "Datanyze",
		url: "",
		category: "Crawler",
		producer: {
			name: "Datanyze",
			url: "https://www.datanyze.com"
		}
	},
	{
		regex: "Dataprovider",
		name: "Dataprovider",
		category: "Crawler",
		url: "",
		producer: {
			name: "Dataprovider B.V.",
			url: "https://www.dataprovider.com/"
		}
	},
	{
		regex: "Daum(oa)?[ /][0-9]",
		name: "Daum",
		category: "Search bot",
		url: "http://tab.search.daum.net/aboutWebSearch_en.html",
		producer: {
			name: "Daum Communications Corp.",
			url: "http://www.kakaocorp.com/main"
		}
	},
	{
		regex: "Dazoobot",
		name: "Dazoobot",
		category: "Search bot",
		url: "",
		producer: {
			name: "DAZOO.FR",
			url: "http://dazoo.fr"
		}
	},
	{
		regex: "discobot(-news)?",
		name: "Discobot",
		category: "Search bot",
		url: "http://discoveryengine.com/discobot.html",
		producer: {
			name: "Discovery Engine",
			url: "http://discoveryengine.com"
		}
	},
	{
		regex: "Domain Re-Animator Bot|support@domainreanimator.com",
		name: "Domain Re-Animator Bot",
		category: "Crawler",
		url: "",
		producer: {
			name: "Domain Re-Animator, LLC",
			url: "http://domainreanimator.com"
		}
	},
	{
		regex: "DotBot",
		name: "DotBot",
		category: "Crawler",
		url: "http://www.opensiteexplorer.org/dotbot",
		producer: {
			name: "SEOmoz, Inc.",
			url: "http://moz.com/"
		}
	},
	{
		regex: "DuckDuck(?:Go-Favicons-)?Bot",
		name: "DuckDuckGo Bot",
		category: "Search bot",
		url: "https://duckduckgo.com/duckduckbot",
		producer: {
			name: "DuckDuckGo",
			url: "https://duckduckgo.com/"
		}
	},
	{
		regex: "EasouSpider",
		name: "Easou Spider",
		category: "Search bot",
		url: "http://www.easou.com/search/spider.html",
		producer: {
			name: "easou ICP",
			url: "http://www.easou.com"
		}
	},
	{
		regex: "eCairn-Grabber",
		name: "eCairn-Grabber",
		category: "Crawler",
		producer: {
			name: "eCairn",
			url: "https://ecairn.com"
		}
	},
	{
		regex: "EMail Exractor",
		name: "EMail Exractor",
		category: "Crawler",
		url: "",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "evc-batch",
		name: "evc-batch",
		category: "Crawler",
		url: "",
		producer: {
			name: "eVenture Capital Partners II, LLC",
			url: "http://www.eventures.vc/"
		}
	},
	{
		regex: "Exabot(-Thumbnails|-Images)?|ExaleadCloudview",
		name: "ExaBot",
		category: "Crawler",
		url: "http://www.exabot.com/go/robot",
		producer: {
			name: "Dassault Systèmes",
			url: "http://www.3ds.com"
		}
	},
	{
		regex: "ExactSeek Crawler",
		name: "ExactSeek Crawler",
		category: "Search bot",
		url: "http://www.exactseek.com",
		producer: {
			name: "Jayde Online, Inc.",
			url: "http://www.jaydeonlineinc.com"
		}
	},
	{
		regex: "Ezooms",
		name: "Ezooms",
		category: "Crawler",
		url: "",
		producer: {
			name: "SEOmoz, Inc.",
			url: "http://moz.com/"
		}
	},
	{
		regex: "facebookexternalhit|facebookplatform|facebookexternalua",
		name: "Facebook External Hit",
		category: "Social Media Agent",
		url: "https://www.facebook.com/externalhit_uatext.php",
		producer: {
			name: "Facebook",
			url: "http://www.facebook.com"
		}
	},
	{
		regex: "Feedbin",
		name: "Feedbin",
		url: "http://feedbin.com/",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "FeedBurner",
		name: "FeedBurner",
		url: "http://www.feedburner.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "Feed Wrangler",
		name: "Feed Wrangler",
		url: "https://feedwrangler.net/",
		category: "Feed Fetcher",
		producer: {
			name: "David Smith & Developing Perspective, LLC",
			url: "https://david-smith.org"
		}
	},
	{
		regex: "(Meta)?Feedly(Bot|App)?",
		name: "Feedly",
		url: "http://www.feedly.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "Feedspot",
		name: "Feedspot",
		url: "http://www.feedspot.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "Fever/[0-9]",
		name: "Fever",
		url: "http://feedafever.com/",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "FlipboardProxy|FlipboardRSS",
		name: "Flipboard",
		url: "http://flipboard.com/browserproxy",
		category: "Feed Fetcher",
		producer: {
			name: "Flipboard",
			url: "http://flipboard.com/"
		}
	},
	{
		regex: "Findxbot",
		name: "Findxbot",
		category: "Crawler",
		url: "http://www.findxbot.com"
	},
	{
		regex: "FreshRSS",
		name: "FreshRSS",
		category: "Feed Fetcher",
		url: "https://freshrss.org/"
	},
	{
		regex: "Genieo",
		name: "Genieo Web filter",
		category: "",
		url: "http://www.genieo.com/webfilter.html",
		producer: {
			name: "Genieo",
			url: "http://www.genieo.com"
		}
	},
	{
		regex: "GigablastOpenSource",
		name: "Gigablast",
		category: "Search bot",
		url: "https://github.com/gigablast/open-source-search-engine",
		producer: {
			name: "Matt Wells",
			url: "http://www.gigablast.com/faq.html"
		}
	},
	{
		regex: "Gluten Free Crawler",
		name: "Gluten Free Crawler",
		category: "Crawler",
		url: "http://glutenfreepleasure.com/",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "ichiro/mobile goo",
		name: "Goo",
		category: "Search bot",
		url: "http://search.goo.ne.jp/option/use/sub4/sub4-1",
		producer: {
			name: "NTT Resonant",
			url: "http://goo.ne.jp"
		}
	},
	{
		regex: "Google Favicon",
		name: "Google Favicon",
		category: "Crawler"
	},
	{
		regex: "Google Search Console",
		name: "Google Search Console",
		category: "Crawler",
		url: "https://search.google.com/search-console/about",
		producer: {
			name: "Google Inc.",
			url: "http://www.google.com"
		}
	},
	{
		regex: "Google Page Speed Insights",
		name: "Google PageSpeed Insights",
		category: "Site Monitor",
		url: "http://developers.google.com/speed/pagespeed/insights/",
		producer: {
			name: "Google Inc.",
			url: "http://www.google.com"
		}
	},
	{
		regex: "google_partner_monitoring",
		name: "Google Partner Monitoring",
		category: "Site Monitor",
		url: "",
		producer: {
			name: "Google Inc.",
			url: "http://www.google.com"
		}
	},
	{
		regex: "Google-Cloud-Scheduler",
		name: "Google Cloud Scheduler",
		category: "Crawler",
		url: "https://cloud.google.com/scheduler",
		producer: {
			name: "Google Inc.",
			url: "https://www.google.com"
		}
	},
	{
		regex: "Google-Structured-Data-Testing-Tool",
		name: "Google Structured Data Testing Tool",
		category: "Validator",
		url: "https://search.google.com/structured-data/testing-tool",
		producer: {
			name: "Google Inc.",
			url: "http://www.google.com"
		}
	},
	{
		regex: "GoogleStackdriverMonitoring",
		name: "Google Stackdriver Monitoring",
		category: "Site Monitor",
		url: "https://cloud.google.com/monitoring",
		producer: {
			name: "Google Inc.",
			url: "https://www.google.com"
		}
	},
	{
		regex: "via ggpht\\.com GoogleImageProxy",
		name: "Gmail Image Proxy",
		category: "Crawler",
		url: "",
		producer: {
			name: "Google Inc.",
			url: "http://www.google.com"
		}
	},
	{
		regex: "SeznamEmailProxy",
		name: "Seznam Email Proxy",
		category: "Crawler",
		url: "",
		producer: {
			name: "Seznam.cz, a.s.",
			url: "http://www.seznam.cz/"
		}
	},
	{
		regex: "Seznam-Zbozi-robot",
		name: "Seznam Zbozi.cz",
		category: "Crawler",
		url: "",
		producer: {
			name: "Seznam.cz, a.s.",
			url: "https://www.zbozi.cz/"
		}
	},
	{
		regex: "Heurekabot-Feed",
		name: "Heureka Feed",
		category: "Crawler",
		url: "https://sluzby.heureka.cz/napoveda/heurekabot/",
		producer: {
			name: "Heureka.cz, a.s.",
			url: "https://www.heureka.cz/"
		}
	},
	{
		regex: "ShopAlike",
		name: "ShopAlike",
		category: "Crawler",
		url: "",
		producer: {
			name: "Visual Meta",
			url: "https://www.shopalike.cz/"
		}
	},
	{
		regex: "AdsBot-Google(-Mobile)?|Adwords-(DisplayAds|Express|Instant)|Google Web Preview|Google[ -]Publisher[ -]Plugin|Google-(Ads-Qualify|Adwords|AMPHTML|Assess|HotelAdsVerifier|Read-Aloud|Shopping-Quality|Site-Verification|speakr|Test|Youtube-Links)|(APIs|DuplexWeb|Feedfetcher|Mediapartners)-Google|Googlebot(-Mobile|-Image|-Video|-News)?|GoogleProducer|Google.*/\\+/web/snippet",
		name: "Googlebot",
		category: "Search bot",
		url: "http://www.google.com/bot.html",
		producer: {
			name: "Google Inc.",
			url: "http://www.google.com"
		}
	},
	{
		regex: "heritrix",
		name: "Heritrix",
		category: "Crawler",
		url: "https://webarchive.jira.com/wiki/display/Heritrix/Heritrix",
		producer: {
			name: "The Internet Archive",
			url: "https://archive.org"
		}
	},
	{
		regex: "HubSpot ",
		name: "HubSpot",
		category: "Crawler",
		producer: {
			name: "HubSpot Inc.",
			url: "https://www.hubspot.com"
		}
	},
	{
		regex: "HTTPMon",
		name: "HTTPMon",
		category: "Site Monitor",
		url: "http://www.httpmon.com",
		producer: {
			name: "towards GmbH",
			url: "http://www.towards.ch/"
		}
	},
	{
		regex: "ICC-Crawler",
		name: "ICC-Crawler",
		category: "Crawler",
		url: "http://www.nict.go.jp/en/univ-com/plan/crawl.html",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "inoreader.com",
		name: "inoreader",
		category: "Feed Reader",
		url: "https://www.inoreader.com"
	},
	{
		regex: "iisbot",
		name: "IIS Site Analysis",
		category: "Crawler",
		url: "http://www.iis.net/iisbot.html",
		producer: {
			name: "Microsoft Corporation",
			url: "http://www.microsoft.com"
		}
	},
	{
		regex: "ips-agent",
		name: "IPS Agent",
		category: "Crawler",
		producer: {
			name: "VeriSign, Inc",
			url: "http://www.verisign.com/"
		}
	},
	{
		regex: "IP-Guide\\.com",
		name: "IP-Guide Crawler",
		category: "Crawler",
		url: "",
		producer: {
			name: "",
			url: "https://ip-guide.com"
		}
	},
	{
		regex: "kouio",
		name: "Kouio",
		url: "http://kouio.com/",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "larbin",
		name: "Larbin web crawler",
		category: "Crawler",
		url: "http://larbin.sourceforge.net",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "([A-z0-9]*)-Lighthouse",
		name: "Lighthouse",
		category: "Site Monitor",
		url: "https://developers.google.com/web/tools/lighthouse",
		producer: {
			name: "Lighthouse",
			url: "https://developers.google.com/web/tools/lighthouse"
		}
	},
	{
		regex: "linkdexbot(-mobile)?|linkdex\\.com",
		name: "Linkdex Bot",
		category: "Search bot",
		url: "http://www.linkdex.com/bots",
		producer: {
			name: "Mojeek Ltd.",
			url: "http://www.mojeek.com"
		}
	},
	{
		regex: "LinkedInBot",
		name: "LinkedIn Bot",
		category: "Social Media Agent",
		url: "http://www.linkedin.com",
		producer: {
			name: "LinkedIn",
			url: "http://www.linkedin.com"
		}
	},
	{
		regex: "ltx71",
		name: "LTX71",
		url: "http://ltx71.com/",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "Mail\\.RU(_Bot)?",
		name: "Mail.Ru Bot",
		category: "Search bot",
		url: "http://help.mail.ru/webmaster/indexing/robots/types_robots",
		producer: {
			name: "Mail.Ru Group",
			url: "http://corp.mail.ru"
		}
	},
	{
		regex: "magpie-crawler",
		name: "Magpie-Crawler",
		category: "Social Media Agent",
		url: "http://www.brandwatch.com/magpie-crawler/",
		producer: {
			name: "Brandwatch",
			url: "http://www.brandwatch.com"
		}
	},
	{
		regex: "MagpieRSS",
		name: "MagpieRSS",
		url: "http://magpierss.sourceforge.net/",
		category: "Feed Parser",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "masscan",
		name: "masscan",
		url: "https://github.com/robertdavidgraham/masscan",
		category: "Crawler",
		producer: {
			name: "Robert Graham",
			url: "https://github.com/robertdavidgraham"
		}
	},
	{
		regex: "Mastodon/",
		name: "Mastodon Bot",
		category: "Social Media Agent"
	},
	{
		regex: "meanpathbot",
		name: "Meanpath Bot",
		category: "Search bot",
		url: "http://www.meanpath.com/meanpathbot.html",
		producer: {
			name: "Meanpath",
			url: "http://www.meanpath.com"
		}
	},
	{
		regex: "MetaJobBot",
		name: "MetaJobBot",
		category: "Crawler",
		url: "http://www.metajob.at/the/crawler",
		producer: {
			name: "MetaJob",
			url: "http://www.metajob.at"
		}
	},
	{
		regex: "MetaInspector",
		name: "MetaInspector",
		category: "Crawler",
		url: "https://github.com/jaimeiniesta/metainspector"
	},
	{
		regex: "MixrankBot",
		name: "Mixrank Bot",
		category: "Crawler",
		url: "http://mixrank.com",
		producer: {
			name: "Online Media Group, Inc.",
			url: ""
		}
	},
	{
		regex: "MJ12bot",
		name: "MJ12 Bot",
		category: "Search bot",
		url: "http://majestic12.co.uk/bot.php",
		producer: {
			name: "Majestic-12",
			url: "http://majestic12.co.uk"
		}
	},
	{
		regex: "Mnogosearch",
		name: "Mnogosearch",
		category: "Search bot",
		url: "http://www.mnogosearch.org/",
		producer: {
			name: "Lavtech.Com Corp.",
			url: ""
		}
	},
	{
		regex: "MojeekBot",
		name: "MojeekBot",
		category: "Search bot",
		url: "http://www.mojeek.com/bot.html",
		producer: {
			name: "Mojeek Ltd.",
			url: "http://www.mojeek.com"
		}
	},
	{
		regex: "munin",
		name: "Munin",
		category: "Site Monitor",
		url: "http://munin-monitoring.org/",
		producer: {
			name: "Munin",
			url: "http://munin-monitoring.org/"
		}
	},
	{
		regex: "NalezenCzBot",
		name: "NalezenCzBot",
		category: "Crawler",
		url: "http://www.nalezen.cz/about-crawler",
		producer: {
			name: "Jaroslav Kuboš",
			url: ""
		}
	},
	{
		regex: "check_http/v",
		name: "Nagios check_http",
		category: "Site Monitor",
		url: "https://nagios.org",
		producer: {
			name: "Nagios Plugins Development Team",
			url: "https://nagios.org"
		}
	},
	{
		regex: "nbertaupete95\\(at\\)gmail.com",
		name: "nbertaupete95",
		category: "Crawler"
	},
	{
		regex: "Netcraft( Web Server Survey| SSL Server Survey|SurveyAgent)",
		name: "Netcraft Survey Bot",
		category: "Search bot",
		url: "",
		producer: {
			name: "Netcraft",
			url: "http://www.netcraft.com"
		}
	},
	{
		regex: "netEstate NE Crawler",
		name: "netEstate",
		category: "Crawler",
		url: "http://www.website-datenbank.de/Impressum",
		producer: {
			name: "netEstate GmbH",
			url: "https://www.netestate.de/en/"
		}
	},
	{
		regex: "Netvibes",
		name: "Netvibes",
		url: "http://www.netvibes.com/",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "NewsBlur .*(Fetcher|Finder)",
		name: "NewsBlur",
		url: "http://www.newsblur.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "NewsGatorOnline",
		name: "NewsGator",
		url: "http://www.newsgator.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "nlcrawler",
		name: "NLCrawler",
		category: "Crawler",
		url: "",
		producer: {
			name: "Northern Light",
			url: "http://northernlight.com"
		}
	},
	{
		regex: "Nmap Scripting Engine",
		name: "Nmap",
		category: "Security Checker",
		url: "https://nmap.org/book/nse.html",
		producer: {
			name: "Nmap",
			url: "https://nmap.org/"
		}
	},
	{
		regex: "Nuzzel",
		name: "Nuzzel",
		category: "Crawler",
		producer: {
			name: "Nuzzel",
			url: "https://www.nuzzel.com/"
		}
	},
	{
		regex: "Octopus [0-9]",
		name: "Octopus"
	},
	{
		regex: "omgili(?:bot)?",
		name: "Omgili bot",
		category: "Search bot",
		url: "http://www.omgili.com/Crawler.html",
		producer: {
			name: "Omgili",
			url: "http://www.omgili.com"
		}
	},
	{
		regex: "OpenindexSpider",
		name: "Openindex Spider",
		category: "Search bot",
		url: "http://www.openindex.io/en/webmasters/spider.html",
		producer: {
			name: "Openindex B.V.",
			url: "http://www.openindex.io"
		}
	},
	{
		regex: "spbot",
		name: "OpenLinkProfiler",
		category: "Crawler",
		url: "http://openlinkprofiler.org/bot",
		producer: {
			name: "Axandra GmbH",
			url: "http://www.axandra.com"
		}
	},
	{
		regex: "OpenWebSpider",
		name: "OpenWebSpider",
		category: "Crawler",
		url: "http://www.openwebspider.org",
		producer: {
			name: "OpenWebSpider Lab",
			url: "http://lab.openwebspider.org"
		}
	},
	{
		regex: "OrangeBot|VoilaBot",
		name: "Orange Bot",
		category: "Search bot",
		url: "http://lemoteur.orange.fr",
		producer: {
			name: "Orange",
			url: "http://www.orange.fr"
		}
	},
	{
		regex: "PaperLiBot",
		name: "PaperLiBot",
		category: "Search bot",
		url: "http://support.paper.li/entries/20023257-what-is-paper-li",
		producer: {
			name: "Smallrivers SA",
			url: "http://www.paper.li"
		}
	},
	{
		regex: "phantomas/",
		name: "Phantomas",
		category: "Site Monitor",
		url: "https://github.com/macbre/phantomas"
	},
	{
		regex: "phpservermon",
		name: "PHP Server Monitor",
		category: "Site Monitor",
		url: "https://github.com/phpservermon/phpservermon",
		producer: {
			name: "PHP Server Monitor",
			url: "http://www.phpservermonitor.org/"
		}
	},
	{
		regex: "PocketParser",
		name: "PocketParser",
		category: "Read-it-later Service",
		url: "https://getpocket.com/pocketparser_ua",
		producer: {
			name: "Pocket",
			url: "https://getpocket.com/"
		}
	},
	{
		regex: "PritTorrent",
		name: "PritTorrent",
		category: "Crawler",
		url: "https://github.com/astro/prittorrent",
		producer: {
			name: "Bitlove",
			url: "http://bitlove.org/"
		}
	},
	{
		regex: "PRTG Network Monitor",
		name: "PRTG Network Monitor",
		category: "Network Monitor",
		url: "https://www.paessler.com/prtg",
		producer: {
			name: "Paessler AG",
			url: "https://www.paessler.com"
		}
	},
	{
		regex: "psbot(-page)?",
		name: "Picsearch bot",
		category: "Search bot",
		url: "http://www.picsearch.com/bot.html",
		producer: {
			name: "Picsearch",
			url: "http://www.picsearch.com"
		}
	},
	{
		regex: "Pingdom(?:\\.com|TMS)",
		name: "Pingdom Bot",
		category: "Site Monitor",
		url: "",
		producer: {
			name: "Pingdom AB",
			url: "https://www.pingdom.com"
		}
	},
	{
		regex: "Quora Link Preview",
		name: "Quora Link Preview",
		category: "Crawler",
		url: "",
		producer: {
			name: "Quora",
			url: "http://www.quora.com"
		}
	},
	{
		regex: "Quora-Bot",
		name: "Quora Bot",
		category: "Crawler",
		url: "",
		producer: {
			name: "Quora",
			url: "https://www.quora.com/"
		}
	},
	{
		regex: "RamblerMail",
		name: "RamblerMail Image Proxy",
		category: "Crawler",
		url: "",
		producer: {
			name: "Rambler&Co",
			url: "https://rambler-co.ru/"
		}
	},
	{
		regex: "QuerySeekerSpider",
		name: "QuerySeekerSpider",
		category: "Crawler",
		url: "http://queryseeker.com/bot.html",
		producer: {
			name: "QueryEye Inc.",
			url: "http://queryeye.com"
		}
	},
	{
		regex: "Qwantify",
		name: "Qwantify",
		category: "Crawler",
		url: "https://www.qwant.com/",
		producer: {
			name: "Qwant Corporation",
			url: "https://www.qwant.com/"
		}
	},
	{
		regex: "Rainmeter",
		name: "Rainmeter",
		category: "Crawler",
		url: "https://www.rainmeter.net"
	},
	{
		regex: "redditbot",
		name: "Reddit Bot",
		category: "Social Media Agent",
		url: "http://www.reddit.com/feedback",
		producer: {
			name: "reddit inc.",
			url: "http://www.reddit.com"
		}
	},
	{
		regex: "Riddler",
		name: "Riddler",
		category: "Security search bot",
		url: "https://riddler.io/about",
		producer: {
			name: "F-Secure",
			url: "https://www.f-secure.com"
		}
	},
	{
		regex: "rogerbot",
		name: "Rogerbot",
		category: "Crawler",
		url: "http://moz.com/help/pro/what-is-rogerbot-",
		producer: {
			name: "SEOmoz, Inc.",
			url: "http://moz.com/"
		}
	},
	{
		regex: "ROI Hunter",
		name: "ROI Hunter",
		category: "Crawler",
		url: "",
		producer: {
			name: "Roihunter a.s.",
			url: "http://roihunter.com/"
		}
	},
	{
		regex: "SafeDNSBot",
		name: "SafeDNSBot",
		category: "Crawler",
		url: "https://www.safedns.com/searchbot",
		producer: {
			name: "SafeDNS, Inc.",
			url: "https://www.safedns.com/"
		}
	},
	{
		regex: "Scrapy",
		name: "Scrapy",
		category: "Crawler",
		url: "http://scrapy.org"
	},
	{
		regex: "Screaming Frog SEO Spider",
		name: "Screaming Frog SEO Spider",
		category: "Crawler",
		url: "http://www.screamingfrog.co.uk/seo-spider",
		producer: {
			name: "Screaming Frog Ltd",
			url: "http://www.screamingfrog.co.uk"
		}
	},
	{
		regex: "ScreenerBot",
		name: "ScreenerBot",
		category: "Crawler",
		url: "http://www.screenerbot.com",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "SemrushBot",
		name: "Semrush Bot",
		category: "Crawler",
		url: "http://www.semrush.com/bot.html",
		producer: {
			name: "SEMrush",
			url: "http://www.semrush.com"
		}
	},
	{
		regex: "SensikaBot",
		name: "Sensika Bot",
		category: "",
		url: "",
		producer: {
			name: "Sensika",
			url: "http://sensika.com"
		}
	},
	{
		regex: "SEOENG(World)?Bot",
		name: "SEOENGBot",
		category: "Crawler",
		url: "http://www.seoengine.com/seoengbot.htm",
		producer: {
			name: "SEO Engine",
			url: "http://www.seoengine.com"
		}
	},
	{
		regex: "SEOkicks-Robot",
		name: "SEOkicks-Robot",
		category: "Crawler",
		url: "http://www.seokicks.de/robot.html",
		producer: {
			name: "SEOkicks",
			url: "https://www.seokicks.de/"
		}
	},
	{
		regex: "seoscanners\\.net",
		name: "Seoscanners.net",
		category: "Crawler",
		url: ""
	},
	{
		regex: "SkypeUriPreview",
		name: "Skype URI Preview",
		category: "Service Agent",
		url: "",
		producer: {
			name: "Skype Communications S.à.r.l.",
			url: "https://www.skype.com"
		}
	},
	{
		regex: "SeznamBot|SklikBot|Seznam screenshot-generator",
		name: "Seznam Bot",
		category: "Search bot",
		url: "http://www.mapy.cz/cz/seznambot.html",
		producer: {
			name: "Seznam.cz, a.s.",
			url: "http://www.seznam.cz/"
		}
	},
	{
		regex: "shopify-partner-homepage-scraper",
		name: "Shopify Partner",
		category: "Crawler",
		url: "https://www.shopify.com/partners",
		producer: {
			name: "Shopify",
			url: "https://www.shopify.com/"
		}
	},
	{
		regex: "ShopWiki",
		name: "ShopWiki",
		category: "Search tools",
		url: "http://www.shopwiki.com/wiki/Help:Bot",
		producer: {
			name: "ShopWiki Corp.",
			url: "http://www.shopwiki.com"
		}
	},
	{
		regex: "SilverReader",
		name: "SilverReader",
		url: "http://silverreader.com",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "SimplePie",
		name: "SimplePie",
		url: "http://www.simplepie.org",
		category: "Feed Parser",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "SISTRIX Crawler",
		name: "SISTRIX Crawler",
		category: "Crawler",
		url: "http://crawler.sistrix.net",
		producer: {
			name: "SISTRIX GmbH",
			url: "http://www.sistrix.de"
		}
	},
	{
		regex: "compatible; (?:SISTRIX )?Optimizer",
		name: "SISTRIX Optimizer",
		category: "Crawler",
		url: "https://optimizer.sistrix.com",
		producer: {
			name: "SISTRIX GmbH",
			url: "http://www.sistrix.de"
		}
	},
	{
		regex: "SiteSucker",
		name: "SiteSucker",
		category: "Crawler",
		url: "http://ricks-apps.com/osx/sitesucker/"
	},
	{
		regex: "sixy.ch",
		name: "Sixy.ch",
		category: "Site Monitor",
		url: "http://sixy.ch",
		producer: {
			name: "Manuel Kasper",
			url: "https://neon1.net/"
		}
	},
	{
		regex: "Slackbot|Slack-ImgProxy",
		name: "Slackbot",
		category: "Crawler",
		url: "https://api.slack.com/robots",
		producer: {
			name: "Slack Technologies",
			url: "http://slack.com"
		}
	},
	{
		regex: "(Sogou (web|inst|Pic) spider)|New-Sogou-Spider",
		name: "Sogou Spider",
		category: "Search bot",
		url: "http://www.sogou.com/docs/help/webmasters.htm",
		producer: {
			name: "Sohu, Inc.",
			url: "http://www.sogou.com"
		}
	},
	{
		regex: "Sosospider|Sosoimagespider",
		name: "Soso Spider",
		category: "Search bot",
		url: "http://help.soso.com/webspider.htm",
		producer: {
			name: "Tencent Holdings",
			url: "http://www.soso.com"
		}
	},
	{
		regex: "Sprinklr",
		name: "Sprinklr",
		category: "Crawler",
		url: "",
		producer: {
			name: "Sprinklr, Inc.",
			url: "https://www.sprinklr.com/"
		}
	},
	{
		regex: "sqlmap/",
		name: "sqlmap",
		category: "Security Checker",
		url: "http://sqlmap.org/",
		producer: {
			name: "sqlmap",
			url: "http://sqlmap.org/"
		}
	},
	{
		regex: "SSL Labs",
		name: "SSL Labs",
		category: "Validator",
		url: "https://www.ssllabs.com/about/assessment.html",
		producer: {
			name: "SSL Labs",
			url: "https://www.ssllabs.com/about/assessment.html"
		}
	},
	{
		regex: "StatusCake",
		name: "StatusCake",
		category: "Site Monitor",
		url: "https://www.statuscake.com",
		producer: {
			name: "StatusCake",
			url: "https://www.statuscake.com"
		}
	},
	{
		regex: "Superfeedr bot",
		name: "Superfeedr Bot",
		category: "Feed Fetcher",
		url: "",
		producer: {
			name: "Superfeedr",
			url: "https://superfeedr.com/"
		}
	},
	{
		regex: "Sparkler/[0-9]",
		name: "Sparkler",
		category: "Crawler",
		url: "https://github.com/USCDataScience/sparkler"
	},
	{
		regex: "Spinn3r",
		name: "Spinn3r",
		category: "Crawler",
		url: "http://spinn3r.com/robot",
		producer: {
			name: "Tailrank Inc",
			url: "http://spinn3r.com"
		}
	},
	{
		regex: "SputnikBot",
		name: "Sputnik Bot",
		category: "Crawler",
		url: ""
	},
	{
		regex: "SputnikFaviconBot",
		name: "Sputnik Favicon Bot",
		category: "Crawler",
		url: ""
	},
	{
		regex: "SputnikImageBot",
		name: "Sputnik Image Bot",
		category: "Crawler",
		url: ""
	},
	{
		regex: "SurveyBot",
		name: "Survey Bot",
		category: "Search bot",
		url: "http://www.domaintools.com/webmasters/surveybot.php",
		producer: {
			name: "Domain Tools",
			url: "http://www.domaintools.com"
		}
	},
	{
		regex: "TarmotGezgin",
		name: "Tarmot Gezgin",
		url: "http://www.tarmot.com/gezgin/",
		category: "Search bot"
	},
	{
		regex: "TelegramBot",
		name: "TelegramBot",
		url: "https://telegram.org/blog/bot-revolution"
	},
	{
		regex: "TLSProbe",
		name: "TLSProbe",
		url: "https://scan.trustnet.venafi.com/",
		category: "Security search bot",
		producer: {
			name: "Venafi TrustNet",
			url: "https://www.venafi.com"
		}
	},
	{
		regex: "TinEye-bot",
		name: "TinEye Crawler",
		category: "Search bot",
		url: "http://www.tineye.com/crawler.html",
		producer: {
			name: "Idée Inc.",
			url: "http://ideeinc.com"
		}
	},
	{
		regex: "Tiny Tiny RSS",
		name: "Tiny Tiny RSS",
		url: "http://tt-rss.org",
		category: "Feed Fetcher",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "theoldreader.com",
		name: "theoldreader",
		category: "Feed Reader",
		url: "https://theoldreader.com"
	},
	{
		regex: "trendictionbot",
		name: "Trendiction Bot",
		category: "Crawler",
		url: "http://www.trendiction.de/bot",
		producer: {
			name: "Talkwalker Inc.",
			url: "http://www.talkwalker.com"
		}
	},
	{
		regex: "TurnitinBot",
		name: "TurnitinBot",
		category: "Crawler",
		url: "http://www.turnitin.com/robot/crawlerinfo.html",
		producer: {
			name: "iParadigms, LLC.",
			url: "http://www.turnitin.com"
		}
	},
	{
		regex: "TweetedTimes Bot",
		name: "TweetedTimes Bot",
		category: "Crawler",
		url: "http://tweetedtimes.com",
		producer: {
			name: "TweetedTimes",
			url: "http://tweetedtimes.com/"
		}
	},
	{
		regex: "TweetmemeBot",
		name: "Tweetmeme Bot",
		category: "Crawler",
		url: "http://tweetmeme.com/",
		producer: {
			name: "Mediasift",
			url: ""
		}
	},
	{
		regex: "Twingly Recon",
		name: "Twingly Recon",
		category: "Crawler",
		producer: {
			name: "Twingly",
			url: "https://www.twingly.com"
		}
	},
	{
		regex: "Twitterbot",
		name: "Twitterbot",
		category: "Social Media Agent",
		url: "https://dev.twitter.com/docs/cards/getting-started",
		producer: {
			name: "Twitter",
			url: "http://www.twitter.com"
		}
	},
	{
		regex: "UniversalFeedParser",
		name: "UniversalFeedParser",
		category: "Feed Fetcher",
		url: "https://github.com/kurtmckee/feedparser",
		producer: {
			name: "Kurt McKee",
			url: "https://github.com/kurtmckee"
		}
	},
	{
		regex: "via secureurl\\.fwdcdn\\.com",
		name: "UkrNet Mail Proxy",
		category: "Crawler",
		url: "",
		producer: {
			name: "UkrNet Ltd",
			url: "https://www.ukr.net/"
		}
	},
	{
		regex: "Uptimebot",
		name: "Uptimebot",
		category: "Site Monitor",
		url: "https://uptime.com/uptimebot",
		producer: {
			name: "Uptime",
			url: "https://uptime.com"
		}
	},
	{
		regex: "UptimeRobot",
		name: "Uptime Robot",
		category: "Site Monitor",
		url: "",
		producer: {
			name: "Uptime Robot",
			url: "http://uptimerobot.com"
		}
	},
	{
		regex: "URLAppendBot",
		name: "URLAppendBot",
		category: "Crawler",
		url: "http://www.profound.net/urlappendbot.html",
		producer: {
			name: "Profound Networks",
			url: "http://www.profound.net"
		}
	},
	{
		regex: "Vagabondo",
		name: "Vagabondo",
		category: "Crawler",
		url: "",
		producer: {
			name: "WiseGuys",
			url: "http://www.wise-guys.nl/"
		}
	},
	{
		regex: "vkShare; ",
		name: "VK Share Button",
		category: "Crawler",
		url: "http://vk.com/dev/Share",
		producer: {
			name: "VK",
			url: "http://vk.com/"
		}
	},
	{
		regex: "VSMCrawler",
		name: "Visual Site Mapper Crawler",
		category: "Crawler",
		url: "http://www.visualsitemapper.com/crawler",
		producer: {
			name: "Alentum Software Ltd.",
			url: "http://www.alentum.com"
		}
	},
	{
		regex: "Jigsaw",
		name: "W3C CSS Validator",
		category: "Validator",
		url: "http://jigsaw.w3.org/css-validator",
		producer: {
			name: "W3C",
			url: "http://www.w3.org"
		}
	},
	{
		regex: "W3C_I18n-Checker",
		name: "W3C I18N Checker",
		category: "Validator",
		url: "http://validator.w3.org/i18n-checker",
		producer: {
			name: "W3C",
			url: "http://www.w3.org"
		}
	},
	{
		regex: "W3C-checklink",
		name: "W3C Link Checker",
		category: "Validator",
		url: "http://validator.w3.org/checklink",
		producer: {
			name: "W3C",
			url: "http://www.w3.org"
		}
	},
	{
		regex: "W3C_Validator|Validator.nu",
		name: "W3C Markup Validation Service",
		category: "Validator",
		url: "http://validator.w3.org/services",
		producer: {
			name: "W3C",
			url: "http://www.w3.org"
		}
	},
	{
		regex: "W3C-mobileOK",
		name: "W3C MobileOK Checker",
		category: "Validator",
		url: "http://validator.w3.org/mobile",
		producer: {
			name: "W3C",
			url: "http://www.w3.org"
		}
	},
	{
		regex: "W3C_Unicorn",
		name: "W3C Unified Validator",
		category: "Validator",
		url: "http://validator.w3.org/unicorn",
		producer: {
			name: "W3C",
			url: "http://www.w3.org"
		}
	},
	{
		regex: "Wappalyzer",
		name: "Wappalyzer",
		url: "https://github.com/AliasIO/Wappalyzer",
		producer: {
			name: "AliasIO",
			url: "https://github.com/AliasIO"
		}
	},
	{
		regex: "PTST/",
		name: "WebPageTest",
		category: "Site Monitor",
		url: "https://www.webpagetest.org"
	},
	{
		regex: "WeSEE(:Search)?",
		name: "WeSEE:Search",
		category: "Search bot",
		url: "http://www.wesee.com/bot",
		producer: {
			name: "WeSEE Ltd",
			url: "http://www.wesee.com"
		}
	},
	{
		regex: "WebbCrawler",
		name: "WebbCrawler",
		category: "Crawler",
		url: "http://badcheese.com/crawler.html",
		producer: {
			name: "Steve Webb",
			url: "http://badcheese.com"
		}
	},
	{
		regex: "websitepulse[+ ]checker",
		name: "WebSitePulse",
		category: "Site Monitor",
		url: "http://badcheese.com/crawler.html",
		producer: {
			name: "WebSitePulse",
			url: "http://www.websitepulse.com/"
		}
	},
	{
		regex: "WordPress",
		name: "WordPress",
		category: "Service Agent",
		url: "https://wordpress.org/",
		producer: {
			name: "Wordpress.org",
			url: "https://wordpress.org/"
		}
	},
	{
		regex: "Wotbox",
		name: "Wotbox",
		category: "Search bot",
		url: "http://www.wotbox.com/bot/",
		producer: {
			name: "Wotbox",
			url: "http://www.wotbox.com"
		}
	},
	{
		regex: "XenForo",
		name: "XenForo",
		category: "Service Agent",
		url: "https://xenforo.com/",
		producer: {
			name: "XenForo Ltd.",
			url: "https://xenforo.com/"
		}
	},
	{
		regex: "yacybot",
		name: "YaCy",
		category: "Search bot",
		url: "http://yacy.net/bot.html",
		producer: {
			name: "YaCy",
			url: "http://yacy.net"
		}
	},
	{
		regex: "Yahoo! Slurp|Yahoo!-AdCrawler",
		name: "Yahoo! Slurp",
		category: "Search bot",
		url: "http://help.yahoo.com/ysearch/slurp",
		producer: {
			name: "Yahoo! Inc.",
			url: "http://www.yahoo.com"
		}
	},
	{
		regex: "Yahoo Link Preview|Yahoo:LinkExpander:Slingstone",
		name: "Yahoo! Link Preview",
		category: "Crawler",
		url: "https://help.yahoo.com/kb/mail/yahoo-link-preview-SLN23615.html",
		producer: {
			name: "Yahoo! Inc.",
			url: "http://www.yahoo.com"
		}
	},
	{
		regex: "YahooMailProxy",
		name: "Yahoo! Mail Proxy",
		category: "Service Agent",
		url: "https://help.yahoo.com/kb/yahoo-mail-proxy-SLN28749.html",
		producer: {
			name: "Yahoo! Inc.",
			url: "http://www.yahoo.com"
		}
	},
	{
		regex: "YahooCacheSystem",
		name: "Yahoo! Cache System",
		category: "Crawler",
		url: "",
		producer: {
			name: "Yahoo! Inc.",
			url: "http://www.yahoo.com"
		}
	},
	{
		regex: "Y!J-BRW",
		name: "Yahoo! Japan BRW",
		category: "Crawler",
		url: "https://www.yahoo-help.jp/app/answers/detail/p/595/a_id/42716/~/ウェブページにアクセスするシステムのユーザーエージェントについて",
		producer: {
			name: "Yahoo! Japan Corp.",
			url: "https://www.yahoo.co.jp/"
		}
	},
	{
		regex: "Yandex(SpravBot|ScreenshotBot|MobileBot|AccessibilityBot|ForDomain|Vertis|Market|Catalog|Calendar|Sitelinks|AdNet|Pagechecker|Webmaster|Media|Video|Bot|Images|Antivirus|Direct|Blogs|Favicons|ImageResizer|Verticals|News(links)?|Metrika|\\.Gazeta Bot)|YaDirectFetcher|YandexTurbo|YandexTracker|YandexSearchShop|YandexRCA|YandexPartner|YandexOntoDBAPI|YandexOntoDB|YandexMobileScreenShotBot",
		name: "Yandex Bot",
		category: "Search bot",
		url: "http://www.yandex.com/bots",
		producer: {
			name: "Yandex LLC",
			url: "http://company.yandex.com"
		}
	},
	{
		regex: "Yeti|NaverJapan",
		name: "Yeti/Naverbot",
		category: "Search bot",
		url: "http://help.naver.com/robots/",
		producer: {
			name: "Naver",
			url: "http://www.naver.com"
		}
	},
	{
		regex: "YoudaoBot",
		name: "Youdao Bot",
		category: "Search bot",
		url: "http://www.youdao.com/help/webmaster/spider",
		producer: {
			name: "NetEase, Inc.",
			url: "http://corp.163.com"
		}
	},
	{
		regex: "YOURLS v[0-9]",
		name: "Yourls",
		category: "Crawler",
		url: "http://yourls.org"
	},
	{
		regex: "YRSpider|YYSpider",
		name: "Yunyun Bot",
		category: "Search bot",
		url: "http://www.yunyun.com/SiteInfo.php?r=about",
		producer: {
			name: "YunYun",
			url: "http://www.yunyun.com"
		}
	},
	{
		regex: "zgrab",
		name: "zgrab",
		category: "Security Checker",
		url: "https://github.com/zmap/zgrab"
	},
	{
		regex: "Zookabot",
		name: "Zookabot",
		category: "Crawler",
		url: "http://zookabot.com",
		producer: {
			name: "Hwacha ApS",
			url: "http://hwacha.dk"
		}
	},
	{
		regex: "ZumBot",
		name: "ZumBot",
		category: "Search bot",
		url: "http://help.zum.com/inquiry",
		producer: {
			name: "ZUM internet",
			url: "http://www.zuminternet.com/"
		}
	},
	{
		regex: "YottaaMonitor",
		name: "Yottaa Site Monitor",
		category: "Site Monitor",
		url: "http://www.yottaa.com/products/site-monitor",
		producer: {
			name: "Yottaa",
			url: "http://www.yottaa.com/"
		}
	},
	{
		regex: "Yahoo Ad monitoring.*yahoo-ad-monitoring-SLN24857.*",
		name: "Yahoo Gemini",
		category: "Crawler",
		url: "https://help.yahoo.com/kb/yahoo-ad-monitoring-SLN24857.html",
		producer: {
			name: "Yahoo! Inc.",
			url: "http://www.yahoo.com"
		}
	},
	{
		regex: ".*Java.*outbrain",
		name: "Outbrain",
		category: "Crawler",
		url: "",
		producer: {
			name: "Outbrain",
			url: "http://www.outbrain.com/"
		}
	},
	{
		regex: "HubPages.*crawlingpolicy",
		name: "HubPages",
		category: "Crawler",
		url: "http://hubpages.com/help/crawlingpolicy",
		producer: {
			name: "HubPages",
			url: "http://hubpages.com/"
		}
	},
	{
		regex: "Pinterest(bot)?/\\d\\.\\d.*www\\.pinterest\\.com.*",
		name: "Pinterest",
		url: "http://www.pinterest.com/bot.html",
		category: "Crawler",
		producer: {
			name: "Pinterest",
			url: "http://www.pinterest.com/"
		}
	},
	{
		regex: "Site24x7",
		name: "Site24x7 Website Monitoring",
		category: "Site Monitor",
		url: "https://www.site24x7.com/site24x7-faq.html",
		producer: {
			name: "Site24x7",
			url: "https://www.site24x7.com"
		}
	},
	{
		regex: "s~snapchat-proxy",
		name: "Snapchat Proxy",
		category: "Crawler",
		url: "https://www.snapchat.com",
		producer: {
			name: "Snapchat Inc.",
			url: "https://www.snapchat.com"
		}
	},
	{
		regex: "Let's Encrypt validation server",
		name: "Let's Encrypt Validation",
		category: "Service Agent",
		url: "https://letsencrypt.org/how-it-works/",
		producer: {
			name: "Let's Encrypt",
			url: "https://letsencrypt.org"
		}
	},
	{
		regex: "GrapeshotCrawler",
		name: "Grapeshot",
		category: "Crawler",
		url: "https://www.grapeshot.com/crawler",
		producer: {
			name: "Grapeshot",
			url: "https://www.grapeshot.com"
		}
	},
	{
		regex: "www\\.monitor\\.us",
		name: "Monitor.Us",
		category: "Site Monitor",
		url: "http://www.monitor.us",
		producer: {
			name: "Monitor.Us",
			url: "http://www.monitor.us"
		}
	},
	{
		regex: "Catchpoint( bot)?",
		name: "Catchpoint",
		category: "Site Monitor",
		url: "",
		producer: {
			name: "Catchpoint Systems",
			url: "http://www.catchpoint.com/"
		}
	},
	{
		regex: "bitlybot",
		name: "BitlyBot",
		category: "Crawler",
		url: "https://bitly.com",
		producer: {
			name: "Bitly, Inc.",
			url: "https://bitly.com"
		}
	},
	{
		regex: "Zao/",
		name: "Zao",
		category: "Crawler"
	},
	{
		regex: "lycos",
		name: "Lycos"
	},
	{
		regex: "Slurp",
		name: "Inktomi Slurp"
	},
	{
		regex: "Speedy Spider",
		name: "Speedy"
	},
	{
		regex: "ScoutJet",
		name: "ScoutJet"
	},
	{
		regex: "nrsbot|netresearch",
		name: "NetResearchServer"
	},
	{
		regex: "scooter",
		name: "Scooter"
	},
	{
		regex: "gigabot",
		name: "Gigabot"
	},
	{
		regex: "charlotte",
		name: "Charlotte"
	},
	{
		regex: "Pompos",
		name: "Pompos"
	},
	{
		regex: "ichiro",
		name: "ichiro"
	},
	{
		regex: "PagePeeker",
		name: "PagePeeker"
	},
	{
		regex: "WebThumbnail",
		name: "WebThumbnail"
	},
	{
		regex: "Willow Internet Crawler",
		name: "Willow Internet Crawler"
	},
	{
		regex: "EmailWolf",
		name: "EmailWolf"
	},
	{
		regex: "NetLyzer FastProbe",
		name: "NetLyzer FastProbe"
	},
	{
		regex: "AdMantX.*admantx\\.com",
		name: "ADMantX"
	},
	{
		regex: "Server Density Service Monitoring.*",
		name: "Server Density"
	},
	{
		regex: "RSSRadio \\(Push Notification Scanner;support@dorada\\.co\\.uk\\)",
		name: "RSSRadio Bot"
	},
	{
		regex: "(A6-Indexer|nuhk|TsolCrawler|Yammybot|Openbot|Gulper Web Bot|grub-client|Download Demon|SearchExpress|Microsoft URL Control|borg|altavista|dataminr.com|tweetedtimes.com|TrendsmapResolver|teoma|blitzbot|oegp|furlbot|http%20client|polybot|htdig|mogimogi|larbin|scrubby|searchsight|seekbot|semanticdiscovery|snappy|vortex(?! Build)|zeal|fast-webcrawler|converacrawler|dataparksearch|findlinks|BrowserMob|HttpMonitor|ThumbShotsBot|URL2PNG|ZooShot|GomezA|Google SketchUp|Read%20Later|RackspaceBot|robots|SeopultContentAnalyzer|7Siters|centuryb.o.t9|InterNaetBoten|EasyBib AutoCite|Bidtellect|tomnomnom/meg)",
		name: "Generic Bot"
	},
	{
		regex: "^sentry",
		name: "Sentry Bot",
		producer: {
			name: "Sentry",
			url: "https://sentry.io"
		}
	},
	{
		regex: "^Spotify",
		name: "Spotify",
		producer: {
			name: "Spotify",
			url: "https://www.spotify.com"
		}
	},
	{
		regex: "The Knowledge AI",
		name: "The Knowledge AI",
		category: "Crawler"
	},
	{
		regex: "Embedly",
		name: "Embedly",
		category: "Crawler",
		url: "https://support.embed.ly/hc/en-us",
		producer: {
			name: "A Medium, Corp.",
			url: "https://medium.com/"
		}
	},
	{
		regex: "BrandVerity",
		name: "BrandVerity",
		category: "Crawler",
		url: "https://www.brandverity.com/why-is-brandverity-visiting-me",
		producer: {
			name: "BrandVerity, Inc.",
			url: "https://www.brandverity.com/"
		}
	},
	{
		regex: "Kaspersky Lab CFR link resolver",
		name: "Kaspersky",
		category: "Security Checker",
		url: "https://www.kaspersky.com/",
		producer: {
			name: "AO Kaspersky Lab",
			url: "https://www.kaspersky.com/"
		}
	},
	{
		regex: "eZ Publish Link Validator",
		name: "eZ Publish Link Validator",
		category: "Crawler",
		url: "https://ez.no/",
		producer: {
			name: "eZ Systems AS",
			url: "https://ez.no/"
		}
	},
	{
		regex: "woorankreview",
		name: "WooRank",
		category: "Search bot",
		url: "https://www.woorank.com/",
		producer: {
			name: "WooRank sprl",
			url: "https://www.woorank.com/"
		}
	},
	{
		regex: "(Match|LinkCheck) by Siteimprove.com",
		name: "Siteimprove",
		category: "Search bot",
		url: "https://siteimprove.com/",
		producer: {
			name: "Siteimprove GmbH",
			url: "https://siteimprove.com/"
		}
	},
	{
		regex: "CATExplorador",
		name: "CATExplorador",
		category: "Search bot",
		url: "https://fundacio.cat/ca/domini/",
		producer: {
			name: "Fundació puntCAT",
			url: "https://fundacio.cat/ca/domini/"
		}
	},
	{
		regex: "Buck",
		name: "Buck",
		category: "Search bot",
		url: "https://hypefactors.com/",
		producer: {
			name: "Hypefactors A/S",
			url: "https://hypefactors.com/"
		}
	},
	{
		regex: "tracemyfile",
		name: "TraceMyFile",
		category: "Search bot",
		url: "https://www.tracemyfile.com/",
		producer: {
			name: "Idee Inc.",
			url: "http://ideeinc.com/"
		}
	},
	{
		regex: "zelist.ro feed parser",
		name: "Ze List",
		url: "https://www.zelist.ro/",
		category: "Feed Fetcher",
		producer: {
			name: "Treeworks SRL",
			url: "https://www.tree.ro/"
		}
	},
	{
		regex: "weborama-fetcher",
		name: "Weborama",
		category: "Search bot",
		url: "https://weborama.com/",
		producer: {
			name: "Weborama SA",
			url: "https://weborama.com/"
		}
	},
	{
		regex: "BoardReader Favicon Fetcher",
		name: "BoardReader",
		category: "Search bot",
		url: "https://boardreader.com/",
		producer: {
			name: "Effyis Inc",
			url: "https://boardreader.com/"
		}
	},
	{
		regex: "IDG/IT",
		name: "IDG/IT",
		category: "Search bot",
		url: "https://spaziodati.eu/",
		producer: {
			name: "SpazioDati S.r.l.",
			url: "https://spaziodati.eu/"
		}
	},
	{
		regex: "Bytespider",
		name: "Bytespider",
		category: "Search bot",
		url: "https://bytedance.com/",
		producer: {
			name: "ByteDance Ltd.",
			url: "https://bytedance.com/"
		}
	},
	{
		regex: "WikiDo",
		name: "WikiDo",
		category: "Search bot",
		url: "https://www.wikido.com/",
		producer: {
			name: "Fotolitografie Fiorentine di Becchi Antonio s.n.c.",
			url: "https://www.wikido.com/"
		}
	},
	{
		regex: "AwarioSmartBot",
		name: "Awario",
		category: "Search bot",
		url: "https://awario.com/bots.html",
		producer: {
			name: "Awario",
			url: "https://awario.com/"
		}
	},
	{
		regex: "AwarioRssBot",
		name: "Awario",
		category: "Feed Fetcher",
		url: "https://awario.com/bots.html",
		producer: {
			name: "Awario",
			url: "https://awario.com/"
		}
	},
	{
		regex: "oBot",
		name: "oBot",
		category: "Search bot",
		url: "https://www.xforce-security.com/crawler/",
		producer: {
			name: "IBM Germany Research & Development GmbH",
			url: "https://exchange.xforce.ibmcloud.com/"
		}
	},
	{
		regex: "SMTBot",
		name: "SMTBot",
		category: "Search bot",
		url: "https://www.similartech.com/smtbot",
		producer: {
			name: "SimilarTech Ltd.",
			url: "https://www.similartech.com/"
		}
	},
	{
		regex: "LCC",
		name: "LCC",
		category: "Search bot",
		url: "https://corpora.uni-leipzig.de/crawler_faq.html",
		producer: {
			name: "Universität Leipzig",
			url: "https://www.uni-leipzig.de/"
		}
	},
	{
		regex: "Startpagina-Linkchecker",
		name: "Startpagina Linkchecker",
		category: "Search bot",
		url: "https://www.startpagina.nl/linkchecker",
		producer: {
			name: "Startpagina B.V.",
			url: "https://www.startpagina.nl/"
		}
	},
	{
		regex: "GTmetrix",
		name: "GTmetrix",
		category: "Crawler",
		url: "https://gtmetrix.com/",
		producer: {
			name: "Carbon60 Operating Co. Ltd.",
			url: "https://www.carbon60.com/"
		}
	},
	{
		regex: "Nutch",
		name: "Nutch-based Bot",
		category: "Crawler",
		url: "https://nutch.apache.org",
		producer: {
			name: "The Apache Software Foundation",
			url: "https://www.apache.org/foundation/"
		}
	},
	{
		regex: "Seobility",
		name: "Seobility",
		category: "Crawler",
		url: "https://www.seobility.net/en/faq/?category=crawling#!aboutourbot"
	},
	{
		regex: "Vercelbot",
		name: "Vercel Bot",
		category: "Service bot",
		url: "https://vercel.com"
	},
	{
		regex: "Grammarly",
		name: "Grammarly",
		category: "Service bot",
		url: "https://www.grammarly.com"
	},
	{
		regex: "Robozilla",
		name: "Robozilla",
		category: "Crawler"
	},
	{
		regex: "Domains Project",
		name: "Domains Project",
		category: "Crawler",
		url: "https://domainsproject.org"
	},
	{
		regex: "PetalBot",
		name: "Petal Bot",
		category: "Crawler",
		url: "https://aspiegel.com/petalbot"
	},
	{
		regex: "SerendeputyBot",
		name: "Serendeputy Bot",
		category: "Crawler",
		url: "https://serendeputy.com/about/serendeputy-bot"
	},
	{
		regex: "ias-va.*admantx.*service-fetcher",
		name: "ADmantX Service Fetcher",
		category: "Service bot",
		url: "https://www.admantx.com/service-fetcher.html"
	},
	{
		regex: "SemanticScholarBot",
		name: "Semantic Scholar Bot",
		category: "Crawler",
		url: "https://www.semanticscholar.org/crawler"
	},
	{
		regex: "VelenPublicWebCrawler",
		name: "Velen Public Web Crawler",
		category: "Crawler",
		url: "https://hunter.io/robot"
	},
	{
		regex: "Barkrowler",
		name: "Barkrowler",
		category: "Crawler",
		url: "http://www.exensa.com/crawl"
	},
	{
		regex: "BDCbot",
		name: "BDCbot",
		category: "Crawler",
		url: "https://bigweb.bigdatacorp.com.br/pages/faq.aspx",
		producer: {
			name: "BIG Data Solucoes Em Tecnologia de Informatica LTDA",
			url: "https://bigdatacorp.com.br/"
		}
	},
	{
		regex: "adbeat",
		name: "Adbeat",
		category: "Crawler",
		url: "https://www.adbeat.com/operation_policy",
		producer: {
			name: "PPC Labs LLC",
			url: "https://www.adbeat.com/"
		}
	},
	{
		regex: "BW/(?:(\\d+[\\.\\d]+))",
		name: "BuiltWith",
		category: "Crawler",
		url: "https://builtwith.com/biup",
		producer: {
			name: "BuiltWith Pty Ltd",
			url: "https://builtwith.com/"
		}
	},
	{
		regex: "https://whatis.contentkingapp.com",
		name: "ContentKing",
		category: "Site Monitor",
		url: "https://whatis.contentkingapp.com/",
		producer: {
			name: "ContentKing BV",
			url: "https://www.contentkingapp.com/"
		}
	},
	{
		regex: "MicroAdBot",
		name: "MicroAdBot",
		category: "Crawler",
		url: "https://www.microad.co.jp/",
		producer: {
			name: "MicroAd, Inc.",
			url: "https://www.microad.co.jp/"
		}
	},
	{
		regex: "PingAdmin.Ru",
		name: "PingAdmin.Ru",
		category: "Site Monitor",
		url: "https://ping-admin.ru/"
	},
	{
		regex: "notifyninja.+monitoring",
		name: "Notify Ninja",
		category: "Site Monitor",
		url: "http://notifyninja.com"
	},
	{
		regex: "WebDataStats",
		name: "WebDataStats",
		category: "Crawler",
		url: "https://webdatastats.com/policy.html",
		producer: {
			name: "WebTehRazrabotka LLC",
			url: "https://webdatastats.com/"
		}
	},
	{
		regex: "parse.ly scraper",
		name: "parse.ly",
		category: "Crawler",
		url: "https://www.parse.ly/help/integration/crawler",
		producer: {
			name: "Parsely, Inc.",
			url: "https://www.parse.ly/"
		}
	},
	{
		regex: "Nimbostratus-Bot",
		name: "Nimbostratus Bot",
		category: "Site Monitor",
		url: "http://cloudsystemnetworks.com"
	},
	{
		regex: "HeartRails_Capture/\\d",
		name: "Heart Rails Capture",
		category: "Service Agent",
		url: "http://capture.heartrails.com"
	},
	{
		regex: "Project-Resonance",
		name: "Project Resonance",
		category: "Crawler",
		url: "http://project-resonance.com"
	},
	{
		regex: "DataXu/\\d",
		name: "DataXu",
		category: "Service Agent",
		url: "https://advertising.roku.com/dataxu",
		producer: {
			name: "Roku, Inc.",
			url: "https://roku.com"
		}
	},
	{
		regex: "Cocolyzebot",
		name: "Cocolyzebot",
		category: "Crawler",
		url: "https://cocolyze.com/en/cocolyzebot",
		producer: {
			name: "VSI INNOVATION SAS",
			url: "https://vsi-innovation.com/"
		}
	},
	{
		regex: "veryhip",
		name: "VeryHip",
		category: "Crawler",
		url: "https://veryhip.com/",
		producer: {
			name: "VeryHip",
			url: "https://veryhip.com/"
		}
	},
	{
		regex: "LinkpadBot",
		name: "LinkpadBot",
		category: "Crawler",
		url: "https://www.linkpad.org/",
		producer: {
			name: "Solomono LLC",
			url: "https://www.linkpad.org/"
		}
	},
	{
		regex: "MuscatFerret",
		name: "MuscatFerret",
		category: "Crawler",
		url: "http://www.webtop.com/"
	},
	{
		regex: "PageThing.com",
		name: "PageThing",
		category: "Crawler",
		url: "https://www.pagething.com/",
		producer: {
			name: "SPECIALNOISE LTD",
			url: "https://www.specialnoise.com/"
		}
	},
	{
		regex: "ArchiveBox",
		name: "ArchiveBox",
		url: "https://archivebox.io/",
		category: "Crawler",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "Choosito",
		name: "Choosito",
		url: "https://www.choosito.com/",
		category: "Crawler",
		producer: {
			name: "Choosito! Inc.",
			url: "https://www.choosito.com/"
		}
	},
	{
		regex: "datagnionbot",
		name: "datagnionbot",
		url: "https://www.datagnion.com/bot.html",
		category: "Crawler",
		producer: {
			name: "DATAGNION GMBH",
			url: "https://www.datagnion.com/"
		}
	},
	{
		regex: "WhatCMS",
		name: "WhatCMS",
		url: "https://whatcms.org/",
		category: "Crawler",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "httpx",
		name: "httpx",
		url: "https://github.com/projectdiscovery/httpx",
		category: "Crawler",
		producer: {
			name: "",
			url: ""
		}
	},
	{
		regex: "scaninfo@expanseinc.com",
		name: "Expanse",
		category: "Security Checker",
		url: "https://expanse.co/",
		producer: {
			name: "Expanse Inc.",
			url: "https://expanse.co/"
		}
	},
	{
		regex: "HuaweiWebCatBot",
		name: "HuaweiWebCatBot",
		category: "Crawler",
		url: "https://isecurity.huawei.com",
		producer: {
			name: "Huawei Technologies Co., Ltd.",
			url: "https://huawei.com"
		}
	},
	{
		regex: "Hatena-Favicon",
		name: "Hatena Favicon",
		category: "Crawler",
		url: "https://www.hatena.ne.jp/faq/",
		producer: {
			name: "Hatena Co., Ltd.",
			url: "https://www.hatena.ne.jp"
		}
	},
	{
		regex: "RyowlEngine/(\\d+)",
		name: "Ryowl",
		category: "Crawler",
		url: "https://ryowl.org"
	},
	{
		regex: "OdklBot/(\\d+)",
		name: "Odnoklassniki Bot",
		category: "Crawler",
		url: "https://odnoklassniki.ru"
	},
	{
		regex: "Mediatoolkitbot",
		name: "Mediatoolkit Bot",
		category: "Crawler",
		url: "https://mediatoolkit.com"
	},
	{
		regex: "ZoominfoBot",
		name: "ZoominfoBot",
		category: "Crawler",
		url: "https://www.zoominfo.com"
	},
	{
		regex: "WeViKaBot/([\\d+\\.])",
		name: "WeViKaBot",
		category: "Crawler",
		url: "http://www.wevika.de"
	},
	{
		regex: "SEOkicks",
		name: "SEOkicks",
		category: "Crawler",
		url: "https://www.seokicks.de/robot.html"
	},
	{
		regex: "Plukkie/([\\d+\\.])",
		name: "Plukkie",
		category: "Crawler",
		url: "http://www.botje.com/plukkie.htm"
	},
	{
		regex: "proximic;",
		name: "Comscore",
		category: "Crawler",
		url: "https://www.comscore.com/Web-Crawler"
	},
	{
		regex: "SurdotlyBot/([\\d+\\.])",
		name: "SurdotlyBot",
		category: "Crawler",
		url: "http://sur.ly/bot.html"
	},
	{
		regex: "Gowikibot/([\\d+\\.])",
		name: "Gowikibot",
		category: "Crawler",
		url: "http:/www.gowikibot.com"
	},
	{
		regex: "SabsimBot/([\\d+\\.])",
		name: "SabsimBot",
		category: "Crawler",
		url: "https://sabsim.com"
	},
	{
		regex: "LumtelBot/([\\d+\\.])",
		name: "LumtelBot",
		category: "Crawler",
		url: "https://umtel.com"
	},
	{
		regex: "PiplBot",
		name: "PiplBot",
		category: "Crawler",
		url: "http://www.pipl.com/bot"
	},
	{
		regex: "woobot/([\\d+\\.])",
		name: "WooRank",
		category: "Crawler",
		url: "https://www.woorank.com/bot"
	},
	{
		regex: "[a-z0-9\\-_]*((?<!cu|power[ _]|m[ _])bot(?![ _]TAB|[ _]?5[0-9])|crawler|crawl|checker|archiver|transcoder|spider)([^a-z]|$)",
		name: "Generic Bot"
	}
];

var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const bots_json_1 = __importDefault$1(require$$0);
const user_agent_1$1 = userAgent;
let BotParser$1 = class BotParser {
    constructor() {
        this.parse = (userAgent) => {
            var _a, _b, _c, _d;
            for (const bot of bots_json_1.default) {
                const match = user_agent_1$1.userAgentParser(bot.regex, userAgent);
                if (!match)
                    continue;
                return {
                    name: bot.name,
                    category: bot.category || "",
                    url: bot.url || "",
                    producer: {
                        name: ((_b = (_a = bot) === null || _a === void 0 ? void 0 : _a.producer) === null || _b === void 0 ? void 0 : _b.name) || "",
                        url: ((_d = (_c = bot) === null || _c === void 0 ? void 0 : _c.producer) === null || _d === void 0 ? void 0 : _d.url) || ""
                    }
                };
            }
            return null;
        };
    }
};
var bot = BotParser$1;

var versionCompare = {};

Object.defineProperty(versionCompare, "__esModule", { value: true });
versionCompare.versionCompare = (v1, v2, operator) => {
    //      discuss at: http://locutus.io/php/version_compare/
    //      original by: Philippe Jausions (http://pear.php.net/user/jausions)
    //      original by: Aidan Lister (http://aidanlister.com/)
    //      reimplemented by: Kankrelune (http://www.webfaktory.info/)
    //      improved by: Brett Zamir (http://brett-zamir.me)
    //      improved by: Scott Baker
    //      improved by: Theriault (https://github.com/Theriault)
    //      example 1: version_compare('8.2.5rc', '8.2.5a')
    //      returns 1: 1
    //      example 2: version_compare('8.2.50', '8.2.52', '<')
    //      returns 2: true
    //      example 3: version_compare('5.3.0-dev', '5.3.0')
    //      returns 3: -1
    //      example 4: version_compare('4.1.0.52','4.01.0.51')
    //      returns 4: 1
    // Important: compare must be initialized at 0.
    let i;
    let x;
    let compare = 0;
    // vm maps textual PHP versions to negatives so they're less than 0.
    // PHP currently defines these as CASE-SENSITIVE. It is important to
    // leave these as negatives so that they can come before numerical versions
    // and as if no letters were there to begin with.
    // (1alpha is < 1 and < 1.1 but > 1dev1)
    // If a non-numerical value can't be mapped to this table, it receives
    // -7 as its value.
    const vm = {
        "dev": -6,
        "alpha": -5,
        "a": -5,
        "beta": -4,
        "b": -4,
        "RC": -3,
        "rc": -3,
        "#": -2,
        "p": 1,
        "pl": 1
    };
    // This function will be called to prepare each version argument.
    // It replaces every _, -, and + with a dot.
    // It surrounds any nonsequence of numbers/dots with dots.
    // It replaces sequences of dots with a single dot.
    //    version_compare('4..0', '4.0') === 0
    // Important: A string of 0 length needs to be converted into a value
    // even less than an unexisting value in vm (-7), hence [-8].
    // It's also important to not strip spaces because of this.
    //   version_compare('', ' ') === 1
    const prepVersion = (v) => {
        v = ("" + v).replace(/[_\-+]/g, ".");
        v = v.replace(/([^.\d]+)/g, ".$1.").replace(/\.{2,}/g, ".");
        return (!v.length ? [-8] : v.split("."));
    };
    // This converts a version component to a number.
    // Empty component becomes 0.
    // Non-numerical component becomes a negative number.
    // Numerical component becomes itself as an integer.
    const numVersion = (v) => {
        return !v ? 0 : (isNaN(v) ? vm[v] || -7 : parseInt(v, 10));
    };
    v1 = prepVersion(v1);
    v2 = prepVersion(v2);
    x = Math.max(v1.length, v2.length);
    for (i = 0; i < x; i++) {
        if (v1[i] === v2[i]) {
            continue;
        }
        v1[i] = numVersion(v1[i]);
        v2[i] = numVersion(v2[i]);
        if (v1[i] < v2[i]) {
            compare = -1;
            break;
        }
        else if (v1[i] > v2[i]) {
            compare = 1;
            break;
        }
    }
    if (!operator) {
        return compare;
    }
    // Important: operator is CASE-SENSITIVE.
    // "No operator" seems to be treated as "<."
    // Any other values seem to make the function return null.
    switch (operator) {
        case ">":
        case "gt":
            return (compare > 0);
        case ">=":
        case "ge":
            return (compare >= 0);
        case "<=":
        case "le":
            return (compare <= 0);
        case "===":
        case "=":
        case "eq":
            return (compare === 0);
        case "<>":
        case "!==":
        case "ne":
            return (compare !== 0);
        case "":
        case "<":
        case "lt":
            return (compare < 0);
        default:
            return null;
    }
};

var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const client_1 = __importDefault(client);
const device_1 = __importDefault(device);
const operating_system_1 = __importDefault(operatingSystem$1);
const vendor_fragment_1 = __importDefault(vendorFragment);
const browser_1 = __importDefault(browser);
const BotParser = bot;
const user_agent_1 = userAgent;
const version_compare_1 = versionCompare;
class DeviceDetector {
    constructor(options) {
        // Default options
        this.options = {
            skipBotDetection: false,
            versionTruncation: 1
        };
        this.parse = (userAgent) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            const result = {
                client: this.clientParser.parse(userAgent),
                os: this.operatingSystemParser.parse(userAgent),
                device: this.deviceParser.parse(userAgent),
                bot: this.options.skipBotDetection ? null : this.botParser.parse(userAgent)
            };
            const osName = (_a = result.os) === null || _a === void 0 ? void 0 : _a.name;
            const osVersion = (_b = result.os) === null || _b === void 0 ? void 0 : _b.version;
            const osFamily = operating_system_1.default.getOsFamily(osName || "");
            if (!((_c = result.device) === null || _c === void 0 ? void 0 : _c.brand)) {
                const brand = this.vendorFragmentParser.parse(userAgent);
                if (brand) {
                    if (!result.device) {
                        result.device = this.createDeviceObject();
                    }
                    result.device.brand = brand;
                }
            }
            /**
             * Assume all devices running iOS / Mac OS are from Apple
             */
            if (!((_d = result.device) === null || _d === void 0 ? void 0 : _d.brand) && ["Apple TV", "watchOS", "iOS", "Mac"].includes(osName || "")) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.brand = "Apple";
            }
            /**
             * Chrome on Android passes the device type based on the keyword 'Mobile'
             * If it is present the device should be a smartphone, otherwise it's a tablet
             * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent
             * Note: We do not check for browser (family) here, as there might be mobile apps using Chrome, that won't have
             *       a detected browser, but can still be detected. So we check the useragent for Chrome instead.
             */
            if (!((_e = result.device) === null || _e === void 0 ? void 0 : _e.type) && osFamily === "Android" && user_agent_1.userAgentParser("Chrome/[\\.0-9]*", userAgent)) {
                if (user_agent_1.userAgentParser("Chrome/[.0-9]* (?:Mobile|eliboM)", userAgent)) {
                    if (!result.device) {
                        result.device = this.createDeviceObject();
                    }
                    result.device.type = "smartphone";
                }
                else if (user_agent_1.userAgentParser("Chrome/[.0-9]* (?!Mobile)", userAgent)) {
                    if (!result.device) {
                        result.device = this.createDeviceObject();
                    }
                    result.device.type = "tablet";
                }
            }
            /**
             * Some user agents simply contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices are tablets
             */
            if (!((_f = result.device) === null || _f === void 0 ? void 0 : _f.type) && this.hasAndroidTabletFragment(userAgent) || user_agent_1.userAgentParser("Opera Tablet", userAgent)) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "tablet";
            }
            /**
             * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices are smartphones
             */
            if (!((_g = result.device) === null || _g === void 0 ? void 0 : _g.type) && this.hasAndroidMobileFragment(userAgent)) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "smartphone";
            }
            /**
             * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published
             * too late, there were a bunch of tablets running with 2.x
             * With 4.0 the two trees were merged and it is for smartphones and tablets
             *
             * So were are expecting that all devices running Android < 2 are smartphones
             * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown
             */
            if (!((_h = result.device) === null || _h === void 0 ? void 0 : _h.type) && osName === "Android" && osVersion !== "") {
                if (version_compare_1.versionCompare(osVersion, "2.0") === -1) {
                    if (!result.device) {
                        result.device = this.createDeviceObject();
                    }
                    result.device.type = "smartphone";
                }
                else if (version_compare_1.versionCompare(osVersion, "3.0") >= 0 && version_compare_1.versionCompare(osVersion, "4.0") === -1) {
                    if (!result.device) {
                        result.device = this.createDeviceObject();
                    }
                    result.device.type = "tablet";
                }
            }
            /**
             * All detected feature phones running android are more likely smartphones
             */
            if (((_j = result.device) === null || _j === void 0 ? void 0 : _j.type) === "feature phone" && osFamily === "Android") {
                result.device.type = "smartphone";
            }
            /**
             * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx
             * Internet Explorer 10 introduces the "Touch" UA string token. If this token is present at the end of the
             * UA string, the computer has touch capability, and is running Windows 8 (or later).
             * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)
             *
             * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that
             * all Windows 8 touch devices are tablets.
             */
            if (!((_k = result.device) === null || _k === void 0 ? void 0 : _k.type)
                && this.isToucheEnabled(userAgent)
                && (osName === "Windows RT"
                    || (osName === "Windows"
                        && version_compare_1.versionCompare(osVersion, "8.0") >= 0))) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "tablet";
            }
            /**
             * All devices running Opera TV Store are assumed to be televisions
             */
            if (user_agent_1.userAgentParser("Opera TV Store", userAgent)) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "television";
            }
            /**
             * All devices running Tizen TV or SmartTV are assumed to be televisions
             */
            if (user_agent_1.userAgentParser("SmartTV|Tizen.+ TV .+$", userAgent)) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "television";
            }
            /**
             * Devices running Kylo or Espital TV Browsers are assumed to be televisions
             */
            if (!((_l = result.device) === null || _l === void 0 ? void 0 : _l.type) && ["Kylo", "Espial TV Browser"].includes(((_m = result.client) === null || _m === void 0 ? void 0 : _m.name) || "")) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "television";
            }
            /**
             * Set device type to desktop if string ua contains desktop
             */
            const hasDesktop = "desktop" !== ((_o = result.device) === null || _o === void 0 ? void 0 : _o.type)
                && null !== user_agent_1.userAgentParser("Desktop", userAgent)
                && this.hasDesktopFragment(userAgent);
            if (hasDesktop) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "desktop";
            }
            // set device type to desktop for all devices running a desktop os that were not detected as an other device type
            if (!((_p = result.device) === null || _p === void 0 ? void 0 : _p.type) && this.isDesktop(result, osFamily)) {
                if (!result.device) {
                    result.device = this.createDeviceObject();
                }
                result.device.type = "desktop";
            }
            return result;
        };
        this.hasAndroidMobileFragment = (userAgent) => {
            return user_agent_1.userAgentParser("Android( [\.0-9]+)?; Mobile;", userAgent);
        };
        this.hasAndroidTabletFragment = (userAgent) => {
            return user_agent_1.userAgentParser("Android( [\.0-9]+)?; Tablet;", userAgent);
        };
        this.hasDesktopFragment = (userAgent) => {
            return user_agent_1.userAgentParser("Desktop (x(?:32|64)|WOW64);", userAgent);
        };
        this.isDesktop = (result, osFamily) => {
            if (!result.os) {
                return false;
            }
            // Check for browsers available for mobile devices only
            if (this.usesMobileBrowser(result.client)) {
                return false;
            }
            return operating_system_1.default.getDesktopOsArray().includes(osFamily);
        };
        this.usesMobileBrowser = (client) => {
            var _a, _b;
            if (!client)
                return false;
            return ((_a = client) === null || _a === void 0 ? void 0 : _a.type) === "browser" && browser_1.default.isMobileOnlyBrowser((_b = client) === null || _b === void 0 ? void 0 : _b.name);
        };
        this.isToucheEnabled = (userAgent) => {
            return user_agent_1.userAgentParser("Touch", userAgent);
        };
        this.createDeviceObject = () => ({
            type: "",
            brand: "",
            model: ""
        });
        this.options = Object.assign(Object.assign({}, this.options), options);
        this.clientParser = new client_1.default(this.options);
        this.deviceParser = new device_1.default();
        this.operatingSystemParser = new operating_system_1.default(this.options);
        this.vendorFragmentParser = new vendor_fragment_1.default();
        this.botParser = new BotParser();
    }
}
var dist = DeviceDetector;

var DeviceDetector$1 = /*@__PURE__*/getDefaultExportFromCjs(dist);

/**
 * @fileoverview This file contains the API to handle audio recording.
 * Originally from 'https://ralzohairi.medium.com/audio-recording-in-javascript-96eed45b75ee'
 */
// audio-recording.js ---------------
let elapsedTime = '00:00';
/** Stores the actual start time when an audio recording begins to take place to ensure elapsed time start time is accurate*/
let audioRecordStartTime;
/** Stores the maximum recording time in hours to stop recording once maximum recording hour has been reached */
const maximumRecordingTimeInHours = 1;
/** Stores the reference of the setInterval function that controls the timer in audio recording*/
let elapsedTimeTimer;
/** Starts the audio recording*/
function startAudioRecording(onRecordingStart, onUnsupportedBrowser, setElapsedTime) {
  //start recording using the audio recording API
  audioRecorder.start().then(() => {
    //on success show the controls to stop and cancel the recording
    if (onRecordingStart) {
      onRecordingStart(true);
    }
    //store the recording start time to display the elapsed time according to it
    audioRecordStartTime = new Date();
    //Handle the displaying of the elapsed recording time
    handleElapsedRecordingTime(setElapsedTime);
  }).catch(error => {
    //on error
    //No Browser Support Error
    if (error.message.includes('mediaDevices API or getUserMedia method is not supported in this browser.')) {
      if (onUnsupportedBrowser) {
        onUnsupportedBrowser(true);
      }
    }
    console.log(error);
    //Error handling structure
    switch (error.name) {
      case 'AbortError':
        //error from navigator.mediaDevices.getUserMedia
        // eslint-disable-next-line no-console
        console.log('An AbortError has occurred.');
        break;
      case 'NotAllowedError':
        //error from navigator.mediaDevices.getUserMedia
        // eslint-disable-next-line no-console
        console.log('A NotAllowedError has occurred. User might have denied permission.');
        break;
      case 'NotFoundError':
        //error from navigator.mediaDevices.getUserMedia
        // eslint-disable-next-line no-console
        console.log('A NotFoundError has occurred.');
        break;
      case 'NotReadableError':
        //error from navigator.mediaDevices.getUserMedia
        // eslint-disable-next-line no-console
        console.log('A NotReadableError has occurred.');
        break;
      case 'SecurityError':
        //error from navigator.mediaDevices.getUserMedia or from the MediaRecorder.start
        // eslint-disable-next-line no-console
        console.log('A SecurityError has occurred.');
        break;
      case 'TypeError':
        //error from navigator.mediaDevices.getUserMedia
        // eslint-disable-next-line no-console
        console.log('A TypeError has occurred.');
        break;
      case 'InvalidStateError':
        //error from the MediaRecorder.start
        // eslint-disable-next-line no-console
        console.log('An InvalidStateError has occurred.');
        break;
      case 'UnknownError':
        //error from the MediaRecorder.start
        // eslint-disable-next-line no-console
        console.log('An UnknownError has occurred.');
        break;
      default:
        // eslint-disable-next-line no-console
        console.log('An error occurred with the error name ' + error.name);
    }
  });
}
/** Stop the currently started audio recording & sends it
 */
function stopAudioRecording(addRecordingToPreviews) {
  //stop the recording using the audio recording API
  audioRecorder.stop().then(audioBlob => {
    //stop interval that handles both time elapsed and the red dot
    clearInterval(elapsedTimeTimer);
    if (addRecordingToPreviews) {
      addRecordingToPreviews(audioBlob);
    }
  }).catch(error => {
    //Error handling structure
    switch (error.name) {
      case 'InvalidStateError':
        //error from the MediaRecorder.stop
        // eslint-disable-next-line no-console
        console.log('An InvalidStateError has occurred.');
        break;
      default:
        // eslint-disable-next-line no-console
        console.log('An error occurred with the error name ' + error.name);
    }
  });
}
/** Cancel the currently started audio recording */
function cancelAudioRecording() {
  //cancel the recording using the audio recording API
  audioRecorder.cancel();
  //stop interval that handles both time elapsed and the red dot
  clearInterval(elapsedTimeTimer);
}
/** Computes the elapsed recording time since the moment the function is called in the format h:m:s*/
function handleElapsedRecordingTime(setElapsedTime) {
  //display initial time when recording begins
  elapsedTime = '00:00';
  // set elapsed time so it can be displayed in the component
  setElapsedTime(elapsedTime);
  //create an interval that compute & displays elapsed time, as well as, animate red dot - every second
  elapsedTimeTimer = setInterval(() => {
    //compute the elapsed time every second
    elapsedTime = computeElapsedTime(audioRecordStartTime); //pass the actual record start time
    // set elapsed time so it can be displayed in the component
    setElapsedTime(elapsedTime);
    //display the elapsed time
    displayElapsedTimeDuringAudioRecording();
  }, 1000); //every second
}
/** Display elapsed time during audio recording
 */
function displayElapsedTimeDuringAudioRecording() {
  // Stop the recording when the max number of hours is reached
  if (elapsedTimeReachedMaximumNumberOfHours()) {
    stopAudioRecording(null);
  }
}
/**
 * @returns {Boolean} whether the elapsed time reached the maximum number of hours or not
 */
function elapsedTimeReachedMaximumNumberOfHours() {
  //Split the elapsed time by the symbol that separates the hours, minutes and seconds :
  const elapsedTimeSplit = elapsedTime.split(':');
  //Turn the maximum recording time in hours to a string and pad it with zero if less than 10
  const maximumRecordingTimeInHoursAsString = '0' + maximumRecordingTimeInHours ;
  //if the elapsed time reach hours and also reach the maximum recording time in hours return true
  return elapsedTimeSplit.length === 3 && elapsedTimeSplit[0] === maximumRecordingTimeInHoursAsString;
}
function padLeft(num, size) {
  return `${num}`.padStart(size, '0');
}
/** Computes the elapsedTime since the moment the function is called in the format mm:ss or hh:mm:ss
 * @param {String} startTime - start time to compute the elapsed time since
 * @returns {String} elapsed time in mm:ss format or hh:mm:ss format, if elapsed hours are 0.
 */
function computeElapsedTime(startTime) {
  //record end time
  const endTime = new Date();
  //time difference in ms
  let timeDiff = endTime.getTime() - startTime.getTime();
  //convert time difference from ms to seconds
  timeDiff = timeDiff / 1000;
  //extract integer seconds that don't form a minute using %
  const seconds = Math.floor(timeDiff % 60); //ignoring incomplete seconds (floor)
  //convert time difference from seconds to minutes using %
  timeDiff = Math.floor(timeDiff / 60);
  //extract integer minutes that don't form an hour using %
  const minutes = timeDiff % 60; //no need to floor possible incomplete minutes, because they've been handled as seconds
  //convert time difference from minutes to hours
  timeDiff = Math.floor(timeDiff / 60);
  //extract integer hours that don't form a day using %
  const hours = timeDiff % 24; //no need to floor possible incomplete hours, because they've been handled as seconds
  //convert time difference from hours to days
  timeDiff = Math.floor(timeDiff / 24);
  // the rest of timeDiff is number of days
  const days = timeDiff; //add days to hours
  const totalHours = hours + days * 24;
  if (totalHours === 0) {
    return padLeft(minutes, 2) + ':' + padLeft(seconds, 2);
  } else {
    return padLeft(totalHours, 2) + ':' + padLeft(minutes, 2) + ':' + padLeft(seconds, 2);
  }
}
const audioRecorder = {
  /** Stores the recorded audio as Blob objects of audio data as the recording continues*/
  audioBlobs: [] /*of type Blob[]*/,

  /** Stores the reference of the MediaRecorder instance that handles the MediaStream when recording starts*/
  mediaRecorder: null /*of type MediaRecorder*/,

  /** Stores the reference to the stream currently capturing the audio*/
  streamBeingCaptured: null /*of type MediaStream*/,

  /** Start recording the audio
   * @returns {Promise} - returns a promise that resolves if audio recording successfully started
   */
  start: function () {
    //Feature Detection
    if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {
      //Feature is not supported in browser
      //return a custom error
      return Promise.reject(new Error('mediaDevices API or getUserMedia method is not supported in this browser.'));
    } else {
      // Feature is supported in browser
      const deviceDetector = new DeviceDetector$1();
      const userAgent = navigator.userAgent;
      const device = deviceDetector.parse(userAgent);
      const isSafari = device.client?.name === 'Mobile Safari';
      //create an audio stream
      return navigator.mediaDevices.getUserMedia({
        audio: true
      } /*of type MediaStreamConstraints*/)
      //returns a promise that resolves to the audio stream
      .then(stream => {
        //save the reference of the stream to be able to stop it when necessary
        audioRecorder.streamBeingCaptured = stream;
        //create a media recorder instance by passing that stream into the MediaRecorder constructor
        audioRecorder.mediaRecorder = new MediaRecorder(stream);
        /*the MediaRecorder interface of the MediaStream Recording API provides functionality to easily record media*/
        //clear previously saved audio Blobs, if any
        audioRecorder.audioBlobs = [];
        //add a dataavailable event listener in order to store the audio data Blobs when recording
        audioRecorder.mediaRecorder.addEventListener('dataavailable', event => {
          //store audio Blob object
          audioRecorder.audioBlobs.push(event.data);
        });
        //start the recording by calling the start method on the media recorder
        if (isSafari) {
          // https://community.openai.com/t/whisper-problem-with-audio-mp4-blobs-from-safari/322252
          // https://community.openai.com/t/whisper-api-cannot-read-files-correctly/93420/46
          audioRecorder.mediaRecorder.start(1000);
        } else {
          audioRecorder.mediaRecorder.start();
        }
      });
      /* errors are not handled in the API because if its handled and the promise is chained, the .then after the catch will be executed*/
    }
  },

  /** Stop the started audio recording
   * @returns {Promise} - returns a promise that resolves to the audio as a blob file
   */
  stop: function () {
    //return a promise that would return the blob or URL of the recording
    return new Promise(resolve => {
      //save audio type to pass to set the Blob type
      const mimeType = audioRecorder.mediaRecorder?.mimeType;
      //listen to the stop event in order to create & return a single Blob object
      audioRecorder.mediaRecorder?.addEventListener('stop', () => {
        //create a single blob object, as we might have gathered a few Blob objects that needs to be joined as one
        const audioBlob = new Blob(audioRecorder.audioBlobs, {
          type: mimeType
        });
        //resolve promise with the single audio blob representing the recorded audio
        resolve(audioBlob);
      });
      audioRecorder.cancel();
    });
  },
  /** Cancel audio recording*/
  cancel: function () {
    //stop the recording feature
    audioRecorder.mediaRecorder?.stop();
    //stop all the tracks on the active stream in order to stop the stream
    audioRecorder.stopStream();
    //reset API properties for next recording
    audioRecorder.resetRecordingProperties();
  },
  /** Stop all the tracks on the active stream in order to stop the stream and remove
   * the red flashing dot showing in the tab
   */
  stopStream: function () {
    //stopping the capturing request by stopping all the tracks on the active stream
    audioRecorder.streamBeingCaptured?.getTracks() //get all tracks from the stream
    .forEach(track => track.stop()); //stop each one
  },

  /** Reset all the recording properties including the media recorder and stream being captured*/
  resetRecordingProperties: function () {
    audioRecorder.mediaRecorder = null;
    audioRecorder.streamBeingCaptured = null;
    /*No need to remove event listeners attached to mediaRecorder as
    If a DOM element which is removed is reference-free (no references pointing to it), the element itself is picked
    up by the garbage collector as well as any event handlers/listeners associated with it.
    getEventListeners(audioRecorder.mediaRecorder) will return an empty array of events.*/
  }
};

var util;
(function (util) {
    util.assertEqual = (val) => val;
    function assertIs(_arg) { }
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second, // second overwrites first
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};

const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};

const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                }
                else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                }
                else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                }
                else {
                    util.assertNever(issue.validation);
                }
            }
            else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            }
            else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
                message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return { message };
};

let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}

const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage,
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap, // then global default map
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            syncPairs.push({
                key: await pair.key,
                value: await pair.value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return INVALID;
            if (value.status === "aborted")
                return INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (key.value !== "__proto__" &&
                (typeof value.value !== "undefined" || pair.alwaysSet)) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
const INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
                this._cachedPath.push(...this._path, ...this._key);
            }
            else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result) => {
    if (isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error() {
                if (this._error)
                    return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            },
        };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
        }
        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this, this._def);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def),
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch,
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
// const uuidRegex =
//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
// const emailRegex =
//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// const emailRegex =
//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
// const emailRegex =
//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
// const emailRegex =
//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
// Adapted from https://stackoverflow.com/a/3143231
const datetimeRegex = (args) => {
    if (args.precision) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
        }
    }
    else if (args.precision === 0) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
        }
    }
    else {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
        }
    }
};
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            }
            //
            );
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    else if (tooSmall) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "emoji") {
                if (!emojiRegex) {
                    emojiRegex = new RegExp(_emojiRegex, "u");
                }
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { includes: check.value, position: check.position },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            }
            else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            }
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { startsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { endsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message),
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
        var _a;
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                message: options,
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message),
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message),
        });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */
    nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }],
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }],
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params) => {
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message),
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message),
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message),
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" ||
            (ch.kind === "multipleOf" && util.isInteger(ch.value)));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "finite" ||
                ch.kind === "int" ||
                ch.kind === "multipleOf") {
                return true;
            }
            else if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
            else if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime()),
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params) => {
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params) => {
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType,
        });
        return INVALID;
    }
}
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: (tooSmall ? def.exactLength.value : undefined),
                    maximum: (tooBig ? def.exactLength.value : undefined),
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message,
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return ParseStatus.mergeArray(status, result);
            });
        }
        const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil.toString(message) },
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element),
        });
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever &&
            this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: () => ({
                ...this._def.shape(),
                ...augmentation,
            }),
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
                ...this._def.shape(),
                ...merging._def.shape(),
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    /**
     * @deprecated
     */
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            }
            else {
                newShape[key] = fieldSchema.optional();
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            }
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while (newField instanceof ZodOptional) {
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    }
    else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    }
    else if (type instanceof ZodLiteral) {
        return [type.value];
    }
    else if (type instanceof ZodEnum) {
        return type.options;
    }
    else if (type instanceof ZodNativeEnum) {
        // eslint-disable-next-line ban/ban
        return Object.keys(type.enum);
    }
    else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    }
    else if (type instanceof ZodUndefined) {
        return [undefined];
    }
    else if (type instanceof ZodNull) {
        return [null];
    }
    else {
        return null;
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [discriminator],
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params),
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types,
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            status.dirty();
        }
        const items = [...ctx.data]
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(async function (...args) {
                const error = new ZodError([]);
                const parsedArgs = await me._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(function (...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = Reflect.apply(fn, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: (args
                ? args
                : ZodTuple.create([]).rest(ZodUnknown.create())),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params),
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values) {
        return ZodEnum.create(values);
    }
    exclude(values) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string &&
            ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise &&
            ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
            ? this._def.schema.sourceType()
            : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg) => {
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.issues.length) {
                return {
                    status: "dirty",
                    value: ctx.data,
                };
            }
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed) => {
                    return this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                });
            }
            else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc
            // effect: RefinementEffect<any>
            ) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (!isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!isValid(base))
                        return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params) => {
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function"
            ? params.default
            : () => params.default,
        ...processCreateParams(params),
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: [],
            },
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx,
            },
        });
        if (isAsync(result)) {
            return result.then((result) => {
                return {
                    status: "valid",
                    value: result.status === "valid"
                        ? result.value
                        : this._def.catchValue({
                            get error() {
                                return new ZodError(newCtx.common.issues);
                            },
                            input: newCtx.data,
                        }),
                };
            });
        }
        else {
            return {
                status: "valid",
                value: result.status === "valid"
                    ? result.value
                    : this._def.catchValue({
                        get error() {
                            return new ZodError(newCtx.common.issues);
                        },
                        input: newCtx.data,
                    }),
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params) => {
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async () => {
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inResult.status === "aborted")
                    return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                }
                else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            };
            return handleAsync();
        }
        else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
            if (inResult.status === "aborted")
                return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value,
                };
            }
            else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline,
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        if (isValid(result)) {
            result.value = Object.freeze(result.value);
        }
        return result;
    }
}
ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params),
    });
};
const custom = (check, params = {}, 
/**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */
fatal) => {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            var _a, _b;
            if (!check(data)) {
                const p = typeof params === "function"
                    ? params(data)
                    : typeof params === "string"
                        ? { message: params }
                        : params;
                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
            }
        });
    return ZodAny.create();
};
const late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (
// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
    string: ((arg) => ZodString.create({ ...arg, coerce: true })),
    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
    boolean: ((arg) => ZodBoolean.create({
        ...arg,
        coerce: true,
    })),
    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
};
const NEVER = INVALID;

var z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () { return util; },
    get objectUtil () { return objectUtil; },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    ZodReadonly: ZodReadonly,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});

const _tmpl$2$5 = /*#__PURE__*/template(`<span class="flex items-center gap-2">Saving...`),
  _tmpl$3$4 = /*#__PURE__*/template(`<span>Submit`);
const SaveLeadFallback = () => {
  return (() => {
    const _el$2 = _tmpl$2$5(),
      _el$3 = _el$2.firstChild;
    insert(_el$2, createComponent(Spinner$3, {
      "class": "text-white"
    }), _el$3);
    return _el$2;
  })();
};
const SaveLeadButton = props => {
  return createComponent(SendButton, mergeProps({
    get sendButtonColor() {
      return props.buttonColor;
    },
    type: "submit",
    get isDisabled() {
      return props.isDisabled || props.isLoading;
    },
    "class": "m-0 h-14 flex items-center justify-center"
  }, props, {
    get children() {
      return createComponent(Show, {
        get when() {
          return !props.isLoading;
        },
        get fallback() {
          return createComponent(SaveLeadFallback, {});
        },
        get children() {
          const _el$4 = _tmpl$3$4();
          _el$4.style.setProperty("font-family", "Poppins, sans-serif");
          return _el$4;
        }
      });
    }
  }));
};

const _tmpl$$7 = /*#__PURE__*/template(`<div class="flex flex-row justify-start mb-2 items-start host-container"><div class="px-4 py-2 ml-2 max-w-full chatbot-host-bubble prose" data-testid="host-bubble">`),
  _tmpl$2$4 = /*#__PURE__*/template(`<div class="flex flex-col gap-2"><span>`),
  _tmpl$3$3 = /*#__PURE__*/template(`<form class="flex flex-col gap-2"><span></span><div class="flex flex-col gap-2 w-full"><div class="flex items-center justify-end gap-1">`),
  _tmpl$4$3 = /*#__PURE__*/template(`<div class="w-full flex flex-col items-start justify-start gap-1"><div class="w-full flex items-center justify-between chatbot-input border border-[#eeeeee]"><input class="focus:outline-none bg-transparent px-4 py-4 flex-1 w-full h-full min-h-[56px] max-h-[128px] text-input disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 " placeholder="Name" name="name">`),
  _tmpl$5$2 = /*#__PURE__*/template(`<span class="text-sm text-red-500">`),
  _tmpl$6$1 = /*#__PURE__*/template(`<div class="w-full flex flex-col items-start justify-start gap-1"><div class="w-full flex items-center justify-between chatbot-input border border-[#eeeeee]"><input class="focus:outline-none bg-transparent px-4 py-4 flex-1 w-full h-full min-h-[56px] max-h-[128px] text-input disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 " type="email" placeholder="Email Address" name="email">`),
  _tmpl$7$1 = /*#__PURE__*/template(`<div class="w-full flex flex-col items-start justify-start gap-1"><div class="w-full flex items-center justify-between chatbot-input border border-[#eeeeee]"><input class="focus:outline-none bg-transparent px-4 py-4 flex-1 w-full h-full min-h-[56px] max-h-[128px] text-input disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 " type="number" placeholder="Phone Number" name="phone">`);
const defaultBackgroundColor$2 = '#f7f8ff';
const defaultTextColor$2 = '#303235';
const defaultFontSize = 16;
const phoneRegex = new RegExp(/^([+]?[\s0-9]+)?(\d{3}|[(]?[0-9]+[)])?([-]?[\s]?[0-9])+$/);
const LeadCaptureSchema = z.object({
  name: z.string().min(2, 'Name is too short').optional(),
  email: z.string().email('Please provide a valid email').optional(),
  phone: z.string().min(5, 'Phone number is too short').regex(phoneRegex, 'Invalid Number!').optional()
});
const LeadCaptureBubble = props => {
  const [leadName, setLeadName] = createSignal('');
  const [leadEmail, setLeadEmail] = createSignal('');
  const [leadPhone, setLeadPhone] = createSignal('');
  const [isLeadSaving, setIsLeadSaving] = createSignal(false);
  const [leadFormError, setLeadFormError] = createSignal();
  const handleLeadCaptureSubmit = async e => {
    e.preventDefault();
    setIsLeadSaving(true);
    const data = Object.fromEntries(new FormData(e.currentTarget));
    const res = LeadCaptureSchema.safeParse(data);
    if (res.success) {
      const body = {
        chatflowid: props.chatflowid,
        chatId: props.chatId,
        name: leadName(),
        email: leadEmail(),
        phone: leadPhone()
      };
      const result = await addLeadQuery({
        apiHost: props.apiHost,
        body
      });
      if (result.data) {
        setLocalStorageChatflow(props.chatflowid, props.chatId, {
          lead: {
            name: leadName(),
            email: leadEmail(),
            phone: leadPhone()
          }
        });
        props.setIsLeadSaved(true);
        props.setLeadEmail(leadEmail());
      }
    } else {
      const error = res.error.flatten();
      setLeadFormError(error.fieldErrors);
    }
    setIsLeadSaving(false);
  };
  return (() => {
    const _el$ = _tmpl$$7(),
      _el$2 = _el$.firstChild;
    _el$.style.setProperty("margin-right", "50px");
    insert(_el$, createComponent(Show, {
      get when() {
        return props.showAvatar;
      },
      get children() {
        return createComponent(Avatar, {
          get initialAvatarSrc() {
            return props.avatarSrc;
          }
        });
      }
    }), _el$2);
    _el$2.style.setProperty("border-radius", "6px");
    insert(_el$2, (() => {
      const _c$ = createMemo(() => !!(props.isLeadSaved || getLocalStorageChatflow(props.chatflowid)?.lead));
      return () => _c$() ? (() => {
        const _el$3 = _tmpl$2$4(),
          _el$4 = _el$3.firstChild;
        _el$4.style.setProperty("white-space", "pre-line");
        insert(_el$4, () => props.leadsConfig?.successMessage || 'Thank you for submitting your contact information.');
        return _el$3;
      })() : (() => {
        const _el$5 = _tmpl$3$3(),
          _el$6 = _el$5.firstChild,
          _el$7 = _el$6.nextSibling,
          _el$8 = _el$7.firstChild;
        _el$5.addEventListener("submit", handleLeadCaptureSubmit);
        _el$6.style.setProperty("white-space", "pre-line");
        insert(_el$6, () => props.leadsConfig?.title || 'Let us know where we can reach you:');
        insert(_el$7, (() => {
          const _c$2 = createMemo(() => !!props.leadsConfig?.name);
          return () => _c$2() && (() => {
            const _el$9 = _tmpl$4$3(),
              _el$10 = _el$9.firstChild,
              _el$11 = _el$10.firstChild;
            _el$11.addEventListener("change", e => setLeadName(e.currentTarget.value));
            _el$11.style.setProperty("width", "100%");
            insert(_el$9, (() => {
              const _c$5 = createMemo(() => !!(leadFormError() && leadFormError()?.name));
              return () => _c$5() && (() => {
                const _el$12 = _tmpl$5$2();
                insert(_el$12, () => leadFormError()?.name[0]);
                return _el$12;
              })();
            })(), null);
            createRenderEffect(() => _el$11.value = leadName());
            return _el$9;
          })();
        })(), _el$8);
        insert(_el$7, (() => {
          const _c$3 = createMemo(() => !!props.leadsConfig?.email);
          return () => _c$3() && (() => {
            const _el$13 = _tmpl$6$1(),
              _el$14 = _el$13.firstChild,
              _el$15 = _el$14.firstChild;
            _el$15.addEventListener("change", e => setLeadEmail(e.currentTarget.value));
            _el$15.style.setProperty("width", "100%");
            insert(_el$13, (() => {
              const _c$6 = createMemo(() => !!(leadFormError() && leadFormError()?.email));
              return () => _c$6() && (() => {
                const _el$16 = _tmpl$5$2();
                insert(_el$16, () => leadFormError()?.email[0]);
                return _el$16;
              })();
            })(), null);
            createRenderEffect(() => _el$15.value = leadEmail());
            return _el$13;
          })();
        })(), _el$8);
        insert(_el$7, (() => {
          const _c$4 = createMemo(() => !!props.leadsConfig?.phone);
          return () => _c$4() && (() => {
            const _el$17 = _tmpl$7$1(),
              _el$18 = _el$17.firstChild,
              _el$19 = _el$18.firstChild;
            _el$19.addEventListener("change", e => setLeadPhone(e.target.value));
            _el$19.style.setProperty("width", "100%");
            insert(_el$17, (() => {
              const _c$7 = createMemo(() => !!(leadFormError() && leadFormError()?.phone));
              return () => _c$7() && (() => {
                const _el$20 = _tmpl$5$2();
                insert(_el$20, () => leadFormError()?.phone[0]);
                return _el$20;
              })();
            })(), null);
            createRenderEffect(() => _el$19.value = leadPhone());
            return _el$17;
          })();
        })(), _el$8);
        insert(_el$8, createComponent(SaveLeadButton, {
          get buttonColor() {
            return props.sendButtonColor;
          },
          get isLoading() {
            return isLeadSaving();
          }
        }));
        return _el$5;
      })();
    })());
    createRenderEffect(_p$ => {
      const _v$ = props.backgroundColor ?? defaultBackgroundColor$2,
        _v$2 = props.textColor ?? defaultTextColor$2,
        _v$3 = props.fontSize ? `${props.fontSize}px` : `${defaultFontSize}px`;
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$2.style.setProperty("background-color", _v$) : _el$2.style.removeProperty("background-color"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$2.style.setProperty("color", _v$2) : _el$2.style.removeProperty("color"));
      _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$2.style.setProperty("font-size", _v$3) : _el$2.style.removeProperty("font-size"));
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined
    });
    return _el$;
  })();
};

const _tmpl$$6 = /*#__PURE__*/template(`<div data-modal-target="defaultModal" data-modal-toggle="defaultModal" class="flex justify-start items-start animate-fade-in gap-1 host-container hover:brightness-90 active:brightness-75"><span class="px-2 py-1 whitespace-pre-wrap max-w-full chatbot-host-bubble border" data-testid="host-bubble">`);
const FollowUpPromptBubble = props => (() => {
  const _el$ = _tmpl$$6(),
    _el$2 = _el$.firstChild;
  _el$.$$click = () => props.onPromptClick?.();
  _el$2.style.setProperty("width", "max-content");
  _el$2.style.setProperty("border-radius", "15px");
  _el$2.style.setProperty("cursor", "pointer");
  insert(_el$2, () => props.prompt);
  createRenderEffect(() => (props.starterPromptFontSize ? `${props.starterPromptFontSize}px` : '15px') != null ? _el$2.style.setProperty("font-size", props.starterPromptFontSize ? `${props.starterPromptFontSize}px` : '15px') : _el$2.style.removeProperty("font-size"));
  return _el$;
})();
delegateEvents(["click"]);

async function getBytes(stream, onChunk) {
    const reader = stream.getReader();
    let result;
    while (!(result = await reader.read()).done) {
        onChunk(result.value);
    }
}
function getLines(onLine) {
    let buffer;
    let position;
    let fieldLength;
    let discardTrailingNewline = false;
    return function onChunk(arr) {
        if (buffer === undefined) {
            buffer = arr;
            position = 0;
            fieldLength = -1;
        }
        else {
            buffer = concat(buffer, arr);
        }
        const bufLength = buffer.length;
        let lineStart = 0;
        while (position < bufLength) {
            if (discardTrailingNewline) {
                if (buffer[position] === 10) {
                    lineStart = ++position;
                }
                discardTrailingNewline = false;
            }
            let lineEnd = -1;
            for (; position < bufLength && lineEnd === -1; ++position) {
                switch (buffer[position]) {
                    case 58:
                        if (fieldLength === -1) {
                            fieldLength = position - lineStart;
                        }
                        break;
                    case 13:
                        discardTrailingNewline = true;
                    case 10:
                        lineEnd = position;
                        break;
                }
            }
            if (lineEnd === -1) {
                break;
            }
            onLine(buffer.subarray(lineStart, lineEnd), fieldLength);
            lineStart = position;
            fieldLength = -1;
        }
        if (lineStart === bufLength) {
            buffer = undefined;
        }
        else if (lineStart !== 0) {
            buffer = buffer.subarray(lineStart);
            position -= lineStart;
        }
    };
}
function getMessages(onId, onRetry, onMessage) {
    let message = newMessage();
    const decoder = new TextDecoder();
    return function onLine(line, fieldLength) {
        if (line.length === 0) {
            onMessage === null || onMessage === void 0 ? void 0 : onMessage(message);
            message = newMessage();
        }
        else if (fieldLength > 0) {
            const field = decoder.decode(line.subarray(0, fieldLength));
            const valueOffset = fieldLength + (line[fieldLength + 1] === 32 ? 2 : 1);
            const value = decoder.decode(line.subarray(valueOffset));
            switch (field) {
                case 'data':
                    message.data = message.data
                        ? message.data + '\n' + value
                        : value;
                    break;
                case 'event':
                    message.event = value;
                    break;
                case 'id':
                    onId(message.id = value);
                    break;
                case 'retry':
                    const retry = parseInt(value, 10);
                    if (!isNaN(retry)) {
                        onRetry(message.retry = retry);
                    }
                    break;
            }
        }
    };
}
function concat(a, b) {
    const res = new Uint8Array(a.length + b.length);
    res.set(a);
    res.set(b, a.length);
    return res;
}
function newMessage() {
    return {
        data: '',
        event: '',
        id: '',
        retry: undefined,
    };
}

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
const EventStreamContentType = 'text/event-stream';
const DefaultRetryInterval = 1000;
const LastEventId = 'last-event-id';
function fetchEventSource(input, _a) {
    var { signal: inputSignal, headers: inputHeaders, onopen: inputOnOpen, onmessage, onclose, onerror, openWhenHidden, fetch: inputFetch } = _a, rest = __rest(_a, ["signal", "headers", "onopen", "onmessage", "onclose", "onerror", "openWhenHidden", "fetch"]);
    return new Promise((resolve, reject) => {
        const headers = Object.assign({}, inputHeaders);
        if (!headers.accept) {
            headers.accept = EventStreamContentType;
        }
        let curRequestController;
        function onVisibilityChange() {
            curRequestController.abort();
            if (!document.hidden) {
                create();
            }
        }
        if (!openWhenHidden) {
            document.addEventListener('visibilitychange', onVisibilityChange);
        }
        let retryInterval = DefaultRetryInterval;
        let retryTimer = 0;
        function dispose() {
            document.removeEventListener('visibilitychange', onVisibilityChange);
            window.clearTimeout(retryTimer);
            curRequestController.abort();
        }
        inputSignal === null || inputSignal === void 0 ? void 0 : inputSignal.addEventListener('abort', () => {
            dispose();
            resolve();
        });
        const fetch = inputFetch !== null && inputFetch !== void 0 ? inputFetch : window.fetch;
        const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;
        async function create() {
            var _a;
            curRequestController = new AbortController();
            try {
                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController.signal }));
                await onopen(response);
                await getBytes(response.body, getLines(getMessages(id => {
                    if (id) {
                        headers[LastEventId] = id;
                    }
                    else {
                        delete headers[LastEventId];
                    }
                }, retry => {
                    retryInterval = retry;
                }, onmessage)));
                onclose === null || onclose === void 0 ? void 0 : onclose();
                dispose();
                resolve();
            }
            catch (err) {
                if (!curRequestController.signal.aborted) {
                    try {
                        const interval = (_a = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a !== void 0 ? _a : retryInterval;
                        window.clearTimeout(retryTimer);
                        retryTimer = window.setTimeout(create, interval);
                    }
                    catch (innerErr) {
                        dispose();
                        reject(innerErr);
                    }
                }
            }
        }
        create();
    });
}
function defaultOnOpen(response) {
    const contentType = response.headers.get('content-type');
    if (!(contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(EventStreamContentType))) {
        throw new Error(`Expected content-type to be ${EventStreamContentType}, Actual: ${contentType}`);
    }
}

let USER_AGENT;
if (typeof navigator === 'undefined' || !navigator.userAgent?.startsWith?.('Mozilla/5.0 ')) {
    const NAME = 'oauth4webapi';
    const VERSION = 'v2.17.0';
    USER_AGENT = `${NAME}/${VERSION}`;
}
function looseInstanceOf(input, expected) {
    if (input == null) {
        return false;
    }
    try {
        return (input instanceof expected ||
            Object.getPrototypeOf(input)[Symbol.toStringTag] === expected.prototype[Symbol.toStringTag]);
    }
    catch {
        return false;
    }
}
const clockSkew = Symbol();
const clockTolerance = Symbol();
const customFetch = Symbol();
const modifyAssertion = Symbol();
const jweDecrypt = Symbol();
const useMtlsAlias = Symbol();
const encoder = new TextEncoder();
const decoder = new TextDecoder();
function buf(input) {
    if (typeof input === 'string') {
        return encoder.encode(input);
    }
    return decoder.decode(input);
}
const CHUNK_SIZE = 0x8000;
function encodeBase64Url(input) {
    if (input instanceof ArrayBuffer) {
        input = new Uint8Array(input);
    }
    const arr = [];
    for (let i = 0; i < input.byteLength; i += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, input.subarray(i, i + CHUNK_SIZE)));
    }
    return btoa(arr.join('')).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}
function decodeBase64Url(input) {
    try {
        const binary = atob(input.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, ''));
        const bytes = new Uint8Array(binary.length);
        for (let i = 0; i < binary.length; i++) {
            bytes[i] = binary.charCodeAt(i);
        }
        return bytes;
    }
    catch (cause) {
        throw new OPE('The input to be decoded is not correctly encoded.', { cause });
    }
}
function b64u(input) {
    if (typeof input === 'string') {
        return decodeBase64Url(input);
    }
    return encodeBase64Url(input);
}
class LRU {
    constructor(maxSize) {
        this.cache = new Map();
        this._cache = new Map();
        this.maxSize = maxSize;
    }
    get(key) {
        let v = this.cache.get(key);
        if (v) {
            return v;
        }
        if ((v = this._cache.get(key))) {
            this.update(key, v);
            return v;
        }
        return undefined;
    }
    has(key) {
        return this.cache.has(key) || this._cache.has(key);
    }
    set(key, value) {
        if (this.cache.has(key)) {
            this.cache.set(key, value);
        }
        else {
            this.update(key, value);
        }
        return this;
    }
    delete(key) {
        if (this.cache.has(key)) {
            return this.cache.delete(key);
        }
        if (this._cache.has(key)) {
            return this._cache.delete(key);
        }
        return false;
    }
    update(key, value) {
        this.cache.set(key, value);
        if (this.cache.size >= this.maxSize) {
            this._cache = this.cache;
            this.cache = new Map();
        }
    }
}
class UnsupportedOperationError extends Error {
    constructor(message) {
        super(message ?? 'operation not supported');
        this.name = this.constructor.name;
        Error.captureStackTrace?.(this, this.constructor);
    }
}
class OperationProcessingError extends Error {
    constructor(message, options) {
        super(message, options);
        this.name = this.constructor.name;
        Error.captureStackTrace?.(this, this.constructor);
    }
}
const OPE = OperationProcessingError;
const dpopNonces = new LRU(100);
function isCryptoKey(key) {
    return key instanceof CryptoKey;
}
function isPrivateKey(key) {
    return isCryptoKey(key) && key.type === 'private';
}
function isPublicKey(key) {
    return isCryptoKey(key) && key.type === 'public';
}
function processDpopNonce(response) {
    try {
        const nonce = response.headers.get('dpop-nonce');
        if (nonce) {
            dpopNonces.set(new URL(response.url).origin, nonce);
        }
    }
    catch { }
    return response;
}
function isJsonObject(input) {
    if (input === null || typeof input !== 'object' || Array.isArray(input)) {
        return false;
    }
    return true;
}
function prepareHeaders(input) {
    if (looseInstanceOf(input, Headers)) {
        input = Object.fromEntries(input.entries());
    }
    const headers = new Headers(input);
    if (USER_AGENT && !headers.has('user-agent')) {
        headers.set('user-agent', USER_AGENT);
    }
    if (headers.has('authorization')) {
        throw new TypeError('"options.headers" must not include the "authorization" header name');
    }
    if (headers.has('dpop')) {
        throw new TypeError('"options.headers" must not include the "dpop" header name');
    }
    return headers;
}
function signal(value) {
    if (typeof value === 'function') {
        value = value();
    }
    if (!(value instanceof AbortSignal)) {
        throw new TypeError('"options.signal" must return or be an instance of AbortSignal');
    }
    return value;
}
async function discoveryRequest(issuerIdentifier, options) {
    if (!(issuerIdentifier instanceof URL)) {
        throw new TypeError('"issuerIdentifier" must be an instance of URL');
    }
    if (issuerIdentifier.protocol !== 'https:' && issuerIdentifier.protocol !== 'http:') {
        throw new TypeError('"issuer.protocol" must be "https:" or "http:"');
    }
    const url = new URL(issuerIdentifier.href);
    switch (options?.algorithm) {
        case undefined:
        case 'oidc':
            url.pathname = `${url.pathname}/.well-known/openid-configuration`.replace('//', '/');
            break;
        case 'oauth2':
            if (url.pathname === '/') {
                url.pathname = '.well-known/oauth-authorization-server';
            }
            else {
                url.pathname = `.well-known/oauth-authorization-server/${url.pathname}`.replace('//', '/');
            }
            break;
        default:
            throw new TypeError('"options.algorithm" must be "oidc" (default), or "oauth2"');
    }
    const headers = prepareHeaders(options?.headers);
    headers.set('accept', 'application/json');
    return (options?.[customFetch] || fetch)(url.href, {
        headers: Object.fromEntries(headers.entries()),
        method: 'GET',
        redirect: 'manual',
        signal: options?.signal ? signal(options.signal) : null,
    }).then(processDpopNonce);
}
function validateString(input) {
    return typeof input === 'string' && input.length !== 0;
}
async function processDiscoveryResponse(expectedIssuerIdentifier, response) {
    if (!(expectedIssuerIdentifier instanceof URL)) {
        throw new TypeError('"expectedIssuer" must be an instance of URL');
    }
    if (!looseInstanceOf(response, Response)) {
        throw new TypeError('"response" must be an instance of Response');
    }
    if (response.status !== 200) {
        throw new OPE('"response" is not a conform Authorization Server Metadata response');
    }
    assertReadableResponse(response);
    let json;
    try {
        json = await response.json();
    }
    catch (cause) {
        throw new OPE('failed to parse "response" body as JSON', { cause });
    }
    if (!isJsonObject(json)) {
        throw new OPE('"response" body must be a top level object');
    }
    if (!validateString(json.issuer)) {
        throw new OPE('"response" body "issuer" property must be a non-empty string');
    }
    if (new URL(json.issuer).href !== expectedIssuerIdentifier.href) {
        throw new OPE('"response" body "issuer" does not match "expectedIssuer"');
    }
    return json;
}
function randomBytes() {
    return b64u(crypto.getRandomValues(new Uint8Array(32)));
}
function generateRandomCodeVerifier() {
    return randomBytes();
}
function generateRandomState() {
    return randomBytes();
}
async function calculatePKCECodeChallenge(codeVerifier) {
    if (!validateString(codeVerifier)) {
        throw new TypeError('"codeVerifier" must be a non-empty string');
    }
    return b64u(await crypto.subtle.digest('SHA-256', buf(codeVerifier)));
}
function getKeyAndKid(input) {
    if (input instanceof CryptoKey) {
        return { key: input };
    }
    if (!(input?.key instanceof CryptoKey)) {
        return {};
    }
    if (input.kid !== undefined && !validateString(input.kid)) {
        throw new TypeError('"kid" must be a non-empty string');
    }
    return {
        key: input.key,
        kid: input.kid,
        modifyAssertion: input[modifyAssertion],
    };
}
function formUrlEncode(token) {
    return encodeURIComponent(token).replace(/%20/g, '+');
}
function clientSecretBasic(clientId, clientSecret) {
    const username = formUrlEncode(clientId);
    const password = formUrlEncode(clientSecret);
    const credentials = btoa(`${username}:${password}`);
    return `Basic ${credentials}`;
}
function psAlg(key) {
    switch (key.algorithm.hash.name) {
        case 'SHA-256':
            return 'PS256';
        case 'SHA-384':
            return 'PS384';
        case 'SHA-512':
            return 'PS512';
        default:
            throw new UnsupportedOperationError('unsupported RsaHashedKeyAlgorithm hash name');
    }
}
function rsAlg(key) {
    switch (key.algorithm.hash.name) {
        case 'SHA-256':
            return 'RS256';
        case 'SHA-384':
            return 'RS384';
        case 'SHA-512':
            return 'RS512';
        default:
            throw new UnsupportedOperationError('unsupported RsaHashedKeyAlgorithm hash name');
    }
}
function esAlg(key) {
    switch (key.algorithm.namedCurve) {
        case 'P-256':
            return 'ES256';
        case 'P-384':
            return 'ES384';
        case 'P-521':
            return 'ES512';
        default:
            throw new UnsupportedOperationError('unsupported EcKeyAlgorithm namedCurve');
    }
}
function keyToJws(key) {
    switch (key.algorithm.name) {
        case 'RSA-PSS':
            return psAlg(key);
        case 'RSASSA-PKCS1-v1_5':
            return rsAlg(key);
        case 'ECDSA':
            return esAlg(key);
        case 'Ed25519':
        case 'Ed448':
            return 'EdDSA';
        default:
            throw new UnsupportedOperationError('unsupported CryptoKey algorithm name');
    }
}
function getClockSkew(client) {
    const skew = client?.[clockSkew];
    return typeof skew === 'number' && Number.isFinite(skew) ? skew : 0;
}
function getClockTolerance(client) {
    const tolerance = client?.[clockTolerance];
    return typeof tolerance === 'number' && Number.isFinite(tolerance) && Math.sign(tolerance) !== -1
        ? tolerance
        : 30;
}
function epochTime() {
    return Math.floor(Date.now() / 1000);
}
function clientAssertion(as, client) {
    const now = epochTime() + getClockSkew(client);
    return {
        jti: randomBytes(),
        aud: [as.issuer, as.token_endpoint],
        exp: now + 60,
        iat: now,
        nbf: now,
        iss: client.client_id,
        sub: client.client_id,
    };
}
async function privateKeyJwt(as, client, key, kid, modifyAssertion) {
    const header = { alg: keyToJws(key), kid };
    const payload = clientAssertion(as, client);
    modifyAssertion?.(header, payload);
    return jwt(header, payload, key);
}
function assertAs(as) {
    if (typeof as !== 'object' || as === null) {
        throw new TypeError('"as" must be an object');
    }
    if (!validateString(as.issuer)) {
        throw new TypeError('"as.issuer" property must be a non-empty string');
    }
    return true;
}
function assertClient(client) {
    if (typeof client !== 'object' || client === null) {
        throw new TypeError('"client" must be an object');
    }
    if (!validateString(client.client_id)) {
        throw new TypeError('"client.client_id" property must be a non-empty string');
    }
    return true;
}
function assertClientSecret(clientSecret) {
    if (!validateString(clientSecret)) {
        throw new TypeError('"client.client_secret" property must be a non-empty string');
    }
    return clientSecret;
}
function assertNoClientPrivateKey(clientAuthMethod, clientPrivateKey) {
    if (clientPrivateKey !== undefined) {
        throw new TypeError(`"options.clientPrivateKey" property must not be provided when ${clientAuthMethod} client authentication method is used.`);
    }
}
function assertNoClientSecret(clientAuthMethod, clientSecret) {
    if (clientSecret !== undefined) {
        throw new TypeError(`"client.client_secret" property must not be provided when ${clientAuthMethod} client authentication method is used.`);
    }
}
async function clientAuthentication(as, client, body, headers, clientPrivateKey) {
    body.delete('client_secret');
    body.delete('client_assertion_type');
    body.delete('client_assertion');
    switch (client.token_endpoint_auth_method) {
        case undefined:
        case 'client_secret_basic': {
            assertNoClientPrivateKey('client_secret_basic', clientPrivateKey);
            headers.set('authorization', clientSecretBasic(client.client_id, assertClientSecret(client.client_secret)));
            break;
        }
        case 'client_secret_post': {
            assertNoClientPrivateKey('client_secret_post', clientPrivateKey);
            body.set('client_id', client.client_id);
            body.set('client_secret', assertClientSecret(client.client_secret));
            break;
        }
        case 'private_key_jwt': {
            assertNoClientSecret('private_key_jwt', client.client_secret);
            if (clientPrivateKey === undefined) {
                throw new TypeError('"options.clientPrivateKey" must be provided when "client.token_endpoint_auth_method" is "private_key_jwt"');
            }
            const { key, kid, modifyAssertion } = getKeyAndKid(clientPrivateKey);
            if (!isPrivateKey(key)) {
                throw new TypeError('"options.clientPrivateKey.key" must be a private CryptoKey');
            }
            body.set('client_id', client.client_id);
            body.set('client_assertion_type', 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer');
            body.set('client_assertion', await privateKeyJwt(as, client, key, kid, modifyAssertion));
            break;
        }
        case 'tls_client_auth':
        case 'self_signed_tls_client_auth':
        case 'none': {
            assertNoClientSecret(client.token_endpoint_auth_method, client.client_secret);
            assertNoClientPrivateKey(client.token_endpoint_auth_method, clientPrivateKey);
            body.set('client_id', client.client_id);
            break;
        }
        default:
            throw new UnsupportedOperationError('unsupported client token_endpoint_auth_method');
    }
}
async function jwt(header, payload, key) {
    if (!key.usages.includes('sign')) {
        throw new TypeError('CryptoKey instances used for signing assertions must include "sign" in their "usages"');
    }
    const input = `${b64u(buf(JSON.stringify(header)))}.${b64u(buf(JSON.stringify(payload)))}`;
    const signature = b64u(await crypto.subtle.sign(keyToSubtle(key), key, buf(input)));
    return `${input}.${signature}`;
}
async function dpopProofJwt(headers, options, url, htm, clockSkew, accessToken) {
    const { privateKey, publicKey, nonce = dpopNonces.get(url.origin) } = options;
    if (!isPrivateKey(privateKey)) {
        throw new TypeError('"DPoP.privateKey" must be a private CryptoKey');
    }
    if (!isPublicKey(publicKey)) {
        throw new TypeError('"DPoP.publicKey" must be a public CryptoKey');
    }
    if (nonce !== undefined && !validateString(nonce)) {
        throw new TypeError('"DPoP.nonce" must be a non-empty string or undefined');
    }
    if (!publicKey.extractable) {
        throw new TypeError('"DPoP.publicKey.extractable" must be true');
    }
    const now = epochTime() + clockSkew;
    const header = {
        alg: keyToJws(privateKey),
        typ: 'dpop+jwt',
        jwk: await publicJwk(publicKey),
    };
    const payload = {
        iat: now,
        jti: randomBytes(),
        htm,
        nonce,
        htu: `${url.origin}${url.pathname}`,
        ath: accessToken ? b64u(await crypto.subtle.digest('SHA-256', buf(accessToken))) : undefined,
    };
    options[modifyAssertion]?.(header, payload);
    headers.set('dpop', await jwt(header, payload, privateKey));
}
let jwkCache;
async function getSetPublicJwkCache(key) {
    const { kty, e, n, x, y, crv } = await crypto.subtle.exportKey('jwk', key);
    const jwk = { kty, e, n, x, y, crv };
    jwkCache.set(key, jwk);
    return jwk;
}
async function publicJwk(key) {
    jwkCache || (jwkCache = new WeakMap());
    return jwkCache.get(key) || getSetPublicJwkCache(key);
}
function validateEndpoint(value, endpoint, useMtlsAlias) {
    if (typeof value !== 'string') {
        if (useMtlsAlias) {
            throw new TypeError(`"as.mtls_endpoint_aliases.${endpoint}" must be a string`);
        }
        throw new TypeError(`"as.${endpoint}" must be a string`);
    }
    return new URL(value);
}
function resolveEndpoint(as, endpoint, useMtlsAlias = false) {
    if (useMtlsAlias && as.mtls_endpoint_aliases && endpoint in as.mtls_endpoint_aliases) {
        return validateEndpoint(as.mtls_endpoint_aliases[endpoint], endpoint, useMtlsAlias);
    }
    return validateEndpoint(as[endpoint], endpoint, useMtlsAlias);
}
function alias(client, options) {
    if (client.use_mtls_endpoint_aliases || options?.[useMtlsAlias]) {
        return true;
    }
    return false;
}
function isOAuth2Error(input) {
    const value = input;
    if (typeof value !== 'object' || Array.isArray(value) || value === null) {
        return false;
    }
    return value.error !== undefined;
}
async function protectedResourceRequest(accessToken, method, url, headers, body, options) {
    if (!validateString(accessToken)) {
        throw new TypeError('"accessToken" must be a non-empty string');
    }
    if (!(url instanceof URL)) {
        throw new TypeError('"url" must be an instance of URL');
    }
    headers = prepareHeaders(headers);
    if (options?.DPoP === undefined) {
        headers.set('authorization', `Bearer ${accessToken}`);
    }
    else {
        await dpopProofJwt(headers, options.DPoP, url, method.toUpperCase(), getClockSkew({ [clockSkew]: options?.[clockSkew] }), accessToken);
        headers.set('authorization', `DPoP ${accessToken}`);
    }
    return (options?.[customFetch] || fetch)(url.href, {
        body,
        headers: Object.fromEntries(headers.entries()),
        method,
        redirect: 'manual',
        signal: options?.signal ? signal(options.signal) : null,
    }).then(processDpopNonce);
}
async function userInfoRequest(as, client, accessToken, options) {
    assertAs(as);
    assertClient(client);
    const url = resolveEndpoint(as, 'userinfo_endpoint', alias(client, options));
    const headers = prepareHeaders(options?.headers);
    if (client.userinfo_signed_response_alg) {
        headers.set('accept', 'application/jwt');
    }
    else {
        headers.set('accept', 'application/json');
        headers.append('accept', 'application/jwt');
    }
    return protectedResourceRequest(accessToken, 'GET', url, headers, null, {
        ...options,
        [clockSkew]: getClockSkew(client),
    });
}
async function authenticatedRequest(as, client, method, url, body, headers, options) {
    await clientAuthentication(as, client, body, headers, options?.clientPrivateKey);
    headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
    return (options?.[customFetch] || fetch)(url.href, {
        body,
        headers: Object.fromEntries(headers.entries()),
        method,
        redirect: 'manual',
        signal: options?.signal ? signal(options.signal) : null,
    }).then(processDpopNonce);
}
async function tokenEndpointRequest(as, client, grantType, parameters, options) {
    const url = resolveEndpoint(as, 'token_endpoint', alias(client, options));
    parameters.set('grant_type', grantType);
    const headers = prepareHeaders(options?.headers);
    headers.set('accept', 'application/json');
    if (options?.DPoP !== undefined) {
        await dpopProofJwt(headers, options.DPoP, url, 'POST', getClockSkew(client));
    }
    return authenticatedRequest(as, client, 'POST', url, parameters, headers, options);
}
async function refreshTokenGrantRequest(as, client, refreshToken, options) {
    assertAs(as);
    assertClient(client);
    if (!validateString(refreshToken)) {
        throw new TypeError('"refreshToken" must be a non-empty string');
    }
    const parameters = new URLSearchParams(options?.additionalParameters);
    parameters.set('refresh_token', refreshToken);
    return tokenEndpointRequest(as, client, 'refresh_token', parameters, options);
}
const idTokenClaims = new WeakMap();
function getValidatedIdTokenClaims(ref) {
    if (!ref.id_token) {
        return undefined;
    }
    const claims = idTokenClaims.get(ref);
    if (!claims) {
        throw new TypeError('"ref" was already garbage collected or did not resolve from the proper sources');
    }
    return claims[0];
}
async function processGenericAccessTokenResponse(as, client, response, ignoreIdToken = false, ignoreRefreshToken = false) {
    assertAs(as);
    assertClient(client);
    if (!looseInstanceOf(response, Response)) {
        throw new TypeError('"response" must be an instance of Response');
    }
    if (response.status !== 200) {
        let err;
        if ((err = await handleOAuthBodyError(response))) {
            return err;
        }
        throw new OPE('"response" is not a conform Token Endpoint response');
    }
    assertReadableResponse(response);
    let json;
    try {
        json = await response.json();
    }
    catch (cause) {
        throw new OPE('failed to parse "response" body as JSON', { cause });
    }
    if (!isJsonObject(json)) {
        throw new OPE('"response" body must be a top level object');
    }
    if (!validateString(json.access_token)) {
        throw new OPE('"response" body "access_token" property must be a non-empty string');
    }
    if (!validateString(json.token_type)) {
        throw new OPE('"response" body "token_type" property must be a non-empty string');
    }
    json.token_type = json.token_type.toLowerCase();
    if (json.token_type !== 'dpop' && json.token_type !== 'bearer') {
        throw new UnsupportedOperationError('unsupported `token_type` value');
    }
    if (json.expires_in !== undefined &&
        (typeof json.expires_in !== 'number' || json.expires_in <= 0)) {
        throw new OPE('"response" body "expires_in" property must be a positive number');
    }
    if (!ignoreRefreshToken &&
        json.refresh_token !== undefined &&
        !validateString(json.refresh_token)) {
        throw new OPE('"response" body "refresh_token" property must be a non-empty string');
    }
    if (json.scope !== undefined && typeof json.scope !== 'string') {
        throw new OPE('"response" body "scope" property must be a string');
    }
    if (!ignoreIdToken) {
        if (json.id_token !== undefined && !validateString(json.id_token)) {
            throw new OPE('"response" body "id_token" property must be a non-empty string');
        }
        if (json.id_token) {
            const { claims, jwt } = await validateJwt(json.id_token, checkSigningAlgorithm.bind(undefined, client.id_token_signed_response_alg, as.id_token_signing_alg_values_supported), noSignatureCheck, getClockSkew(client), getClockTolerance(client), client[jweDecrypt])
                .then(validatePresence.bind(undefined, ['aud', 'exp', 'iat', 'iss', 'sub']))
                .then(validateIssuer.bind(undefined, as.issuer))
                .then(validateAudience.bind(undefined, client.client_id));
            if (Array.isArray(claims.aud) && claims.aud.length !== 1) {
                if (claims.azp === undefined) {
                    throw new OPE('ID Token "aud" (audience) claim includes additional untrusted audiences');
                }
                if (claims.azp !== client.client_id) {
                    throw new OPE('unexpected ID Token "azp" (authorized party) claim value');
                }
            }
            if (claims.auth_time !== undefined &&
                (!Number.isFinite(claims.auth_time) || Math.sign(claims.auth_time) !== 1)) {
                throw new OPE('ID Token "auth_time" (authentication time) must be a positive number');
            }
            idTokenClaims.set(json, [claims, jwt]);
        }
    }
    return json;
}
async function processRefreshTokenResponse(as, client, response) {
    return processGenericAccessTokenResponse(as, client, response);
}
function validateAudience(expected, result) {
    if (Array.isArray(result.claims.aud)) {
        if (!result.claims.aud.includes(expected)) {
            throw new OPE('unexpected JWT "aud" (audience) claim value');
        }
    }
    else if (result.claims.aud !== expected) {
        throw new OPE('unexpected JWT "aud" (audience) claim value');
    }
    return result;
}
function validateIssuer(expected, result) {
    if (result.claims.iss !== expected) {
        throw new OPE('unexpected JWT "iss" (issuer) claim value');
    }
    return result;
}
const branded = new WeakSet();
function brand(searchParams) {
    branded.add(searchParams);
    return searchParams;
}
async function authorizationCodeGrantRequest(as, client, callbackParameters, redirectUri, codeVerifier, options) {
    assertAs(as);
    assertClient(client);
    if (!branded.has(callbackParameters)) {
        throw new TypeError('"callbackParameters" must be an instance of URLSearchParams obtained from "validateAuthResponse()", or "validateJwtAuthResponse()');
    }
    if (!validateString(redirectUri)) {
        throw new TypeError('"redirectUri" must be a non-empty string');
    }
    if (!validateString(codeVerifier)) {
        throw new TypeError('"codeVerifier" must be a non-empty string');
    }
    const code = getURLSearchParameter(callbackParameters, 'code');
    if (!code) {
        throw new OPE('no authorization code in "callbackParameters"');
    }
    const parameters = new URLSearchParams(options?.additionalParameters);
    parameters.set('redirect_uri', redirectUri);
    parameters.set('code_verifier', codeVerifier);
    parameters.set('code', code);
    return tokenEndpointRequest(as, client, 'authorization_code', parameters, options);
}
const jwtClaimNames = {
    aud: 'audience',
    c_hash: 'code hash',
    client_id: 'client id',
    exp: 'expiration time',
    iat: 'issued at',
    iss: 'issuer',
    jti: 'jwt id',
    nonce: 'nonce',
    s_hash: 'state hash',
    sub: 'subject',
    ath: 'access token hash',
    htm: 'http method',
    htu: 'http uri',
    cnf: 'confirmation',
};
function validatePresence(required, result) {
    for (const claim of required) {
        if (result.claims[claim] === undefined) {
            throw new OPE(`JWT "${claim}" (${jwtClaimNames[claim]}) claim missing`);
        }
    }
    return result;
}
const expectNoNonce = Symbol();
const skipAuthTimeCheck = Symbol();
async function processAuthorizationCodeOpenIDResponse(as, client, response, expectedNonce, maxAge) {
    const result = await processGenericAccessTokenResponse(as, client, response);
    if (isOAuth2Error(result)) {
        return result;
    }
    if (!validateString(result.id_token)) {
        throw new OPE('"response" body "id_token" property must be a non-empty string');
    }
    maxAge ?? (maxAge = client.default_max_age ?? skipAuthTimeCheck);
    const claims = getValidatedIdTokenClaims(result);
    if ((client.require_auth_time || maxAge !== skipAuthTimeCheck) &&
        claims.auth_time === undefined) {
        throw new OPE('ID Token "auth_time" (authentication time) claim missing');
    }
    if (maxAge !== skipAuthTimeCheck) {
        if (typeof maxAge !== 'number' || maxAge < 0) {
            throw new TypeError('"maxAge" must be a non-negative number');
        }
        const now = epochTime() + getClockSkew(client);
        const tolerance = getClockTolerance(client);
        if (claims.auth_time + maxAge < now - tolerance) {
            throw new OPE('too much time has elapsed since the last End-User authentication');
        }
    }
    switch (expectedNonce) {
        case undefined:
        case expectNoNonce:
            if (claims.nonce !== undefined) {
                throw new OPE('unexpected ID Token "nonce" claim value');
            }
            break;
        default:
            if (!validateString(expectedNonce)) {
                throw new TypeError('"expectedNonce" must be a non-empty string');
            }
            if (claims.nonce === undefined) {
                throw new OPE('ID Token "nonce" claim missing');
            }
            if (claims.nonce !== expectedNonce) {
                throw new OPE('unexpected ID Token "nonce" claim value');
            }
    }
    return result;
}
function assertReadableResponse(response) {
    if (response.bodyUsed) {
        throw new TypeError('"response" body has been used already');
    }
}
async function handleOAuthBodyError(response) {
    if (response.status > 399 && response.status < 500) {
        assertReadableResponse(response);
        try {
            const json = await response.json();
            if (isJsonObject(json) && typeof json.error === 'string' && json.error.length) {
                if (json.error_description !== undefined && typeof json.error_description !== 'string') {
                    delete json.error_description;
                }
                if (json.error_uri !== undefined && typeof json.error_uri !== 'string') {
                    delete json.error_uri;
                }
                if (json.algs !== undefined && typeof json.algs !== 'string') {
                    delete json.algs;
                }
                if (json.scope !== undefined && typeof json.scope !== 'string') {
                    delete json.scope;
                }
                return json;
            }
        }
        catch { }
    }
    return undefined;
}
function checkRsaKeyAlgorithm(algorithm) {
    if (typeof algorithm.modulusLength !== 'number' || algorithm.modulusLength < 2048) {
        throw new OPE(`${algorithm.name} modulusLength must be at least 2048 bits`);
    }
}
function ecdsaHashName(namedCurve) {
    switch (namedCurve) {
        case 'P-256':
            return 'SHA-256';
        case 'P-384':
            return 'SHA-384';
        case 'P-521':
            return 'SHA-512';
        default:
            throw new UnsupportedOperationError();
    }
}
function keyToSubtle(key) {
    switch (key.algorithm.name) {
        case 'ECDSA':
            return {
                name: key.algorithm.name,
                hash: ecdsaHashName(key.algorithm.namedCurve),
            };
        case 'RSA-PSS': {
            checkRsaKeyAlgorithm(key.algorithm);
            switch (key.algorithm.hash.name) {
                case 'SHA-256':
                case 'SHA-384':
                case 'SHA-512':
                    return {
                        name: key.algorithm.name,
                        saltLength: parseInt(key.algorithm.hash.name.slice(-3), 10) >> 3,
                    };
                default:
                    throw new UnsupportedOperationError();
            }
        }
        case 'RSASSA-PKCS1-v1_5':
            checkRsaKeyAlgorithm(key.algorithm);
            return key.algorithm.name;
        case 'Ed448':
        case 'Ed25519':
            return key.algorithm.name;
    }
    throw new UnsupportedOperationError();
}
const noSignatureCheck = Symbol();
async function validateJwsSignature(protectedHeader, payload, key, signature) {
    const input = `${protectedHeader}.${payload}`;
    const verified = await crypto.subtle.verify(keyToSubtle(key), key, signature, buf(input));
    if (!verified) {
        throw new OPE('JWT signature verification failed');
    }
}
async function validateJwt(jws, checkAlg, getKey, clockSkew, clockTolerance, decryptJwt) {
    let { 0: protectedHeader, 1: payload, 2: encodedSignature, length } = jws.split('.');
    if (length === 5) {
        if (decryptJwt !== undefined) {
            jws = await decryptJwt(jws);
            ({ 0: protectedHeader, 1: payload, 2: encodedSignature, length } = jws.split('.'));
        }
        else {
            throw new UnsupportedOperationError('JWE structure JWTs are not supported');
        }
    }
    if (length !== 3) {
        throw new OPE('Invalid JWT');
    }
    let header;
    try {
        header = JSON.parse(buf(b64u(protectedHeader)));
    }
    catch (cause) {
        throw new OPE('failed to parse JWT Header body as base64url encoded JSON', { cause });
    }
    if (!isJsonObject(header)) {
        throw new OPE('JWT Header must be a top level object');
    }
    checkAlg(header);
    if (header.crit !== undefined) {
        throw new OPE('unexpected JWT "crit" header parameter');
    }
    const signature = b64u(encodedSignature);
    let key;
    if (getKey !== noSignatureCheck) {
        key = await getKey(header);
        await validateJwsSignature(protectedHeader, payload, key, signature);
    }
    let claims;
    try {
        claims = JSON.parse(buf(b64u(payload)));
    }
    catch (cause) {
        throw new OPE('failed to parse JWT Payload body as base64url encoded JSON', { cause });
    }
    if (!isJsonObject(claims)) {
        throw new OPE('JWT Payload must be a top level object');
    }
    const now = epochTime() + clockSkew;
    if (claims.exp !== undefined) {
        if (typeof claims.exp !== 'number') {
            throw new OPE('unexpected JWT "exp" (expiration time) claim type');
        }
        if (claims.exp <= now - clockTolerance) {
            throw new OPE('unexpected JWT "exp" (expiration time) claim value, timestamp is <= now()');
        }
    }
    if (claims.iat !== undefined) {
        if (typeof claims.iat !== 'number') {
            throw new OPE('unexpected JWT "iat" (issued at) claim type');
        }
    }
    if (claims.iss !== undefined) {
        if (typeof claims.iss !== 'string') {
            throw new OPE('unexpected JWT "iss" (issuer) claim type');
        }
    }
    if (claims.nbf !== undefined) {
        if (typeof claims.nbf !== 'number') {
            throw new OPE('unexpected JWT "nbf" (not before) claim type');
        }
        if (claims.nbf > now + clockTolerance) {
            throw new OPE('unexpected JWT "nbf" (not before) claim value, timestamp is > now()');
        }
    }
    if (claims.aud !== undefined) {
        if (typeof claims.aud !== 'string' && !Array.isArray(claims.aud)) {
            throw new OPE('unexpected JWT "aud" (audience) claim type');
        }
    }
    return { header, claims, signature, key, jwt: jws };
}
function checkSigningAlgorithm(client, issuer, header) {
    if (client !== undefined) {
        if (header.alg !== client) {
            throw new OPE('unexpected JWT "alg" header parameter');
        }
        return;
    }
    if (Array.isArray(issuer)) {
        if (!issuer.includes(header.alg)) {
            throw new OPE('unexpected JWT "alg" header parameter');
        }
        return;
    }
    if (header.alg !== 'RS256') {
        throw new OPE('unexpected JWT "alg" header parameter');
    }
}
function getURLSearchParameter(parameters, name) {
    const { 0: value, length } = parameters.getAll(name);
    if (length > 1) {
        throw new OPE(`"${name}" parameter must be provided only once`);
    }
    return value;
}
const skipStateCheck = Symbol();
const expectNoState = Symbol();
function validateAuthResponse(as, client, parameters, expectedState) {
    assertAs(as);
    assertClient(client);
    if (parameters instanceof URL) {
        parameters = parameters.searchParams;
    }
    if (!(parameters instanceof URLSearchParams)) {
        throw new TypeError('"parameters" must be an instance of URLSearchParams, or URL');
    }
    if (getURLSearchParameter(parameters, 'response')) {
        throw new OPE('"parameters" contains a JARM response, use validateJwtAuthResponse() instead of validateAuthResponse()');
    }
    const iss = getURLSearchParameter(parameters, 'iss');
    const state = getURLSearchParameter(parameters, 'state');
    if (!iss && as.authorization_response_iss_parameter_supported) {
        throw new OPE('response parameter "iss" (issuer) missing');
    }
    if (iss && iss !== as.issuer) {
        throw new OPE('unexpected "iss" (issuer) response parameter value');
    }
    switch (expectedState) {
        case undefined:
        case expectNoState:
            if (state !== undefined) {
                throw new OPE('unexpected "state" response parameter encountered');
            }
            break;
        case skipStateCheck:
            break;
        default:
            if (!validateString(expectedState)) {
                throw new OPE('"expectedState" must be a non-empty string');
            }
            if (state === undefined) {
                throw new OPE('response parameter "state" missing');
            }
            if (state !== expectedState) {
                throw new OPE('unexpected "state" response parameter value');
            }
    }
    const error = getURLSearchParameter(parameters, 'error');
    if (error) {
        return {
            error,
            error_description: getURLSearchParameter(parameters, 'error_description'),
            error_uri: getURLSearchParameter(parameters, 'error_uri'),
        };
    }
    const id_token = getURLSearchParameter(parameters, 'id_token');
    const token = getURLSearchParameter(parameters, 'token');
    if (id_token !== undefined || token !== undefined) {
        throw new UnsupportedOperationError('implicit and hybrid flows are not supported');
    }
    return brand(new URLSearchParams(parameters));
}

/**
 * Default storage key for OAuth tokens
 */
const DEFAULT_TOKEN_STORAGE_KEY = 'flowise_oauth_tokens';
/**
 * Validates OAuth tokens stored in browser cache using oauth4webapi
 */
const validateCachedTokens = async (authConfig, storageKey = DEFAULT_TOKEN_STORAGE_KEY) => {
  try {
    const tokens = getCachedTokens(storageKey);
    if (!tokens) {
      return {
        isValid: false,
        isExpired: false,
        error: 'No tokens found in cache'
      };
    }
    if (!tokens.access_token) {
      return {
        isValid: false,
        isExpired: false,
        error: 'No access token found'
      };
    }
    // Check if tokens have explicit expiration
    const currentTime = Date.now();
    if (tokens.expires_at && tokens.expires_at < currentTime) {
      return {
        isValid: false,
        isExpired: true,
        expiresAt: tokens.expires_at,
        error: 'Tokens have expired'
      };
    }
    // Use oauth4webapi to validate the access token
    try {
      // Get the authorization server configuration
      const as = await discoveryRequest(new URL(authConfig.authority)).then(response => processDiscoveryResponse(new URL(authConfig.authority), response));
      // Validate the access token by making a userinfo request
      const userInfoResponse = await userInfoRequest(as, {
        client_id: authConfig.clientId
      }, tokens.access_token);
      if (userInfoResponse.status !== 200) {
        return {
          isValid: false,
          isExpired: true,
          error: 'Access token is invalid or expired'
        };
      }
      return {
        isValid: true,
        isExpired: false,
        expiresAt: tokens.expires_at
      };
    } catch (error) {
      console.warn('Token validation failed:', error);
      return {
        isValid: false,
        isExpired: true,
        error: 'Token validation failed'
      };
    }
  } catch (error) {
    console.error('Error validating cached tokens:', error);
    return {
      isValid: false,
      isExpired: false,
      error: `Token validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};
/**
 * Retrieves cached OAuth tokens from browser storage
 */
const getCachedTokens = (storageKey = DEFAULT_TOKEN_STORAGE_KEY) => {
  try {
    // Try localStorage first
    let tokensJson = localStorage.getItem(storageKey);
    // Fallback to sessionStorage
    if (!tokensJson) {
      tokensJson = sessionStorage.getItem(storageKey);
    }
    // Fallback to cookies
    if (!tokensJson) {
      tokensJson = getCookie(storageKey);
    }
    if (!tokensJson) {
      return null;
    }
    return JSON.parse(tokensJson);
  } catch (error) {
    console.error('Error retrieving cached tokens:', error);
    return null;
  }
};
/**
 * Stores OAuth tokens in browser cache
 */
const storeCachedTokens = (tokens, storageKey = DEFAULT_TOKEN_STORAGE_KEY, useSessionStorage = false) => {
  try {
    const tokensJson = JSON.stringify(tokens);
    if (useSessionStorage) {
      sessionStorage.setItem(storageKey, tokensJson);
    } else {
      localStorage.setItem(storageKey, tokensJson);
      // Also store in cookies as fallback (with expiration)
      const expirationDays = tokens.expires_in ? Math.ceil(tokens.expires_in / (24 * 60 * 60)) : 1;
      setCookie(storageKey, tokensJson, expirationDays);
    }
  } catch (error) {
    console.error('Error storing cached tokens:', error);
  }
};
/**
 * Removes cached OAuth tokens from all storage locations
 */
const removeCachedTokens = (storageKey = DEFAULT_TOKEN_STORAGE_KEY) => {
  try {
    localStorage.removeItem(storageKey);
    sessionStorage.removeItem(storageKey);
    // Remove from cookies by setting expiration to past date
    setCookie(storageKey, '', -1);
  } catch (error) {
    console.error('Error removing cached tokens:', error);
  }
};
/**
 * Checks if tokens need refresh based on threshold
 */
const shouldRefreshTokens = (tokens, refreshThreshold = 300 // 5 minutes default
) => {
  if (!tokens.expires_at) {
    return false;
  }
  const currentTime = Date.now();
  const timeUntilExpiry = tokens.expires_at - currentTime;
  const thresholdMs = refreshThreshold * 1000;
  return timeUntilExpiry <= thresholdMs;
};
/**
 * Builds OAuth authorization URL using oauth4webapi
 */
const buildAuthorizationUrl = async config => {
  try {
    // Discover the authorization server configuration
    const as = await discoveryRequest(new URL(config.authority)).then(response => processDiscoveryResponse(new URL(config.authority), response));
    // Generate state and code verifier for PKCE
    const state = generateRandomState();
    const codeVerifier = generateRandomCodeVerifier();
    const codeChallenge = await calculatePKCECodeChallenge(codeVerifier);
    // Store state and code verifier for later validation
    sessionStorage.setItem('oauth_state', state);
    sessionStorage.setItem('oauth_code_verifier', codeVerifier);
    // Build authorization URL
    const authorizationUrl = new URL(as.authorization_endpoint);
    authorizationUrl.searchParams.set('client_id', config.clientId);
    authorizationUrl.searchParams.set('redirect_uri', config.redirectUri);
    authorizationUrl.searchParams.set('response_type', config.responseType || 'code');
    authorizationUrl.searchParams.set('scope', config.scope || 'openid profile email');
    authorizationUrl.searchParams.set('state', state);
    authorizationUrl.searchParams.set('code_challenge', codeChallenge);
    authorizationUrl.searchParams.set('code_challenge_method', 'S256');
    if (config.prompt) {
      authorizationUrl.searchParams.set('prompt', config.prompt);
    }
    if (config.maxAge) {
      authorizationUrl.searchParams.set('max_age', config.maxAge.toString());
    }
    if (config.uiLocales) {
      authorizationUrl.searchParams.set('ui_locales', config.uiLocales);
    }
    if (config.acrValues) {
      authorizationUrl.searchParams.set('acr_values', config.acrValues);
    }
    return authorizationUrl.toString();
  } catch (error) {
    console.error('Error building authorization URL:', error);
    throw new Error(`Failed to build authorization URL: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};
/**
 * Exchanges authorization code for tokens using oauth4webapi
 */
const exchangeCodeForTokens = async (config, code, state) => {
  try {
    // Validate state
    const storedState = sessionStorage.getItem('oauth_state');
    if (!storedState || storedState !== state) {
      throw new Error('Invalid state parameter');
    }
    // Get stored code verifier
    const codeVerifier = sessionStorage.getItem('oauth_code_verifier');
    if (!codeVerifier) {
      throw new Error('Code verifier not found');
    }
    // Clean up stored values
    sessionStorage.removeItem('oauth_state');
    sessionStorage.removeItem('oauth_code_verifier');
    // Discover the authorization server configuration
    const as = await discoveryRequest(new URL(config.authority)).then(response => processDiscoveryResponse(new URL(config.authority), response));
    // Create callback parameters in the format expected by the OAuth library
    const callbackParams = new URLSearchParams();
    callbackParams.set('code', code);
    // Note: Don't include state in callbackParams as we validate it separately
    // Validate the callback parameters first (required by oauth4webapi)
    const validatedParams = validateAuthResponse(as, {
      client_id: config.clientId
    }, callbackParams, expectNoState // We handle state validation separately
    );

    if (isOAuth2Error(validatedParams)) {
      throw new Error(`OAuth validation error: ${validatedParams.error} - ${validatedParams.error_description}`);
    }
    // Exchange code for tokens using validated parameters
    // For public clients (browser apps), we need to explicitly set token_endpoint_auth_method to 'none'
    const client = {
      client_id: config.clientId,
      token_endpoint_auth_method: 'none' // Explicitly specify this is a public client
    };

    const response = await authorizationCodeGrantRequest(as, client, validatedParams, config.redirectUri, codeVerifier);
    const result = await processAuthorizationCodeOpenIDResponse(as, {
      client_id: config.clientId
    }, response);
    if (isOAuth2Error(result)) {
      throw new Error(`OAuth error: ${result.error} - ${result.error_description}`);
    }
    // Convert to our token format
    const tokens = {
      access_token: result.access_token,
      token_type: result.token_type,
      expires_in: result.expires_in || 3600,
      expires_at: Date.now() + (result.expires_in || 3600) * 1000
    };
    if (result.refresh_token) {
      tokens.refresh_token = result.refresh_token;
    }
    if (result.id_token) {
      tokens.id_token = result.id_token;
    }
    if (result.scope) {
      tokens.scope = result.scope;
    }
    return tokens;
  } catch (error) {
    console.error('Error exchanging code for tokens:', error);
    throw new Error(`Token exchange failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};
/**
 * Refreshes access token using refresh token
 */
const refreshAccessToken = async (config, refreshToken) => {
  try {
    // Discover the authorization server configuration
    const as = await discoveryRequest(new URL(config.authority)).then(response => processDiscoveryResponse(new URL(config.authority), response));
    // Refresh the token
    const response = await refreshTokenGrantRequest(as, {
      client_id: config.clientId
    }, refreshToken);
    const result = await processRefreshTokenResponse(as, {
      client_id: config.clientId
    }, response);
    if (isOAuth2Error(result)) {
      throw new Error(`OAuth error: ${result.error} - ${result.error_description}`);
    }
    // Convert to our token format
    const tokens = {
      access_token: result.access_token,
      token_type: result.token_type,
      expires_in: result.expires_in || 3600,
      expires_at: Date.now() + (result.expires_in || 3600) * 1000
    };
    if (result.refresh_token) {
      tokens.refresh_token = result.refresh_token;
    }
    if (result.scope) {
      tokens.scope = result.scope;
    }
    return tokens;
  } catch (error) {
    console.error('Error refreshing access token:', error);
    throw new Error(`Token refresh failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};
/**
 * Gets user info using access token
 */
const getUserInfo = async (config, accessToken) => {
  try {
    // Discover the authorization server configuration
    const as = await discoveryRequest(new URL(config.authority)).then(response => processDiscoveryResponse(new URL(config.authority), response));
    // Get user info
    const response = await userInfoRequest(as, {
      client_id: config.clientId
    }, accessToken);
    if (response.status !== 200) {
      throw new Error(`UserInfo request failed with status: ${response.status}`);
    }
    const userInfo = await response.json();
    return userInfo;
  } catch (error) {
    console.error('Error getting user info:', error);
    throw new Error(`UserInfo request failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};
/**
 * Validates OAuth state parameter
 */
const validateOAuthState = receivedState => {
  const storedState = sessionStorage.getItem('oauth_state');
  return storedState === receivedState;
};
/**
 * Initiates OAuth logout
 */
const initiateLogout = async (config, idToken, postLogoutRedirectUri) => {
  try {
    // Discover the authorization server configuration
    const as = await discoveryRequest(new URL(config.authority)).then(response => processDiscoveryResponse(new URL(config.authority), response));
    if (!as.end_session_endpoint) {
      // If no logout endpoint, just clear local tokens
      removeCachedTokens();
      return postLogoutRedirectUri || config.redirectUri;
    }
    // Build logout URL
    const logoutUrl = new URL(as.end_session_endpoint);
    if (idToken) {
      logoutUrl.searchParams.set('id_token_hint', idToken);
    }
    if (postLogoutRedirectUri) {
      logoutUrl.searchParams.set('post_logout_redirect_uri', postLogoutRedirectUri);
    }
    // Clear local tokens
    removeCachedTokens();
    return logoutUrl.toString();
  } catch (error) {
    console.error('Error initiating logout:', error);
    // Fallback: just clear local tokens
    removeCachedTokens();
    return postLogoutRedirectUri || config.redirectUri;
  }
};

/**
 * Authentication Service for managing OAuth/OIDC authentication state
 */
class AuthService {
  constructor(config) {
    this.config = config;
    const [authState, setAuthState] = createSignal({
      isAuthenticated: false,
      isLoading: false
    });
    this.authState = authState;
    this.setAuthState = setAuthState;
    this.initializeAuth();
  }
  /**
   * Get current authentication state
   */
  getAuthState = () => this.authState();
  /**
   * Initialize authentication by checking for cached tokens
   */
  async initializeAuth() {
    if (this.config.mode === 'disabled') {
      return;
    }
    this.setAuthState(prev => ({
      ...prev,
      isLoading: true
    }));
    try {
      const tokens = getCachedTokens(this.config.tokenStorageKey);
      if (!tokens) {
        this.setAuthState({
          isAuthenticated: false,
          isLoading: false
        });
        return;
      }
      // Validate cached tokens
      const validation = await validateCachedTokens(this.config.oauth, this.config.tokenStorageKey);
      if (!validation.isValid) {
        // Tokens are invalid, try to refresh if we have a refresh token
        if (tokens.refresh_token && !validation.isExpired) {
          try {
            const newTokens = await refreshAccessToken(this.config.oauth, tokens.refresh_token);
            storeCachedTokens(newTokens, this.config.tokenStorageKey);
            const userInfo = await getUserInfo(this.config.oauth, newTokens.access_token);
            this.setAuthState({
              isAuthenticated: true,
              isLoading: false,
              tokens: newTokens,
              user: userInfo
            });
            return;
          } catch (error) {
            console.warn('Token refresh failed:', error);
          }
        }
        // Clear invalid tokens
        removeCachedTokens(this.config.tokenStorageKey);
        this.setAuthState({
          isAuthenticated: false,
          isLoading: false,
          error: validation.error
        });
        return;
      }
      // Tokens are valid, get user info
      try {
        const userInfo = await getUserInfo(this.config.oauth, tokens.access_token);
        this.setAuthState({
          isAuthenticated: true,
          isLoading: false,
          tokens,
          user: userInfo
        });
        // Set up auto-refresh if enabled
        if (this.config.autoRefresh && tokens.refresh_token) {
          this.setupAutoRefresh(tokens);
        }
      } catch (error) {
        console.error('Failed to get user info:', error);
        this.setAuthState({
          isAuthenticated: false,
          isLoading: false,
          error: 'Failed to get user information'
        });
      }
    } catch (error) {
      console.error('Auth initialization failed:', error);
      this.setAuthState({
        isAuthenticated: false,
        isLoading: false,
        error: error instanceof Error ? error.message : 'Authentication initialization failed'
      });
    }
  }
  /**
   * Check if user is authenticated
   */
  isAuthenticated() {
    return this.authState().isAuthenticated;
  }
  /**
   * Check if authentication is required based on configuration
   */
  isAuthRequired() {
    return this.config.mode === 'required';
  }
  /**
   * Check if authentication is optional
   */
  isAuthOptional() {
    return this.config.mode === 'optional';
  }
  /**
   * Check if authentication is disabled
   */
  isAuthDisabled() {
    return this.config.mode === 'disabled';
  }
  /**
   * Get current user information
   */
  getCurrentUser() {
    return this.authState().user;
  }
  /**
   * Get current tokens
   */
  getCurrentTokens() {
    return this.authState().tokens;
  }
  /**
   * Initiate OAuth login flow
   */
  async login() {
    try {
      this.setAuthState(prev => ({
        ...prev,
        isLoading: true,
        error: undefined
      }));
      // Create a modified OAuth config with popup callback URL
      const popupConfig = {
        ...this.config.oauth,
        redirectUri: `${window.location.origin}/oauth-callback.html`
      };
      const authUrl = await buildAuthorizationUrl(popupConfig);
      // Open OAuth in popup window instead of full page redirect
      const popup = window.open(authUrl, 'oauth-popup', 'width=500,height=600,scrollbars=yes,resizable=yes,status=yes,location=yes,toolbar=no,menubar=no');
      if (!popup) {
        throw new Error('Popup blocked. Please allow popups for this site and try again.');
      }
      // Listen for messages from popup
      const messageListener = async event => {
        // Verify origin for security
        if (event.origin !== window.location.origin) {
          return;
        }
        if (event.data.type === 'oauth-callback') {
          // Handle OAuth callback with authorization code
          cleanup();
          try {
            const success = await this.handleCallback(event.data.code, event.data.state);
            if (!success) {
              this.setAuthState(prev => ({
                ...prev,
                isLoading: false,
                error: 'Authentication failed during token exchange'
              }));
            }
            // If successful, handleCallback will update the auth state
          } catch (error) {
            console.error('OAuth callback handling failed:', error);
            this.setAuthState(prev => ({
              ...prev,
              isLoading: false,
              error: error instanceof Error ? error.message : 'Authentication failed'
            }));
          }
        } else if (event.data.type === 'oauth-error') {
          // Authentication failed
          cleanup();
          this.setAuthState(prev => ({
            ...prev,
            isLoading: false,
            error: event.data.errorDescription || event.data.error || 'Authentication failed'
          }));
        }
      };
      // Monitor popup for manual closure
      const checkClosed = setInterval(() => {
        if (popup.closed) {
          cleanup();
          // Check if authentication was successful by looking for tokens
          const tokens = getCachedTokens(this.config.tokenStorageKey);
          if (!tokens) {
            // No tokens found, user likely closed popup without completing auth
            this.setAuthState(prev => ({
              ...prev,
              isLoading: false,
              error: 'Authentication was cancelled'
            }));
          }
        }
      }, 1000);
      // Set a timeout to close popup if it takes too long
      const timeout = setTimeout(() => {
        cleanup();
        if (!popup.closed) {
          popup.close();
        }
        this.setAuthState(prev => ({
          ...prev,
          isLoading: false,
          error: 'Authentication timed out'
        }));
      }, 300000); // 5 minutes timeout
      // Cleanup function
      const cleanup = () => {
        window.removeEventListener('message', messageListener);
        clearInterval(checkClosed);
        clearTimeout(timeout);
      };
      // Add message listener
      window.addEventListener('message', messageListener);
    } catch (error) {
      console.error('Login initiation failed:', error);
      this.setAuthState(prev => ({
        ...prev,
        isLoading: false,
        error: error instanceof Error ? error.message : 'Login failed'
      }));
    }
  }
  /**
   * Handle OAuth callback (call this when the user returns from OAuth provider)
   */
  async handleCallback(code, state) {
    try {
      this.setAuthState(prev => ({
        ...prev,
        isLoading: true,
        error: undefined
      }));
      // Validate state parameter
      if (!validateOAuthState(state)) {
        throw new Error('Invalid state parameter');
      }
      // Exchange code for tokens
      const tokens = await exchangeCodeForTokens(this.config.oauth, code, state);
      // Store tokens
      storeCachedTokens(tokens, this.config.tokenStorageKey);
      // Get user info
      const userInfo = await getUserInfo(this.config.oauth, tokens.access_token);
      this.setAuthState({
        isAuthenticated: true,
        isLoading: false,
        tokens,
        user: userInfo
      });
      // Set up auto-refresh if enabled
      if (this.config.autoRefresh && tokens.refresh_token) {
        this.setupAutoRefresh(tokens);
      }
      return true;
    } catch (error) {
      console.error('OAuth callback handling failed:', error);
      this.setAuthState({
        isAuthenticated: false,
        isLoading: false,
        error: error instanceof Error ? error.message : 'Authentication failed'
      });
      return false;
    }
  }
  /**
   * Logout user
   */
  async logout(postLogoutRedirectUri) {
    try {
      const tokens = this.authState().tokens;
      const logoutUrl = await initiateLogout(this.config.oauth, tokens?.id_token, postLogoutRedirectUri);
      // Clear local state
      this.setAuthState({
        isAuthenticated: false,
        isLoading: false
      });
      // Redirect to logout URL if different from current location
      if (logoutUrl !== window.location.href) {
        window.location.href = logoutUrl;
      }
    } catch (error) {
      console.error('Logout failed:', error);
      // Still clear local state even if logout URL generation fails
      removeCachedTokens(this.config.tokenStorageKey);
      this.setAuthState({
        isAuthenticated: false,
        isLoading: false,
        error: error instanceof Error ? error.message : 'Logout failed'
      });
    }
  }
  /**
   * Manually refresh tokens
   */
  async refreshTokens() {
    const tokens = this.authState().tokens;
    if (!tokens?.refresh_token) {
      return false;
    }
    try {
      const newTokens = await refreshAccessToken(this.config.oauth, tokens.refresh_token);
      storeCachedTokens(newTokens, this.config.tokenStorageKey);
      this.setAuthState(prev => ({
        ...prev,
        tokens: newTokens
      }));
      return true;
    } catch (error) {
      console.error('Token refresh failed:', error);
      // If refresh fails, logout user
      await this.logout();
      return false;
    }
  }
  /**
   * Set up automatic token refresh
   */
  setupAutoRefresh(tokens) {
    if (!tokens.refresh_token || !this.config.refreshThreshold) {
      return;
    }
    const checkInterval = Math.min(this.config.refreshThreshold * 1000 / 2, 60000); // Check every half the threshold or 1 minute, whichever is smaller
    const intervalId = setInterval(async () => {
      const currentTokens = this.authState().tokens;
      if (!currentTokens || !this.authState().isAuthenticated) {
        clearInterval(intervalId);
        return;
      }
      if (shouldRefreshTokens(currentTokens, this.config.refreshThreshold)) {
        const success = await this.refreshTokens();
        if (!success) {
          clearInterval(intervalId);
        }
      }
    }, checkInterval);
    // Clean up interval when component unmounts or user logs out
    createEffect(() => {
      if (!this.authState().isAuthenticated) {
        clearInterval(intervalId);
      }
    });
  }
  /**
   * Get access token for API requests
   */
  getAccessToken() {
    return this.authState().tokens?.access_token;
  }
  /**
   * Check if tokens need refresh
   */
  needsTokenRefresh() {
    const tokens = this.authState().tokens;
    if (!tokens) return false;
    return shouldRefreshTokens(tokens, this.config.refreshThreshold || 300);
  }
  /**
   * Clear authentication state and cached tokens
   */
  clearAuth() {
    removeCachedTokens(this.config.tokenStorageKey);
    this.setAuthState({
      isAuthenticated: false,
      isLoading: false
    });
  }
}
/**
 * Create a singleton auth service instance
 */
let authServiceInstance = null;
const createAuthService = config => {
  if (!authServiceInstance) {
    authServiceInstance = new AuthService(config);
  }
  return authServiceInstance;
};

const _tmpl$$5 = /*#__PURE__*/template(`<div class="w-full h-full flex flex-col items-center justify-center px-4 py-8 rounded-lg"><div class="w-full max-w-md bg-white shadow-lg rounded-lg overflow-hidden"><div class="p-6 text-center"><div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 mb-4"><svg class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path></svg></div><h3 class="text-lg font-medium mb-2"></h3><p class="text-sm mb-6"></p><div class="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3"><button class="flex-1 py-2 px-4 text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition duration-300 ease-in-out hover:opacity-90"></button><button class="flex-1 py-2 px-4 text-sm font-medium rounded-md border focus:outline-none focus:ring-2 focus:ring-offset-2 transition duration-300 ease-in-out hover:bg-gray-50">`),
  _tmpl$2$3 = /*#__PURE__*/template(`<div class="w-full h-full flex flex-col items-center justify-center px-4 py-8 rounded-lg"><div class="text-center"><div class="mx-auto mb-4"><svg class="animate-spin h-8 w-8 mx-auto" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg></div><p class="text-sm">`),
  _tmpl$3$2 = /*#__PURE__*/template(`<button class="flex-1 py-2 px-4 text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition duration-300 ease-in-out hover:opacity-90">Try Again`),
  _tmpl$4$2 = /*#__PURE__*/template(`<button class="flex-1 py-2 px-4 text-sm font-medium rounded-md border focus:outline-none focus:ring-2 focus:ring-offset-2 transition duration-300 ease-in-out hover:bg-gray-50">Continue as Guest`),
  _tmpl$5$1 = /*#__PURE__*/template(`<div class="w-full h-full flex flex-col items-center justify-center px-4 py-8 rounded-lg"><div class="w-full max-w-md bg-white shadow-lg rounded-lg overflow-hidden"><div class="p-6 text-center"><div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4"><svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path></svg></div><h3 class="text-lg font-medium mb-2">Authentication Error</h3><p class="text-sm mb-6"></p><div class="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3">`);
const defaultBackgroundColor$1 = '#ffffff';
const defaultTextColor$1 = '#303235';
const defaultButtonColor$2 = '#3B81F6';
const defaultButtonTextColor = '#ffffff';
const AuthenticationPrompt = props => {
  const {
    onLogin,
    onSkip,
    title = 'Authentication Required',
    message = 'This chat requires authentication. Would you like to log in to continue?',
    loginButtonText = 'Log In',
    skipButtonText = 'Continue as Guest',
    backgroundColor = defaultBackgroundColor$1,
    textColor = defaultTextColor$1,
    buttonColor = defaultButtonColor$2,
    buttonTextColor = defaultButtonTextColor
  } = props;
  return (() => {
    const _el$ = _tmpl$$5(),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.firstChild,
      _el$4 = _el$3.firstChild,
      _el$5 = _el$4.nextSibling,
      _el$6 = _el$5.nextSibling,
      _el$7 = _el$6.nextSibling,
      _el$8 = _el$7.firstChild,
      _el$9 = _el$8.nextSibling;
    _el$.style.setProperty("font-family", "Poppins, sans-serif");
    backgroundColor != null ? _el$.style.setProperty("background", backgroundColor) : _el$.style.removeProperty("background");
    textColor != null ? _el$.style.setProperty("color", textColor) : _el$.style.removeProperty("color");
    textColor != null ? _el$5.style.setProperty("color", textColor) : _el$5.style.removeProperty("color");
    insert(_el$5, title);
    textColor != null ? _el$6.style.setProperty("color", textColor) : _el$6.style.removeProperty("color");
    _el$6.style.setProperty("opacity", "0.8");
    insert(_el$6, message);
    addEventListener(_el$8, "click", onLogin, true);
    buttonColor != null ? _el$8.style.setProperty("background-color", buttonColor) : _el$8.style.removeProperty("background-color");
    buttonTextColor != null ? _el$8.style.setProperty("color", buttonTextColor) : _el$8.style.removeProperty("color");
    insert(_el$8, loginButtonText);
    addEventListener(_el$9, "click", onSkip, true);
    _el$9.style.setProperty("border-color", "#d1d5db");
    textColor != null ? _el$9.style.setProperty("color", textColor) : _el$9.style.removeProperty("color");
    insert(_el$9, skipButtonText);
    return _el$;
  })();
};
/**
 * Loading component for authentication state
 */
const AuthenticationLoading = props => {
  const {
    backgroundColor = defaultBackgroundColor$1,
    textColor = defaultTextColor$1,
    message = 'Checking authentication...'
  } = props;
  return (() => {
    const _el$10 = _tmpl$2$3(),
      _el$11 = _el$10.firstChild,
      _el$12 = _el$11.firstChild,
      _el$13 = _el$12.firstChild,
      _el$14 = _el$12.nextSibling;
    _el$10.style.setProperty("font-family", "Poppins, sans-serif");
    backgroundColor != null ? _el$10.style.setProperty("background", backgroundColor) : _el$10.style.removeProperty("background");
    textColor != null ? _el$10.style.setProperty("color", textColor) : _el$10.style.removeProperty("color");
    _el$13.style.setProperty("color", "#3B81F6");
    textColor != null ? _el$14.style.setProperty("color", textColor) : _el$14.style.removeProperty("color");
    _el$14.style.setProperty("opacity", "0.8");
    insert(_el$14, message);
    return _el$10;
  })();
};
/**
 * Error component for authentication failures
 */
const AuthenticationError = props => {
  const {
    error,
    onRetry,
    onSkip,
    backgroundColor = defaultBackgroundColor$1,
    textColor = defaultTextColor$1,
    buttonColor = defaultButtonColor$2,
    buttonTextColor = defaultButtonTextColor
  } = props;
  return (() => {
    const _el$15 = _tmpl$5$1(),
      _el$16 = _el$15.firstChild,
      _el$17 = _el$16.firstChild,
      _el$18 = _el$17.firstChild,
      _el$19 = _el$18.nextSibling,
      _el$20 = _el$19.nextSibling,
      _el$21 = _el$20.nextSibling;
    _el$15.style.setProperty("font-family", "Poppins, sans-serif");
    backgroundColor != null ? _el$15.style.setProperty("background", backgroundColor) : _el$15.style.removeProperty("background");
    textColor != null ? _el$15.style.setProperty("color", textColor) : _el$15.style.removeProperty("color");
    textColor != null ? _el$19.style.setProperty("color", textColor) : _el$19.style.removeProperty("color");
    textColor != null ? _el$20.style.setProperty("color", textColor) : _el$20.style.removeProperty("color");
    _el$20.style.setProperty("opacity", "0.8");
    insert(_el$20, error);
    insert(_el$21, createComponent(Show, {
      when: onRetry,
      get children() {
        const _el$22 = _tmpl$3$2();
        addEventListener(_el$22, "click", onRetry, true);
        buttonColor != null ? _el$22.style.setProperty("background-color", buttonColor) : _el$22.style.removeProperty("background-color");
        buttonTextColor != null ? _el$22.style.setProperty("color", buttonTextColor) : _el$22.style.removeProperty("color");
        return _el$22;
      }
    }), null);
    insert(_el$21, createComponent(Show, {
      when: onSkip,
      get children() {
        const _el$23 = _tmpl$4$2();
        addEventListener(_el$23, "click", onSkip, true);
        _el$23.style.setProperty("border-color", "#d1d5db");
        textColor != null ? _el$23.style.setProperty("color", textColor) : _el$23.style.removeProperty("color");
        return _el$23;
      }
    }), null);
    return _el$15;
  })();
};
delegateEvents(["click"]);

const _tmpl$$4 = /*#__PURE__*/template(`<div class="px-2 py-1 text-xs font-bold rounded">`);
const AuthenticationStatusTag = props => {
  const getAuthStatus = () => {
    if (!props.authService || props.authService.isAuthDisabled()) {
      return null; // Don't show tag if auth is disabled
    }

    return props.authService.isAuthenticated();
  };
  const authStatus = getAuthStatus();
  return createComponent(Show, {
    when: authStatus !== null,
    get children() {
      const _el$ = _tmpl$$4();
      (authStatus ? 'white' : 'black') != null ? _el$.style.setProperty("background-color", authStatus ? 'white' : 'black') : _el$.style.removeProperty("background-color");
      (authStatus ? 'red' : 'white') != null ? _el$.style.setProperty("color", authStatus ? 'red' : 'white') : _el$.style.removeProperty("color");
      _el$.style.setProperty("text-transform", "uppercase");
      _el$.style.setProperty("font-size", "10px");
      _el$.style.setProperty("line-height", "1");
      _el$.style.setProperty("border-radius", "4px");
      _el$.style.setProperty("margin-left", "8px");
      _el$.style.setProperty("white-space", "nowrap");
      insert(_el$, authStatus ? 'AUTHENTICATED' : 'UNAUTHENTICATED');
      return _el$;
    }
  });
};

const _tmpl$$3 = /*#__PURE__*/template(`<div class="fixed inset-0 rounded-lg flex items-center justify-center backdrop-blur-sm z-50"><div class="p-6 rounded-lg shadow-lg max-w-md w-full text-center mx-4 font-sans"><h2 class="text-xl font-semibold mb-4 flex justify-center items-center">Your Feedback</h2><textarea class="w-full p-2 border border-gray-300 rounded-md mb-4" rows="4" placeholder="Please provide your feedback..."></textarea><div class="flex justify-center space-x-4"><button class="font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline">Cancel</button><button class="font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline">Submit`),
  _tmpl$2$2 = /*#__PURE__*/template(`<div class="w-full h-full flex flex-col items-center justify-center px-4 py-8 rounded-lg"><div class="w-full max-w-md bg-white shadow-lg rounded-lg overflow-hidden"><div class="p-6"><h2 class="text-xl font-bold mb-2"></h2><form class="space-y-4"><div class="pt-4"><button type="submit" class="w-full py-2 px-4 text-white font-semibold rounded-md focus:outline-none transition duration-300 ease-in-out">Submit`),
  _tmpl$3$1 = /*#__PURE__*/template(`<p class="text-gray-600 mb-6">`),
  _tmpl$4$1 = /*#__PURE__*/template(`<div class="space-y-2"><label class="block text-sm font-medium">`),
  _tmpl$5 = /*#__PURE__*/template(`<input type="text" class="w-full px-3 py-2 rounded-md focus:outline-none" required>`),
  _tmpl$6 = /*#__PURE__*/template(`<input type="number" class="w-full px-3 py-2 rounded-md focus:outline-none" required>`),
  _tmpl$7 = /*#__PURE__*/template(`<div class="flex items-center"><input type="checkbox" class="h-4 w-4 rounded text-blue-600 focus:ring-blue-500"><span class="ml-2">Yes`),
  _tmpl$8 = /*#__PURE__*/template(`<select class="w-full px-3 py-2 rounded-md focus:outline-none" required><option value="">Select an option`),
  _tmpl$9 = /*#__PURE__*/template(`<option>`),
  _tmpl$10 = /*#__PURE__*/template(`<button class="group w-12 h-12 flex items-center justify-center relative rounded-[10px] overflow-hidden transition-colors duration-200"><img class="w-full h-full bg-cover"><span class="absolute hidden group-hover:flex items-center justify-center z-10 w-full h-full top-0 left-0 bg-black/10 rounded-[10px] transition-colors duration-200">`),
  _tmpl$11 = /*#__PURE__*/template(`<div class="inline-flex basis-auto flex-grow-0 flex-shrink-0 justify-between items-center rounded-xl h-12 p-1 mr-1 bg-gray-500"><audio class="block bg-cover bg-center w-full h-full rounded-none text-transparent" controls></audio><button class="w-7 h-7 flex items-center justify-center bg-transparent p-1">`),
  _tmpl$12 = /*#__PURE__*/template(`<div class="w-full flex flex-row flex-wrap px-5 py-[10px] gap-2">`),
  _tmpl$13 = /*#__PURE__*/template(`<div class="flex items-center gap-1 px-5"><span class="text-sm text-gray-700">Try these prompts`),
  _tmpl$14 = /*#__PURE__*/template(`<div class="w-full flex items-center justify-start gap-2 px-5 pt-2 border-t border-[#eeeeee]">`),
  _tmpl$15 = /*#__PURE__*/template(`<div><div class="flex flex-col w-full h-full justify-start z-0"><div class="overflow-y-scroll flex flex-col flex-grow min-w-full w-full px-3 pt-[70px] relative scrollable-container chatbot-chat-view scroll-smooth"></div><div class="w-full px-5 pt-2 pb-1">`),
  _tmpl$16 = /*#__PURE__*/template(`<div class="absolute top-0 left-0 bottom-0 right-0 w-full h-full z-50">`),
  _tmpl$17 = /*#__PURE__*/template(`<div class="absolute top-0 left-0 bottom-0 right-0 flex flex-col items-center justify-center bg-black/60 backdrop-blur-sm text-white z-40 gap-2 border-2 border-dashed"><h2 class="text-xl font-semibold">Drop here to upload`),
  _tmpl$18 = /*#__PURE__*/template(`<span>`),
  _tmpl$19 = /*#__PURE__*/template(`<span>Max Allowed Size: <!> MB`),
  _tmpl$20 = /*#__PURE__*/template(`<div>`),
  _tmpl$21 = /*#__PURE__*/template(`<span class="px-3 whitespace-pre-wrap font-semibold max-w-full">`),
  _tmpl$22 = /*#__PURE__*/template(`<span>Clear`),
  _tmpl$23 = /*#__PURE__*/template(`<div class="flex flex-row items-center w-full h-[50px] absolute top-0 left-0 z-10"><div>`),
  _tmpl$24 = /*#__PURE__*/template(`<div class="w-full flex items-center justify-between p-4 border border-[#eeeeee]"><div class="w-full flex items-center justify-between gap-3"><span class="text-base">To record audio, use modern browsers like Chrome or Firefox that support audio recording.</span><button class="py-2 px-4 justify-center flex items-center bg-red-500 text-white rounded-md" type="button">Okay`),
  _tmpl$25 = /*#__PURE__*/template(`<span>Send`),
  _tmpl$26 = /*#__PURE__*/template(`<div class="h-[58px] flex items-center justify-between chatbot-input border border-[#eeeeee]" data-testid="input"><div class="flex items-center gap-3 px-4 py-2"><span></span><span></span></div><div class="flex items-center">`),
  _tmpl$27 = /*#__PURE__*/template(`<span class="ml-1.5">Sending...`);
const defaultWelcomeMessage = 'Hi there! How can I help?';
/*const sourceDocuments = [
    {
        "pageContent": "I know some are talking about "living with COVID-19". Tonight – I say that we will never just accept living with COVID-19. \r\n\r\nWe will continue to combat the virus as we do other diseases. And because this is a virus that mutates and spreads, we will stay on guard. \r\n\r\nHere are four common sense steps as we move forward safely.  \r\n\r\nFirst, stay protected with vaccines and treatments. We know how incredibly effective vaccines are. If you're vaccinated and boosted you have the highest degree of protection. \r\n\r\nWe will never give up on vaccinating more Americans. Now, I know parents with kids under 5 are eager to see a vaccine authorized for their children. \r\n\r\nThe scientists are working hard to get that done and we'll be ready with plenty of vaccines when they do. \r\n\r\nWe're also ready with anti-viral treatments. If you get COVID-19, the Pfizer pill reduces your chances of ending up in the hospital by 90%.",
        "metadata": {
          "source": "blob",
          "blobType": "",
          "loc": {
            "lines": {
              "from": 450,
              "to": 462
            }
          }
        }
    },
    {
        "pageContent": "sistance,  and  polishing  [65].  For  instance,  AI  tools  generate\nsuggestions based on inputting keywords or topics. The tools\nanalyze  search  data,  trending  topics,  and  popular  queries  to\ncreate  fresh  content.  What's  more,  AIGC  assists  in  writing\narticles and posting blogs on specific topics. While these tools\nmay not be able to produce high-quality content by themselves,\nthey can provide a starting point for a writer struggling with\nwriter's block.\nH.  Cons of AIGC\nOne of the main concerns among the public is the potential\nlack  of  creativity  and  human  touch  in  AIGC.  In  addition,\nAIGC sometimes lacks a nuanced understanding of language\nand context, which may lead to inaccuracies and misinterpre-\ntations. There are also concerns about the ethics and legality\nof using AIGC, particularly when it results in issues such as\ncopyright  infringement  and  data  privacy.  In  this  section,  we\nwill discuss some of the disadvantages of AIGC (Table IV).",
        "metadata": {
          "source": "blob",
          "blobType": "",
          "pdf": {
            "version": "1.10.100",
            "info": {
              "PDFFormatVersion": "1.5",
              "IsAcroFormPresent": false,
              "IsXFAPresent": false,
              "Title": "",
              "Author": "",
              "Subject": "",
              "Keywords": "",
              "Creator": "LaTeX with hyperref",
              "Producer": "pdfTeX-1.40.21",
              "CreationDate": "D:20230414003603Z",
              "ModDate": "D:20230414003603Z",
              "Trapped": {
                "name": "False"
              }
            },
            "metadata": null,
            "totalPages": 17
          },
          "loc": {
            "pageNumber": 8,
            "lines": {
              "from": 301,
              "to": 317
            }
          }
        }
    },
    {
        "pageContent": "Main article: Views of Elon Musk",
        "metadata": {
          "source": "https://en.wikipedia.org/wiki/Elon_Musk",
          "loc": {
            "lines": {
              "from": 2409,
              "to": 2409
            }
          }
        }
    },
    {
        "pageContent": "First Name: John\nLast Name: Doe\nAddress: 120 jefferson st.\nStates: Riverside\nCode: NJ\nPostal: 8075",
        "metadata": {
          "source": "blob",
          "blobType": "",
          "line": 1,
          "loc": {
            "lines": {
              "from": 1,
              "to": 6
            }
          }
        }
    },
]*/
const defaultBackgroundColor = '#ffffff';
const defaultTextColor = '#303235';
const defaultTitleBackgroundColor = '#3B81F6';
/* FeedbackDialog component - for collecting user feedback */
const FeedbackDialog = props => {
  return createComponent(Show, {
    get when() {
      return props.isOpen;
    },
    get children() {
      const _el$ = _tmpl$$3(),
        _el$2 = _el$.firstChild,
        _el$3 = _el$2.firstChild,
        _el$4 = _el$3.nextSibling,
        _el$5 = _el$4.nextSibling,
        _el$6 = _el$5.firstChild,
        _el$7 = _el$6.nextSibling;
      _el$.style.setProperty("background", "rgba(0, 0, 0, 0.4)");
      _el$2.style.setProperty("background", "white");
      _el$2.style.setProperty("color", "black");
      _el$4.$$input = e => props.setFeedbackValue(e.target.value);
      addEventListener(_el$6, "click", props.onClose, true);
      _el$6.style.setProperty("background", "#ef4444");
      _el$6.style.setProperty("color", "white");
      addEventListener(_el$7, "click", props.onSubmit, true);
      _el$7.style.setProperty("background", "#3b82f6");
      _el$7.style.setProperty("color", "white");
      createRenderEffect(() => _el$4.value = props.feedbackValue);
      return _el$;
    }
  });
};
/* FormInputView component - for displaying the form input */
const FormInputView = props => {
  const [formData, setFormData] = createSignal({});
  const handleInputChange = (name, value) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  const handleSubmit = e => {
    e.preventDefault();
    props.onSubmit(formData());
  };
  return (() => {
    const _el$8 = _tmpl$2$2(),
      _el$9 = _el$8.firstChild,
      _el$10 = _el$9.firstChild,
      _el$11 = _el$10.firstChild,
      _el$12 = _el$11.nextSibling,
      _el$13 = _el$12.firstChild,
      _el$14 = _el$13.firstChild;
    _el$8.style.setProperty("font-family", "Poppins, sans-serif");
    _el$9.style.setProperty("font-family", "Poppins, sans-serif");
    insert(_el$11, () => props.title);
    insert(_el$10, (() => {
      const _c$ = createMemo(() => !!props.description);
      return () => _c$() && (() => {
        const _el$15 = _tmpl$3$1();
        insert(_el$15, () => props.description);
        createRenderEffect(() => (props.textColor || defaultTextColor) != null ? _el$15.style.setProperty("color", props.textColor || defaultTextColor) : _el$15.style.removeProperty("color"));
        return _el$15;
      })();
    })(), _el$12);
    _el$12.addEventListener("submit", handleSubmit);
    insert(_el$12, createComponent(For, {
      get each() {
        return props.inputParams;
      },
      children: param => (() => {
        const _el$16 = _tmpl$4$1(),
          _el$17 = _el$16.firstChild;
        insert(_el$17, () => param.label);
        insert(_el$16, (() => {
          const _c$2 = createMemo(() => param.type === 'string');
          return () => _c$2() && (() => {
            const _el$18 = _tmpl$5();
            _el$18.$$input = e => handleInputChange(param.name, e.target.value);
            _el$18.addEventListener("blur", e => e.target.style.border = '1px solid #9ca3af');
            _el$18.addEventListener("focus", e => e.target.style.border = '1px solid #3b82f6');
            _el$18.style.setProperty("border", "1px solid #9ca3af");
            _el$18.style.setProperty("border-radius", "0.375rem");
            createRenderEffect(() => setAttribute(_el$18, "name", param.name));
            return _el$18;
          })();
        })(), null);
        insert(_el$16, (() => {
          const _c$3 = createMemo(() => param.type === 'number');
          return () => _c$3() && (() => {
            const _el$19 = _tmpl$6();
            _el$19.$$input = e => handleInputChange(param.name, parseFloat(e.target.value));
            _el$19.addEventListener("blur", e => e.target.style.border = '1px solid #9ca3af');
            _el$19.addEventListener("focus", e => e.target.style.border = '1px solid #3b82f6');
            _el$19.style.setProperty("border", "1px solid #9ca3af");
            _el$19.style.setProperty("border-radius", "0.375rem");
            createRenderEffect(() => setAttribute(_el$19, "name", param.name));
            return _el$19;
          })();
        })(), null);
        insert(_el$16, (() => {
          const _c$4 = createMemo(() => param.type === 'boolean');
          return () => _c$4() && (() => {
            const _el$20 = _tmpl$7(),
              _el$21 = _el$20.firstChild;
            _el$21.addEventListener("change", e => handleInputChange(param.name, e.target.checked));
            _el$21.style.setProperty("border", "1px solid #9ca3af");
            createRenderEffect(() => setAttribute(_el$21, "name", param.name));
            return _el$20;
          })();
        })(), null);
        insert(_el$16, (() => {
          const _c$5 = createMemo(() => param.type === 'options');
          return () => _c$5() && (() => {
            const _el$22 = _tmpl$8();
              _el$22.firstChild;
            _el$22.addEventListener("change", e => handleInputChange(param.name, e.target.value));
            _el$22.addEventListener("blur", e => e.target.style.border = '1px solid #9ca3af');
            _el$22.addEventListener("focus", e => e.target.style.border = '1px solid #3b82f6');
            _el$22.style.setProperty("border", "1px solid #9ca3af");
            _el$22.style.setProperty("border-radius", "0.375rem");
            insert(_el$22, createComponent(For, {
              get each() {
                return param.options;
              },
              children: option => (() => {
                const _el$24 = _tmpl$9();
                insert(_el$24, () => option.label);
                createRenderEffect(() => _el$24.value = option.name);
                return _el$24;
              })()
            }), null);
            createRenderEffect(() => setAttribute(_el$22, "name", param.name));
            return _el$22;
          })();
        })(), null);
        return _el$16;
      })()
    }), _el$13);
    createRenderEffect(_p$ => {
      const _v$ = props.fontSize ? `${props.fontSize}px` : '16px',
        _v$2 = props.parentBackgroundColor || defaultBackgroundColor,
        _v$3 = props.textColor || defaultTextColor,
        _v$4 = props.fontSize ? `${props.fontSize}px` : '16px',
        _v$5 = props.backgroundColor || defaultBackgroundColor,
        _v$6 = props.textColor || defaultTextColor,
        _v$7 = props.sendButtonColor || '#3B81F6';
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$8.style.setProperty("font-size", _v$) : _el$8.style.removeProperty("font-size"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$8.style.setProperty("background", _v$2) : _el$8.style.removeProperty("background"));
      _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$8.style.setProperty("color", _v$3) : _el$8.style.removeProperty("color"));
      _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$9.style.setProperty("font-size", _v$4) : _el$9.style.removeProperty("font-size"));
      _v$5 !== _p$._v$5 && ((_p$._v$5 = _v$5) != null ? _el$9.style.setProperty("background", _v$5) : _el$9.style.removeProperty("background"));
      _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$9.style.setProperty("color", _v$6) : _el$9.style.removeProperty("color"));
      _v$7 !== _p$._v$7 && ((_p$._v$7 = _v$7) != null ? _el$14.style.setProperty("background-color", _v$7) : _el$14.style.removeProperty("background-color"));
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined,
      _v$4: undefined,
      _v$5: undefined,
      _v$6: undefined,
      _v$7: undefined
    });
    return _el$8;
  })();
};
const Bot = botProps => {
  // set a default value for showTitle if not set and merge with other props
  const props = mergeProps({
    showTitle: true
  }, botProps);
  let chatContainer;
  let botContainer;
  const [userInput, setUserInput] = createSignal('');
  const [loading, setLoading] = createSignal(false);
  const [sourcePopupOpen, setSourcePopupOpen] = createSignal(false);
  const [sourcePopupSrc, setSourcePopupSrc] = createSignal({});
  const [messages, setMessages] = createSignal([{
    message: props.welcomeMessage ?? defaultWelcomeMessage,
    type: 'apiMessage'
  }], {
    equals: false
  });
  const [isChatFlowAvailableToStream, setIsChatFlowAvailableToStream] = createSignal(false);
  const [chatId, setChatId] = createSignal('');
  const [isMessageStopping, setIsMessageStopping] = createSignal(false);
  const [starterPrompts, setStarterPrompts] = createSignal([], {
    equals: false
  });
  const [chatFeedbackStatus, setChatFeedbackStatus] = createSignal(false);
  const [fullFileUpload, setFullFileUpload] = createSignal(false);
  const [uploadsConfig, setUploadsConfig] = createSignal();
  const [leadsConfig, setLeadsConfig] = createSignal();
  const [isLeadSaved, setIsLeadSaved] = createSignal(false);
  const [leadEmail, setLeadEmail] = createSignal('');
  const [disclaimerPopupOpen, setDisclaimerPopupOpen] = createSignal(false);
  const [openFeedbackDialog, setOpenFeedbackDialog] = createSignal(false);
  const [feedback, setFeedback] = createSignal('');
  const [pendingActionData, setPendingActionData] = createSignal(null);
  const [feedbackType, setFeedbackType] = createSignal('');
  // start input type
  const [startInputType, setStartInputType] = createSignal('');
  const [formTitle, setFormTitle] = createSignal('');
  const [formDescription, setFormDescription] = createSignal('');
  // Authentication state
  const [authService, setAuthService] = createSignal(null);
  const [showAuthPrompt, setShowAuthPrompt] = createSignal(false);
  const [authError, setAuthError] = createSignal(null);
  const [isAuthenticating, setIsAuthenticating] = createSignal(false);
  const [isGuestMode, setIsGuestMode] = createSignal(false);
  // Reactive auth state that updates when auth service state changes
  const [authState, setAuthState] = createSignal(null);
  createSignal({});
  const [formInputParams, setFormInputParams] = createSignal([]);
  // drag & drop file input
  // TODO: fix this type
  const [previews, setPreviews] = createSignal([]);
  // audio recording
  const [elapsedTime, setElapsedTime] = createSignal('00:00');
  const [isRecording, setIsRecording] = createSignal(false);
  const [recordingNotSupported, setRecordingNotSupported] = createSignal(false);
  const [isLoadingRecording, setIsLoadingRecording] = createSignal(false);
  // follow-up prompts
  const [followUpPromptsStatus, setFollowUpPromptsStatus] = createSignal(false);
  const [followUpPrompts, setFollowUpPrompts] = createSignal([]);
  // drag & drop
  const [isDragActive, setIsDragActive] = createSignal(false);
  const [uploadedFiles, setUploadedFiles] = createSignal([]);
  const [fullFileUploadAllowedTypes, setFullFileUploadAllowedTypes] = createSignal('*');
  createMemo(() => {
    const customerId = props.chatflowConfig?.vars?.customerId;
    setChatId(customerId ? `${customerId.toString()}+${v4()}` : v4());
  });
  onMount(() => {
    // Initialize authentication if configured
    if (props.authentication && props.authentication.mode !== 'disabled') {
      try {
        const service = createAuthService(props.authentication);
        setAuthService(service);
        // Check authentication state
        const authState = service.getAuthState();
        setIsAuthenticating(authState.isLoading);
        if (authState.error) {
          setAuthError(authState.error);
        }
        // Set up reactive effect to watch auth state changes
        // Poll the auth service state periodically to ensure UI updates
        const pollAuthState = () => {
          const currentService = authService();
          if (currentService) {
            const state = currentService.getAuthState();
            setAuthState(state);
            setIsAuthenticating(state.isLoading);
            setAuthError(state.error || null);
            // Removed debug logging - authentication is working properly
            // Update auth prompt visibility
            if (currentService.isAuthRequired() && !currentService.isAuthenticated() && !isGuestMode()) {
              setShowAuthPrompt(true);
            } else {
              setShowAuthPrompt(false);
            }
          }
        };
        // Poll immediately and then every 500ms
        pollAuthState();
        const pollInterval = setInterval(pollAuthState, 500);
        // Cleanup interval on unmount
        onCleanup(() => {
          clearInterval(pollInterval);
        });
        // Show auth prompt if required and not authenticated
        if (service.isAuthRequired() && !service.isAuthenticated()) {
          setShowAuthPrompt(true);
        }
      } catch (error) {
        console.error('Failed to initialize authentication:', error);
        setAuthError(error instanceof Error ? error.message : 'Authentication initialization failed');
      }
    }
    if (botProps?.observersConfig) {
      const {
        observeUserInput,
        observeLoading,
        observeMessages
      } = botProps.observersConfig;
      typeof observeUserInput === 'function' &&
      // eslint-disable-next-line solid/reactivity
      createMemo(() => {
        observeUserInput(userInput());
      });
      typeof observeLoading === 'function' &&
      // eslint-disable-next-line solid/reactivity
      createMemo(() => {
        observeLoading(loading());
      });
      typeof observeMessages === 'function' &&
      // eslint-disable-next-line solid/reactivity
      createMemo(() => {
        observeMessages(messages());
      });
    }
    return;
  });
  const scrollToBottom = () => {
    setTimeout(() => {
      chatContainer?.scrollTo(0, chatContainer.scrollHeight);
    }, 50);
  };
  // Authentication handlers
  const handleLogin = async () => {
    const service = authService();
    if (!service) return;
    try {
      setIsAuthenticating(true);
      setAuthError(null);
      setIsGuestMode(false); // Reset guest mode when user chooses to authenticate
      await service.login();
    } catch (error) {
      console.error('Login failed:', error);
      setAuthError(error instanceof Error ? error.message : 'Login failed');
      setIsAuthenticating(false);
    }
  };
  const handleSkipAuth = () => {
    setShowAuthPrompt(false);
    setAuthError(null);
    setIsGuestMode(true);
  };
  const handleAuthRetry = () => {
    setAuthError(null);
    const service = authService();
    if (service && service.isAuthRequired()) {
      setShowAuthPrompt(true);
    }
  };
  // Check if chat should be blocked by authentication
  const isChatBlocked = () => {
    const service = authService();
    if (!service || service.isAuthDisabled()) return false;
    // Allow chat if user is authenticated OR in guest mode
    return service.isAuthRequired() && !service.isAuthenticated() && !isGuestMode();
  };
  /**
   * Add each chat message into localStorage
   */
  const addChatMessage = allMessage => {
    const messages = allMessage.map(item => {
      if (item.fileUploads) {
        const fileUploads = item?.fileUploads.map(file => ({
          type: file.type,
          name: file.name,
          mime: file.mime
        }));
        return {
          ...item,
          fileUploads
        };
      }
      return item;
    });
    setLocalStorageChatflow(props.chatflowid, chatId(), {
      chatHistory: messages
    });
  };
  // Define the audioRef
  let audioRef;
  // CDN link for default receive sound
  const defaultReceiveSound = 'https://cdn.jsdelivr.net/gh/FlowiseAI/FlowiseChatEmbed@latest/src/assets/receive_message.mp3';
  const playReceiveSound = () => {
    if (props.textInput?.receiveMessageSound) {
      let audioSrc = defaultReceiveSound;
      if (props.textInput?.receiveSoundLocation) {
        audioSrc = props.textInput?.receiveSoundLocation;
      }
      audioRef = new Audio(audioSrc);
      audioRef.play();
    }
  };
  let hasSoundPlayed = false;
  const updateLastMessage = text => {
    setMessages(prevMessages => {
      const allMessages = [...lodashExports.cloneDeep(prevMessages)];
      if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
      if (!text) return allMessages;
      allMessages[allMessages.length - 1].message += text;
      allMessages[allMessages.length - 1].rating = undefined;
      allMessages[allMessages.length - 1].dateTime = new Date().toISOString();
      if (!hasSoundPlayed) {
        playReceiveSound();
        hasSoundPlayed = true;
      }
      addChatMessage(allMessages);
      return allMessages;
    });
  };
  const updateErrorMessage = errorMessage => {
    setMessages(prevMessages => {
      const allMessages = [...lodashExports.cloneDeep(prevMessages)];
      allMessages.push({
        message: props.errorMessage || errorMessage,
        type: 'apiMessage'
      });
      addChatMessage(allMessages);
      return allMessages;
    });
  };
  const updateLastMessageSourceDocuments = sourceDocuments => {
    setMessages(data => {
      const updated = data.map((item, i) => {
        if (i === data.length - 1) {
          return {
            ...item,
            sourceDocuments
          };
        }
        return item;
      });
      addChatMessage(updated);
      return [...updated];
    });
  };
  const updateLastMessageUsedTools = usedTools => {
    setMessages(prevMessages => {
      const allMessages = [...lodashExports.cloneDeep(prevMessages)];
      if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
      allMessages[allMessages.length - 1].usedTools = usedTools;
      addChatMessage(allMessages);
      return allMessages;
    });
  };
  const updateLastMessageFileAnnotations = fileAnnotations => {
    setMessages(prevMessages => {
      const allMessages = [...lodashExports.cloneDeep(prevMessages)];
      if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
      allMessages[allMessages.length - 1].fileAnnotations = fileAnnotations;
      addChatMessage(allMessages);
      return allMessages;
    });
  };
  const updateLastMessageAgentReasoning = agentReasoning => {
    setMessages(data => {
      const updated = data.map((item, i) => {
        if (i === data.length - 1) {
          return {
            ...item,
            agentReasoning: typeof agentReasoning === 'string' ? JSON.parse(agentReasoning) : agentReasoning
          };
        }
        return item;
      });
      addChatMessage(updated);
      return [...updated];
    });
  };
  const updateAgentFlowEvent = event => {
    if (event === 'INPROGRESS') {
      setMessages(prevMessages => [...prevMessages, {
        message: '',
        type: 'apiMessage',
        agentFlowEventStatus: event
      }]);
    } else {
      setMessages(prevMessages => {
        const allMessages = [...lodashExports.cloneDeep(prevMessages)];
        if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
        allMessages[allMessages.length - 1].agentFlowEventStatus = event;
        return allMessages;
      });
    }
  };
  const updateAgentFlowExecutedData = agentFlowExecutedData => {
    setMessages(prevMessages => {
      const allMessages = [...lodashExports.cloneDeep(prevMessages)];
      if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
      allMessages[allMessages.length - 1].agentFlowExecutedData = agentFlowExecutedData;
      addChatMessage(allMessages);
      return allMessages;
    });
  };
  const updateLastMessageArtifacts = artifacts => {
    setMessages(prevMessages => {
      const allMessages = [...lodashExports.cloneDeep(prevMessages)];
      if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
      allMessages[allMessages.length - 1].artifacts = artifacts;
      addChatMessage(allMessages);
      return allMessages;
    });
  };
  const updateLastMessageAction = action => {
    setMessages(data => {
      const updated = data.map((item, i) => {
        if (i === data.length - 1) {
          return {
            ...item,
            action: typeof action === 'string' ? JSON.parse(action) : action
          };
        }
        return item;
      });
      addChatMessage(updated);
      return [...updated];
    });
  };
  const clearPreviews = () => {
    // Revoke the data uris to avoid memory leaks
    previews().forEach(file => URL.revokeObjectURL(file.preview));
    setPreviews([]);
  };
  // Handle errors
  const handleError = (message = 'Oops! There seems to be an error. Please try again.', preventOverride) => {
    let errMessage = message;
    if (!preventOverride && props.errorMessage) {
      errMessage = props.errorMessage;
    }
    setMessages(prevMessages => {
      const messages = [...prevMessages, {
        message: errMessage,
        type: 'apiMessage'
      }];
      addChatMessage(messages);
      return messages;
    });
    setLoading(false);
    setUserInput('');
    setUploadedFiles([]);
    scrollToBottom();
  };
  const handleDisclaimerAccept = () => {
    setDisclaimerPopupOpen(false); // Close the disclaimer popup
    setCookie('chatbotDisclaimer', 'true', 365); // Disclaimer accepted
  };

  const promptClick = prompt => {
    handleSubmit(prompt);
  };
  const followUpPromptClick = prompt => {
    setFollowUpPrompts([]);
    handleSubmit(prompt);
  };
  const updateMetadata = (data, input) => {
    if (data.chatId) {
      setChatId(data.chatId);
    }
    // set message id that is needed for feedback
    if (data.chatMessageId) {
      setMessages(prevMessages => {
        const allMessages = [...lodashExports.cloneDeep(prevMessages)];
        if (allMessages[allMessages.length - 1].type === 'apiMessage') {
          allMessages[allMessages.length - 1].messageId = data.chatMessageId;
        }
        addChatMessage(allMessages);
        return allMessages;
      });
    }
    if (input === '' && data.question) {
      // the response contains the question even if it was in an audio format
      // so if input is empty but the response contains the question, update the user message to show the question
      setMessages(prevMessages => {
        const allMessages = [...lodashExports.cloneDeep(prevMessages)];
        if (allMessages[allMessages.length - 2].type === 'apiMessage') return allMessages;
        allMessages[allMessages.length - 2].message = data.question;
        addChatMessage(allMessages);
        return allMessages;
      });
    }
    if (data.followUpPrompts) {
      setMessages(prevMessages => {
        const allMessages = [...lodashExports.cloneDeep(prevMessages)];
        if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
        allMessages[allMessages.length - 1].followUpPrompts = data.followUpPrompts;
        addChatMessage(allMessages);
        return allMessages;
      });
      setFollowUpPrompts(JSON.parse(data.followUpPrompts));
    }
  };
  const fetchResponseFromEventStream = async (chatflowid, params) => {
    const chatId = params.chatId;
    const input = params.question;
    params.streaming = true;
    fetchEventSource(`${props.apiHost}/api/v1/prediction/${chatflowid}`, {
      openWhenHidden: true,
      method: 'POST',
      body: JSON.stringify(params),
      headers: {
        'Content-Type': 'application/json'
      },
      async onopen(response) {
        if (response.ok && response.headers.get('content-type')?.startsWith(EventStreamContentType)) {
          return; // everything's good
        } else if (response.status === 429) {
          const errMessage = (await response.text()) ?? 'Too many requests. Please try again later.';
          handleError(errMessage, true);
          throw new Error(errMessage);
        } else if (response.status === 403) {
          const errMessage = (await response.text()) ?? 'Unauthorized';
          handleError(errMessage);
          throw new Error(errMessage);
        } else if (response.status === 401) {
          const errMessage = (await response.text()) ?? 'Unauthenticated';
          handleError(errMessage);
          throw new Error(errMessage);
        } else {
          throw new Error();
        }
      },
      async onmessage(ev) {
        const payload = JSON.parse(ev.data);
        switch (payload.event) {
          case 'start':
            setMessages(prevMessages => [...prevMessages, {
              message: '',
              type: 'apiMessage'
            }]);
            break;
          case 'token':
            updateLastMessage(payload.data);
            break;
          case 'sourceDocuments':
            updateLastMessageSourceDocuments(payload.data);
            break;
          case 'usedTools':
            updateLastMessageUsedTools(payload.data);
            break;
          case 'fileAnnotations':
            updateLastMessageFileAnnotations(payload.data);
            break;
          case 'agentReasoning':
            updateLastMessageAgentReasoning(payload.data);
            break;
          case 'agentFlowEvent':
            updateAgentFlowEvent(payload.data);
            break;
          case 'agentFlowExecutedData':
            updateAgentFlowExecutedData(payload.data);
            break;
          case 'action':
            updateLastMessageAction(payload.data);
            break;
          case 'artifacts':
            updateLastMessageArtifacts(payload.data);
            break;
          case 'metadata':
            updateMetadata(payload.data, input);
            break;
          case 'error':
            updateErrorMessage(payload.data);
            break;
          case 'abort':
            abortMessage();
            closeResponse();
            break;
          case 'end':
            setLocalStorageChatflow(chatflowid, chatId);
            closeResponse();
            break;
        }
      },
      async onclose() {
        closeResponse();
      },
      onerror(err) {
        console.error('EventSource Error: ', err);
        closeResponse();
        throw err;
      }
    });
  };
  const closeResponse = () => {
    setLoading(false);
    setUserInput('');
    setUploadedFiles([]);
    hasSoundPlayed = false;
    setTimeout(() => {
      scrollToBottom();
    }, 100);
  };
  const abortMessage = () => {
    setIsMessageStopping(false);
    setMessages(prevMessages => {
      const allMessages = [...lodashExports.cloneDeep(prevMessages)];
      if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages;
      const lastAgentReasoning = allMessages[allMessages.length - 1].agentReasoning;
      if (lastAgentReasoning && lastAgentReasoning.length > 0) {
        allMessages[allMessages.length - 1].agentReasoning = lastAgentReasoning.filter(reasoning => !reasoning.nextAgent);
      }
      return allMessages;
    });
  };
  const handleFileUploads = async uploads => {
    if (!uploadedFiles().length) return uploads;
    if (fullFileUpload()) {
      const filesWithFullUploadType = uploadedFiles().filter(file => file.type === 'file:full');
      if (filesWithFullUploadType.length > 0) {
        const formData = new FormData();
        for (const file of filesWithFullUploadType) {
          formData.append('files', file.file);
        }
        formData.append('chatId', chatId());
        const response = await createAttachmentWithFormData({
          chatflowid: props.chatflowid,
          apiHost: props.apiHost,
          formData: formData
        });
        if (!response.data) {
          throw new Error('Unable to upload documents');
        } else {
          const data = response.data;
          for (const extractedFileData of data) {
            const content = extractedFileData.content;
            const fileName = extractedFileData.name;
            // find matching name in previews and replace data with content
            const uploadIndex = uploads.findIndex(upload => upload.name === fileName);
            if (uploadIndex !== -1) {
              uploads[uploadIndex] = {
                ...uploads[uploadIndex],
                data: content,
                name: fileName,
                type: 'file:full'
              };
            }
          }
        }
      }
    } else if (uploadsConfig()?.isRAGFileUploadAllowed) {
      const filesWithRAGUploadType = uploadedFiles().filter(file => file.type === 'file:rag');
      if (filesWithRAGUploadType.length > 0) {
        const formData = new FormData();
        for (const file of filesWithRAGUploadType) {
          formData.append('files', file.file);
        }
        formData.append('chatId', chatId());
        const response = await upsertVectorStoreWithFormData({
          chatflowid: props.chatflowid,
          apiHost: props.apiHost,
          formData: formData
        });
        if (!response.data) {
          throw new Error('Unable to upload documents');
        } else {
          // delay for vector store to be updated
          const delay = delayInms => {
            return new Promise(resolve => setTimeout(resolve, delayInms));
          };
          await delay(2500); //TODO: check if embeddings can be retrieved using file name as metadata filter
          uploads = uploads.map(upload => {
            return {
              ...upload,
              type: 'file:rag'
            };
          });
        }
      }
    }
    return uploads;
  };
  // Handle form submission
  const handleSubmit = async (value, action, humanInput) => {
    if (typeof value === 'string' && value.trim() === '') {
      const containsFile = previews().filter(item => !item.mime.startsWith('image') && item.type !== 'audio').length > 0;
      if (!previews().length || previews().length && containsFile) {
        return;
      }
    }
    let formData = {};
    if (typeof value === 'object') {
      formData = value;
      value = Object.entries(value).map(([key, value]) => `${key}: ${value}`).join('\n');
    }
    setLoading(true);
    scrollToBottom();
    let uploads = previews().map(item => {
      return {
        data: item.data,
        type: item.type,
        name: item.name,
        mime: item.mime
      };
    });
    try {
      uploads = await handleFileUploads(uploads);
    } catch (error) {
      handleError('Unable to upload documents', true);
      return;
    }
    clearPreviews();
    setMessages(prevMessages => {
      const messages = [...prevMessages, {
        message: value,
        type: 'userMessage',
        fileUploads: uploads
      }];
      addChatMessage(messages);
      return messages;
    });
    const body = {
      question: value,
      chatId: chatId()
    };
    if (startInputType() === 'formInput') {
      body.form = formData;
      delete body.question;
    }
    if (uploads && uploads.length > 0) body.uploads = uploads;
    if (props.chatflowConfig) body.overrideConfig = props.chatflowConfig;
    if (leadEmail()) body.leadEmail = leadEmail();
    if (action) body.action = action;
    if (humanInput) body.humanInput = humanInput;
    if (isChatFlowAvailableToStream()) {
      fetchResponseFromEventStream(props.chatflowid, body);
    } else {
      const result = await sendMessageQuery({
        chatflowid: props.chatflowid,
        apiHost: props.apiHost,
        body,
        onRequest: props.onRequest
      });
      if (result.data) {
        const data = result.data;
        let text = '';
        if (data.text) text = data.text;else if (data.json) text = JSON.stringify(data.json, null, 2);else text = JSON.stringify(data, null, 2);
        if (data?.chatId) setChatId(data.chatId);
        playReceiveSound();
        setMessages(prevMessages => {
          const allMessages = [...lodashExports.cloneDeep(prevMessages)];
          const newMessage = {
            message: text,
            id: data?.chatMessageId,
            sourceDocuments: data?.sourceDocuments,
            usedTools: data?.usedTools,
            fileAnnotations: data?.fileAnnotations,
            agentReasoning: data?.agentReasoning,
            agentFlowExecutedData: data?.agentFlowExecutedData,
            action: data?.action,
            artifacts: data?.artifacts,
            type: 'apiMessage',
            feedback: null,
            dateTime: new Date().toISOString()
          };
          allMessages.push(newMessage);
          addChatMessage(allMessages);
          return allMessages;
        });
        updateMetadata(data, value);
        setLoading(false);
        setUserInput('');
        setUploadedFiles([]);
        scrollToBottom();
      }
      if (result.error) {
        const error = result.error;
        console.error(error);
        if (typeof error === 'object') {
          handleError(`Error: ${error?.message.replaceAll('Error:', ' ')}`);
          return;
        }
        if (typeof error === 'string') {
          handleError(error);
          return;
        }
        handleError();
        return;
      }
    }
    // Update last question to avoid saving base64 data to localStorage
    if (uploads && uploads.length > 0) {
      setMessages(data => {
        const messages = data.map((item, i) => {
          if (i === data.length - 2 && item.type === 'userMessage') {
            if (item.fileUploads) {
              const fileUploads = item?.fileUploads.map(file => ({
                type: file.type,
                name: file.name,
                mime: file.mime
              }));
              return {
                ...item,
                fileUploads
              };
            }
          }
          return item;
        });
        addChatMessage(messages);
        return [...messages];
      });
    }
  };
  const onSubmitResponse = (actionData, feedback = '', type = '') => {
    let fbType = feedbackType();
    if (type) {
      fbType = type;
    }
    const question = feedback ? feedback : fbType.charAt(0).toUpperCase() + fbType.slice(1);
    handleSubmit(question, undefined, {
      type: fbType,
      startNodeId: actionData?.nodeId,
      feedback
    });
  };
  const handleSubmitFeedback = () => {
    if (pendingActionData()) {
      onSubmitResponse(pendingActionData(), feedback());
      setOpenFeedbackDialog(false);
      setFeedback('');
      setPendingActionData(null);
      setFeedbackType('');
    }
  };
  const handleActionClick = async (elem, action) => {
    setUserInput(elem.label);
    setMessages(data => {
      const updated = data.map((item, i) => {
        if (i === data.length - 1) {
          return {
            ...item,
            action: null
          };
        }
        return item;
      });
      addChatMessage(updated);
      return [...updated];
    });
    if (elem.type.includes('agentflowv2')) {
      const type = elem.type.includes('approve') ? 'proceed' : 'reject';
      setFeedbackType(type);
      if (action && action.data && action.data.input && action.data.input.humanInputEnableFeedback) {
        setPendingActionData(action.data);
        setOpenFeedbackDialog(true);
      } else if (action) {
        onSubmitResponse(action.data, '', type);
      }
    } else {
      handleSubmit(elem.label, action);
    }
  };
  const clearChat = () => {
    try {
      removeLocalStorageChatHistory(props.chatflowid);
      setChatId(props.chatflowConfig?.vars?.customerId ? `${(props.chatflowConfig?.vars).customerId.toString()}+${v4()}` : v4());
      setUploadedFiles([]);
      const messages = [{
        message: props.welcomeMessage ?? defaultWelcomeMessage,
        type: 'apiMessage'
      }];
      if (leadsConfig()?.status && !getLocalStorageChatflow(props.chatflowid)?.lead) {
        messages.push({
          message: '',
          type: 'leadCaptureMessage'
        });
      }
      setMessages(messages);
    } catch (error) {
      const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`;
      console.error(`error: ${errorData}`);
    }
  };
  onMount(() => {
    if (props.clearChatOnReload) {
      clearChat();
      window.addEventListener('beforeunload', clearChat);
      return () => {
        window.removeEventListener('beforeunload', clearChat);
      };
    }
  });
  createEffect(() => {
    if (props.starterPrompts) {
      let prompts;
      if (Array.isArray(props.starterPrompts)) {
        // If starterPrompts is an array
        prompts = props.starterPrompts;
      } else {
        // If starterPrompts is a JSON object
        prompts = Object.values(props.starterPrompts).map(promptObj => promptObj.prompt);
      }
      // Filter out any empty prompts
      return setStarterPrompts(prompts.filter(prompt => prompt !== ''));
    }
  });
  // Auto scroll chat to bottom
  createEffect(() => {
    if (messages()) {
      if (messages().length > 1) {
        setTimeout(() => {
          chatContainer?.scrollTo(0, chatContainer.scrollHeight);
        }, 400);
      }
    }
  });
  createEffect(() => {
    if (props.fontSize && botContainer) botContainer.style.fontSize = `${props.fontSize}px`;
  });
  // eslint-disable-next-line solid/reactivity
  createEffect(async () => {
    if (props.disclaimer) {
      if (getCookie('chatbotDisclaimer') == 'true') {
        setDisclaimerPopupOpen(false);
      } else {
        setDisclaimerPopupOpen(true);
      }
    } else {
      setDisclaimerPopupOpen(false);
    }
    const chatMessage = getLocalStorageChatflow(props.chatflowid);
    if (chatMessage && Object.keys(chatMessage).length) {
      if (chatMessage.chatId) setChatId(chatMessage.chatId);
      const savedLead = chatMessage.lead;
      if (savedLead) {
        setIsLeadSaved(!!savedLead);
        setLeadEmail(savedLead.email);
      }
      const loadedMessages = chatMessage?.chatHistory?.length > 0 ? chatMessage.chatHistory?.map(message => {
        const chatHistory = {
          messageId: message?.messageId,
          message: message.message,
          type: message.type,
          rating: message.rating,
          dateTime: message.dateTime
        };
        if (message.sourceDocuments) chatHistory.sourceDocuments = message.sourceDocuments;
        if (message.fileAnnotations) chatHistory.fileAnnotations = message.fileAnnotations;
        if (message.fileUploads) chatHistory.fileUploads = message.fileUploads;
        if (message.agentReasoning) chatHistory.agentReasoning = message.agentReasoning;
        if (message.action) chatHistory.action = message.action;
        if (message.artifacts) chatHistory.artifacts = message.artifacts;
        if (message.followUpPrompts) chatHistory.followUpPrompts = message.followUpPrompts;
        if (message.execution && message.execution.executionData) chatHistory.agentFlowExecutedData = typeof message.execution.executionData === 'string' ? JSON.parse(message.execution.executionData) : message.execution.executionData;
        if (message.agentFlowExecutedData) chatHistory.agentFlowExecutedData = typeof message.agentFlowExecutedData === 'string' ? JSON.parse(message.agentFlowExecutedData) : message.agentFlowExecutedData;
        return chatHistory;
      }) : [{
        message: props.welcomeMessage ?? defaultWelcomeMessage,
        type: 'apiMessage'
      }];
      const filteredMessages = loadedMessages.filter(message => message.type !== 'leadCaptureMessage');
      setMessages([...filteredMessages]);
    }
    // Determine if particular chatflow is available for streaming
    const {
      data
    } = await isStreamAvailableQuery({
      chatflowid: props.chatflowid,
      apiHost: props.apiHost,
      onRequest: props.onRequest
    });
    if (data) {
      setIsChatFlowAvailableToStream(data?.isStreaming ?? false);
    }
    // Get the chatbotConfig
    const result = await getChatbotConfig({
      chatflowid: props.chatflowid,
      apiHost: props.apiHost,
      onRequest: props.onRequest
    });
    if (result.data) {
      const chatbotConfig = result.data;
      if (chatbotConfig.flowData) {
        const nodes = JSON.parse(chatbotConfig.flowData).nodes ?? [];
        const startNode = nodes.find(node => node.data.name === 'startAgentflow');
        if (startNode) {
          const startInputType = startNode.data.inputs?.startInputType;
          setStartInputType(startInputType);
          const formInputTypes = startNode.data.inputs?.formInputTypes;
          /* example:
          "formInputTypes": [
              {
                "type": "string",
                "label": "From",
                "name": "from",
                "addOptions": ""
              },
              {
                "type": "number",
                "label": "Subject",
                "name": "subject",
                "addOptions": ""
              },
              {
                "type": "boolean",
                "label": "Body",
                "name": "body",
                "addOptions": ""
              },
              {
                "type": "options",
                "label": "Choices",
                "name": "choices",
                "addOptions": [
                  {
                    "option": "choice 1"
                  },
                  {
                    "option": "choice 2"
                  }
                ]
              }
            ]
          */
          if (startInputType === 'formInput' && formInputTypes && formInputTypes.length > 0) {
            for (const formInputType of formInputTypes) {
              if (formInputType.type === 'options') {
                formInputType.options = formInputType.addOptions.map(option => ({
                  label: option.option,
                  name: option.option
                }));
              }
            }
            setFormInputParams(formInputTypes);
            setFormTitle(startNode.data.inputs?.formTitle);
            setFormDescription(startNode.data.inputs?.formDescription);
          }
        }
      }
      if ((!props.starterPrompts || props.starterPrompts?.length === 0) && chatbotConfig.starterPrompts) {
        const prompts = [];
        Object.getOwnPropertyNames(chatbotConfig.starterPrompts).forEach(key => {
          prompts.push(chatbotConfig.starterPrompts[key].prompt);
        });
        setStarterPrompts(prompts.filter(prompt => prompt !== ''));
      }
      if (chatbotConfig.chatFeedback) {
        const chatFeedbackStatus = chatbotConfig.chatFeedback.status;
        setChatFeedbackStatus(chatFeedbackStatus);
      }
      if (chatbotConfig.uploads) {
        setUploadsConfig(chatbotConfig.uploads);
      }
      if (chatbotConfig.leads) {
        setLeadsConfig(chatbotConfig.leads);
        if (chatbotConfig.leads?.status && !getLocalStorageChatflow(props.chatflowid)?.lead) {
          setMessages(prevMessages => [...prevMessages, {
            message: '',
            type: 'leadCaptureMessage'
          }]);
        }
      }
      if (chatbotConfig.followUpPrompts) {
        setFollowUpPromptsStatus(chatbotConfig.followUpPrompts.status);
      }
      if (chatbotConfig.fullFileUpload) {
        setFullFileUpload(chatbotConfig.fullFileUpload.status);
        if (chatbotConfig.fullFileUpload?.allowedUploadFileTypes) {
          setFullFileUploadAllowedTypes(chatbotConfig.fullFileUpload?.allowedUploadFileTypes);
        }
      }
    }
    // eslint-disable-next-line solid/reactivity
    return () => {
      setUserInput('');
      setUploadedFiles([]);
      setLoading(false);
      setMessages([{
        message: props.welcomeMessage ?? defaultWelcomeMessage,
        type: 'apiMessage'
      }]);
    };
  });
  createEffect(() => {
    if (followUpPromptsStatus() && messages().length > 0) {
      const lastMessage = messages()[messages().length - 1];
      if (lastMessage.type === 'apiMessage' && lastMessage.followUpPrompts) {
        setFollowUpPrompts(JSON.parse(lastMessage.followUpPrompts));
      } else if (lastMessage.type === 'userMessage') {
        setFollowUpPrompts([]);
      }
    }
  });
  const addRecordingToPreviews = blob => {
    let mimeType = '';
    const pos = blob.type.indexOf(';');
    if (pos === -1) {
      mimeType = blob.type;
    } else {
      mimeType = blob.type.substring(0, pos);
    }
    // read blob and add to previews
    const reader = new FileReader();
    reader.readAsDataURL(blob);
    reader.onloadend = () => {
      const base64data = reader.result;
      const upload = {
        data: base64data,
        preview: '../assets/wave-sound.jpg',
        type: 'audio',
        name: `audio_${Date.now()}.wav`,
        mime: mimeType
      };
      setPreviews(prevPreviews => [...prevPreviews, upload]);
    };
  };
  const isFileAllowedForUpload = file => {
    let acceptFile = false;
    if (uploadsConfig() && uploadsConfig()?.isImageUploadAllowed && uploadsConfig()?.imgUploadSizeAndTypes) {
      const fileType = file.type;
      const sizeInMB = file.size / 1024 / 1024;
      uploadsConfig()?.imgUploadSizeAndTypes.map(allowed => {
        if (allowed.fileTypes.includes(fileType) && sizeInMB <= allowed.maxUploadSize) {
          acceptFile = true;
        }
      });
    }
    if (fullFileUpload()) {
      return true;
    }
    if (uploadsConfig() && uploadsConfig()?.isRAGFileUploadAllowed && uploadsConfig()?.fileUploadSizeAndTypes) {
      const fileExt = file.name.split('.').pop();
      if (fileExt) {
        uploadsConfig()?.fileUploadSizeAndTypes.map(allowed => {
          if (allowed.fileTypes.length === 1 && allowed.fileTypes[0] === '*') {
            acceptFile = true;
          } else if (allowed.fileTypes.includes(`.${fileExt}`)) {
            acceptFile = true;
          }
        });
      }
    }
    if (!acceptFile) {
      alert(`Cannot upload file. Kindly check the allowed file types and maximum allowed size.`);
    }
    return acceptFile;
  };
  const handleFileChange = async event => {
    const files = event.target.files;
    if (!files || files.length === 0) {
      return;
    }
    const filesList = [];
    const uploadedFiles = [];
    for (const file of files) {
      if (isFileAllowedForUpload(file) === false) {
        return;
      }
      // Only add files
      if (!file.type || !uploadsConfig()?.imgUploadSizeAndTypes.map(allowed => allowed.fileTypes).join(',').includes(file.type)) {
        uploadedFiles.push({
          file,
          type: fullFileUpload() ? 'file:full' : 'file:rag'
        });
      }
      const reader = new FileReader();
      const {
        name
      } = file;
      filesList.push(new Promise(resolve => {
        reader.onload = evt => {
          if (!evt?.target?.result) {
            return;
          }
          const {
            result
          } = evt.target;
          resolve({
            data: result,
            preview: URL.createObjectURL(file),
            type: 'file',
            name: name,
            mime: file.type
          });
        };
        reader.readAsDataURL(file);
      }));
    }
    const newFiles = await Promise.all(filesList);
    setUploadedFiles(uploadedFiles);
    setPreviews(prevPreviews => [...prevPreviews, ...newFiles]);
  };
  const isFileUploadAllowed = () => {
    if (fullFileUpload()) {
      return true;
    } else if (uploadsConfig()?.isRAGFileUploadAllowed) {
      return true;
    }
    return false;
  };
  const handleDrag = e => {
    if (uploadsConfig()?.isImageUploadAllowed || isFileUploadAllowed()) {
      e.preventDefault();
      e.stopPropagation();
      if (e.type === 'dragenter' || e.type === 'dragover') {
        setIsDragActive(true);
      } else if (e.type === 'dragleave') {
        setIsDragActive(false);
      }
    }
  };
  const handleDrop = async e => {
    if (!uploadsConfig()?.isImageUploadAllowed && !isFileUploadAllowed) {
      return;
    }
    e.preventDefault();
    setIsDragActive(false);
    const files = [];
    const uploadedFiles = [];
    if (e.dataTransfer && e.dataTransfer.files.length > 0) {
      for (const file of e.dataTransfer.files) {
        if (isFileAllowedForUpload(file) === false) {
          return;
        }
        // Only add files
        if (!file.type || !uploadsConfig()?.imgUploadSizeAndTypes.map(allowed => allowed.fileTypes).join(',').includes(file.type)) {
          uploadedFiles.push({
            file,
            type: fullFileUpload() ? 'file:full' : 'file:rag'
          });
        }
        const reader = new FileReader();
        const {
          name
        } = file;
        files.push(new Promise(resolve => {
          reader.onload = evt => {
            if (!evt?.target?.result) {
              return;
            }
            const {
              result
            } = evt.target;
            let previewUrl;
            if (file.type.startsWith('audio/')) {
              previewUrl = '../assets/wave-sound.jpg';
            } else if (file.type.startsWith('image/')) {
              previewUrl = URL.createObjectURL(file);
            }
            resolve({
              data: result,
              preview: previewUrl,
              type: 'file',
              name: name,
              mime: file.type
            });
          };
          reader.readAsDataURL(file);
        }));
      }
      const newFiles = await Promise.all(files);
      setUploadedFiles(uploadedFiles);
      setPreviews(prevPreviews => [...prevPreviews, ...newFiles]);
    }
    if (e.dataTransfer && e.dataTransfer.items) {
      for (const item of e.dataTransfer.items) {
        if (item.kind === 'string' && item.type.match('^text/uri-list')) {
          item.getAsString(s => {
            const upload = {
              data: s,
              preview: s,
              type: 'url',
              name: s.substring(s.lastIndexOf('/') + 1),
              mime: ''
            };
            setPreviews(prevPreviews => [...prevPreviews, upload]);
          });
        } else if (item.kind === 'string' && item.type.match('^text/html')) {
          item.getAsString(s => {
            if (s.indexOf('href') === -1) return;
            //extract href
            const start = s.substring(s.indexOf('href') + 6);
            const hrefStr = start.substring(0, start.indexOf('"'));
            const upload = {
              data: hrefStr,
              preview: hrefStr,
              type: 'url',
              name: hrefStr.substring(hrefStr.lastIndexOf('/') + 1),
              mime: ''
            };
            setPreviews(prevPreviews => [...prevPreviews, upload]);
          });
        }
      }
    }
  };
  const handleDeletePreview = itemToDelete => {
    if (itemToDelete.type === 'file') {
      URL.revokeObjectURL(itemToDelete.preview); // Clean up for file
    }

    setPreviews(previews().filter(item => item !== itemToDelete));
  };
  const onMicrophoneClicked = () => {
    setIsRecording(true);
    startAudioRecording(setIsRecording, setRecordingNotSupported, setElapsedTime);
  };
  const onRecordingCancelled = () => {
    if (!recordingNotSupported) cancelAudioRecording();
    setIsRecording(false);
    setRecordingNotSupported(false);
  };
  const onRecordingStopped = async () => {
    setIsLoadingRecording(true);
    stopAudioRecording(addRecordingToPreviews);
  };
  const getInputDisabled = () => {
    const messagesArray = messages();
    const disabled = loading() || !props.chatflowid || leadsConfig()?.status && !isLeadSaved() || messagesArray[messagesArray.length - 1].action && Object.keys(messagesArray[messagesArray.length - 1].action).length > 0;
    if (disabled) {
      return true;
    }
    return false;
  };
  createEffect(
  // listen for changes in previews
  on(previews, uploads => {
    // wait for audio recording to load and then send
    const containsAudio = uploads.filter(item => item.type === 'audio').length > 0;
    if (uploads.length >= 1 && containsAudio) {
      setIsRecording(false);
      setRecordingNotSupported(false);
      promptClick('');
    }
    return () => {
      setPreviews([]);
    };
  }));
  const previewDisplay = item => {
    if (item.mime.startsWith('image/')) {
      return (() => {
        const _el$25 = _tmpl$10(),
          _el$26 = _el$25.firstChild,
          _el$27 = _el$26.nextSibling;
        _el$25.$$click = () => handleDeletePreview(item);
        insert(_el$27, createComponent(TrashIcon, {}));
        createRenderEffect(() => setAttribute(_el$26, "src", item.data));
        return _el$25;
      })();
    } else if (item.mime.startsWith('audio/')) {
      return (() => {
        const _el$28 = _tmpl$11(),
          _el$29 = _el$28.firstChild,
          _el$30 = _el$29.nextSibling;
        _el$30.$$click = () => handleDeletePreview(item);
        insert(_el$30, createComponent(TrashIcon, {
          color: "white"
        }));
        createRenderEffect(_p$ => {
          const _v$8 = `${chatContainer ? botProps.isFullPage ? chatContainer?.offsetWidth / 4 : chatContainer?.offsetWidth / 2 : '200'}px`,
            _v$9 = item.data;
          _v$8 !== _p$._v$8 && ((_p$._v$8 = _v$8) != null ? _el$28.style.setProperty("width", _v$8) : _el$28.style.removeProperty("width"));
          _v$9 !== _p$._v$9 && setAttribute(_el$29, "src", _p$._v$9 = _v$9);
          return _p$;
        }, {
          _v$8: undefined,
          _v$9: undefined
        });
        return _el$28;
      })();
    } else {
      return createComponent(FilePreview, {
        get disabled() {
          return getInputDisabled();
        },
        item: item,
        onDelete: () => handleDeletePreview(item)
      });
    }
  };
  return [createMemo((() => {
    const _c$6 = createMemo(() => !!isAuthenticating());
    return () => _c$6() && createComponent(AuthenticationLoading, {
      get backgroundColor() {
        return props.backgroundColor;
      },
      get textColor() {
        return props.botMessage?.textColor;
      },
      message: "Checking authentication..."
    });
  })()), createMemo((() => {
    const _c$7 = createMemo(() => !!(authError() && !isAuthenticating()));
    return () => _c$7() && createComponent(AuthenticationError, {
      get error() {
        return authError();
      },
      onRetry: handleAuthRetry,
      get onSkip() {
        return authService()?.isAuthOptional() ? handleSkipAuth : undefined;
      },
      get backgroundColor() {
        return props.backgroundColor;
      },
      get textColor() {
        return props.botMessage?.textColor;
      },
      get buttonColor() {
        return props.textInput?.sendButtonColor;
      },
      get buttonTextColor() {
        return props.bubbleTextColor;
      }
    });
  })()), createMemo((() => {
    const _c$8 = createMemo(() => !!(showAuthPrompt() && !isAuthenticating() && !authError()));
    return () => _c$8() && createComponent(AuthenticationPrompt, {
      onLogin: handleLogin,
      onSkip: handleSkipAuth,
      get title() {
        return props.authentication?.promptConfig?.title;
      },
      get message() {
        return props.authentication?.promptConfig?.message;
      },
      get loginButtonText() {
        return props.authentication?.promptConfig?.loginButtonText;
      },
      get skipButtonText() {
        return props.authentication?.promptConfig?.skipButtonText;
      },
      get backgroundColor() {
        return props.authentication?.promptConfig?.backgroundColor || props.backgroundColor;
      },
      get textColor() {
        return props.authentication?.promptConfig?.textColor || props.botMessage?.textColor;
      },
      get buttonColor() {
        return props.authentication?.promptConfig?.buttonColor || props.textInput?.sendButtonColor;
      },
      get buttonTextColor() {
        return props.authentication?.promptConfig?.buttonTextColor || props.bubbleTextColor;
      }
    });
  })()), createMemo((() => {
    const _c$9 = createMemo(() => !!(!isAuthenticating() && !authError() && !showAuthPrompt() && !isChatBlocked()));
    return () => _c$9() && [createMemo((() => {
      const _c$10 = createMemo(() => !!(startInputType() === 'formInput' && messages().length === 1));
      return () => _c$10() ? createComponent(FormInputView, {
        get title() {
          return formTitle();
        },
        get description() {
          return formDescription();
        },
        get inputParams() {
          return formInputParams();
        },
        onSubmit: formData => handleSubmit(formData),
        get parentBackgroundColor() {
          return props?.backgroundColor;
        },
        get backgroundColor() {
          return props?.formBackgroundColor;
        },
        get textColor() {
          return props?.formTextColor || props.botMessage?.textColor;
        },
        get sendButtonColor() {
          return props.textInput?.sendButtonColor;
        },
        get fontSize() {
          return props.fontSize;
        }
      }) : (() => {
        const _el$31 = _tmpl$15(),
          _el$32 = _el$31.firstChild,
          _el$33 = _el$32.firstChild,
          _el$39 = _el$33.nextSibling;
        _el$31.addEventListener("dragenter", handleDrag);
        const _ref$ = botContainer;
        typeof _ref$ === "function" ? use(_ref$, _el$31) : botContainer = _el$31;
        insert(_el$31, (() => {
          const _c$14 = createMemo(() => !!isDragActive());
          return () => _c$14() && (() => {
            const _el$40 = _tmpl$16();
            _el$40.addEventListener("drop", handleDrop);
            _el$40.addEventListener("dragover", handleDrag);
            _el$40.addEventListener("dragend", handleDrag);
            _el$40.addEventListener("dragleave", handleDrag);
            _el$40.addEventListener("dragenter", handleDrag);
            return _el$40;
          })();
        })(), _el$32);
        insert(_el$31, (() => {
          const _c$15 = createMemo(() => !!(isDragActive() && (uploadsConfig()?.isImageUploadAllowed || isFileUploadAllowed())));
          return () => _c$15() && (() => {
            const _el$41 = _tmpl$17();
              _el$41.firstChild;
            insert(_el$41, createComponent(For, {
              get each() {
                return [...(uploadsConfig()?.imgUploadSizeAndTypes || []), ...(uploadsConfig()?.fileUploadSizeAndTypes || [])];
              },
              children: allowed => {
                return [(() => {
                  const _el$43 = _tmpl$18();
                  insert(_el$43, () => allowed.fileTypes?.join(', '));
                  return _el$43;
                })(), createMemo((() => {
                  const _c$18 = createMemo(() => !!allowed.maxUploadSize);
                  return () => _c$18() && (() => {
                    const _el$44 = _tmpl$19(),
                      _el$45 = _el$44.firstChild,
                      _el$47 = _el$45.nextSibling;
                      _el$47.nextSibling;
                    insert(_el$44, () => allowed.maxUploadSize, _el$47);
                    return _el$44;
                  })();
                })())];
              }
            }), null);
            createRenderEffect(() => props.bubbleBackgroundColor != null ? _el$41.style.setProperty("border-color", props.bubbleBackgroundColor) : _el$41.style.removeProperty("border-color"));
            return _el$41;
          })();
        })(), _el$32);
        insert(_el$31, (() => {
          const _c$16 = createMemo(() => !!props.showTitle);
          return () => _c$16() ? (() => {
            const _el$48 = _tmpl$23(),
              _el$51 = _el$48.firstChild;
            insert(_el$48, createComponent(Show, {
              get when() {
                return props.titleAvatarSrc;
              },
              get children() {
                return [(() => {
                  const _el$49 = _tmpl$20();
                  _el$49.style.setProperty("width", "15px");
                  return _el$49;
                })(), createComponent(Avatar, {
                  get initialAvatarSrc() {
                    return props.titleAvatarSrc;
                  }
                })];
              }
            }), _el$51);
            insert(_el$48, createComponent(Show, {
              get when() {
                return props.title;
              },
              get children() {
                const _el$50 = _tmpl$21();
                insert(_el$50, () => props.title);
                return _el$50;
              }
            }), _el$51);
            insert(_el$48, createComponent(AuthenticationStatusTag, {
              get authService() {
                return authService();
              }
            }), _el$51);
            _el$51.style.setProperty("flex", "1");
            insert(_el$48, createComponent(DeleteButton, {
              get sendButtonColor() {
                return props.bubbleTextColor;
              },
              type: "button",
              get isDisabled() {
                return messages().length === 1;
              },
              "class": "my-2 ml-2",
              "on:click": clearChat,
              get children() {
                const _el$52 = _tmpl$22();
                _el$52.style.setProperty("font-family", "Poppins, sans-serif");
                return _el$52;
              }
            }), null);
            createRenderEffect(_p$ => {
              const _v$10 = props.titleBackgroundColor || props.bubbleBackgroundColor || defaultTitleBackgroundColor,
                _v$11 = props.titleTextColor || props.bubbleTextColor || defaultBackgroundColor,
                _v$12 = props.isFullPage ? '0px' : '6px',
                _v$13 = props.isFullPage ? '0px' : '6px';
              _v$10 !== _p$._v$10 && ((_p$._v$10 = _v$10) != null ? _el$48.style.setProperty("background", _v$10) : _el$48.style.removeProperty("background"));
              _v$11 !== _p$._v$11 && ((_p$._v$11 = _v$11) != null ? _el$48.style.setProperty("color", _v$11) : _el$48.style.removeProperty("color"));
              _v$12 !== _p$._v$12 && ((_p$._v$12 = _v$12) != null ? _el$48.style.setProperty("border-top-left-radius", _v$12) : _el$48.style.removeProperty("border-top-left-radius"));
              _v$13 !== _p$._v$13 && ((_p$._v$13 = _v$13) != null ? _el$48.style.setProperty("border-top-right-radius", _v$13) : _el$48.style.removeProperty("border-top-right-radius"));
              return _p$;
            }, {
              _v$10: undefined,
              _v$11: undefined,
              _v$12: undefined,
              _v$13: undefined
            });
            return _el$48;
          })() : null;
        })(), _el$32);
        const _ref$2 = chatContainer;
        typeof _ref$2 === "function" ? use(_ref$2, _el$33) : chatContainer = _el$33;
        insert(_el$33, createComponent(For, {
          get each() {
            return [...messages()];
          },
          children: (message, index) => {
            return [createMemo((() => {
              const _c$19 = createMemo(() => message.type === 'userMessage');
              return () => _c$19() && createComponent(GuestBubble, {
                message: message,
                get apiHost() {
                  return props.apiHost;
                },
                get chatflowid() {
                  return props.chatflowid;
                },
                get chatId() {
                  return chatId();
                },
                get backgroundColor() {
                  return props.userMessage?.backgroundColor;
                },
                get textColor() {
                  return props.userMessage?.textColor;
                },
                get showAvatar() {
                  return props.userMessage?.showAvatar;
                },
                get avatarSrc() {
                  return props.userMessage?.avatarSrc;
                },
                get fontSize() {
                  return props.fontSize;
                },
                get renderHTML() {
                  return props.renderHTML;
                }
              });
            })()), createMemo((() => {
              const _c$20 = createMemo(() => message.type === 'apiMessage');
              return () => _c$20() && createComponent(BotBubble, {
                message: message,
                get fileAnnotations() {
                  return message.fileAnnotations;
                },
                get chatflowid() {
                  return props.chatflowid;
                },
                get chatId() {
                  return chatId();
                },
                get apiHost() {
                  return props.apiHost;
                },
                get backgroundColor() {
                  return props.botMessage?.backgroundColor;
                },
                get textColor() {
                  return props.botMessage?.textColor;
                },
                get feedbackColor() {
                  return props.feedback?.color;
                },
                get showAvatar() {
                  return props.botMessage?.showAvatar;
                },
                get avatarSrc() {
                  return props.botMessage?.avatarSrc;
                },
                get chatFeedbackStatus() {
                  return chatFeedbackStatus();
                },
                get fontSize() {
                  return props.fontSize;
                },
                get isLoading() {
                  return createMemo(() => !!loading())() && index() === messages().length - 1;
                },
                get showAgentMessages() {
                  return props.showAgentMessages;
                },
                handleActionClick: (elem, action) => handleActionClick(elem, action),
                get sourceDocsTitle() {
                  return props.sourceDocsTitle;
                },
                handleSourceDocumentsClick: sourceDocuments => {
                  setSourcePopupSrc(sourceDocuments);
                  setSourcePopupOpen(true);
                },
                get dateTimeToggle() {
                  return props.dateTimeToggle;
                },
                get renderHTML() {
                  return props.renderHTML;
                }
              });
            })()), createMemo((() => {
              const _c$21 = createMemo(() => !!(message.type === 'leadCaptureMessage' && leadsConfig()?.status && !getLocalStorageChatflow(props.chatflowid)?.lead));
              return () => _c$21() && createComponent(LeadCaptureBubble, {
                message: message,
                get chatflowid() {
                  return props.chatflowid;
                },
                get chatId() {
                  return chatId();
                },
                get apiHost() {
                  return props.apiHost;
                },
                get backgroundColor() {
                  return props.botMessage?.backgroundColor;
                },
                get textColor() {
                  return props.botMessage?.textColor;
                },
                get fontSize() {
                  return props.fontSize;
                },
                get showAvatar() {
                  return props.botMessage?.showAvatar;
                },
                get avatarSrc() {
                  return props.botMessage?.avatarSrc;
                },
                get leadsConfig() {
                  return leadsConfig();
                },
                get sendButtonColor() {
                  return props.textInput?.sendButtonColor;
                },
                get isLeadSaved() {
                  return isLeadSaved();
                },
                setIsLeadSaved: setIsLeadSaved,
                setLeadEmail: setLeadEmail
              });
            })()), createMemo((() => {
              const _c$22 = createMemo(() => !!(message.type === 'userMessage' && loading() && index() === messages().length - 1));
              return () => _c$22() && createComponent(LoadingBubble, {});
            })()), createMemo((() => {
              const _c$23 = createMemo(() => !!(message.type === 'apiMessage' && message.message === '' && loading() && index() === messages().length - 1));
              return () => _c$23() && createComponent(LoadingBubble, {});
            })())];
          }
        }));
        insert(_el$32, createComponent(Show, {
          get when() {
            return messages().length === 1;
          },
          get children() {
            return createComponent(Show, {
              get when() {
                return starterPrompts().length > 0;
              },
              get children() {
                const _el$34 = _tmpl$12();
                insert(_el$34, createComponent(For, {
                  get each() {
                    return [...starterPrompts()];
                  },
                  children: key => createComponent(StarterPromptBubble, {
                    prompt: key,
                    onPromptClick: () => promptClick(key),
                    get starterPromptFontSize() {
                      return botProps.starterPromptFontSize;
                    }
                  })
                }));
                return _el$34;
              }
            });
          }
        }), _el$39);
        insert(_el$32, createComponent(Show, {
          get when() {
            return createMemo(() => messages().length > 2)() && followUpPromptsStatus();
          },
          get children() {
            return createComponent(Show, {
              get when() {
                return followUpPrompts().length > 0;
              },
              get children() {
                return [(() => {
                  const _el$35 = _tmpl$13(),
                    _el$36 = _el$35.firstChild;
                  insert(_el$35, createComponent(SparklesIcon, {
                    "class": "w-4 h-4"
                  }), _el$36);
                  return _el$35;
                })(), (() => {
                  const _el$37 = _tmpl$12();
                  insert(_el$37, createComponent(For, {
                    get each() {
                      return [...followUpPrompts()];
                    },
                    children: (prompt, index) => createComponent(FollowUpPromptBubble, {
                      prompt: prompt,
                      onPromptClick: () => followUpPromptClick(prompt),
                      get starterPromptFontSize() {
                        return botProps.starterPromptFontSize;
                      }
                    })
                  }));
                  return _el$37;
                })()];
              }
            });
          }
        }), _el$39);
        insert(_el$32, createComponent(Show, {
          get when() {
            return previews().length > 0;
          },
          get children() {
            const _el$38 = _tmpl$14();
            insert(_el$38, createComponent(For, {
              get each() {
                return [...previews()];
              },
              children: item => createMemo(() => previewDisplay(item))
            }));
            return _el$38;
          }
        }), _el$39);
        insert(_el$39, (() => {
          const _c$17 = createMemo(() => !!isRecording());
          return () => _c$17() ? createMemo((() => {
            const _c$24 = createMemo(() => !!recordingNotSupported());
            return () => _c$24() ? (() => {
              const _el$53 = _tmpl$24(),
                _el$54 = _el$53.firstChild,
                _el$55 = _el$54.firstChild,
                _el$56 = _el$55.nextSibling;
              _el$56.$$click = () => onRecordingCancelled();
              return _el$53;
            })() : (() => {
              const _el$57 = _tmpl$26(),
                _el$58 = _el$57.firstChild,
                _el$59 = _el$58.firstChild,
                _el$60 = _el$59.nextSibling,
                _el$61 = _el$58.nextSibling;
              _el$57.style.setProperty("margin", "auto");
              insert(_el$59, createComponent(CircleDotIcon, {
                color: "red"
              }));
              insert(_el$60, () => elapsedTime() || '00:00');
              insert(_el$58, (() => {
                const _c$25 = createMemo(() => !!isLoadingRecording());
                return () => _c$25() && _tmpl$27();
              })(), null);
              insert(_el$61, createComponent(CancelButton, {
                get buttonColor() {
                  return props.textInput?.sendButtonColor;
                },
                type: "button",
                "class": "m-0",
                "on:click": onRecordingCancelled,
                get children() {
                  const _el$62 = _tmpl$25();
                  _el$62.style.setProperty("font-family", "Poppins, sans-serif");
                  return _el$62;
                }
              }), null);
              insert(_el$61, createComponent(SendButton, {
                get sendButtonColor() {
                  return props.textInput?.sendButtonColor;
                },
                type: "button",
                get isDisabled() {
                  return loading();
                },
                "class": "m-0",
                "on:click": onRecordingStopped,
                get children() {
                  const _el$63 = _tmpl$25();
                  _el$63.style.setProperty("font-family", "Poppins, sans-serif");
                  return _el$63;
                }
              }), null);
              createRenderEffect(_p$ => {
                const _v$14 = props.textInput?.backgroundColor ?? defaultBackgroundColor,
                  _v$15 = props.textInput?.textColor ?? defaultTextColor;
                _v$14 !== _p$._v$14 && ((_p$._v$14 = _v$14) != null ? _el$57.style.setProperty("background-color", _v$14) : _el$57.style.removeProperty("background-color"));
                _v$15 !== _p$._v$15 && ((_p$._v$15 = _v$15) != null ? _el$57.style.setProperty("color", _v$15) : _el$57.style.removeProperty("color"));
                return _p$;
              }, {
                _v$14: undefined,
                _v$15: undefined
              });
              return _el$57;
            })();
          })()) : createComponent(TextInput, {
            get backgroundColor() {
              return props.textInput?.backgroundColor;
            },
            get textColor() {
              return props.textInput?.textColor;
            },
            get placeholder() {
              return props.textInput?.placeholder;
            },
            get sendButtonColor() {
              return props.textInput?.sendButtonColor;
            },
            get maxChars() {
              return props.textInput?.maxChars;
            },
            get maxCharsWarningMessage() {
              return props.textInput?.maxCharsWarningMessage;
            },
            get autoFocus() {
              return props.textInput?.autoFocus;
            },
            get fontSize() {
              return props.fontSize;
            },
            get disabled() {
              return getInputDisabled();
            },
            get inputValue() {
              return userInput();
            },
            onInputChange: value => setUserInput(value),
            onSubmit: handleSubmit,
            get uploadsConfig() {
              return uploadsConfig();
            },
            get isFullFileUpload() {
              return fullFileUpload();
            },
            get fullFileUploadAllowedTypes() {
              return fullFileUploadAllowedTypes();
            },
            setPreviews: setPreviews,
            onMicrophoneClicked: onMicrophoneClicked,
            handleFileChange: handleFileChange,
            get sendMessageSound() {
              return props.textInput?.sendMessageSound;
            },
            get sendSoundLocation() {
              return props.textInput?.sendSoundLocation;
            },
            enableInputHistory: true,
            maxHistorySize: 10
          });
        })());
        insert(_el$32, createComponent(Badge, {
          get footer() {
            return props.footer;
          },
          get badgeBackgroundColor() {
            return props.badgeBackgroundColor;
          },
          get poweredByTextColor() {
            return props.poweredByTextColor;
          },
          botContainer: botContainer
        }), null);
        createRenderEffect(() => className(_el$31, 'relative flex w-full h-full text-base overflow-hidden bg-cover bg-center flex-col items-center chatbot-container ' + props.class));
        return _el$31;
      })();
    })()), createMemo((() => {
      const _c$11 = createMemo(() => !!sourcePopupOpen());
      return () => _c$11() && createComponent(Popup, {
        get isOpen() {
          return sourcePopupOpen();
        },
        get value() {
          return sourcePopupSrc();
        },
        onClose: () => setSourcePopupOpen(false)
      });
    })()), createMemo((() => {
      const _c$12 = createMemo(() => !!disclaimerPopupOpen());
      return () => _c$12() && createComponent(DisclaimerPopup, {
        get isOpen() {
          return disclaimerPopupOpen();
        },
        onAccept: handleDisclaimerAccept,
        get title() {
          return props.disclaimer?.title;
        },
        get message() {
          return props.disclaimer?.message;
        },
        get textColor() {
          return props.disclaimer?.textColor;
        },
        get buttonColor() {
          return props.disclaimer?.buttonColor;
        },
        get buttonText() {
          return props.disclaimer?.buttonText;
        },
        get buttonTextColor() {
          return props.disclaimer?.buttonTextColor;
        },
        get blurredBackgroundColor() {
          return props.disclaimer?.blurredBackgroundColor;
        },
        get backgroundColor() {
          return props.disclaimer?.backgroundColor;
        },
        get denyButtonBgColor() {
          return props.disclaimer?.denyButtonBgColor;
        },
        get denyButtonText() {
          return props.disclaimer?.denyButtonText;
        },
        get onDeny() {
          return props.closeBot;
        },
        get isFullPage() {
          return props.isFullPage;
        }
      });
    })()), createMemo((() => {
      const _c$13 = createMemo(() => !!openFeedbackDialog());
      return () => _c$13() && createComponent(FeedbackDialog, {
        get isOpen() {
          return openFeedbackDialog();
        },
        onClose: () => {
          setOpenFeedbackDialog(false);
          handleSubmitFeedback();
        },
        onSubmit: handleSubmitFeedback,
        get feedbackValue() {
          return feedback();
        },
        setFeedbackValue: value => setFeedback(value)
      });
    })())];
  })())];
};
delegateEvents(["input", "click"]);

const _tmpl$$2 = /*#__PURE__*/template(`<div class="tooltip">`);
const defaultTooltipMessage = 'Hi There 👋!';
const defaultTooltipBackgroundColor = 'black';
const defaultTooltipTextColor = 'white';
const defaultTooltipFontSize = 16; // Default font size for tooltip
const Tooltip = props => {
  const tooltipMessage = props.tooltipMessage ?? defaultTooltipMessage;
  const backgroundColor = props.tooltipBackgroundColor ?? defaultTooltipBackgroundColor;
  const textColor = props.tooltipTextColor ?? defaultTooltipTextColor;
  const fontSize = `${props.tooltipFontSize ?? defaultTooltipFontSize}px`; // Use tooltipFontSize if provided, otherwise default to 16px
  // Generate tooltip text with line breaks if needed
  const formattedTooltipMessage = tooltipMessage.length > 20 ? tooltipMessage.split(' ').reduce((acc, curr) => {
    const last = acc[acc.length - 1];
    if (last && last.join(' ').length + curr.length <= 20) {
      last.push(curr);
    } else {
      acc.push([curr]);
    }
    return acc;
  }, [[]]).map(arr => arr.join(' ')).join('\n') : tooltipMessage;
  return createComponent(Show, {
    get when() {
      return props.showTooltip;
    },
    get children() {
      const _el$ = _tmpl$$2();
      backgroundColor != null ? _el$.style.setProperty("--tooltip-background-color", backgroundColor) : _el$.style.removeProperty("--tooltip-background-color");
      textColor != null ? _el$.style.setProperty("--tooltip-text-color", textColor) : _el$.style.removeProperty("--tooltip-text-color");
      fontSize != null ? _el$.style.setProperty("--tooltip-font-size", fontSize) : _el$.style.removeProperty("--tooltip-font-size");
      insert(_el$, formattedTooltipMessage);
      createRenderEffect(_p$ => {
        const _v$ = `calc(${props.position.right}px + 20px)`,
          _v$2 = `${props.position.bottom + props.buttonSize + 10}px`;
        _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$.style.setProperty("right", _v$) : _el$.style.removeProperty("right"));
        _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$.style.setProperty("bottom", _v$2) : _el$.style.removeProperty("bottom"));
        return _p$;
      }, {
        _v$: undefined,
        _v$2: undefined
      });
      return _el$;
    }
  });
};

const _tmpl$$1 = /*#__PURE__*/template(`<style>`),
  _tmpl$2$1 = /*#__PURE__*/template(`<button class="py-2 pr-3 absolute top-0 right-[-8px] m-[6px] bg-transparent text-white rounded-full z-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75" title="Close Chat"><svg viewBox="0 0 24 24" width="24" height="24"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z">`),
  _tmpl$3 = /*#__PURE__*/template(`<div class="relative h-full">`),
  _tmpl$4 = /*#__PURE__*/template(`<div part="bot">`);
const defaultButtonColor$1 = '#3B81F6';
const defaultIconColor$1 = 'white';
const Bubble = props => {
  const [bubbleProps] = splitProps(props, ['theme']);
  const [isBotOpened, setIsBotOpened] = createSignal(false);
  const [isBotStarted, setIsBotStarted] = createSignal(false);
  const [buttonPosition, setButtonPosition] = createSignal({
    bottom: bubbleProps.theme?.button?.bottom ?? 20,
    right: bubbleProps.theme?.button?.right ?? 20
  });
  const openBot = () => {
    if (!isBotStarted()) setIsBotStarted(true);
    setIsBotOpened(true);
  };
  const closeBot = () => {
    setIsBotOpened(false);
  };
  const toggleBot = () => {
    isBotOpened() ? closeBot() : openBot();
  };
  onCleanup(() => {
    setIsBotStarted(false);
  });
  const buttonSize = getBubbleButtonSize(props.theme?.button?.size); // Default to 48px if size is not provided
  const buttonBottom = props.theme?.button?.bottom ?? 20;
  const chatWindowBottom = buttonBottom + buttonSize + 10; // Adjust the offset here for slight shift
  // Add viewport meta tag dynamically
  createEffect(() => {
    const meta = document.createElement('meta');
    meta.name = 'viewport';
    meta.content = 'width=device-width, initial-scale=1.0, interactive-widget=resizes-content';
    document.head.appendChild(meta);
    return () => {
      document.head.removeChild(meta);
    };
  });
  const showTooltip = bubbleProps.theme?.tooltip?.showTooltip ?? false;
  return [createComponent(Show, {
    get when() {
      return props.theme?.customCSS;
    },
    get children() {
      const _el$ = _tmpl$$1();
      insert(_el$, () => props.theme?.customCSS);
      return _el$;
    }
  }), (() => {
    const _el$2 = _tmpl$$1();
    insert(_el$2, css_248z);
    return _el$2;
  })(), createComponent(Tooltip, {
    get showTooltip() {
      return showTooltip && !isBotOpened();
    },
    get position() {
      return buttonPosition();
    },
    buttonSize: buttonSize,
    get tooltipMessage() {
      return bubbleProps.theme?.tooltip?.tooltipMessage;
    },
    get tooltipBackgroundColor() {
      return bubbleProps.theme?.tooltip?.tooltipBackgroundColor;
    },
    get tooltipTextColor() {
      return bubbleProps.theme?.tooltip?.tooltipTextColor;
    },
    get tooltipFontSize() {
      return bubbleProps.theme?.tooltip?.tooltipFontSize;
    }
  }), createComponent(BubbleButton, mergeProps(() => bubbleProps.theme?.button, {
    toggleBot: toggleBot,
    get isBotOpened() {
      return isBotOpened();
    },
    setButtonPosition: setButtonPosition,
    get dragAndDrop() {
      return bubbleProps.theme?.button?.dragAndDrop ?? false;
    },
    get autoOpen() {
      return bubbleProps.theme?.button?.autoWindowOpen?.autoOpen ?? false;
    },
    get openDelay() {
      return bubbleProps.theme?.button?.autoWindowOpen?.openDelay;
    },
    get autoOpenOnMobile() {
      return bubbleProps.theme?.button?.autoWindowOpen?.autoOpenOnMobile ?? false;
    }
  })), (() => {
    const _el$3 = _tmpl$4();
    _el$3.style.setProperty("transition", "transform 200ms cubic-bezier(0, 1.2, 1, 1), opacity 150ms ease-out");
    _el$3.style.setProperty("transform-origin", "bottom right");
    _el$3.style.setProperty("box-shadow", "rgb(0 0 0 / 16%) 0px 5px 40px");
    _el$3.style.setProperty("background-size", "cover");
    _el$3.style.setProperty("background-position", "center");
    _el$3.style.setProperty("background-repeat", "no-repeat");
    _el$3.style.setProperty("z-index", "42424242");
    insert(_el$3, createComponent(Show, {
      get when() {
        return isBotStarted();
      },
      get children() {
        const _el$4 = _tmpl$3();
        insert(_el$4, createComponent(Show, {
          get when() {
            return isBotOpened();
          },
          get children() {
            const _el$5 = _tmpl$2$1(),
              _el$6 = _el$5.firstChild,
              _el$7 = _el$6.firstChild;
            _el$5.$$click = closeBot;
            createRenderEffect(() => setAttribute(_el$7, "fill", bubbleProps.theme?.button?.iconColor ?? defaultIconColor$1));
            return _el$5;
          }
        }), null);
        insert(_el$4, createComponent(Bot, {
          get backgroundColor() {
            return bubbleProps.theme?.chatWindow?.backgroundColor;
          },
          get formBackgroundColor() {
            return bubbleProps.theme?.form?.backgroundColor;
          },
          get formTextColor() {
            return bubbleProps.theme?.form?.textColor;
          },
          get badgeBackgroundColor() {
            return bubbleProps.theme?.chatWindow?.backgroundColor;
          },
          get bubbleBackgroundColor() {
            return bubbleProps.theme?.button?.backgroundColor ?? defaultButtonColor$1;
          },
          get bubbleTextColor() {
            return bubbleProps.theme?.button?.iconColor ?? defaultIconColor$1;
          },
          get showTitle() {
            return bubbleProps.theme?.chatWindow?.showTitle;
          },
          get showAgentMessages() {
            return bubbleProps.theme?.chatWindow?.showAgentMessages;
          },
          get title() {
            return bubbleProps.theme?.chatWindow?.title;
          },
          get titleAvatarSrc() {
            return bubbleProps.theme?.chatWindow?.titleAvatarSrc;
          },
          get titleTextColor() {
            return bubbleProps.theme?.chatWindow?.titleTextColor;
          },
          get titleBackgroundColor() {
            return bubbleProps.theme?.chatWindow?.titleBackgroundColor;
          },
          get welcomeMessage() {
            return bubbleProps.theme?.chatWindow?.welcomeMessage;
          },
          get errorMessage() {
            return bubbleProps.theme?.chatWindow?.errorMessage;
          },
          get poweredByTextColor() {
            return bubbleProps.theme?.chatWindow?.poweredByTextColor;
          },
          get textInput() {
            return bubbleProps.theme?.chatWindow?.textInput;
          },
          get botMessage() {
            return bubbleProps.theme?.chatWindow?.botMessage;
          },
          get userMessage() {
            return bubbleProps.theme?.chatWindow?.userMessage;
          },
          get feedback() {
            return bubbleProps.theme?.chatWindow?.feedback;
          },
          get fontSize() {
            return bubbleProps.theme?.chatWindow?.fontSize;
          },
          get footer() {
            return bubbleProps.theme?.chatWindow?.footer;
          },
          get sourceDocsTitle() {
            return bubbleProps.theme?.chatWindow?.sourceDocsTitle;
          },
          get starterPrompts() {
            return bubbleProps.theme?.chatWindow?.starterPrompts;
          },
          get starterPromptFontSize() {
            return bubbleProps.theme?.chatWindow?.starterPromptFontSize;
          },
          get chatflowid() {
            return props.chatflowid;
          },
          get chatflowConfig() {
            return props.chatflowConfig;
          },
          get apiHost() {
            return props.apiHost;
          },
          get onRequest() {
            return props.onRequest;
          },
          get observersConfig() {
            return props.observersConfig;
          },
          get clearChatOnReload() {
            return bubbleProps.theme?.chatWindow?.clearChatOnReload;
          },
          get disclaimer() {
            return bubbleProps.theme?.disclaimer;
          },
          get dateTimeToggle() {
            return bubbleProps.theme?.chatWindow?.dateTimeToggle;
          },
          get renderHTML() {
            return props.theme?.chatWindow?.renderHTML;
          },
          get authentication() {
            return props.authentication;
          },
          closeBot: closeBot
        }), null);
        return _el$4;
      }
    }));
    createRenderEffect(_p$ => {
      const _v$ = bubbleProps.theme?.chatWindow?.height ? `${bubbleProps.theme?.chatWindow?.height.toString()}px` : 'calc(100% - 150px)',
        _v$2 = bubbleProps.theme?.chatWindow?.width ? `${bubbleProps.theme?.chatWindow?.width.toString()}px` : undefined,
        _v$3 = isBotOpened() ? 'scale3d(1, 1, 1)' : 'scale3d(0, 0, 1)',
        _v$4 = bubbleProps.theme?.chatWindow?.backgroundColor || '#ffffff',
        _v$5 = bubbleProps.theme?.chatWindow?.backgroundImage ? `url(${bubbleProps.theme?.chatWindow?.backgroundImage})` : 'none',
        _v$6 = `${Math.min(buttonPosition().bottom + buttonSize + 10, window.innerHeight - chatWindowBottom)}px`,
        _v$7 = `${Math.max(0, Math.min(buttonPosition().right, window.innerWidth - (bubbleProps.theme?.chatWindow?.width ?? 410) - 10))}px`,
        _v$8 = `fixed sm:right-5 rounded-lg w-full sm:w-[400px] max-h-[704px]` + (isBotOpened() ? ' opacity-1' : ' opacity-0 pointer-events-none') + ` bottom-${chatWindowBottom}px`;
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$3.style.setProperty("height", _v$) : _el$3.style.removeProperty("height"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$3.style.setProperty("width", _v$2) : _el$3.style.removeProperty("width"));
      _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$3.style.setProperty("transform", _v$3) : _el$3.style.removeProperty("transform"));
      _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$3.style.setProperty("background-color", _v$4) : _el$3.style.removeProperty("background-color"));
      _v$5 !== _p$._v$5 && ((_p$._v$5 = _v$5) != null ? _el$3.style.setProperty("background-image", _v$5) : _el$3.style.removeProperty("background-image"));
      _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$3.style.setProperty("bottom", _v$6) : _el$3.style.removeProperty("bottom"));
      _v$7 !== _p$._v$7 && ((_p$._v$7 = _v$7) != null ? _el$3.style.setProperty("right", _v$7) : _el$3.style.removeProperty("right"));
      _v$8 !== _p$._v$8 && className(_el$3, _p$._v$8 = _v$8);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined,
      _v$4: undefined,
      _v$5: undefined,
      _v$6: undefined,
      _v$7: undefined,
      _v$8: undefined
    });
    return _el$3;
  })()];
};
delegateEvents(["click"]);

const _tmpl$ = /*#__PURE__*/template(`<style>`),
  _tmpl$2 = /*#__PURE__*/template(`<div>`);
const defaultButtonColor = '#3B81F6';
const defaultIconColor = 'white';
const Full = (props, {
  element
}) => {
  const [isBotDisplayed, setIsBotDisplayed] = createSignal(false);
  const launchBot = () => {
    setIsBotDisplayed(true);
    document.body.style.margin = '0'; // Ensure no margin
    document.documentElement.style.padding = '0'; // Ensure no padding
    // Set viewport meta tag dynamically
    const viewportMeta = document.querySelector('meta[name="viewport"]');
    if (viewportMeta) {
      viewportMeta.setAttribute('content', 'width=device-width, initial-scale=1.0, interactive-widget=resizes-content');
    }
  };
  const botLauncherObserver = new IntersectionObserver(intersections => {
    if (intersections.some(intersection => intersection.isIntersecting)) launchBot();
  });
  onMount(() => {
    botLauncherObserver.observe(element);
  });
  onCleanup(() => {
    botLauncherObserver.disconnect();
    document.body.style.margin = ''; // Reset margin
    document.documentElement.style.padding = ''; // Reset padding
    // Reset viewport meta tag if needed
    const viewportMeta = document.querySelector('meta[name="viewport"]');
    if (viewportMeta) {
      viewportMeta.setAttribute('content', 'width=device-width, initial-scale=1.0');
    }
  });
  return [createComponent(Show, {
    get when() {
      return props.theme?.customCSS;
    },
    get children() {
      const _el$ = _tmpl$();
      insert(_el$, () => props.theme?.customCSS);
      return _el$;
    }
  }), (() => {
    const _el$2 = _tmpl$();
    insert(_el$2, css_248z);
    return _el$2;
  })(), createComponent(Show, {
    get when() {
      return isBotDisplayed();
    },
    get children() {
      const _el$3 = _tmpl$2();
      _el$3.style.setProperty("margin", "0px");
      _el$3.style.setProperty("overflow", "hidden");
      insert(_el$3, createComponent(Bot, {
        get backgroundColor() {
          return props.theme?.chatWindow?.backgroundColor;
        },
        get formBackgroundColor() {
          return props.theme?.form?.backgroundColor;
        },
        get formTextColor() {
          return props.theme?.form?.textColor;
        },
        get badgeBackgroundColor() {
          return props.theme?.chatWindow?.backgroundColor;
        },
        get bubbleBackgroundColor() {
          return props.theme?.button?.backgroundColor ?? defaultButtonColor;
        },
        get bubbleTextColor() {
          return props.theme?.button?.iconColor ?? defaultIconColor;
        },
        get showTitle() {
          return props.theme?.chatWindow?.showTitle;
        },
        get showAgentMessages() {
          return props.theme?.chatWindow?.showAgentMessages;
        },
        get title() {
          return props.theme?.chatWindow?.title;
        },
        get titleAvatarSrc() {
          return props.theme?.chatWindow?.titleAvatarSrc;
        },
        get titleTextColor() {
          return props.theme?.chatWindow?.titleTextColor;
        },
        get titleBackgroundColor() {
          return props.theme?.chatWindow?.titleBackgroundColor;
        },
        get welcomeMessage() {
          return props.theme?.chatWindow?.welcomeMessage;
        },
        get errorMessage() {
          return props.theme?.chatWindow?.errorMessage;
        },
        get poweredByTextColor() {
          return props.theme?.chatWindow?.poweredByTextColor;
        },
        get textInput() {
          return props.theme?.chatWindow?.textInput;
        },
        get botMessage() {
          return props.theme?.chatWindow?.botMessage;
        },
        get userMessage() {
          return props.theme?.chatWindow?.userMessage;
        },
        get feedback() {
          return props.theme?.chatWindow?.feedback;
        },
        get fontSize() {
          return props.theme?.chatWindow?.fontSize;
        },
        get footer() {
          return props.theme?.chatWindow?.footer;
        },
        get starterPrompts() {
          return props.theme?.chatWindow?.starterPrompts;
        },
        get chatflowid() {
          return props.chatflowid;
        },
        get chatflowConfig() {
          return props.chatflowConfig;
        },
        get apiHost() {
          return props.apiHost;
        },
        get onRequest() {
          return props.onRequest;
        },
        isFullPage: true,
        get observersConfig() {
          return props.observersConfig;
        },
        get starterPromptFontSize() {
          return props.theme?.chatWindow?.starterPromptFontSize;
        },
        get clearChatOnReload() {
          return props.theme?.chatWindow?.clearChatOnReload;
        },
        get disclaimer() {
          return props.theme?.disclaimer;
        },
        get dateTimeToggle() {
          return props.theme?.chatWindow?.dateTimeToggle;
        },
        get renderHTML() {
          return props.theme?.chatWindow?.renderHTML;
        }
      }));
      createRenderEffect(_p$ => {
        const _v$ = props.theme?.chatWindow?.backgroundColor || '#ffffff',
          _v$2 = props.theme?.chatWindow?.height ? `${props.theme?.chatWindow?.height.toString()}px` : '100dvh',
          _v$3 = props.theme?.chatWindow?.width ? `${props.theme?.chatWindow?.width.toString()}px` : '100%';
        _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$3.style.setProperty("background-color", _v$) : _el$3.style.removeProperty("background-color"));
        _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$3.style.setProperty("height", _v$2) : _el$3.style.removeProperty("height"));
        _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$3.style.setProperty("width", _v$3) : _el$3.style.removeProperty("width"));
        return _p$;
      }, {
        _v$: undefined,
        _v$2: undefined,
        _v$3: undefined
      });
      return _el$3;
    }
  })];
};

const registerWebComponents = () => {
  if (typeof window === 'undefined') return;
  // @ts-expect-error element incorect type
  customElement('flowise-fullchatbot', defaultBotProps, Full);
  customElement('flowise-chatbot', defaultBotProps, Bubble);
};

let elementUsed;
const initFull = props => {
  destroy();
  const fullElement = props.id ? document.getElementById(props.id) : document.querySelector('flowise-fullchatbot');
  if (!fullElement) throw new Error('<flowise-fullchatbot> element not found.');
  Object.assign(fullElement, props);
  elementUsed = fullElement;
};
const init = props => {
  destroy();
  const element = document.createElement('flowise-chatbot');
  Object.assign(element, props);
  document.body.appendChild(element);
  elementUsed = element;
};
const destroy = () => {
  elementUsed?.remove();
};
const parseChatbot = () => ({
  initFull,
  init,
  destroy
});
const injectChatbotInWindow = bot => {
  if (typeof window === 'undefined') return;
  window.Chatbot = {
    ...bot
  };
};

registerWebComponents();
const chatbot = parseChatbot();
injectChatbotInWindow(chatbot);

export { chatbot as default };
//# sourceMappingURL=web.js.map
